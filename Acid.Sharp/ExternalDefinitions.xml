<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Definitions>
  <!--
  ***************************************
  **
  ** IModule.hpp
  **
  ***************************************
  -->
  <Export name="Update" target="Common" source="IModule.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// The update function for the module.

/// </summary>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Log.hpp
  **
  ***************************************
  -->
  <Export name="Out" target="Common" source="Log.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Outputs a message into the console.

/// </summary>

/// <param name="string"> The string to output. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="string" />
    </Parameters>
  </Export>
  <Export name="Error" target="Common" source="Log.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Outputs a error into the console.

/// </summary>

/// <param name="string"> The string to output. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="string" />
    </Parameters>
  </Export>
  <Export name="CreateLog" target="Common" source="Log.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Outputs all logs into a file.

/// </summary>

/// <param name="filename"> The filename to output into. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="filename" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Time.hpp
  **
  ***************************************
  -->
  <Export name="Time" target="Common" source="Time.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for time. This function is internal. To construct time values, use Time::Seconds, Time::Milliseconds or Time::Microseconds instead.

/// </summary>

/// <param name="microseconds"> Number of microseconds. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="int64_t" name="microseconds" />
    </Parameters>
  </Export>
  <Export name="Seconds" target="Common" source="Time.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructs a time value from a number of seconds.

/// </summary>

/// <param name="amount"> Number of seconds. </param>

/// <returns> Time value constructed from the amount of seconds. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="amount" />
    </Parameters>
  </Export>
  <Export name="Milliseconds" target="Common" source="Time.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructs a time value from a number of milliseconds.

/// </summary>

/// <param name="amount"> Number of milliseconds. </param>

/// <returns> Time value constructed from the amount of milliseconds. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="int32_t" name="amount" />
    </Parameters>
  </Export>
  <Export name="Microseconds" target="Common" source="Time.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructs a time value from a number of microseconds.

/// </summary>

/// <param name="amount"> Number of microseconds. </param>

/// <returns> Time value constructed from the amount of microseconds. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="int64_t" name="amount" />
    </Parameters>
  </Export>
  <Export name="AsSeconds" target="Common" source="Time.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Return the time value as a number of seconds.

/// </summary>

/// <returns> Time in seconds. </returns>
]]>
    </Description>
  </Export>
  <Export name="AsMilliseconds" target="Common" source="Time.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Return the time value as a number of milliseconds.

/// </summary>

/// <returns> Time in milliseconds. </returns>
]]>
    </Description>
  </Export>
  <Export name="AsMicroseconds" target="Common" source="Time.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Return the time value as a number of microseconds.

/// </summary>

/// <returns> Time in microseconds. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** ModuleRegister.hpp
  **
  ***************************************
  -->
  <Export name="FillRegister" target="Common" source="ModuleRegister.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Fills the module register with default modules.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="ContainsModule" target="Common" source="ModuleRegister.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if a module is contained in this registry.

/// </summary>

/// <param name="module"> The module to find. </param>

/// <returns> If the module is in the registry. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.IModule" name="module" />
    </Parameters>
  </Export>
  <Export name="RegisterModule" target="Common" source="ModuleRegister.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Registers a module with the register.

/// </summary>

/// <param name="module"> The modules object. </param>

/// <param name="update"> The modules update type. </param>

/// <returns> The registered module. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.IModule" name="module" />
      <Parameter type="global::Acid.Sharp.ModuleUpdate*" name="update" />
    </Parameters>
  </Export>
  <Export name="DeregisterModule" target="Common" source="ModuleRegister.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Deregisters a module.

/// </summary>

/// <param name="module"> The module to deregister. </param>

/// <returns> If the module was deregistered. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.IModule" name="module" />
    </Parameters>
  </Export>
  <Export name="RunUpdate" target="Common" source="ModuleRegister.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Runs updates for all module update types.

/// </summary>

/// <param name="update"> The modules update type. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.ModuleUpdate*" name="update" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Delta.hpp
  **
  ***************************************
  -->
  <Export name="Delta" target="Common" source="Delta.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new change handler.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Update" target="Common" source="Delta.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Updates change and times.

/// </summary>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Timer.hpp
  **
  ***************************************
  -->
  <Export name="Timer" target="Common" source="Timer.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new timer.

/// </summary>

/// <param name="interval"> The time between events. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Time" name="interval" />
    </Parameters>
  </Export>
  <Export name="IsPassedTime" target="Common" source="Timer.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if the interval has been passes for the timer.

/// </summary>

/// <returns> If the interval was exceeded. </returns>
]]>
    </Description>
  </Export>
  <Export name="ResetStartTime" target="Common" source="Timer.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Adds the intervals value to the start time.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="GetInterval" target="Common" source="Timer.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets what the interval is.

/// </summary>

/// <returns> The timers current interval. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetInterval" target="Common" source="Timer.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the timers interval (resets timer).

/// </summary>

/// <param name="interval"> The new timer interval. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Time" name="interval" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** ModuleUpdater.hpp
  **
  ***************************************
  -->
  <Export name="Update" target="Common" source="ModuleUpdater.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Updates all modules in order.

/// </summary>

/// <returns> The module register. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.ModuleRegister" name="moduleRegister" />
    </Parameters>
  </Export>
  <Export name="GetDelta" target="Common" source="ModuleUpdater.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the delta (seconds) between updates.

/// </summary>

/// <returns> The delta between updates. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetDeltaRender" target="Common" source="ModuleUpdater.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the delta (seconds) between renders.

/// </summary>

/// <returns> The delta between renders. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Engine.hpp
  **
  ***************************************
  -->
  <Export name="Get" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets this engine instance.

/// </summary>

/// <returns> The current engine instance. </returns>
]]>
    </Description>
  </Export>
  <Export name="Engine" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Carries out the setup for basic engine components and the engine. Call <seealso cref="#run()"/> after creating a instance.

/// </summary>

/// <param name="emptyRegister"> If the module register will start empty. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="bool" name="emptyRegister" />
    </Parameters>
  </Export>
  <Export name="Run" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// The update function for the updater.

/// </summary>

/// <returns> EXIT_SUCCESS or EXIT_FAILURE. </returns>
]]>
    </Description>
  </Export>
  <Export name="RegisterModule" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Registers a module with the register.

/// </summary>

/// <param name="module"> The modules object. </param>

/// <param name="update"> The modules update type. </param>

/// <returns> The registered module. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.IModule" name="module" />
      <Parameter type="global::Acid.Sharp.ModuleUpdate*" name="update" />
    </Parameters>
  </Export>
  <Export name="DeregisterModule" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Deregisters a module.

/// </summary>

/// <param name="module"> The module to deregister. </param>

/// <returns> If the module was deregistered. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.IModule" name="module" />
    </Parameters>
  </Export>
  <Export name="GetTimeOffset" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the added/removed time for the engine.

/// </summary>

/// <returns> The time offset. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetTimeOffset" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the time offset for the engine.

/// </summary>

/// <param name="timeOffset"> The new time offset. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Time" name="timeOffset" />
    </Parameters>
  </Export>
  <Export name="GetFpsLimit" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the fps limit.

/// </summary>

/// <returns> The fps limit. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetFpsLimit" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the fps limit. -1 disables limits.

/// </summary>

/// <param name="fpsLimit"> The new fps limit. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="fpsLimit" />
    </Parameters>
  </Export>
  <Export name="GetDelta" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the delta (seconds) between updates.

/// </summary>

/// <returns> The delta between updates. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetDeltaRender" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the delta (seconds) between renders.

/// </summary>

/// <returns> The delta between renders. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetTime" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the current time of the engine instance.

/// </summary>

/// <returns> The current engine time. </returns>
]]>
    </Description>
  </Export>
  <Export name="IsInitialized" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if the engine has been initialized.

/// </summary>

/// <returns> If the engine has been initialized. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetInitialized" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets if the engine has been initialized.

/// </summary>

/// <param name="initialized"> If the engine has been initialized. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="bool" name="initialized" />
    </Parameters>
  </Export>
  <Export name="IsRunning" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if the engine is running.

/// </summary>

/// <returns> If the engine is running. </returns>
]]>
    </Description>
  </Export>
  <Export name="RequestClose" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Requests the engine to delete and stop the game-loop.

/// </summary>

/// <param name="error"> If a bad error occurred. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="bool" name="error" />
    </Parameters>
  </Export>
  <Export name="GetDateTime" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the current date time as a string. "%d-%m-%Y %I:%M:%S"

/// </summary>

/// <returns> The date time as a string. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Vector2.hpp
  **
  ***************************************
  -->
  <Export name="Vector2" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector2.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Vector2" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector2.

/// </summary>

/// <param name="x"> Start x. </param>

/// <param name="y"> Start y. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="x" />
      <Parameter type="float" name="y" />
    </Parameters>
  </Export>
  <Export name="Vector2" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector2.

/// </summary>

/// <param name="source"> Creates this vector out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2" name="source" />
    </Parameters>
  </Export>
  <Export name="Vector2" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector2.

/// </summary>

/// <param name="source"> Creates this vector out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="source" />
    </Parameters>
  </Export>
  <Export name="Add" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Adds this vector to another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Subtract" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Subtracts this vector to another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Multiply" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Multiplies this vector with another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Divide" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Divides this vector by another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Angle" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Calculates the angle between this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The angle, in radians. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Dot" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Calculates the dot product of the this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The dot product. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Scale" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Scales this vector by a scalar.

/// </summary>

/// <param name="scalar"> The scalar value. </param>

/// <returns> The scaled vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="scalar" />
    </Parameters>
  </Export>
  <Export name="Rotate" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Rotates this vector by a angle around the origin.

/// </summary>

/// <param name="angle"> The angle to rotate by, in radians. </param>

/// <returns> The rotated vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="angle" />
    </Parameters>
  </Export>
  <Export name="Rotate" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Rotates this vector by a angle around a rotation axis.

/// </summary>

/// <param name="angle"> The angle to rotate by, in radians. </param>

/// <param name="rotationAxis"> The point to rotate the vector around. </param>

/// <returns> The rotated vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="angle" />
      <Parameter type="global::Acid.Sharp.Vector2" name="rotationAxis" />
    </Parameters>
  </Export>
  <Export name="Negate" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Negates this vector.

/// </summary>

/// <returns> The negated vector. </returns>
]]>
    </Description>
  </Export>
  <Export name="Normalize" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Normalizes this vector.

/// </summary>

/// <returns> The normalized vector. </returns>
]]>
    </Description>
  </Export>
  <Export name="LengthSquared" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the length squared of this vector.

/// </summary>

/// <returns> The length squared. </returns>
]]>
    </Description>
  </Export>
  <Export name="Length" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the length of this vector.

/// </summary>

/// <returns> The length. </returns>
]]>
    </Description>
  </Export>
  <Export name="MaxComponent" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the maximum value in this vector.

/// </summary>

/// <returns> The largest components. </returns>
]]>
    </Description>
  </Export>
  <Export name="MinComponent" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the lowest value in this vector.

/// </summary>

/// <returns> The smallest components. </returns>
]]>
    </Description>
  </Export>
  <Export name="DistanceSquared" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the distance between this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The squared distance. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Distance" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the between this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The distance. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="DistanceVector" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the vector distance between this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The vector distance. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="InTriangle" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if this vector is in a triangle.

/// </summary>

/// <param name="v1"> The first triangle vertex. </param>

/// <param name="v2"> The second triangle vertex. </param>

/// <param name="v3"> The third triangle vertex. </param>

/// <returns> If this vector is in a triangle. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2" name="v1" />
      <Parameter type="global::Acid.Sharp.Vector2" name="v2" />
      <Parameter type="global::Acid.Sharp.Vector2" name="v3" />
    </Parameters>
  </Export>
  <Export name="SmoothDamp" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gradually changes this vector to a target.

/// </summary>

/// <param name="target"> The target vector. </param>

/// <param name="rate"> The rate to go from current to the target. </param>

/// <returns> The changed vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2" name="target" />
      <Parameter type="global::Acid.Sharp.Vector2" name="rate" />
    </Parameters>
  </Export>
  <Export name="CartesianToPolar" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Converts from rectangular to spherical coordinates, this vector is in cartesian (x, y).

/// </summary>

/// <returns> The polar coordinates (radius, theta). </returns>
]]>
    </Description>
  </Export>
  <Export name="PolarToCartesian" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Converts from spherical to rectangular coordinates, this vector is in polar (radius, theta).

/// </summary>

/// <returns> The cartesian coordinates (x, y). </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Display.hpp
  **
  ***************************************
  -->
  <Export name="Get" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets this engine instance.

/// </summary>

/// <returns> The current module instance. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetWidth" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the width of the window in pixels.

/// </summary>

/// <returns> The width of the window. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetWindowWidth" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the non-fullscreen width of the window in pixels.

/// </summary>

/// <returns> The width of the window. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetWidth" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the width of the window in pixels.

/// </summary>

/// <param name="width"> The new width in pixels. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="uint32_t" name="width" />
    </Parameters>
  </Export>
  <Export name="GetHeight" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the height of the window in pixels.

/// </summary>

/// <returns> The height of the window. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetWindowHeight" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the non-fullscreen height of the window in pixels.

/// </summary>

/// <returns> The height of the window. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetHeight" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the height of the window in pixels.

/// </summary>

/// <param name="height"> The new height in pixels. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="uint32_t" name="height" />
    </Parameters>
  </Export>
  <Export name="GetAspectRatio" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the aspect ratio between the windows width and height.

/// </summary>

/// <returns> The aspect ratio. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetDimensions" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the dimensions of the window in pixels.

/// </summary>

/// <returns> The dimension of the window. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetDimensions" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the window size to a new size.

/// </summary>

/// <param name="width"> The new width in pixels. </param>

/// <param name="height"> The new height in pixels. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="uint32_t" name="width" />
      <Parameter type="uint32_t" name="height" />
    </Parameters>
  </Export>
  <Export name="SetDimensions" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the window size to a new size.

/// </summary>

/// <param name="size"> The new width in pixels. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2" name="size" />
    </Parameters>
  </Export>
  <Export name="GetPositionX" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the windows Y position in pixels.

/// </summary>

/// <returns> The windows x position. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetPositionY" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the windows Y position in pixels.

/// </summary>

/// <returns> The windows Y position. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetPosition" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the windows position in pixels.

/// </summary>

/// <returns> The dimension of the window. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetPosition" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the window position to a new position in pixels.

/// </summary>

/// <param name="x"> The new x position in pixels. </param>

/// <param name="y"> The new y position in pixels. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="uint32_t" name="x" />
      <Parameter type="uint32_t" name="y" />
    </Parameters>
  </Export>
  <Export name="SetPosition" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the window position to a new position in pixels.

/// </summary>

/// <param name="position"> The new position in pixels. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2" name="position" />
    </Parameters>
  </Export>
  <Export name="GetTitle" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the window's title.

/// </summary>

/// <returns> The window's title. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetTitle" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets window title

/// </summary>

/// <param name="title"> The new title. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="title" />
    </Parameters>
  </Export>
  <Export name="GetIcon" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the window's icon file.

/// </summary>

/// <returns> The window's icon file. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetIcon" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets window icon image.

/// </summary>

/// <param name="filename"> The new icon file. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="filename" />
    </Parameters>
  </Export>
  <Export name="IsAntialiasing" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if the window requests antialiased images.

/// </summary>

/// <returns> If using antialiased images. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetAntialiasing" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Requests the window to antialias.

/// </summary>

/// <param name="antialiasing"> If the window should antialias. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="bool" name="antialiasing" />
    </Parameters>
  </Export>
  <Export name="IsBorderless" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets weather the window is borderless or not.

/// </summary>

/// <returns> If the window is borderless. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetBorderless" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the window to be borderless.

/// </summary>

/// <param name="borderless"> Weather or not to be borderless. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="bool" name="borderless" />
    </Parameters>
  </Export>
  <Export name="IsResizable" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets weather the window is resizable or not.

/// </summary>

/// <returns> If the window is resizable. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetResizable" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the window to be resizable.

/// </summary>

/// <param name="resizable"> Weather or not to be resizable. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="bool" name="resizable" />
    </Parameters>
  </Export>
  <Export name="IsFloating" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets weather the window is floating or not, if floating the window will always display above other windows.

/// </summary>

/// <returns> If the window is floating. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetFloating" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the window to be floating.

/// </summary>

/// <param name="floating"> Weather or not to be floating. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="bool" name="floating" />
    </Parameters>
  </Export>
  <Export name="IsFullscreen" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets weather the window is fullscreen or not.

/// </summary>

/// <returns> Fullscreen or windowed. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetFullscreen" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the window to be fullscreen or windowed.

/// </summary>

/// <param name="fullscreen"> Weather or not to be fullscreen. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="bool" name="fullscreen" />
    </Parameters>
  </Export>
  <Export name="IsClosed" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if the window is closed.

/// </summary>

/// <returns> If the window is closed. </returns>
]]>
    </Description>
  </Export>
  <Export name="IsFocused" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if the window is selected.

/// </summary>

/// <returns> If the window is selected. </returns>
]]>
    </Description>
  </Export>
  <Export name="IsIconified" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the windows is minimized.

/// </summary>

/// <returns> If the window is minimized. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetIconified" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the window to be iconified (minimized).

/// </summary>

/// <param name="iconify"> If the window will be set as iconified. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="bool" name="iconify" />
    </Parameters>
  </Export>
</Definitions>