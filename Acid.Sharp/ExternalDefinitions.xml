<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Definitions>
  <!--
  ***************************************
  **
  ** Vector4.hpp
  **
  ***************************************
  -->
  <Export name="Vector4" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector4.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Vector4" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector4.

/// </summary>

/// <param name="x"> Start x. </param>

/// <param name="y"> Start y. </param>

/// <param name="z"> Start z. </param>

/// <param name="w"> Start w. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="x" />
      <Parameter type="float" name="y" />
      <Parameter type="float" name="z" />
      <Parameter type="float" name="w" />
    </Parameters>
  </Export>
  <Export name="Vector4" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector4.

/// </summary>

/// <param name="source"> Creates this vector out of a existing one. </param>>

/// <param name="w"> Start w. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="source" />
      <Parameter type="float" name="w" />
    </Parameters>
  </Export>
  <Export name="Vector4" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector4.

/// </summary>

/// <param name="source"> Creates this vector out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector4" name="source" />
    </Parameters>
  </Export>
  <Export name="Vector4" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector4.

/// </summary>

/// <param name="source"> Creates this vector out of a existing colour. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Colour" name="source" />
    </Parameters>
  </Export>
  <Export name="Add" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Adds this vector to another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="Subtract" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Subtracts this vector to another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="Multiply" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Multiplies this vector with another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="Divide" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Divides this vector by another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="Angle" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Calculates the angle between this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The angle, in radians. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="Dot" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Calculates the dot product of the this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The dot product. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="Scale" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Scales this vector by a scalar.

/// </summary>

/// <param name="scalar"> The scalar value. </param>

/// <returns> The scaled vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="scalar" />
    </Parameters>
  </Export>
  <Export name="Negate" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Negates this vector.

/// </summary>

/// <returns> The negated vector. </returns>
]]>
    </Description>
  </Export>
  <Export name="Normalize" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Normalizes this vector.

/// </summary>

/// <returns> The normalized vector. </returns>
]]>
    </Description>
  </Export>
  <Export name="LengthSquared" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the length squared of this vector.

/// </summary>

/// <returns> The length squared. </returns>
]]>
    </Description>
  </Export>
  <Export name="Length" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the length of this vector.

/// </summary>

/// <returns> The length. </returns>
]]>
    </Description>
  </Export>
  <Export name="MaxComponent" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the maximum value in this vector.

/// </summary>

/// <returns> The largest components. </returns>
]]>
    </Description>
  </Export>
  <Export name="MinComponent" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the lowest value in this vector.

/// </summary>

/// <returns> The smallest components. </returns>
]]>
    </Description>
  </Export>
  <Export name="DistanceSquared" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the distance between this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The squared distance. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="Distance" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the between this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The distance. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="DistanceVector" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the vector distance between this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The vector distance. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="SmoothDamp" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gradually changes this vector to a target.

/// </summary>

/// <param name="target"> The target vector. </param>

/// <param name="rate"> The rate to go from current to the target. </param>

/// <returns> The changed vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector4" name="target" />
      <Parameter type="global::Acid.Sharp.Vector4" name="rate" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Matrix4.hpp
  **
  ***************************************
  -->
  <Export name="Matrix4" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Matrix4. The matrix is initialised to the identity.

/// </summary>

/// <param name="diagonal"> The value set to the diagonals. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="diagonal" />
    </Parameters>
  </Export>
  <Export name="Matrix4" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Matrix4.

/// </summary>

/// <param name="source"> Creates this matrix out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Matrix4" name="source" />
    </Parameters>
  </Export>
  <Export name="Matrix4" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Matrix4.

/// </summary>

/// <param name="source"> Creates this matrix out of a 16 element array. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float[]" name="source" />
    </Parameters>
  </Export>
  <Export name="Matrix4" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Matrix4.

/// </summary>

/// <param name="source"> Creates this matrix out of a 4 vector array. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector4[]" name="source" />
    </Parameters>
  </Export>
  <Export name="Add" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Adds this matrix to another matrix.

/// </summary>

/// <param name="other"> The other matrix. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Matrix4" name="other" />
    </Parameters>
  </Export>
  <Export name="Subtract" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Subtracts this matrix to another matrix.

/// </summary>

/// <param name="other"> The other matrix. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Matrix4" name="other" />
    </Parameters>
  </Export>
  <Export name="Multiply" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Multiplies this matrix by another matrix.

/// </summary>

/// <param name="other"> The other matrix. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Matrix4" name="other" />
    </Parameters>
  </Export>
  <Export name="Multiply" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Multiplies this matrix by a vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="Divide" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Divides this matrix by another matrix.

/// </summary>

/// <param name="other"> The other matrix. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Matrix4" name="other" />
    </Parameters>
  </Export>
  <Export name="Transform" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Transforms this matrix by a vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="Translate" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Translates this matrix by a vector.

/// </summary>

/// <param name="other"> The vector. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Translate" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Translates this matrix by a vector.

/// </summary>

/// <param name="other"> The vector. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Scale" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Scales this matrix by a vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Scale" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Scales this matrix by a vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="Rotate" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Rotates this matrix around the given axis the specified angle.

/// </summary>

/// <param name="angle"> The angle, in radians. </param>

/// <param name="axis"> The vector representing the rotation axis. </param>

/// <returns> The rotated matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="angle" />
      <Parameter type="global::Acid.Sharp.Vector3" name="axis" />
    </Parameters>
  </Export>
  <Export name="Negate" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Inverts this matrix.

/// </summary>

/// <returns> The inverted matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="Invert" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Negates this matrix.

/// </summary>

/// <returns> The negated matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="Transpose" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Transposes this matrix.

/// </summary>

/// <returns> The transposed matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="Determinant" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Takes the determinant of this matrix.

/// </summary>

/// <returns> The determinant. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetSubmatrix" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the submatrix of this matrix.

/// </summary>

/// <returns> The submatrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="int32_t" name="row" />
      <Parameter type="int32_t" name="col" />
    </Parameters>
  </Export>
  <Export name="TransformationMatrix" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new transformation matrix for a object in 3d space.

/// </summary>

/// <param name="translation"> Translation amount the XYZ. </param>

/// <param name="rotation"> Rotation amount (Pitch, Yaw, Roll). </param>

/// <param name="scale"> How much to scale the matrix. </param>

/// <returns> Returns the transformation matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="translation" />
      <Parameter type="global::Acid.Sharp.Vector3" name="rotation" />
      <Parameter type="global::Acid.Sharp.Vector3" name="scale" />
    </Parameters>
  </Export>
  <Export name="TransformationMatrix" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new transformation matrix for a object in 3d space.

/// </summary>

/// <param name="translation"> Translation amount the XYZ. </param>

/// <param name="rotation"> Rotation amount. </param>

/// <param name="scale"> How much to scale the matrix. </param>

/// <returns> Returns the transformation matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="translation" />
      <Parameter type="global::Acid.Sharp.Quaternion" name="rotation" />
      <Parameter type="global::Acid.Sharp.Vector3" name="scale" />
    </Parameters>
  </Export>
  <Export name="PerspectiveMatrix" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new perspective matrix.

/// </summary>

/// <param name="fov"> The cameras FOV. </param>

/// <param name="aspectRatio"> The cameras aspect ratio. </param>

/// <param name="zNear"> The cameras near plane. </param>

/// <param name="zFar"> The cameras far plane. </param>

/// <returns> The transformation matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="fov" />
      <Parameter type="float" name="aspectRatio" />
      <Parameter type="float" name="zNear" />
      <Parameter type="float" name="zFar" />
    </Parameters>
  </Export>
  <Export name="OrthographicMatrix" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new orthographic matrix.

/// </summary>

/// <param name="left"> The left plane. </param>

/// <param name="right"> The right plane. </param>

/// <param name="bottom"> The bottom plane. </param>

/// <param name="top"> The top plane. </param>

/// <param name="near"> The near plane. </param>

/// <param name="far"> The far plane. </param>

/// <param name="destination"> The destination matrix or nullptr if a new matrix is to be created. </param>

/// <returns> The transformation matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="left" />
      <Parameter type="float" name="right" />
      <Parameter type="float" name="bottom" />
      <Parameter type="float" name="top" />
      <Parameter type="float" name="near" />
      <Parameter type="float" name="far" />
    </Parameters>
  </Export>
  <Export name="ViewMatrix" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new view matrix.

/// </summary>

/// <param name="position"> The cameras position. </param>

/// <param name="rotation"> The cameras rotation. </param>

/// <returns> The transformation matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="position" />
      <Parameter type="global::Acid.Sharp.Vector3" name="rotation" />
    </Parameters>
  </Export>
  <Export name="ViewMatrix" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new view matrix.

/// </summary>

/// <param name="position"> The cameras position. </param>

/// <param name="rotation"> The cameras rotation. </param>

/// <returns> The transformation matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="position" />
      <Parameter type="global::Acid.Sharp.Quaternion" name="rotation" />
    </Parameters>
  </Export>
  <Export name="WorldToScreenSpace" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Transforms a 3D world point into screen space.

/// </summary>

/// <param name="worldSpace"> The point to get into screen space. </param>

/// <param name="viewMatrix"> The cameras view matrix. </param>

/// <param name="projectionMatrix"> The cameras projection matrix. </param>

/// <returns> A 2D point stored in XY, and the distance (Z, if negative the point is behind the screen). </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="worldSpace" />
      <Parameter type="global::Acid.Sharp.Matrix4" name="viewMatrix" />
      <Parameter type="global::Acid.Sharp.Matrix4" name="projectionMatrix" />
    </Parameters>
  </Export>
  <Export name="LookAt" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new transformation matrix that has the camera looking at the target.

/// </summary>

/// <param name="camera"> The source position. </param>

/// <param name="object"> The target position. </param>

/// <param name="up"> What view direction is up. </param>

/// <returns> Returns the transformation matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="camera" />
      <Parameter type="global::Acid.Sharp.Vector3" name="@object" />
      <Parameter type="global::Acid.Sharp.Vector3" name="up" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Vector3.hpp
  **
  ***************************************
  -->
  <Export name="Vector3" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector3.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Vector3" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector3.

/// </summary>

/// <param name="x"> Start x. </param>

/// <param name="y"> Start y. </param>

/// <param name="z"> Start z. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="x" />
      <Parameter type="float" name="y" />
      <Parameter type="float" name="z" />
    </Parameters>
  </Export>
  <Export name="Vector3" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector3.

/// </summary>

/// <param name="source"> Creates this vector out of a existing one. </param>

/// <param name="z"> Start z. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2" name="source" />
      <Parameter type="float" name="z" />
    </Parameters>
  </Export>
  <Export name="Vector3" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector3.

/// </summary>

/// <param name="source"> Creates this vector out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="source" />
    </Parameters>
  </Export>
  <Export name="Vector3" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector3.

/// </summary>

/// <param name="source"> Creates this vector out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector4" name="source" />
    </Parameters>
  </Export>
  <Export name="Vector3" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector3.

/// </summary>

/// <param name="source"> Creates this vector out of a existing colour. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Colour" name="source" />
    </Parameters>
  </Export>
  <Export name="Add" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Adds this vector to another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Subtract" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Subtracts this vector to another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Multiply" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Multiplies this vector with another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Divide" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Divides this vector by another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Angle" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Calculates the angle between this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The angle, in radians. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Dot" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Calculates the dot product of the this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The dot product. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Cross" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Calculates the cross product of the this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The cross product. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Scale" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Scales this vector by a scalar.

/// </summary>

/// <param name="scalar"> The scalar value. </param>

/// <returns> The scaled vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="scalar" />
    </Parameters>
  </Export>
  <Export name="Rotate" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Rotates this vector by a angle around the origin.

/// </summary>

/// <param name="rotation"> The rotation amount. </param>

/// <returns> The rotated vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="rotation" />
    </Parameters>
  </Export>
  <Export name="Negate" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Negates this vector.

/// </summary>

/// <returns> The negated vector. </returns>
]]>
    </Description>
  </Export>
  <Export name="Normalize" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Normalizes this vector.

/// </summary>

/// <returns> The normalized vector. </returns>
]]>
    </Description>
  </Export>
  <Export name="LengthSquared" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the length squared of this vector.

/// </summary>

/// <returns> The length squared. </returns>
]]>
    </Description>
  </Export>
  <Export name="Length" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the length of this vector.

/// </summary>

/// <returns> The length. </returns>
]]>
    </Description>
  </Export>
  <Export name="MaxComponent" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the maximum value in this vector.

/// </summary>

/// <returns> The largest components. </returns>
]]>
    </Description>
  </Export>
  <Export name="MinComponent" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the lowest value in this vector.

/// </summary>

/// <returns> The smallest components. </returns>
]]>
    </Description>
  </Export>
  <Export name="ToQuaternion" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Converts these euler angles to a quaternion.

/// </summary>

/// <returns> The quaternion representation of this vector. </returns>
]]>
    </Description>
  </Export>
  <Export name="DistanceSquared" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the distance between this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The squared distance. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Distance" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the between this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The distance. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="DistanceVector" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the vector distance between this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The vector distance. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="SmoothDamp" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gradually changes this vector to a target.

/// </summary>

/// <param name="target"> The target vector. </param>

/// <param name="rate"> The rate to go from current to the target. </param>

/// <returns> The changed vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="target" />
      <Parameter type="global::Acid.Sharp.Vector3" name="rate" />
    </Parameters>
  </Export>
  <Export name="CartesianToPolar" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Converts from rectangular to spherical coordinates, this vector is in cartesian (x, y, z).

/// </summary>

/// <returns> The polar coordinates (radius, theta, phi). </returns>
]]>
    </Description>
  </Export>
  <Export name="PolarToCartesian" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Converts from spherical to rectangular coordinates, this vector is in polar (radius, theta, phi).

/// </summary>

/// <returns> The cartesian coordinates (x, y, z). </returns>
]]>
    </Description>
  </Export>
  <Export name="ProjectCubeToSphere" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Projects this cube coordinate onto a sphere.

/// </summary>

/// <param name="radius"> The sphere radius. </param>

/// <returns> The projected cartesian coordinates. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="radius" />
    </Parameters>
  </Export>
  <Export name="BaryCentric" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the height of this vector on a point off of a 3d triangle.

/// </summary>

/// <param name="p1"> Point 1 on the triangle. </param>

/// <param name="p2"> Point 2 on the triangle. </param>

/// <param name="p3"> Point 3 on the triangle. </param>

/// <returns> Height of the triangle. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="p1" />
      <Parameter type="global::Acid.Sharp.Vector3" name="p2" />
      <Parameter type="global::Acid.Sharp.Vector3" name="p3" />
    </Parameters>
  </Export>
  <Export name="MinVector" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the lowest vector size.

/// </summary>

/// <param name="a"> The first vector to get values from. </param>

/// <param name="b"> The second vector to get values from. </param>

/// <returns> The lowest vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="a" />
      <Parameter type="global::Acid.Sharp.Vector3" name="b" />
    </Parameters>
  </Export>
  <Export name="MaxVector" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the maximum vector size.

/// </summary>

/// <param name="a"> The first vector to get values from. </param>

/// <param name="b"> The second vector to get values from. </param>

/// <returns> The maximum vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="a" />
      <Parameter type="global::Acid.Sharp.Vector3" name="b" />
    </Parameters>
  </Export>
  <Export name="RandomUnitVector" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Generates a random unit vector.

/// </summary>

/// <returns> The random unit vector. </returns>
]]>
    </Description>
  </Export>
  <Export name="RandomPointOnCircle" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets a random point from on a circle.

/// </summary>

/// <param name="normal"> The circles normal. </param>

/// <param name="radius"> The circles radius. </param>

/// <returns> The random point in a circle. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="normal" />
      <Parameter type="float" name="radius" />
    </Parameters>
  </Export>
  <Export name="RandomUnitVectorWithinCone" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Generates a random unit vector from within a cone.

/// </summary>

/// <param name="coneDirection"> The cones direction. </param>

/// <param name="angle"> The cones major angle. </param>

/// <returns> The random unitt vector in a code. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="coneDirection" />
      <Parameter type="float" name="angle" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Quaternion.hpp
  **
  ***************************************
  -->
  <Export name="Quaternion" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Quaternion.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Quaternion" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Quaternion.

/// </summary>

/// <param name="x"> Start x. </param>

/// <param name="y"> Start y. </param>

/// <param name="z"> Start z. </param>

/// <param name="w"> Start w. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="x" />
      <Parameter type="float" name="y" />
      <Parameter type="float" name="z" />
      <Parameter type="float" name="w" />
    </Parameters>
  </Export>
  <Export name="Quaternion" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Quaternion.

/// </summary>

/// <param name="pitch"> Start pitch. </param>

/// <param name="yaw"> Start yaw. </param>

/// <param name="roll"> Start roll. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="pitch" />
      <Parameter type="float" name="yaw" />
      <Parameter type="float" name="roll" />
    </Parameters>
  </Export>
  <Export name="Quaternion" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Quaternion.

/// </summary>

/// <param name="source"> Creates this quaternion out of a existing vector (pitch, yaw roll). </param>>

/// <param name="w"> Start w. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="source" />
      <Parameter type="float" name="w" />
    </Parameters>
  </Export>
  <Export name="Quaternion" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Quaternion.

/// </summary>

/// <param name="source"> Creates this vector out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Quaternion" name="source" />
    </Parameters>
  </Export>
  <Export name="Quaternion" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Quaternion.

/// </summary>

/// <param name="source"> Creates this vector out of a existing matrix. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Matrix4" name="source" />
    </Parameters>
  </Export>
  <Export name="Quaternion" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Quaternion.

/// </summary>

/// <param name="axisX"> The X axis. </param>

/// <param name="axisY"> The Y axis. </param>

/// <param name="axisZ"> The Z axis. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="axisX" />
      <Parameter type="global::Acid.Sharp.Vector3" name="axisY" />
      <Parameter type="global::Acid.Sharp.Vector3" name="axisZ" />
    </Parameters>
  </Export>
  <Export name="Add" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Adds this quaternion to another quaternion.

/// </summary>

/// <param name="other"> The other quaternion. </param>

/// <returns> The resultant quaternion. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Quaternion" name="other" />
    </Parameters>
  </Export>
  <Export name="Subtract" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Subtracts this quaternion to another quaternion.

/// </summary>

/// <param name="other"> The other quaternion. </param>

/// <returns> The resultant quaternion. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Quaternion" name="other" />
    </Parameters>
  </Export>
  <Export name="Multiply" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Multiplies this quaternion with another quaternion.

/// </summary>

/// <param name="other"> The other quaternion. </param>

/// <returns> The resultant quaternion. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Quaternion" name="other" />
    </Parameters>
  </Export>
  <Export name="Multiply" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Multiplies this quaternion with another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="MultiplyInverse" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Multiplies this quaternion with the inverse of another quaternion. The value of both argument quaternions is persevered (this = left * right^-1).

/// </summary>

/// <param name="other"> The other quaternion. </param>

/// <returns> The resultant quaternion. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Quaternion" name="other" />
    </Parameters>
  </Export>
  <Export name="Dot" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Calculates the dot product of the this quaternion and another quaternion.

/// </summary>

/// <param name="other"> The other quaternion. </param>

/// <returns> The dot product. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Quaternion" name="other" />
    </Parameters>
  </Export>
  <Export name="Slerp" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Calculates the slerp between this quaternion and another quaternion, they must be normalized!

/// </summary>

/// <param name="other"> The other quaternion. </param>

/// <param name="progression"> The progression. </param>

/// <returns> Left slerp right. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Quaternion" name="other" />
      <Parameter type="float" name="progression" />
    </Parameters>
  </Export>
  <Export name="Scale" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Scales this quaternion by a scalar.

/// </summary>

/// <param name="scalar"> The scalar value. </param>

/// <returns> The scaled quaternion. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="scalar" />
    </Parameters>
  </Export>
  <Export name="Negate" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Negates this quaternion.

/// </summary>

/// <returns> The negated quaternion. </returns>
]]>
    </Description>
  </Export>
  <Export name="Normalize" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Normalizes this quaternion.

/// </summary>

/// <returns> The normalized quaternion. </returns>
]]>
    </Description>
  </Export>
  <Export name="LengthSquared" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the length squared of this quaternion.

/// </summary>

/// <returns> The length squared. </returns>
]]>
    </Description>
  </Export>
  <Export name="Length" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the length of this quaternion.

/// </summary>

/// <returns> The length. </returns>
]]>
    </Description>
  </Export>
  <Export name="MaxComponent" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the maximum value in this quaternion.

/// </summary>

/// <returns> The largest components. </returns>
]]>
    </Description>
  </Export>
  <Export name="MinComponent" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the lowest value in this quaternion.

/// </summary>

/// <returns> The smallest components. </returns>
]]>
    </Description>
  </Export>
  <Export name="ToMatrix" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Converts this quaternion to a 4x4 matrix.

/// </summary>

/// <returns> The rotation matrix which represents the exact same rotation as this quaternion. </returns>
]]>
    </Description>
  </Export>
  <Export name="ToRotationMatrix" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Converts this quaternion to a 3x3 matrix representing the exact same

/// rotation as this quaternion.

/// </summary>

/// <returns> The rotation matrix which represents the exact same rotation as this quaternion. </returns>
]]>
    </Description>
  </Export>
  <Export name="ToEuler" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Converts this quaternion to euler angles.

/// </summary>

/// <returns> The euler angle representation of this quaternion. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** JointTransform.hpp
  **
  ***************************************
  -->
  <Export name="JointTransform" target="Common" source="JointTransform.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new joint transformation.

/// </summary>

/// <param name="position"> The position of the joint relative to the parent joint (local-space) at a certain keyframe. </param>

/// <param name="rotation"> The rotation of the joint relative to te parent joint (local-space) at a certain keyframe. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="position" />
      <Parameter type="global::Acid.Sharp.Quaternion" name="rotation" />
    </Parameters>
  </Export>
  <Export name="JointTransform" target="Common" source="JointTransform.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new joint transformation.

/// </summary>

/// <param name="localTransform"> The joint's local-transform at a certain keyframe of an animation. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Matrix4" name="localTransform" />
    </Parameters>
  </Export>
  <Export name="GetLocalTransform" target="Common" source="JointTransform.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// In this method the local-space transform matrix is constructed by translating an identity matrix using the position variable and then applying the rotation.

/// The rotation is applied by first converting the quaternion into a rotation matrix, which is then multiplied with the transform matrix.

/// </summary>

/// <returns> The local-space transform as a matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="Interpolate" target="Common" source="JointTransform.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Interpolates between two transforms based on the progression value.

/// The result is a new transform which is part way between the two original transforms.

/// The translation can simply be linearly interpolated, but the rotation interpolation is slightly more complex,

/// using a method called "SLERP" to spherically-linearly interpolate between 2 quaternions (rotations).

/// This gives a much much better result than trying to linearly interpolate between Euler rotations.

/// </summary>

/// <param name="frameA"> The previous transform </param>

/// <param name="frameB"> The next transform </param>

/// <param name="progression"> A number between 0 and 1 indicating how far between the two transforms to interpolate.

/// A progression value of 0 would return a transform equal to "frameA", a value of 1 would return a transform equal to "frameB".

/// Everything else gives a transform somewhere in-between the two.

/// </param>

/// <returns> A new interpolated joint transformation. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.JointTransform" name="frameA" />
      <Parameter type="global::Acid.Sharp.JointTransform" name="frameB" />
      <Parameter type="float" name="progression" />
    </Parameters>
  </Export>
  <Export name="Interpolate" target="Common" source="JointTransform.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Linearly interpolates between two translations based on a "progression" value.

/// </summary>

/// <param name="start"> The start translation. </param>

/// <param name="end"> The end translation. </param>

/// <param name="progression"> A value between 0 and 1 indicating how far to interpolate between the two translations.

/// </param>

/// <returns> The interpolated progressed vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="start" />
      <Parameter type="global::Acid.Sharp.Vector3" name="end" />
      <Parameter type="float" name="progression" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Time.hpp
  **
  ***************************************
  -->
  <Export name="Time" target="Common" source="Time.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for time. This function is internal. To construct time values, use Time::Seconds, Time::Milliseconds or Time::Microseconds instead.

/// </summary>

/// <param name="microseconds"> Number of microseconds. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="int64_t" name="microseconds" />
    </Parameters>
  </Export>
  <Export name="Seconds" target="Common" source="Time.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructs a time value from a number of seconds.

/// </summary>

/// <param name="amount"> Number of seconds. </param>

/// <returns> Time value constructed from the amount of seconds. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="amount" />
    </Parameters>
  </Export>
  <Export name="Milliseconds" target="Common" source="Time.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructs a time value from a number of milliseconds.

/// </summary>

/// <param name="amount"> Number of milliseconds. </param>

/// <returns> Time value constructed from the amount of milliseconds. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="int32_t" name="amount" />
    </Parameters>
  </Export>
  <Export name="Microseconds" target="Common" source="Time.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructs a time value from a number of microseconds.

/// </summary>

/// <param name="amount"> Number of microseconds. </param>

/// <returns> Time value constructed from the amount of microseconds. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="int64_t" name="amount" />
    </Parameters>
  </Export>
  <Export name="AsSeconds" target="Common" source="Time.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Return the time value as a number of seconds.

/// </summary>

/// <returns> Time in seconds. </returns>
]]>
    </Description>
  </Export>
  <Export name="AsMilliseconds" target="Common" source="Time.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Return the time value as a number of milliseconds.

/// </summary>

/// <returns> Time in milliseconds. </returns>
]]>
    </Description>
  </Export>
  <Export name="AsMicroseconds" target="Common" source="Time.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Return the time value as a number of microseconds.

/// </summary>

/// <returns> Time in microseconds. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Keyframe.hpp
  **
  ***************************************
  -->
  <Export name="Keyframe" target="Common" source="Keyframe.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new keyframe at a timestamp.

/// </summary>

/// <param name="data"> The data to load the keyframe from. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.KeyframeData" name="data" />
    </Parameters>
  </Export>
  <Export name="GetTimeStamp" target="Common" source="Keyframe.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the time in seconds of the keyframe in the animation.

/// </summary>

/// <returns> The time in seconds. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Joint.hpp
  **
  ***************************************
  -->
  <Export name="Joint" target="Common" source="Joint.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new skeleton joint.

/// </summary>

/// <param name="index"> The joint's index (ID). </param>

/// <param name="name"> The name of the joint. This is how the joint is named in the collada file, and so is used to identify which joint a joint transform in an animation keyframe refers to. </param>

/// <param name="bindLocalTransform"> The bone-space transform of the joint in the bind position. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="uint32_t" name="index" />
      <Parameter type="string" name="name" />
      <Parameter type="global::Acid.Sharp.Matrix4" name="bindLocalTransform" />
    </Parameters>
  </Export>
  <Export name="CalculateInverseBindTransform" target="Common" source="Joint.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// This is called during set-up, after the joints hierarchy has been created. This calculates the model-space bind transform of this joint like so:

/// <para>

/// </br>

/// {@code bindTransform = parentBindTransform * localBindTransform}</br>

/// </br>

/// where "bindTransform" is the model-space bind transform of this joint, "parentBindTransform" is the model-space bind transform of the parent joint,

/// and "localBindTransform" is the bone-space bind transform of this joint. It the calculates and stores the inverse of this model-space bind transform,

/// for use when calculating the final animation transform each frame. It then recursively calls the method for all of the children joints,

/// so that they too calculate and store their inverse bind-pose transform.

/// </para>

/// </summary>

/// <param name="parentBindTransform"> The model-space bind transform of the parent joint. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Matrix4" name="parentBindTransform" />
    </Parameters>
  </Export>
  <Export name="AddChild" target="Common" source="Joint.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Adds a child joint to this joint. Used during the creation of the joint hierarchy. Joints can have multiple children,

/// which is why they are stored in a list (e.g. a "hand" joint may have multiple "finger" children joints).

/// </summary>

/// <param name="child"> The new child joint of this joint. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Joint" name="child" />
    </Parameters>
  </Export>
  <Export name="GetAnimatedTransform" target="Common" source="Joint.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// The animated transform is the transform that gets loaded up to the shader and is used to deform the vertices of the "skin". It represents the

/// transformation from the joint's bind position (in model-space) to the joint's desired animation pose (also in model-space).

/// This matrix is calculated by taking the desired model-space transform of the joint and multiplying it by the inverse of the starting model-space transform of the joint.

/// </summary>

/// <returns> The transformation matrix of the joint which is used to deform associated vertices of the skin in the shaders. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetInverseBindTransform" target="Common" source="Joint.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// This returns the inverted model-space bind transform.

/// The bind transform is the original model-space transform of the joint (when no animation is applied).

/// This returns the inverse of that, which is used to calculate the animated transform matrix which gets used to transform vertices in the shader.

/// </summary>

/// <returns> The inverse of the joint's bind transform (in model-space). </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** IModule.hpp
  **
  ***************************************
  -->
  <Export name="Update" target="Common" source="IModule.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// The update function for the module.

/// </summary>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Vector2.hpp
  **
  ***************************************
  -->
  <Export name="Vector2" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector2.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Vector2" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector2.

/// </summary>

/// <param name="x"> Start x. </param>

/// <param name="y"> Start y. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="x" />
      <Parameter type="float" name="y" />
    </Parameters>
  </Export>
  <Export name="Vector2" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector2.

/// </summary>

/// <param name="source"> Creates this vector out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2" name="source" />
    </Parameters>
  </Export>
  <Export name="Vector2" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector2.

/// </summary>

/// <param name="source"> Creates this vector out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="source" />
    </Parameters>
  </Export>
  <Export name="Add" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Adds this vector to another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Subtract" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Subtracts this vector to another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Multiply" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Multiplies this vector with another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Divide" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Divides this vector by another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Angle" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Calculates the angle between this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The angle, in radians. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Dot" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Calculates the dot product of the this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The dot product. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Scale" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Scales this vector by a scalar.

/// </summary>

/// <param name="scalar"> The scalar value. </param>

/// <returns> The scaled vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="scalar" />
    </Parameters>
  </Export>
  <Export name="Rotate" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Rotates this vector by a angle around the origin.

/// </summary>

/// <param name="angle"> The angle to rotate by, in radians. </param>

/// <returns> The rotated vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="angle" />
    </Parameters>
  </Export>
  <Export name="Rotate" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Rotates this vector by a angle around a rotation axis.

/// </summary>

/// <param name="angle"> The angle to rotate by, in radians. </param>

/// <param name="rotationAxis"> The point to rotate the vector around. </param>

/// <returns> The rotated vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="angle" />
      <Parameter type="global::Acid.Sharp.Vector2" name="rotationAxis" />
    </Parameters>
  </Export>
  <Export name="Negate" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Negates this vector.

/// </summary>

/// <returns> The negated vector. </returns>
]]>
    </Description>
  </Export>
  <Export name="Normalize" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Normalizes this vector.

/// </summary>

/// <returns> The normalized vector. </returns>
]]>
    </Description>
  </Export>
  <Export name="LengthSquared" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the length squared of this vector.

/// </summary>

/// <returns> The length squared. </returns>
]]>
    </Description>
  </Export>
  <Export name="Length" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the length of this vector.

/// </summary>

/// <returns> The length. </returns>
]]>
    </Description>
  </Export>
  <Export name="MaxComponent" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the maximum value in this vector.

/// </summary>

/// <returns> The largest components. </returns>
]]>
    </Description>
  </Export>
  <Export name="MinComponent" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the lowest value in this vector.

/// </summary>

/// <returns> The smallest components. </returns>
]]>
    </Description>
  </Export>
  <Export name="DistanceSquared" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the distance between this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The squared distance. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Distance" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the between this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The distance. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="DistanceVector" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the vector distance between this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The vector distance. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="InTriangle" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if this vector is in a triangle.

/// </summary>

/// <param name="v1"> The first triangle vertex. </param>

/// <param name="v2"> The second triangle vertex. </param>

/// <param name="v3"> The third triangle vertex. </param>

/// <returns> If this vector is in a triangle. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2" name="v1" />
      <Parameter type="global::Acid.Sharp.Vector2" name="v2" />
      <Parameter type="global::Acid.Sharp.Vector2" name="v3" />
    </Parameters>
  </Export>
  <Export name="SmoothDamp" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gradually changes this vector to a target.

/// </summary>

/// <param name="target"> The target vector. </param>

/// <param name="rate"> The rate to go from current to the target. </param>

/// <returns> The changed vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2" name="target" />
      <Parameter type="global::Acid.Sharp.Vector2" name="rate" />
    </Parameters>
  </Export>
  <Export name="CartesianToPolar" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Converts from rectangular to spherical coordinates, this vector is in cartesian (x, y).

/// </summary>

/// <returns> The polar coordinates (radius, theta). </returns>
]]>
    </Description>
  </Export>
  <Export name="PolarToCartesian" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Converts from spherical to rectangular coordinates, this vector is in polar (radius, theta).

/// </summary>

/// <returns> The cartesian coordinates (x, y). </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Transform.hpp
  **
  ***************************************
  -->
  <Export name="Transform" target="Common" source="Transform.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Transform.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Transform" target="Common" source="Transform.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Transform.

/// </summary>

/// <param name="source"> Creates this vector out of a transform. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Transform" name="source" />
    </Parameters>
  </Export>
  <Export name="Transform" target="Common" source="Transform.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Transform.

/// </summary>

/// <param name="position"> The position. </param>

/// <param name="rotation"> The rotation. </param>

/// <param name="scaling"> The scaling. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="position" />
      <Parameter type="global::Acid.Sharp.Vector3" name="rotation" />
      <Parameter type="global::Acid.Sharp.Vector3" name="scaling" />
    </Parameters>
  </Export>
  <Export name="Transform" target="Common" source="Transform.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Transform.

/// </summary>

/// <param name="position"> The position. </param>

/// <param name="rotation"> The rotation. </param>

/// <param name="scale"> The scale. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="position" />
      <Parameter type="global::Acid.Sharp.Vector3" name="rotation" />
      <Parameter type="float" name="scale" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** ISpatialStructure.hpp
  **
  ***************************************
  -->
  <Export name="Add" target="Common" source="ISpatialStructure.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Adds a new object to the spatial structure.

/// </summary>

/// <param name="object"> The object to add. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.GameObject" name="@object" />
    </Parameters>
  </Export>
  <Export name="Remove" target="Common" source="ISpatialStructure.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Removes an object from the spatial structure.

/// </summary>

/// <param name="object"> The object to remove. </param>

/// <returns> If the object was removed. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.GameObject" name="@object" />
    </Parameters>
  </Export>
  <Export name="Move" target="Common" source="ISpatialStructure.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Moves an object to another spatial structure.

/// </summary>

/// <param name="object"> The object to remove. </param>

/// <param name="structure"> The structure to move to. </param>

/// <returns> If the object was moved. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.GameObject" name="@object" />
      <Parameter type="global::Acid.Sharp.ISpatialStructure" name="structure" />
    </Parameters>
  </Export>
  <Export name="Clear" target="Common" source="ISpatialStructure.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Removes all objects from the spatial structure..

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Update" target="Common" source="ISpatialStructure.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Updates all of the game object.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="GetSize" target="Common" source="ISpatialStructure.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the size of this structure.

/// </summary>

/// <returns> The structures size. </returns>
]]>
    </Description>
  </Export>
  <Export name="Contains" target="Common" source="ISpatialStructure.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// If the structure contains the object.

/// </summary>

/// <param name="object"> The object to check for.

/// </param>

/// <returns> If the structure contains the object. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.GameObject" name="@object" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** GameObject.hpp
  **
  ***************************************
  -->
  <Export name="GameObject" target="Common" source="GameObject.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new Game Object and stores it into a structure.

/// </summary>

/// <param name="transform"> The objects initial world position, rotation, and scale. </param>

/// <param name="structure"> The structure to store the object into, if null it will be stored in the scenes structure. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Transform" name="transform" />
      <Parameter type="global::Acid.Sharp.ISpatialStructure" name="structure" />
    </Parameters>
  </Export>
  <Export name="GameObject" target="Common" source="GameObject.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new Game Object and stores it into a structure.

/// </summary>

/// <param name="filename"> The file to load the component data from. </param>

/// <param name="transform"> The objects initial world position, rotation, and scale. </param>

/// <param name="structure"> The structure to store the object into, if null it will be stored in the scenes structure. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="filename" />
      <Parameter type="global::Acid.Sharp.Transform" name="transform" />
      <Parameter type="global::Acid.Sharp.ISpatialStructure" name="structure" />
    </Parameters>
  </Export>
  <Export name="GetComponentCount" target="Common" source="GameObject.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the count of components attached to this Game Object.

/// </summary>

/// <returns> The count of components. </returns>
]]>
    </Description>
  </Export>
  <Export name="AddComponent" target="Common" source="GameObject.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Adds a component to this game object.

/// </summary>

/// <param name="component"> The component to add. </param>

/// <returns> The added component. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.IComponent" name="component" />
    </Parameters>
  </Export>
  <Export name="RemoveComponent" target="Common" source="GameObject.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Removes a component from this game object.

/// </summary>

/// <param name="component"> The component to remove. </param>

/// <returns> If the component was removed. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.IComponent" name="component" />
    </Parameters>
  </Export>
  <Export name="RemoveComponent" target="Common" source="GameObject.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Removes a component from this game object.

/// </summary>

/// <param name="name"> The name of the component to remove. </param>

/// <returns> If the component was removed. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="name" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** IComponent.hpp
  **
  ***************************************
  -->
  <Export name="Start" target="Common" source="IComponent.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Run when starting the component if <seealso cref="#m_started"/> is false.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Update" target="Common" source="IComponent.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Run when updating the game object this is attached to.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Decode" target="Common" source="IComponent.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Used to decode this component from a loaded data format.

/// </summary>

/// <param name="metadata"> The metadata to decode from. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Metadata" name="metadata" />
    </Parameters>
  </Export>
  <Export name="Encode" target="Common" source="IComponent.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Used to encode this component into a data format.

/// </summary>

/// <param name="metadata"> The metadata to encode into. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Metadata" name="metadata" />
    </Parameters>
  </Export>
  <Export name="GetGameObject" target="Common" source="IComponent.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the game object this components is attached to.

/// </summary>

/// <returns> The registered game object. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetGameObject" target="Common" source="IComponent.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the game object this components is attached to.

/// </summary>

/// <param name="gameObject"> The new game object this is attached to. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.GameObject" name="gameObject" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** IEvent.hpp
  **
  ***************************************
  -->
  <Export name="EventTriggered" target="Common" source="IEvent.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if the event has occurred.

/// </summary>

/// <returns> The event has occurred. </returns>
]]>
    </Description>
  </Export>
  <Export name="OnEvent" target="Common" source="IEvent.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Run when a event has occurred.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="RemoveAfterEvent" target="Common" source="IEvent.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if the event is removed after it has run once.

/// </summary>

/// <returns> If the even will run. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** FontCharacter.hpp
  **
  ***************************************
  -->
  <Export name="FontCharacter" target="Common" source="FontCharacter.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new character.

/// </summary>

/// <param name="id"> The ASCII value of the character. </param>

/// <param name="textureCoordX"> The x texture coordinate for the top left corner of the character in the texture atlas. </param>

/// <param name="textureCoordY"> The y texture coordinate for the top left corner of the character in the texture atlas. </param>

/// <param name="textureSizeX"> The width of the character in the texture atlas. </param>

/// <param name="textureSizeY"> The height of the character in the texture atlas. </param>

/// <param name="offsetX"> The x distance from the cursor to the left edge of the character's quad. </param>

/// <param name="offsetY"> The y distance from the cursor to the top edge of the character's quad. </param>

/// <param name="sizeX"> The width of the character's quad in screen space. </param>

/// <param name="sizeY"> The height of the character's quad in screen space. </param>

/// <param name="advanceX"> How far in pixels the cursor should advance after adding this character. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="int32_t" name="id" />
      <Parameter type="float" name="textureCoordX" />
      <Parameter type="float" name="textureCoordY" />
      <Parameter type="float" name="textureSizeX" />
      <Parameter type="float" name="textureSizeY" />
      <Parameter type="float" name="offsetX" />
      <Parameter type="float" name="offsetY" />
      <Parameter type="float" name="sizeX" />
      <Parameter type="float" name="sizeY" />
      <Parameter type="float" name="advanceX" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** FontWord.hpp
  **
  ***************************************
  -->
  <Export name="FontWord" target="Common" source="FontWord.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new text word.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="AddCharacter" target="Common" source="FontWord.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Adds a character to the end of the current word and increases the screen-space width of the word.

/// </summary>

/// <param name="character"> The character to be added. </param>

/// <param name="kerning"> The character kerning. </param>

/// <returns> {@code true} if the character has successfully been added to the word. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.FontCharacter" name="character" />
      <Parameter type="float" name="kerning" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** UiBound.hpp
  **
  ***************************************
  -->
  <Export name="UiBound" target="Common" source="UiBound.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for rectangle.

/// </summary>

/// <param name="position"> The object screen position. </param>

/// <param name="reference"> The reference pivot vertex (TopLeft, TopCentre, TopRight, CentreLeft, Centre, CentreRight, BottomLeft, BottomCentre, BottomRight). </param>

/// <param name="aspectPosition"> The if the x position will change with display width. </param>

/// <param name="aspectSize"> The if the width will scale with display width. </param>

/// <param name="dimensions"> The object dimensions. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2" name="position" />
      <Parameter type="string" name="reference" />
      <Parameter type="bool" name="aspectPosition" />
      <Parameter type="bool" name="aspectSize" />
      <Parameter type="global::Acid.Sharp.Vector2" name="dimensions" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** IDriver.hpp
  **
  ***************************************
  -->
  <Export name="IDriver" target="Common" source="IDriver.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new driver with a length.

/// </summary>

/// <param name="length"> The drivers length. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Time" name="length" />
    </Parameters>
  </Export>
  <Export name="Update" target="Common" source="IDriver.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Updates the driver with the passed time.

/// </summary>

/// <param name="delta"> The time between the last update. </param>

/// <returns> The calculated value. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Time" name="delta" />
    </Parameters>
  </Export>
  <Export name="GetLength" target="Common" source="IDriver.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the length.

/// </summary>

/// <returns> The length. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetLength" target="Common" source="IDriver.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the length.

/// </summary>

/// <param name="length"> The new length. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Time" name="length" />
    </Parameters>
  </Export>
  <Export name="Calculate" target="Common" source="IDriver.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Calculates the new value.

/// </summary>

/// <param name="time"> The time into the drivers life.

/// </param>

/// <returns> The calculated value. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="factor" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** UiObject.hpp
  **
  ***************************************
  -->
  <Export name="UiObject" target="Common" source="UiObject.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new screen object.

/// </summary>

/// <param name="parent"> The parent screen object. </param>

/// <param name="rectangle"> The rectangle that will represent the bounds of the ui object. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.UiObject" name="parent" />
      <Parameter type="global::Acid.Sharp.UiBound" name="rectangle" />
    </Parameters>
  </Export>
  <Export name="UpdateObject" target="Common" source="UiObject.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Updates the implementation.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="GetParent" target="Common" source="UiObject.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the parent object.

/// </summary>

/// <returns> The parent object. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetParent" target="Common" source="UiObject.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Removes this object from the previous parent and attaches it to another parent.

/// </summary>

/// <param name="parent"> The new parent object. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.UiObject" name="parent" />
    </Parameters>
  </Export>
  <Export name="AddChild" target="Common" source="UiObject.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Adds a child to this objects children.

/// </summary>

/// <param name="child"> The child to add. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.UiObject" name="child" />
    </Parameters>
  </Export>
  <Export name="RemoveChild" target="Common" source="UiObject.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Disowns a child from this objects children.

/// </summary>

/// <param name="child"> The child to disown. </param>

/// <returns> If the child was disowned. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.UiObject" name="child" />
    </Parameters>
  </Export>
  <Export name="GetScreenTransform" target="Common" source="UiObject.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the ui object screen space transform.

/// </summary>

/// <returns> The screen transform. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetAlphaDriver" target="Common" source="UiObject.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the alpha driver.

/// </summary>

/// <param name="alphaDriver"> The new alpha driver. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.IDriver" name="alphaDriver" />
    </Parameters>
  </Export>
  <Export name="SetScaleDriver" target="Common" source="UiObject.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the scale driver.

/// </summary>

/// <param name="scaleDriver"> The new scale driver. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.IDriver" name="scaleDriver" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** IAxis.hpp
  **
  ***************************************
  -->
  <Export name="GetAmount" target="Common" source="IAxis.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the current value along the axis. -1 is smallest input, 1 is largest input.

/// </summary>

/// <returns> The current value of the axis in the range (-1, 1). </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** IButton.hpp
  **
  ***************************************
  -->
  <Export name="IsDown" target="Common" source="IButton.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Returns whether this button is currently pressed.

/// </summary>

/// <returns> True if the button is pressed, false otherwise. </returns>
]]>
    </Description>
  </Export>
  <Export name="WasDown" target="Common" source="IButton.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if the key is down and was not down before. Key press recognized as one click.

/// </summary>

/// <returns> Is the key down and was not down before? </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Colour.hpp
  **
  ***************************************
  -->
  <Export name="Colour" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for colour.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Colour" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for colour.

/// </summary>

/// <param name="r"> The new R value. </param>

/// <param name="g"> The new G value. </param>

/// <param name="b"> The new B value. </param>

/// <param name="a"> The new A value. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="r" />
      <Parameter type="float" name="g" />
      <Parameter type="float" name="b" />
      <Parameter type="float" name="a" />
    </Parameters>
  </Export>
  <Export name="Colour" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for colour.

/// </summary>

/// <param name="hex"> The new values from HEX. </param>

/// <param name="a"> The new A value. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="hex" />
      <Parameter type="float" name="a" />
    </Parameters>
  </Export>
  <Export name="Colour" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for colour.

/// </summary>

/// <param name="source"> Creates this colour out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Colour" name="source" />
    </Parameters>
  </Export>
  <Export name="Colour" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for colour.

/// </summary>

/// <param name="source"> Creates this colour out of a existing vector. </param>

/// <param name="a"> The new A value. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="source" />
      <Parameter type="float" name="a" />
    </Parameters>
  </Export>
  <Export name="Colour" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for colour.

/// </summary>

/// <param name="source"> Creates this colour out of a existing vector. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector4" name="source" />
    </Parameters>
  </Export>
  <Export name="Add" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Adds this vector to another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Colour" name="other" />
    </Parameters>
  </Export>
  <Export name="Subtract" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Subtracts this vector to another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Colour" name="other" />
    </Parameters>
  </Export>
  <Export name="Multiply" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Multiplies this vector with another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Colour" name="other" />
    </Parameters>
  </Export>
  <Export name="Divide" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Divides this vector by another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Colour" name="other" />
    </Parameters>
  </Export>
  <Export name="Scale" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Scales this vector by a scalar.

/// </summary>

/// <param name="scalar"> The scalar value. </param>

/// <returns> The scaled vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="scalar" />
    </Parameters>
  </Export>
  <Export name="Normalize" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Normalizes this vector.

/// </summary>

/// <returns> The normalized vector. </returns>
]]>
    </Description>
  </Export>
  <Export name="LengthSquared" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the length squared of this vector.

/// </summary>

/// <returns> The length squared. </returns>
]]>
    </Description>
  </Export>
  <Export name="Length" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the length of this vector.

/// </summary>

/// <returns> The length. </returns>
]]>
    </Description>
  </Export>
  <Export name="Interpolate" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Interpolates between this and another colour.

/// </summary>

/// <param name="other"> The other colour. </param>

/// <param name="blend"> The blend factor. </param>

/// <returns> The interpolated colour. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Colour" name="other" />
      <Parameter type="float" name="blend" />
    </Parameters>
  </Export>
  <Export name="SmoothDamp" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gradually changes this vector to a target.

/// </summary>

/// <param name="target"> The target vector. </param>

/// <param name="rate"> The rate to go from current to the target. </param>

/// <returns> The changed vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Colour" name="target" />
      <Parameter type="global::Acid.Sharp.Colour" name="rate" />
    </Parameters>
  </Export>
  <Export name="GetUnit" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets a colour representing the unit value of this colour.

/// </summary>

/// <returns> The unit colour. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetHex" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the hex code from this colour.

/// </summary>

/// <returns> The hex code. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** IResource.hpp
  **
  ***************************************
  -->
  <Export name="GetFilename" target="Common" source="IResource.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets a unique name (most likely a filename) associated with this resource object.

/// </summary>

/// <returns> The objects unique name. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Texture.hpp
  **
  ***************************************
  -->
  <Export name="GetPixels" target="Common" source="Texture.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets a copy of the textures pixels from memory, after usage is finished remember to delete the result.

/// </summary>

/// <returns> A copy of the textures pixels. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetPixels" target="Common" source="Texture.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Copies the pixels into this textures memory.

/// </summary>

/// <param name="pixels"> The pixels to copy to the image. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="uint8_t" name="pixels" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Model.hpp
  **
  ***************************************
  -->
  <Export name="Model" target="Common" source="Model.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new empty model.

/// </summary>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Particle.hpp
  **
  ***************************************
  -->
  <Export name="Update" target="Common" source="Particle.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Updates the particle.

/// </summary>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** CollisionObject.hpp
  **
  ***************************************
  -->
  <Export name="CollisionObject" target="Common" source="CollisionObject.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new collision object.

/// </summary>

/// <param name="friction"> The amount of surface friction. </param>

/// <param name="localTransform"> The parent offset of the body. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="friction" />
    </Parameters>
  </Export>
  <Export name="InFrustum" target="Common" source="CollisionObject.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if the shape is partially in the view frustum.

/// </summary>

/// <param name="frustum"> The view frustum. </param>

/// <returns> If the shape is partially in the view frustum. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Frustum" name="frustum" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** PipelineCreate.hpp
  **
  ***************************************
  -->
  <Export name="GraphicsStage" target="Common" source="PipelineCreate.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new graphics stage.

/// </summary>

/// <param name="renderpass"> The renderpass. </param>

/// <param name="subpass"> The subpass. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="uint32_t" name="renderpass" />
      <Parameter type="uint32_t" name="subpass" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** IRenderer.hpp
  **
  ***************************************
  -->
  <Export name="IRenderer" target="Common" source="IRenderer.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new renderer.

/// </summary>

/// <param name="graphicsStage"> The graphics stage this renderer will be used in. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.GraphicsStage" name="graphicsStage" />
    </Parameters>
  </Export>
  <Export name="Render" target="Common" source="IRenderer.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Called when the renderer is needed to be rendered.

/// </summary>

/// <param name="clipPlane"> The current clip plane. </param>

/// <param name="camera"> The camera to be used when rendering. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.CommandBuffer" name="commandBuffer" />
      <Parameter type="global::Acid.Sharp.Vector4" name="clipPlane" />
      <Parameter type="global::Acid.Sharp.ICamera" name="camera" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Thread.hpp
  **
  ***************************************
  -->
  <Export name="Wait" target="Common" source="Thread.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Waits until all jobs have been finished.

/// </summary>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Animation.hpp
  **
  ***************************************
  -->
  <Export name="GetLength" target="Common" source="Animation.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the length of the animation.

/// </summary>

/// <returns> The length of the animation. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Animator.hpp
  **
  ***************************************
  -->
  <Export name="Animator" target="Common" source="Animator.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new animator.

/// </summary>

/// <param name="rootJoint"> The root joint of the joint hierarchy which makes up the "skeleton" of the entity. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Joint" name="rootJoint" />
    </Parameters>
  </Export>
  <Export name="Update" target="Common" source="Animator.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// This method should be called each frame to update the animation currently being played. This increases the animation time (and loops it back to zero if necessary),

/// finds the pose that the entity should be in at that time of the animation, and then applied that pose to all the entity's joints.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="IncreaseAnimationTime" target="Common" source="Animator.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Increases the current animation time which allows the animation to progress. If the current animation has reached the end then the timer is reset, causing the animation to loop.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="CalculateProgression" target="Common" source="Animator.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Calculates how far between the previous and next keyframe the current animation time is, and returns it as a value between 0 and 1.

/// </summary>

/// <param name="previousFrame"> The previous keyframe in the animation. </param>

/// <param name="nextFrame"> The next keyframe in the animation.

/// </param>

/// <returns> A number between 0 and 1 indicating how far between the two keyframes the current animation time is. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Keyframe" name="previousFrame" />
      <Parameter type="global::Acid.Sharp.Keyframe" name="nextFrame" />
    </Parameters>
  </Export>
  <Export name="DoAnimation" target="Common" source="Animator.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Indicates that the entity should carry out the given animation. Resets the animation time so that the new animation starts from the beginning.

/// </summary>

/// <param name="animation"> The new animation to carry out. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Animation" name="animation" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** FontLine.hpp
  **
  ***************************************
  -->
  <Export name="FontLine" target="Common" source="FontLine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new text line.

/// </summary>

/// <param name="spaceWidth"> The screen-space width of a space character. </param>

/// <param name="maxLength"> The screen-space maximum length of a line. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="spaceWidth" />
      <Parameter type="float" name="maxLength" />
    </Parameters>
  </Export>
  <Export name="AddWord" target="Common" source="FontLine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Attempt to add a word to the line. If the line can fit the word in without reaching the maximum line length then the word is added and the line length increased.

/// </summary>

/// <param name="word"> The word to try to add. </param>

/// <returns> {@code true} if the word has successfully been added to the line. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.FontWord" name="word" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Pipeline.hpp
  **
  ***************************************
  -->
  <Export name="Pipeline" target="Common" source="Pipeline.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new pipeline.

/// </summary>

/// <param name="graphicsStage"> The pipelines graphics stage. </param>

/// <param name="pipelineCreate"> The pipelines creation info. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.GraphicsStage" name="graphicsStage" />
      <Parameter type="global::Acid.Sharp.PipelineCreate" name="pipelineCreate" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Noise.hpp
  **
  ***************************************
  -->
  <Export name="Noise" target="Common" source="Noise.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new multi-type noise object.

/// </summary>

/// <param name="seed"> The seed. </param>

/// <param name="frequency"> The noise frequency. </param>

/// <param name="interp"> The interp type. </param>

/// <param name="noiseType"> The noise type. </param>

/// <param name="octaves"> The amount of octaves to use. </param>

/// <param name="lacunarity"> The lacunarity between octaves. </param>

/// <param name="fractalType"> The fractal noise type. </param>

/// <param name="fractalBounding"> The fractal bounding. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="int32_t" name="seed" />
      <Parameter type="float" name="frequency" />
      <Parameter type="global::Acid.Sharp.NoiseInterp*" name="interp" />
      <Parameter type="global::Acid.Sharp.NoiseType*" name="noiseType" />
      <Parameter type="int32_t" name="octaves" />
      <Parameter type="float" name="lacunarity" />
      <Parameter type="float" name="gain" />
      <Parameter type="global::Acid.Sharp.NoiseFractal*" name="fractalType" />
      <Parameter type="float" name="fractalBounding" />
    </Parameters>
  </Export>
  <Export name="GetSeed" target="Common" source="Noise.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the seed used for all noise types.

/// </summary>

/// <returns> The seed. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetSeed" target="Common" source="Noise.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets seed used for all noise types.

/// </summary>

/// <param name="seed"> The new seed (Default: 1337). </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="int32_t" name="seed" />
    </Parameters>
  </Export>
  <Export name="GetFrequency" target="Common" source="Noise.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the frequency used for all noise types.

/// </summary>

/// <returns> The frequency. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetFrequency" target="Common" source="Noise.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the frequency used for all noise types.

/// </summary>

/// <param name="frequency"> The new frequency (Default: 0.01). </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="frequency" />
    </Parameters>
  </Export>
  <Export name="GetInterp" target="Common" source="Noise.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the interpolation method used for supported noise types.

/// </summary>

/// <returns> The interpolation method. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetInterp" target="Common" source="Noise.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the interpolation method used to smooth between noise values.

/// </summary>

/// <param name="interp"> The new interpolation method (Default: Quintic). </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.NoiseInterp*" name="interp" />
    </Parameters>
  </Export>
  <Export name="GetNoiseType" target="Common" source="Noise.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the type of noise.

/// </summary>

/// <returns> The type of noise (Default: Simplex). </returns>
]]>
    </Description>
  </Export>
  <Export name="SetNoiseType" target="Common" source="Noise.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the type of noise.

/// </summary>

/// <param name="noiseType"> The new noise type. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.NoiseType*" name="noiseType" />
    </Parameters>
  </Export>
  <Export name="GetFractalOctaves" target="Common" source="Noise.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the octave count for all fractal noise types.

/// </summary>

/// <returns> The octave count (Default: 3). </returns>
]]>
    </Description>
  </Export>
  <Export name="SetFractalOctaves" target="Common" source="Noise.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the octave count for all fractal noise types.

/// </summary>

/// <param name="octaves"> The new octaves count (Default: 2.0). </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="int32_t" name="octaves" />
    </Parameters>
  </Export>
  <Export name="GetFractalLacunarity" target="Common" source="Noise.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the octave lacunarity for all fractal noise types.

/// </summary>

/// <returns> The octave lacunarity. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetFractalLacunarity" target="Common" source="Noise.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the octave octave lacunarity for all fractal noise types.

/// </summary>

/// <param name="lacunarity"> The new octave lacunarity (Default: 0.5). </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="lacunarity" />
    </Parameters>
  </Export>
  <Export name="GetFractalGain" target="Common" source="Noise.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the octave gain for all fractal noise types.

/// </summary>

/// <returns> The octave gain. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetFractalGain" target="Common" source="Noise.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the octave gain for all fractal noise types.

/// </summary>

/// <param name="gain"> The new octave gain. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="gain" />
    </Parameters>
  </Export>
  <Export name="GetFractalType" target="Common" source="Noise.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the method for combining octaves in all fractal noise types.

/// </summary>

/// <returns> The method for combining octaves. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetFractalType" target="Common" source="Noise.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the method for combining octaves in all fractal noise types.

/// </summary>

/// <param name="fractalType"> The new method for combining octaves (Default: FBM). </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.NoiseFractal*" name="fractalType" />
    </Parameters>
  </Export>
  <Export name="GetCellularDistanceFunction" target="Common" source="Noise.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the distance function used in cellular noise calculations.

/// </summary>

/// <returns> The cellular distance function. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetCellularDistanceFunction" target="Common" source="Noise.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the distance function used in cellular noise calculations.

/// </summary>

/// <param name="cellularDistanceFunction"> The new cellular distance function (Default: Euclidean). </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.NoiseCellularFunc*" name="cellularDistanceFunction" />
    </Parameters>
  </Export>
  <Export name="GetCellularReturnType" target="Common" source="Noise.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the return type from cellular noise calculations.

/// </summary>

/// <returns> The cellular return type. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetCellularReturnType" target="Common" source="Noise.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the return type from cellular noise calculations.

/// Note: NoiseLookup requires another FastNoise object be set with SetCellularNoiseLookup() to function.

/// </summary>

/// <param name="cellularReturnType"> The new cellular return type (Default: CellValue). </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.NoiseCellularReturn*" name="cellularReturnType" />
    </Parameters>
  </Export>
  <Export name="GetCellularNoiseLookup" target="Common" source="Noise.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the noise used to calculate a cell value if the cellular return type is NoiseLookup.

/// </summary>

/// <returns> The cellular noise lookup. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetCellularNoiseLookup" target="Common" source="Noise.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the noise used to calculate a cell value if cellular return type is NoiseLookup.

/// The lookup value is acquired through GetNoise() so ensure you SetNoiseType() on the noise lookup, value, Perlin or simplex is recommended.

/// </summary>

/// <param name="noise"> The new cellular noise lookup. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Noise" name="noise" />
    </Parameters>
  </Export>
  <Export name="GetCellularDistance2Indices" target="Common" source="Noise.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the 2 distance indices used for distance2 return types.

/// </summary>

/// <param name="cellularDistanceIndex0"> The cellular distance at index 0. </param>

/// <param name="cellularDistanceIndex1"> The cellular distance at index 1. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="int32_t" name="cellularDistanceIndex0" />
      <Parameter type="int32_t" name="cellularDistanceIndex1" />
    </Parameters>
  </Export>
  <Export name="SetCellularDistance2Indices" target="Common" source="Noise.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the 2 distance indices used for distance2 return types.

/// Both indices must be >= 0, index1 must be < 4.

/// </summary>

/// <param name="cellularDistanceIndex0"> The new cellular distance at index 0 (Default: 0). </param>

/// <param name="cellularDistanceIndex1"> The new cellular distance at index 1 (Default: 1). </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="int32_t" name="cellularDistanceIndex0" />
      <Parameter type="int32_t" name="cellularDistanceIndex1" />
    </Parameters>
  </Export>
  <Export name="GetCellularJitter" target="Common" source="Noise.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the maximum distance a cellular point can move from its grid position.

/// </summary>

/// <returns> The cellular maximum distance. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetCellularJitter" target="Common" source="Noise.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the maximum distance a cellular point can move from its grid position.

/// Setting this high will make artifacts more common.

/// </summary>

/// <param name="cellularJitter"> The new cellular maximum distance (Default: 0.45). </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="cellularJitter" />
    </Parameters>
  </Export>
  <Export name="GetGradientPerturbAmp" target="Common" source="Noise.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the maximum warp distance from original location when using GradientPerturb{Fractal}(...).

/// </summary>

/// <returns> The cellular maximum warp distance. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetGradientPerturbAmp" target="Common" source="Noise.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the maximum warp distance from original location when using GradientPerturb{Fractal}(...).

/// </summary>

/// <param name="gradientPerturbAmp"> The new cellular maximum warp distance (Default: 1.0). </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="gradientPerturbAmp" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** ISpawnParticle.hpp
  **
  ***************************************
  -->
  <Export name="GeneratePosition" target="Common" source="ISpawnParticle.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new particle position.

/// </summary>

/// <returns> The new particles position. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** IManagerRender.hpp
  **
  ***************************************
  -->
  <Export name="Start" target="Common" source="IManagerRender.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Run when starting the renderer manager.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Update" target="Common" source="IManagerRender.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Run when updating the renderer manager.

/// </summary>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** ICamera.hpp
  **
  ***************************************
  -->
  <Export name="Update" target="Common" source="ICamera.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Checks inputs and carries out smooth camera movement. Called before every frame.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="ReflectView" target="Common" source="ICamera.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Prepares the camera for the reflection render pass.

/// </summary>

/// <param name="height"> The height of the horizontal plane to be reflected over. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="height" />
    </Parameters>
  </Export>
  <Export name="GetNearPlane" target="Common" source="ICamera.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the distance of the near pane of the view frustum.

/// </summary>

/// <returns> The distance of the near pane of the view frustum. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetFarPlane" target="Common" source="ICamera.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the distance of the view frustum's far plane.

/// </summary>

/// <returns> The distance of the view frustum's far plane. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetFov" target="Common" source="ICamera.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the field of view angle for the view frustum.

/// </summary>

/// <returns> The field of view angle for the view frustum. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetViewFrustum" target="Common" source="ICamera.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the view frustum created by the current camera position and rotation.

/// </summary>

/// <returns> The view frustum created by the current camera position and rotation. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetViewRay" target="Common" source="ICamera.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the ray that extends from the cameras position though the screen.

/// </summary>

/// <returns> The cameras view ray. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetViewMatrix" target="Common" source="ICamera.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the view matrix created by the current camera position and rotation.

/// </summary>

/// <returns> The view matrix created by the current camera position and rotation. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetProjectionMatrix" target="Common" source="ICamera.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the projection matrix used in the current scene render.

/// </summary>

/// <returns> The projection matrix used in the current scene render. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetPosition" target="Common" source="ICamera.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the cameras 3D position in the world.

/// </summary>

/// <returns> The cameras 3D position in the world. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetVelocity" target="Common" source="ICamera.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the cameras 3D velocity in the world.

/// </summary>

/// <returns> The cameras 3D velocity in the world. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetRotation" target="Common" source="ICamera.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the cameras 3D rotation in the world, where x=pitch, y=yaw, z=roll.

/// </summary>

/// <returns> The cameras 3D rotation in the world, where x=pitch, y=yaw, z=roll. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** SceneStructure.hpp
  **
  ***************************************
  -->
  <Export name="SceneStructure" target="Common" source="SceneStructure.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new scene structure.

/// </summary>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** IScene.hpp
  **
  ***************************************
  -->
  <Export name="IScene" target="Common" source="IScene.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new scene.

/// </summary>

/// <param name="camera"> The scenes camera. </param>

/// <param name="selectorJoystick"> The joystick controlled UI selector. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.ICamera" name="camera" />
      <Parameter type="global::Acid.Sharp.SelectorJoystick" name="selectorJoystick" />
    </Parameters>
  </Export>
  <Export name="Update" target="Common" source="IScene.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Run when updating the scene.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="GetCamera" target="Common" source="IScene.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the current camera object.

/// </summary>

/// <returns> The current camera. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetCamera" target="Common" source="IScene.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the current camera to a new camera.

/// </summary>

/// <param name="camera"> The new camera. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.ICamera" name="camera" />
    </Parameters>
  </Export>
  <Export name="GetSelectorJoystick" target="Common" source="IScene.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the joystick controlled UI selector.

/// </summary>

/// <returns> The joystick selector. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetSelectorJoystick" target="Common" source="IScene.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the joystick controlled UI selector.

/// </summary>

/// <param name="selectorJoystick"> The new joystick selector. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.SelectorJoystick" name="selectorJoystick" />
    </Parameters>
  </Export>
  <Export name="GetPhysics" target="Common" source="IScene.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the scene physics system.

/// </summary>

/// <returns> The scenes physics system. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetStructure" target="Common" source="IScene.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the scene object structure.

/// </summary>

/// <returns> The scene object structure. </returns>
]]>
    </Description>
  </Export>
  <Export name="IsStarted" target="Common" source="IScene.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if this scene has started.

/// </summary>

/// <returns> If the scene has started. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetStarted" target="Common" source="IScene.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets if this scene has started.

/// </summary>

/// <param name="started"> If the scene has started. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="bool" name="started" />
    </Parameters>
  </Export>
  <Export name="IsPaused" target="Common" source="IScene.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if the scene is paused.

/// </summary>

/// <returns> If the scene is paused. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** FontMetafile.hpp
  **
  ***************************************
  -->
  <Export name="FontMetafile" target="Common" source="FontMetafile.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new meta file.

/// </summary>

/// <param name="filename"> The font file to load from. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="filename" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** FontType.hpp
  **
  ***************************************
  -->
  <Export name="FontType" target="Common" source="FontType.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new text loader.

/// </summary>

/// <param name="filename"> The family file path that the texture atlases and character infos are contained in. </param>

/// <param name="fontStyle"> The style selected to load as this type. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="filename" />
      <Parameter type="string" name="fontStyle" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Text.hpp
  **
  ***************************************
  -->
  <Export name="GetModel" target="Common" source="Text.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the text model, which contains all the vertex data for the quads on which the text will be rendered.

/// </summary>

/// <returns> The model of the text. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetNumberLines" target="Common" source="Text.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the number of lines in this text.

/// </summary>

/// <returns> The number of lines. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetString" target="Common" source="Text.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the string of text represented.

/// </summary>

/// <returns> The string of text. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetString" target="Common" source="Text.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Changed the current string in this text.

/// </summary>

/// <param name="newString"> The new text, </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="newString" />
    </Parameters>
  </Export>
  <Export name="GetTextJustify" target="Common" source="Text.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets how the text should justify.

/// </summary>

/// <returns> How the text should justify. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetMaxWidth" target="Common" source="Text.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the maximum length of a line of this text.

/// </summary>

/// <returns> The maximum length of a line. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetMaxWidth" target="Common" source="Text.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the maximum length of a line of this text.

/// </summary>

/// <param name="maxWidth"> The new maximum length. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="maxWidth" />
    </Parameters>
  </Export>
  <Export name="GetKerning" target="Common" source="Text.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the kerning (type character spacing multiplier) of this text.

/// </summary>

/// <returns> The type kerning. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetKerning" target="Common" source="Text.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the kerning (type character spacing multiplier) of this text.

/// </summary>

/// <param name="kerning"> The new kerning. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="kerning" />
    </Parameters>
  </Export>
  <Export name="GetLeading" target="Common" source="Text.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the leading (vertical line spacing multiplier) of this text.

/// </summary>

/// <returns> The line leading. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetLeading" target="Common" source="Text.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the leading (vertical line spacing multiplier) of this text.

/// </summary>

/// <param name="leading"> The new leading. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="leading" />
    </Parameters>
  </Export>
  <Export name="GetTextColour" target="Common" source="Text.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the colour of the text.

/// </summary>

/// <returns> The colour of the text. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetTextColour" target="Common" source="Text.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the colour of the text.

/// </summary>

/// <param name="textColour"> The new colour of the text. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Colour" name="textColour" />
    </Parameters>
  </Export>
  <Export name="GetBorderColour" target="Common" source="Text.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the border colour of the text. This is used with border and glow drivers.

/// </summary>

/// <returns> The border colour of the text. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetBorderColour" target="Common" source="Text.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the border colour of the text. This is used with border and glow drivers.

/// </summary>

/// <param name="borderColour"> The new border colour of the text. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Colour" name="borderColour" />
    </Parameters>
  </Export>
  <Export name="SetBorderDriver" target="Common" source="Text.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the border driver, will disable glowing.

/// </summary>

/// <param name="borderDriver"> The new border driver. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.IDriver" name="borderDriver" />
    </Parameters>
  </Export>
  <Export name="SetGlowDriver" target="Common" source="Text.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the glow driver, will disable solid borders.

/// </summary>

/// <param name="glowDriver"> The new glow driver. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.IDriver" name="glowDriver" />
    </Parameters>
  </Export>
  <Export name="RemoveBorder" target="Common" source="Text.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Disables both solid borders and glow borders.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="GetTotalBorderSize" target="Common" source="Text.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the calculated border size.

/// </summary>

/// <returns> The border size. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetGlowSize" target="Common" source="Text.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the size of the glow.

/// </summary>

/// <returns> The glow size. </returns>
]]>
    </Description>
  </Export>
  <Export name="CalculateEdgeStart" target="Common" source="Text.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the distance field edge before antialias.

/// </summary>

/// <returns> The distance field edge. </returns>
]]>
    </Description>
  </Export>
  <Export name="CalculateAntialiasSize" target="Common" source="Text.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the distance field antialias distance.

/// </summary>

/// <returns> The distance field antialias distance. </returns>
]]>
    </Description>
  </Export>
  <Export name="IsLoaded" target="Common" source="Text.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if the text has been loaded to a model.

/// </summary>

/// <returns> If the text has been loaded to a model. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** SoundBuffer.hpp
  **
  ***************************************
  -->
  <Export name="SoundBuffer" target="Common" source="SoundBuffer.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new sound buffer.

/// </summary>

/// <param name="filename"> The file to load the sound buffer from. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="filename" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** PipelineMaterial.hpp
  **
  ***************************************
  -->
  <Export name="PipelineMaterial" target="Common" source="PipelineMaterial.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new material pipeline.

/// </summary>

/// <param name="graphicsStage"> Stage the pipeline will be executed on. </param>

/// <param name="pipelineCreate"> Information used to define pipeline properties. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.GraphicsStage" name="graphicsStage" />
      <Parameter type="global::Acid.Sharp.PipelineCreate" name="pipelineCreate" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Cubemap.hpp
  **
  ***************************************
  -->
  <Export name="GetPixels" target="Common" source="Cubemap.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets a copy of the face of a cubemaps pixels from memory, after usage is finished remember to delete the result.

/// </summary>

/// <param name="arrayLayer"> The layer to copy from. </param>

/// <returns> A copy of the cubemaps pixels. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="uint32_t" name="arrayLayer" />
    </Parameters>
  </Export>
  <Export name="GetPixels" target="Common" source="Cubemap.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets a copy of the cubemaps pixels from memory, after usage is finished remember to delete the result.

/// </summary>

/// <returns> A copy of the cubemaps. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetPixels" target="Common" source="Cubemap.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Copies the pixels into this cubemaps memory.

/// </summary>

/// <param name="pixels"> The pixels to copy to the image. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="uint8_t" name="pixels" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** ModelObj.hpp
  **
  ***************************************
  -->
  <Export name="ModelObj" target="Common" source="ModelObj.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new OBJ model.

/// </summary>

/// <param name="filename"> The file to load the model from. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="filename" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** PrefabObject.hpp
  **
  ***************************************
  -->
  <Export name="PrefabObject" target="Common" source="PrefabObject.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new entity prefab.

/// </summary>

/// <param name="filename"> The file name. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="filename" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** String.hpp
  **
  ***************************************
  -->
  <Export name="StartsWith" target="Common" source="String.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if a string starts with a token.

/// </summary>

/// <param name="str"> The string. </param>

/// <param name="token"> The token. </param>

/// <returns> If a string starts with the token. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="str" />
      <Parameter type="string" name="token" />
    </Parameters>
  </Export>
  <Export name="Contains" target="Common" source="String.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if a string contains a token.

/// </summary>

/// <param name="str"> The string. </param>

/// <param name="token"> The token. </param>

/// <returns> If a string contains the token. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="str" />
      <Parameter type="string" name="token" />
    </Parameters>
  </Export>
  <Export name="IsInteger" target="Common" source="String.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if a string is a integer.

/// </summary>

/// <param name="str"> The string. </param>

/// <returns> If a string is a integer. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="str" />
    </Parameters>
  </Export>
  <Export name="FindCharPos" target="Common" source="String.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the first char index in the string.

/// </summary>

/// <param name="str"> The string. </param>

/// <param name="c"> The char to look for. </param>

/// <returns> The char index. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="str" />
      <Parameter type="char" name="c" />
    </Parameters>
  </Export>
  <Export name="Trim" target="Common" source="String.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Trims the left and right side of a string of whitespace.

/// </summary>

/// <param name="str"> The string. </param>

/// <param name="whitespace"> The whitespace type. </param>

/// <returns> The trimmed string. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="str" />
      <Parameter type="string" name="whitespace" />
    </Parameters>
  </Export>
  <Export name="Substring" target="Common" source="String.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Takes a substring of a string between two bounds.

/// </summary>

/// <param name="str"> The string. </param>

/// <param name="start"> The left bound. </param>

/// <param name="end"> The right bound. </param>

/// <returns> The substring of the string. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="str" />
      <Parameter type="uint32_t" name="start" />
      <Parameter type="uint32_t" name="end" />
    </Parameters>
  </Export>
  <Export name="RemoveAll" target="Common" source="String.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Removes all tokens from a string.

/// </summary>

/// <param name="str"> The string. </param>

/// <param name="token"> The token. </param>

/// <returns> The string with the tokens removed. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="str" />
      <Parameter type="char" name="token" />
    </Parameters>
  </Export>
  <Export name="RemoveLast" target="Common" source="String.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Removes the last token from a string.

/// </summary>

/// <param name="str"> The string. </param>

/// <param name="token"> The token. </param>

/// <returns> The string with the last token removed. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="str" />
      <Parameter type="char" name="token" />
    </Parameters>
  </Export>
  <Export name="ReplaceAll" target="Common" source="String.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Replaces all tokens from a string.

/// </summary>

/// <param name="str"> The string. </param>

/// <param name="token"> The token. </param>

/// <param name="to"> The string to replace the tokens with. </param>

/// <returns> The string with the tokens replaced. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="str" />
      <Parameter type="string" name="token" />
      <Parameter type="string" name="to" />
    </Parameters>
  </Export>
  <Export name="ReplaceFirst" target="Common" source="String.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Replaces the first token from a string.

/// </summary>

/// <param name="str"> The string. </param>

/// <param name="token"> The token. </param>

/// <param name="to"> The string to replace the tokens with. </param>

/// <returns> The string with the tokens replaced. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="str" />
      <Parameter type="string" name="token" />
      <Parameter type="string" name="to" />
    </Parameters>
  </Export>
  <Export name="Lowercase" target="Common" source="String.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Lowercases a string.

/// </summary>

/// <param name="str"> The string. </param>

/// <returns> The lowercased string. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="str" />
    </Parameters>
  </Export>
  <Export name="Uppercase" target="Common" source="String.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Uppercases a string.

/// </summary>

/// <param name="str"> The string. </param>

/// <returns> The uppercased string. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="str" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Log.hpp
  **
  ***************************************
  -->
  <Export name="Out" target="Common" source="Log.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Outputs a message into the console.

/// </summary>

/// <param name="string"> The string to output. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="string" />
    </Parameters>
  </Export>
  <Export name="Error" target="Common" source="Log.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Outputs a error into the console.

/// </summary>

/// <param name="string"> The string to output. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="string" />
    </Parameters>
  </Export>
  <Export name="CreateLog" target="Common" source="Log.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Outputs all logs into a file.

/// </summary>

/// <param name="filename"> The filename to output into. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="filename" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** ModuleRegister.hpp
  **
  ***************************************
  -->
  <Export name="FillRegister" target="Common" source="ModuleRegister.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Fills the module register with default modules.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="ContainsModule" target="Common" source="ModuleRegister.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if a module is contained in this registry.

/// </summary>

/// <param name="module"> The module to find. </param>

/// <returns> If the module is in the registry. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.IModule" name="module" />
    </Parameters>
  </Export>
  <Export name="RegisterModule" target="Common" source="ModuleRegister.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Registers a module with the register.

/// </summary>

/// <param name="module"> The modules object. </param>

/// <param name="update"> The modules update type. </param>

/// <returns> The registered module. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.IModule" name="module" />
      <Parameter type="global::Acid.Sharp.ModuleUpdate*" name="update" />
    </Parameters>
  </Export>
  <Export name="DeregisterModule" target="Common" source="ModuleRegister.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Deregisters a module.

/// </summary>

/// <param name="module"> The module to deregister. </param>

/// <returns> If the module was deregistered. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.IModule" name="module" />
    </Parameters>
  </Export>
  <Export name="RunUpdate" target="Common" source="ModuleRegister.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Runs updates for all module update types.

/// </summary>

/// <param name="update"> The modules update type. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.ModuleUpdate*" name="update" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Delta.hpp
  **
  ***************************************
  -->
  <Export name="Delta" target="Common" source="Delta.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new change handler.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Update" target="Common" source="Delta.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Updates change and times.

/// </summary>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Timer.hpp
  **
  ***************************************
  -->
  <Export name="Timer" target="Common" source="Timer.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new timer.

/// </summary>

/// <param name="interval"> The time between events. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Time" name="interval" />
    </Parameters>
  </Export>
  <Export name="IsPassedTime" target="Common" source="Timer.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if the interval has been passes for the timer.

/// </summary>

/// <returns> If the interval was exceeded. </returns>
]]>
    </Description>
  </Export>
  <Export name="ResetStartTime" target="Common" source="Timer.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Adds the intervals value to the start time.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="GetInterval" target="Common" source="Timer.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets what the interval is.

/// </summary>

/// <returns> The timers current interval. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetInterval" target="Common" source="Timer.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the timers interval (resets timer).

/// </summary>

/// <param name="interval"> The new timer interval. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Time" name="interval" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** ModuleUpdater.hpp
  **
  ***************************************
  -->
  <Export name="Update" target="Common" source="ModuleUpdater.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Updates all modules in order.

/// </summary>

/// <returns> The module register. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.ModuleRegister" name="moduleRegister" />
    </Parameters>
  </Export>
  <Export name="GetDelta" target="Common" source="ModuleUpdater.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the delta (seconds) between updates.

/// </summary>

/// <returns> The delta between updates. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetDeltaRender" target="Common" source="ModuleUpdater.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the delta (seconds) between renders.

/// </summary>

/// <returns> The delta between renders. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Engine.hpp
  **
  ***************************************
  -->
  <Export name="Get" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets this engine instance.

/// </summary>

/// <returns> The current engine instance. </returns>
]]>
    </Description>
  </Export>
  <Export name="Engine" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Carries out the setup for basic engine components and the engine. Call <seealso cref="#run()"/> after creating a instance.

/// </summary>

/// <param name="emptyRegister"> If the module register will start empty. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="bool" name="emptyRegister" />
    </Parameters>
  </Export>
  <Export name="Run" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// The update function for the updater.

/// </summary>

/// <returns> EXIT_SUCCESS or EXIT_FAILURE. </returns>
]]>
    </Description>
  </Export>
  <Export name="RegisterModule" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Registers a module with the register.

/// </summary>

/// <param name="module"> The modules object. </param>

/// <param name="update"> The modules update type. </param>

/// <returns> The registered module. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.IModule" name="module" />
      <Parameter type="global::Acid.Sharp.ModuleUpdate*" name="update" />
    </Parameters>
  </Export>
  <Export name="DeregisterModule" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Deregisters a module.

/// </summary>

/// <param name="module"> The module to deregister. </param>

/// <returns> If the module was deregistered. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.IModule" name="module" />
    </Parameters>
  </Export>
  <Export name="GetTimeOffset" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the added/removed time for the engine.

/// </summary>

/// <returns> The time offset. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetTimeOffset" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the time offset for the engine.

/// </summary>

/// <param name="timeOffset"> The new time offset. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Time" name="timeOffset" />
    </Parameters>
  </Export>
  <Export name="GetFpsLimit" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the fps limit.

/// </summary>

/// <returns> The fps limit. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetFpsLimit" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the fps limit. -1 disables limits.

/// </summary>

/// <param name="fpsLimit"> The new fps limit. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="fpsLimit" />
    </Parameters>
  </Export>
  <Export name="GetDelta" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the delta (seconds) between updates.

/// </summary>

/// <returns> The delta between updates. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetDeltaRender" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the delta (seconds) between renders.

/// </summary>

/// <returns> The delta between renders. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetTime" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the current time of the engine instance.

/// </summary>

/// <returns> The current engine time. </returns>
]]>
    </Description>
  </Export>
  <Export name="IsInitialized" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if the engine has been initialized.

/// </summary>

/// <returns> If the engine has been initialized. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetInitialized" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets if the engine has been initialized.

/// </summary>

/// <param name="initialized"> If the engine has been initialized. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="bool" name="initialized" />
    </Parameters>
  </Export>
  <Export name="IsRunning" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if the engine is running.

/// </summary>

/// <returns> If the engine is running. </returns>
]]>
    </Description>
  </Export>
  <Export name="RequestClose" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Requests the engine to delete and stop the game-loop.

/// </summary>

/// <param name="error"> If a bad error occurred. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="bool" name="error" />
    </Parameters>
  </Export>
  <Export name="GetDateTime" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the current date time as a string. "%d-%m-%Y %I:%M:%S"

/// </summary>

/// <returns> The date time as a string. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Files.hpp
  **
  ***************************************
  -->
  <Export name="Get" target="Common" source="Files.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets this engine instance.

/// </summary>

/// <returns> The current module instance. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetBaseDirectory" target="Common" source="Files.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the base directory for the search path, called before any calls to <seealso cref="#AddSearchPath()"/>.

/// </summary>

/// <param name="argv0"> The first argument passed to mail. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="argv0" />
    </Parameters>
  </Export>
  <Export name="AddSearchPath" target="Common" source="Files.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Adds an file search path, ensure <seealso cref="#SetBaseDirectory()"/> is called once before.

/// </summary>

/// <param name="path"> The path to add. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="path" />
    </Parameters>
  </Export>
  <Export name="RemoveSearchPath" target="Common" source="Files.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Removes a file search path.

/// </summary>

/// <param name="path"> The path to remove. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="path" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Maths.hpp
  **
  ***************************************
  -->
  <Export name="Random" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Generates a random value from between a range.

/// </summary>

/// <param name="min"> The min value. </param>

/// <param name="max"> The max value. </param>

/// <returns> The randomly selected value within the range. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="min" />
      <Parameter type="float" name="max" />
    </Parameters>
  </Export>
  <Export name="RandomNormal" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Generates a single value from a normal distribution, using Box-Muller.

/// https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform

/// </summary>

/// <param name="standardDeviation"> The standards deviation of the distribution. </param>

/// <param name="mean"> The mean of the distribution. </param>

/// <returns> A normally distributed value. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="standardDeviation" />
      <Parameter type="float" name="mean" />
    </Parameters>
  </Export>
  <Export name="RandomLog" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a number between two numbers, logarithmic.

/// </summary>

/// <param name="min"> The min value. </param>

/// <param name="max"> The max value. </param>

/// <returns> The final random number. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="min" />
      <Parameter type="float" name="max" />
    </Parameters>
  </Export>
  <Export name="Radians" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Converts degrees to radians.

/// </summary>

/// <param name="degrees"> The degrees value. </param>

/// <returns> The radians value. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="degrees" />
    </Parameters>
  </Export>
  <Export name="Degrees" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Converts radians to degrees.

/// </summary>

/// <param name="radians"> The radians value. </param>

/// <returns> The degrees value. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="radians" />
    </Parameters>
  </Export>
  <Export name="WrapDegrees" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Normalizes a angle into the range of 0-360.

/// </summary>

/// <param name="degrees"> The source angle. </param>

/// <returns> The normalized angle. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="degrees" />
    </Parameters>
  </Export>
  <Export name="WrapRadians" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Normalizes a angle into the range of 0-2PI.

/// </summary>

/// <param name="radians"> The source angle. </param>

/// <returns> The normalized angle. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="radians" />
    </Parameters>
  </Export>
  <Export name="RoundToPlace" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Rounds a value to a amount of places after the decimal point.

/// </summary>

/// <param name="value"> The value to round. </param>

/// <param name="place"> How many places after the decimal to round to. </param>

/// <returns> The rounded value. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="value" />
      <Parameter type="int32_t" name="place" />
    </Parameters>
  </Export>
  <Export name="Deadband" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Used to floor the value if less than the min.

/// </summary>

/// <param name="min"> The minimum value. </param>

/// <param name="value"> The value. </param>

/// <returns> Returns a value with deadband applied. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="min" />
      <Parameter type="float" name="value" />
    </Parameters>
  </Export>
  <Export name="AlmostEqual" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Checks if two values are almost equal.

/// </summary>

/// <param name="a"> The first value. </param>

/// <param name="b"> The second value. </param>

/// <param name="eps"> EPS is the measure of equality. </param>

/// <returns> If both are almost equal. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="a" />
      <Parameter type="float" name="b" />
      <Parameter type="float" name="eps" />
    </Parameters>
  </Export>
  <Export name="SmoothDamp" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gradually changes a value to a target.

/// </summary>

/// <param name="current"> The current value. </param>

/// <param name="target"> The target value. </param>

/// <param name="rate"> The rate to go from current to the target. </param>

/// <returns> The changed value. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="current" />
      <Parameter type="float" name="target" />
      <Parameter type="float" name="rate" />
    </Parameters>
  </Export>
  <Export name="Lerp" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Lerps two values by a factor.

/// </summary>

/// <param name="a"> The first value. </param>

/// <param name="b"> The second value. </param>

/// <param name="factor"> The factor value. </param>

/// <returns> Returns a lerped value. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="a" />
      <Parameter type="float" name="b" />
      <Parameter type="float" name="factor" />
    </Parameters>
  </Export>
  <Export name="Interpolate" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Interpolates two values by a factor using linear interpolation.

/// </summary>

/// <param name="a"> The first value. </param>

/// <param name="b"> The second value. </param>

/// <param name="blend"> The blend value. </param>

/// <returns> Returns a interpolated value. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="a" />
      <Parameter type="float" name="b" />
      <Parameter type="float" name="blend" />
    </Parameters>
  </Export>
  <Export name="InterpolateCosine" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Interpolates two values by a factor using cosine interpolation.

/// </summary>

/// <param name="a"> The first value. </param>

/// <param name="b"> The second value. </param>

/// <param name="blend"> The blend value. </param>

/// <returns> Returns a interpolated value. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="a" />
      <Parameter type="float" name="b" />
      <Parameter type="float" name="blend" />
    </Parameters>
  </Export>
  <Export name="SmoothlyStep" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// A calculation that steps smoothly between two edges.

/// </summary>

/// <param name="edge0"> The inner edge. </param>

/// <param name="edge1"> The outer edge. </param>

/// <param name="x"> The sample. </param>

/// <returns> The resulting stepped value. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="edge0" />
      <Parameter type="float" name="edge1" />
      <Parameter type="float" name="x" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Audio.hpp
  **
  ***************************************
  -->
  <Export name="Get" target="Common" source="Audio.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets this engine instance.

/// </summary>

/// <returns> The current module instance. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Display.hpp
  **
  ***************************************
  -->
  <Export name="Get" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets this engine instance.

/// </summary>

/// <returns> The current module instance. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetWidth" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the width of the window in pixels.

/// </summary>

/// <returns> The width of the window. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetWindowWidth" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the non-fullscreen width of the window in pixels.

/// </summary>

/// <returns> The width of the window. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetWidth" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the width of the window in pixels.

/// </summary>

/// <param name="width"> The new width in pixels. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="uint32_t" name="width" />
    </Parameters>
  </Export>
  <Export name="GetHeight" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the height of the window in pixels.

/// </summary>

/// <returns> The height of the window. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetWindowHeight" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the non-fullscreen height of the window in pixels.

/// </summary>

/// <returns> The height of the window. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetHeight" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the height of the window in pixels.

/// </summary>

/// <param name="height"> The new height in pixels. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="uint32_t" name="height" />
    </Parameters>
  </Export>
  <Export name="GetAspectRatio" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the aspect ratio between the windows width and height.

/// </summary>

/// <returns> The aspect ratio. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetDimensions" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the dimensions of the window in pixels.

/// </summary>

/// <returns> The dimension of the window. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetDimensions" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the window size to a new size.

/// </summary>

/// <param name="width"> The new width in pixels. </param>

/// <param name="height"> The new height in pixels. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="uint32_t" name="width" />
      <Parameter type="uint32_t" name="height" />
    </Parameters>
  </Export>
  <Export name="SetDimensions" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the window size to a new size.

/// </summary>

/// <param name="size"> The new width in pixels. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2" name="size" />
    </Parameters>
  </Export>
  <Export name="GetPositionX" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the windows Y position in pixels.

/// </summary>

/// <returns> The windows x position. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetPositionY" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the windows Y position in pixels.

/// </summary>

/// <returns> The windows Y position. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetPosition" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the windows position in pixels.

/// </summary>

/// <returns> The dimension of the window. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetPosition" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the window position to a new position in pixels.

/// </summary>

/// <param name="x"> The new x position in pixels. </param>

/// <param name="y"> The new y position in pixels. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="uint32_t" name="x" />
      <Parameter type="uint32_t" name="y" />
    </Parameters>
  </Export>
  <Export name="SetPosition" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the window position to a new position in pixels.

/// </summary>

/// <param name="position"> The new position in pixels. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2" name="position" />
    </Parameters>
  </Export>
  <Export name="GetTitle" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the window's title.

/// </summary>

/// <returns> The window's title. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetTitle" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets window title

/// </summary>

/// <param name="title"> The new title. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="title" />
    </Parameters>
  </Export>
  <Export name="GetIcon" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the window's icon file.

/// </summary>

/// <returns> The window's icon file. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetIcon" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets window icon image.

/// </summary>

/// <param name="filename"> The new icon file. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="filename" />
    </Parameters>
  </Export>
  <Export name="IsAntialiasing" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if the window requests antialiased images.

/// </summary>

/// <returns> If using antialiased images. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetAntialiasing" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Requests the window to antialias.

/// </summary>

/// <param name="antialiasing"> If the window should antialias. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="bool" name="antialiasing" />
    </Parameters>
  </Export>
  <Export name="IsBorderless" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets weather the window is borderless or not.

/// </summary>

/// <returns> If the window is borderless. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetBorderless" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the window to be borderless.

/// </summary>

/// <param name="borderless"> Weather or not to be borderless. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="bool" name="borderless" />
    </Parameters>
  </Export>
  <Export name="IsResizable" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets weather the window is resizable or not.

/// </summary>

/// <returns> If the window is resizable. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetResizable" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the window to be resizable.

/// </summary>

/// <param name="resizable"> Weather or not to be resizable. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="bool" name="resizable" />
    </Parameters>
  </Export>
  <Export name="IsFloating" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets weather the window is floating or not, if floating the window will always display above other windows.

/// </summary>

/// <returns> If the window is floating. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetFloating" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the window to be floating.

/// </summary>

/// <param name="floating"> Weather or not to be floating. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="bool" name="floating" />
    </Parameters>
  </Export>
  <Export name="IsFullscreen" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets weather the window is fullscreen or not.

/// </summary>

/// <returns> Fullscreen or windowed. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetFullscreen" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the window to be fullscreen or windowed.

/// </summary>

/// <param name="fullscreen"> Weather or not to be fullscreen. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="bool" name="fullscreen" />
    </Parameters>
  </Export>
  <Export name="IsClosed" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if the window is closed.

/// </summary>

/// <returns> If the window is closed. </returns>
]]>
    </Description>
  </Export>
  <Export name="IsFocused" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if the window is selected.

/// </summary>

/// <returns> If the window is selected. </returns>
]]>
    </Description>
  </Export>
  <Export name="IsIconified" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the windows is minimized.

/// </summary>

/// <returns> If the window is minimized. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetIconified" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the window to be iconified (minimized).

/// </summary>

/// <param name="iconify"> If the window will be set as iconified. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="bool" name="iconify" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Events.hpp
  **
  ***************************************
  -->
  <Export name="Get" target="Common" source="Events.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets this engine instance.

/// </summary>

/// <returns> The current module instance. </returns>
]]>
    </Description>
  </Export>
  <Export name="AddEvent" target="Common" source="Events.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Adds an event to the listening list.

/// </summary>

/// <param name="event"> The event to add. </param>

/// <returns> The added event. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.IEvent" name="event" />
    </Parameters>
  </Export>
  <Export name="RemoveEvent" target="Common" source="Events.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Removes a event to the listening list.

/// </summary>

/// <param name="event"> The event to remove. </param>

/// <returns> If the event was removed. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.IEvent" name="event" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Frustum.hpp
  **
  ***************************************
  -->
  <Export name="Frustum" target="Common" source="Frustum.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new frustum.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Update" target="Common" source="Frustum.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Updates a frustum from the view and projection matrix.

/// </summary>

/// <param name="view"> The view matrix. </param>

/// <param name="projection"> The projection matrix. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Matrix4" name="view" />
      <Parameter type="global::Acid.Sharp.Matrix4" name="projection" />
    </Parameters>
  </Export>
  <Export name="PointInFrustum" target="Common" source="Frustum.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Is the point contained in the frustum?

/// </summary>

/// <param name="position"> The points position. </param>

/// <returns> True if contained, false if outside. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="position" />
    </Parameters>
  </Export>
  <Export name="SphereInFrustum" target="Common" source="Frustum.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Is the sphere contained in the frustum?

/// </summary>

/// <param name="position"> The points position. </param>

/// <param name="radius"> The spheres radius. </param>

/// <returns> True if contained, false if outside. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="position" />
      <Parameter type="float" name="radius" />
    </Parameters>
  </Export>
  <Export name="CubeInFrustum" target="Common" source="Frustum.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Is the cube contained partially in the frustum?

/// </summary>

/// <param name="min"> The point 1st position. </param>

/// <param name="max"> The point 2nd position. </param>

/// <returns> True if partially contained, false if outside. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="min" />
      <Parameter type="global::Acid.Sharp.Vector3" name="max" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Ray.hpp
  **
  ***************************************
  -->
  <Export name="Ray" target="Common" source="Ray.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new 3D ray.

/// </summary>

/// <param name="useMouse"> If the ray will use the mouse coords or to start from screenStart. </param>

/// <param name="screenStart"> If useMouse is false then this will be used as the rays start. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="bool" name="useMouse" />
      <Parameter type="global::Acid.Sharp.Vector2" name="screenStart" />
    </Parameters>
  </Export>
  <Export name="Update" target="Common" source="Ray.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Updates the ray to a new position.

/// </summary>

/// <param name="currentPosition"> The new position. </param>

/// <param name="currentPosition"> The mouses xy screen space position. </param>

/// <param name="viewMatrix"> The cameras view matrix. </param>

/// <param name="projectionMatrix"> The projection view matrix. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="currentPosition" />
      <Parameter type="global::Acid.Sharp.Vector2" name="mousePosition" />
      <Parameter type="global::Acid.Sharp.Matrix4" name="viewMatrix" />
      <Parameter type="global::Acid.Sharp.Matrix4" name="projectionMatrix" />
    </Parameters>
  </Export>
  <Export name="GetPointOnRay" target="Common" source="Ray.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets a point on the ray.

/// </summary>

/// <param name="distance"> Distance down the ray to sample. </param>

/// <returns> Returns the destination vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="distance" />
    </Parameters>
  </Export>
  <Export name="ConvertToScreenSpace" target="Common" source="Ray.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Converts a position from world space to screen space.

/// </summary>

/// <param name="position"> The position to convert. </param>

/// <returns> Returns the destination vector X and Y being screen space coords and Z being the distance to the camera. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="position" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Mouse.hpp
  **
  ***************************************
  -->
  <Export name="Get" target="Common" source="Mouse.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets this engine instance.

/// </summary>

/// <returns> The current module instance. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetCursorHidden" target="Common" source="Mouse.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets if the operating systems cursor is hidden whilst in the display.

/// </summary>

/// <param name="disabled"> If the system cursor should be disabled or hidden when not shown. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="bool" name="disabled" />
    </Parameters>
  </Export>
  <Export name="GetButton" target="Common" source="Mouse.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets whether or not a particular mouse button is currently pressed.

/// <p>Actions: WSI_ACTION_PRESS, WSI_ACTION_RELEASE, WSI_ACTION_REPEAT</p>

/// </summary>

/// <param name="mouseButton"> The mouse button to test. </param>

/// <returns> If the mouse button is currently pressed. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.MouseButton*" name="mouseButton" />
    </Parameters>
  </Export>
  <Export name="GetCustomMouse" target="Common" source="Mouse.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the mouses custom mouse file.

/// </summary>

/// <returns> The custom mouse file. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetCustomMouse" target="Common" source="Mouse.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the custom mouse file.

/// </summary>

/// <param name="filename"> The new custom mouse file. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="filename" />
    </Parameters>
  </Export>
  <Export name="GetPositionX" target="Common" source="Mouse.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the mouses screen x position.

/// </summary>

/// <returns> The mouses x position. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetPositionY" target="Common" source="Mouse.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the mouses screen y position.

/// </summary>

/// <returns> The mouses y position. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetPosition" target="Common" source="Mouse.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the mouse position.

/// </summary>

/// <param name="cursorX"> The x position in screenspace. </param>

/// <param name="cursorY"> The y position in screenspace. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="cursorX" />
      <Parameter type="float" name="cursorY" />
    </Parameters>
  </Export>
  <Export name="GetDeltaX" target="Common" source="Mouse.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the mouses delta x.

/// </summary>

/// <returns> The mouses delta x. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetDeltaY" target="Common" source="Mouse.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the mouses delta y.

/// </summary>

/// <returns> The mouses delta y. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetDeltaWheel" target="Common" source="Mouse.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the mouses wheel delta.

/// </summary>

/// <returns> The mouses wheel delta. </returns>
]]>
    </Description>
  </Export>
  <Export name="IsDisplaySelected" target="Common" source="Mouse.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if the display is selected.

/// </summary>

/// <returns> If the display is selected. </returns>
]]>
    </Description>
  </Export>
  <Export name="IsCursorDisabled" target="Common" source="Mouse.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// If the cursor is hidden, the mouse is the display locked if true.

/// </summary>

/// <returns> If the cursor is hidden. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** FileSystem.hpp
  **
  ***************************************
  -->
  <Export name="GetWorkingDirectory" target="Common" source="FileSystem.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the current working directory.

/// </summary>

/// <returns> If the working directory. </returns>
]]>
    </Description>
  </Export>
  <Export name="Exists" target="Common" source="FileSystem.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if a file exists.

/// </summary>

/// <param name="filename"> The filename. </param>

/// <returns> If the file exists. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="path" />
    </Parameters>
  </Export>
  <Export name="IsFile" target="Common" source="FileSystem.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if a path is a file exists.

/// </summary>

/// <param name="path"> The path. </param>

/// <returns> If the path is a file. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="path" />
    </Parameters>
  </Export>
  <Export name="IsDirectory" target="Common" source="FileSystem.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if a path is a directory exists.

/// </summary>

/// <param name="path"> The path. </param>

/// <returns> If the path is a directory. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="path" />
    </Parameters>
  </Export>
  <Export name="IsReadable" target="Common" source="FileSystem.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if a path is readable.

/// </summary>

/// <param name="path"> The path. </param>

/// <returns> If the path is readable. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="path" />
    </Parameters>
  </Export>
  <Export name="IsWriteable" target="Common" source="FileSystem.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if a path is writeable.

/// </summary>

/// <param name="path"> The path. </param>

/// <returns> If the path is writeable. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="path" />
    </Parameters>
  </Export>
  <Export name="Create" target="Common" source="FileSystem.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a path, will create folders and files.

/// </summary>

/// <param name="path"> The path. </param>

/// <returns> If the path was created. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="path" />
    </Parameters>
  </Export>
  <Export name="Delete" target="Common" source="FileSystem.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Deletes the last element in a path (file or directory).

/// </summary>

/// <param name="path"> The path. </param>

/// <returns> If the path was deleted. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="path" />
    </Parameters>
  </Export>
  <Export name="WriteTextFile" target="Common" source="FileSystem.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Writes to a text file from a string.

/// </summary>

/// <param name="filename"> The filename. </param>

/// <param name="data"> The text data. </param>

/// <returns> If the file was written to. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="filename" />
      <Parameter type="string" name="data" />
    </Parameters>
  </Export>
  <Export name="ClearFile" target="Common" source="FileSystem.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Clears the contents from a file.

/// </summary>

/// <param name="filename"> The filename. </param>

/// <returns> If the file was cleared. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="filename" />
    </Parameters>
  </Export>
  <Export name="ParentDirectory" target="Common" source="FileSystem.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the parent directory of a path.

/// </summary>

/// <param name="path"> The path to get the parent directory of. </param>

/// <returns> The parent directory. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="path" />
    </Parameters>
  </Export>
  <Export name="FileName" target="Common" source="FileSystem.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the file name from a path.

/// </summary>

/// <param name="path"> The path to get the name of. </param>

/// <returns> The file name. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="path" />
    </Parameters>
  </Export>
  <Export name="FileSuffix" target="Common" source="FileSystem.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the file suffix (extension) from a path.

/// </summary>

/// <param name="path"> The path to get the suffix of. </param>

/// <returns> The file suffix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="path" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** AxisButton.hpp
  **
  ***************************************
  -->
  <Export name="AxisButton" target="Common" source="AxisButton.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new axis button.

/// </summary>

/// <param name="negative"> When this button is down, the axis is negative. </param>

/// <param name="positive"> When this button is down, the axis is positive. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.IButton" name="negative" />
      <Parameter type="global::Acid.Sharp.IButton" name="positive" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Joysticks.hpp
  **
  ***************************************
  -->
  <Export name="Get" target="Common" source="Joysticks.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets this engine instance.

/// </summary>

/// <returns> The current module instance. </returns>
]]>
    </Description>
  </Export>
  <Export name="IsConnected" target="Common" source="Joysticks.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Determines if the joystick is connected

/// </summary>

/// <param name="port"> The joystick to check connection with. </param>

/// <returns> If the joystick is connected. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.JoystickPort*" name="port" />
    </Parameters>
  </Export>
  <Export name="GetName" target="Common" source="Joysticks.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the name of the joystick.

/// </summary>

/// <param name="port"> The joystick to get the name of. </param>

/// <returns> The joysticks name. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.JoystickPort*" name="port" />
    </Parameters>
  </Export>
  <Export name="GetButton" target="Common" source="Joysticks.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the whether a button on a joystick is pressed.

/// </summary>

/// <param name="port"> The joystick to get the button from. </param>

/// <param name="button"> The button of interest. </param>

/// <returns> Whether a button on a joystick is pressed. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.JoystickPort*" name="port" />
      <Parameter type="uint32_t" name="button" />
    </Parameters>
  </Export>
  <Export name="GetAxis" target="Common" source="Joysticks.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the value of a joysticks axis.

/// </summary>

/// <param name="port"> The joystick to get the axis from. </param>

/// <param name="axis"> The axis of interest. </param>

/// <returns> The value of the joystick's axis. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.JoystickPort*" name="port" />
      <Parameter type="uint32_t" name="axis" />
    </Parameters>
  </Export>
  <Export name="GetCountButtons" target="Common" source="Joysticks.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the number of buttons the joystick offers.

/// </summary>

/// <param name="port"> The joystick to the the button count from. </param>

/// <returns> The number of buttons the joystick offers. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.JoystickPort*" name="port" />
    </Parameters>
  </Export>
  <Export name="GetCountAxes" target="Common" source="Joysticks.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the number of axes the joystick offers.

/// </summary>

/// <param name="port"> The joystick to the the axis count from. </param>

/// <returns> The number of axes the joystick offers. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.JoystickPort*" name="port" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Keyboard.hpp
  **
  ***************************************
  -->
  <Export name="Get" target="Common" source="Keyboard.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets this engine instance.

/// </summary>

/// <returns> The current module instance. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetKey" target="Common" source="Keyboard.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets whether or not a particular key is currently pressed.

/// <p>Actions: WSI_ACTION_PRESS, WSI_ACTION_RELEASE, WSI_ACTION_REPEAT</p>

/// </summary>

/// <param name="key"> The key to test. </param>

/// <returns> If the key is currently pressed. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Key*" name="key" />
    </Parameters>
  </Export>
  <Export name="GetChar" target="Common" source="Keyboard.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the current user input, ASCII Dec value.

/// </summary>

/// <returns> The current keyboard char. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Fog.hpp
  **
  ***************************************
  -->
  <Export name="Fog" target="Common" source="Fog.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Fog.

/// </summary>

/// <param name="colour"> The colour of the Fog. </param>

/// <param name="density"> How dense the Fog will be. </param>

/// <param name="gradient"> The gradient of the Fog. </param>

/// <param name="lowerLimit"> At what height will the skybox Fog begin to appear. </param>

/// <param name="upperLimit"> At what height will there be skybox no Fog. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Colour" name="colour" />
      <Parameter type="float" name="density" />
      <Parameter type="float" name="gradient" />
      <Parameter type="float" name="lowerLimit" />
      <Parameter type="float" name="upperLimit" />
    </Parameters>
  </Export>
  <Export name="Fog" target="Common" source="Fog.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Fog.

/// </summary>

/// <param name="source"> Creates this fog out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Fog" name="source" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Light.hpp
  **
  ***************************************
  -->
  <Export name="Light" target="Common" source="Light.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new point light.

/// </summary>

/// <param name="colour"> The colour of the light. </param>

/// <param name="radius"> How far the light will have influence (-1 sets this to a directional light). </param>

/// <param name="localOffset"> The parent offset of the light. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Colour" name="colour" />
      <Parameter type="float" name="radius" />
      <Parameter type="global::Acid.Sharp.Vector3" name="localOffset" />
    </Parameters>
  </Export>
  <Export name="Light" target="Common" source="Light.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new point light from a source object.

/// </summary>

/// <param name="source"> The source light object. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Light" name="source" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** SmoothFloat.hpp
  **
  ***************************************
  -->
  <Export name="SmoothFloat" target="Common" source="SmoothFloat.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new smooth float.

/// </summary>

/// <param name="initialValue"> The initial value. </param>

/// <param name="agility"> The agility for increasing actual. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="initialValue" />
      <Parameter type="float" name="agility" />
    </Parameters>
  </Export>
  <Export name="Update" target="Common" source="SmoothFloat.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Updates the driver with the passed time.

/// </summary>

/// <param name="delta"> The time between the last update. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Time" name="delta" />
    </Parameters>
  </Export>
  <Export name="SetTarget" target="Common" source="SmoothFloat.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the target for the smooth float.

/// </summary>

/// <param name="target"> The new target. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="target" />
    </Parameters>
  </Export>
  <Export name="GetTarget" target="Common" source="SmoothFloat.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the smooth floats current target.

/// </summary>

/// <returns> The target. </returns>
]]>
    </Description>
  </Export>
  <Export name="IncreaseTarget" target="Common" source="SmoothFloat.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Increases the smooth floats target.

/// </summary>

/// <param name="increase"> How much to increase the target by. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="increase" />
    </Parameters>
  </Export>
  <Export name="Get" target="Common" source="SmoothFloat.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the currently calculated value.

/// </summary>

/// <returns> The calculated value. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Matrix2.hpp
  **
  ***************************************
  -->
  <Export name="Matrix2" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Matrix2. The matrix is initialised to the identity.

/// </summary>

/// <param name="diagonal"> The value set to the diagonals. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="diagonal" />
    </Parameters>
  </Export>
  <Export name="Matrix2" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Matrix2.

/// </summary>

/// <param name="source"> Creates this matrix out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Matrix2" name="source" />
    </Parameters>
  </Export>
  <Export name="Matrix2" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Matrix2.

/// </summary>

/// <param name="source"> Creates this matrix out of a 4 element array. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float[]" name="source" />
    </Parameters>
  </Export>
  <Export name="Matrix2" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Matrix2.

/// </summary>

/// <param name="source"> Creates this matrix out of a 2 vector array. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2[]" name="source" />
    </Parameters>
  </Export>
  <Export name="Add" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Adds this matrix to another matrix.

/// </summary>

/// <param name="other"> The other matrix. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Matrix2" name="other" />
    </Parameters>
  </Export>
  <Export name="Subtract" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Subtracts this matrix to another matrix.

/// </summary>

/// <param name="other"> The other matrix. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Matrix2" name="other" />
    </Parameters>
  </Export>
  <Export name="Multiply" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Multiplies this matrix by another matrix.

/// </summary>

/// <param name="other"> The other matrix. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Matrix2" name="other" />
    </Parameters>
  </Export>
  <Export name="Divide" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Divides this matrix by another matrix.

/// </summary>

/// <param name="other"> The other matrix. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Matrix2" name="other" />
    </Parameters>
  </Export>
  <Export name="Transform" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Transforms this matrix by a vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Scale" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Scales this matrix by a vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Negate" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Inverts this matrix.

/// </summary>

/// <returns> The inverted matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="Invert" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Negates this matrix.

/// </summary>

/// <returns> The negated matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="Transpose" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Transposes this matrix.

/// </summary>

/// <returns> The transposed matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="Determinant" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Takes the determinant of this matrix.

/// </summary>

/// <returns> The determinant. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetSubmatrix" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the submatrix of this matrix.

/// </summary>

/// <returns> The submatrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="int32_t" name="row" />
      <Parameter type="int32_t" name="col" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Matrix3.hpp
  **
  ***************************************
  -->
  <Export name="Matrix3" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Matrix3. The matrix is initialised to the identity.

/// </summary>

/// <param name="diagonal"> The value set to the diagonals. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="diagonal" />
    </Parameters>
  </Export>
  <Export name="Matrix3" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Matrix3.

/// </summary>

/// <param name="source"> Creates this matrix out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Matrix3" name="source" />
    </Parameters>
  </Export>
  <Export name="Matrix3" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Matrix3.

/// </summary>

/// <param name="source"> Creates this matrix out of a 9 element array. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float[]" name="source" />
    </Parameters>
  </Export>
  <Export name="Matrix3" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Matrix3.

/// </summary>

/// <param name="source"> Creates this matrix out of a 3 vector array. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3[]" name="source" />
    </Parameters>
  </Export>
  <Export name="Add" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Adds this matrix to another matrix.

/// </summary>

/// <param name="other"> The other matrix. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Matrix3" name="other" />
    </Parameters>
  </Export>
  <Export name="Subtract" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Subtracts this matrix to another matrix.

/// </summary>

/// <param name="other"> The other matrix. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Matrix3" name="other" />
    </Parameters>
  </Export>
  <Export name="Multiply" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Multiplies this matrix by another matrix.

/// </summary>

/// <param name="other"> The other matrix. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Matrix3" name="other" />
    </Parameters>
  </Export>
  <Export name="Multiply" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Multiplies this matrix by a vector.

/// </summary>

/// <param name="other"> The vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Divide" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Divides this matrix by another matrix.

/// </summary>

/// <param name="other"> The other matrix. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Matrix3" name="other" />
    </Parameters>
  </Export>
  <Export name="Transform" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Transforms this matrix by a vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Scale" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Scales this matrix by a vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Negate" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Inverts this matrix.

/// </summary>

/// <returns> The inverted matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="Invert" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Negates this matrix.

/// </summary>

/// <returns> The negated matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="Transpose" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Transposes this matrix.

/// </summary>

/// <returns> The transposed matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="Determinant" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Takes the determinant of this matrix.

/// </summary>

/// <returns> The determinant. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetSubmatrix" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the submatrix of this matrix.

/// </summary>

/// <returns> The submatrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="int32_t" name="row" />
      <Parameter type="int32_t" name="col" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** DriverBounce.hpp
  **
  ***************************************
  -->
  <Export name="DriverBounce" target="Common" source="DriverBounce.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new sine wave driver.

/// </summary>

/// <param name="start"> The start value. </param>

/// <param name="end"> The end value. </param>

/// <param name="length"> The length between two waves. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="start" />
      <Parameter type="float" name="end" />
      <Parameter type="global::Acid.Sharp.Time" name="length" />
    </Parameters>
  </Export>
  <Export name="GetStart" target="Common" source="DriverBounce.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the start time.

/// </summary>

/// <returns> The start time. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetStart" target="Common" source="DriverBounce.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the start time.

/// </summary>

/// <param name="start"> The new start time. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="start" />
    </Parameters>
  </Export>
  <Export name="GetEnd" target="Common" source="DriverBounce.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the end time.

/// </summary>

/// <returns> The ebd time. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetEnd" target="Common" source="DriverBounce.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the end time.

/// </summary>

/// <param name="end"> The new end time. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="end" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** DriverConstant.hpp
  **
  ***************************************
  -->
  <Export name="DriverConstant" target="Common" source="DriverConstant.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new constant driver.

/// </summary>

/// <param name="constant"> The constant value. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="constant" />
    </Parameters>
  </Export>
  <Export name="GetConstant" target="Common" source="DriverConstant.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the constant.

/// </summary>

/// <returns> The constant. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetConstant" target="Common" source="DriverConstant.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the constant.

/// </summary>

/// <param name="constant"> The new constant. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="constant" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** DriverFade.hpp
  **
  ***************************************
  -->
  <Export name="DriverFade" target="Common" source="DriverFade.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new fade driver.

/// </summary>

/// <param name="start"> The fade start interval (0.0-1.0). </param>

/// <param name="end"> The fade end interval (0.0-1.0). </param>

/// <param name="peak"> The peak value. </param>

/// <param name="length"> The time taken to get to the end. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="start" />
      <Parameter type="float" name="end" />
      <Parameter type="float" name="peak" />
      <Parameter type="global::Acid.Sharp.Time" name="length" />
    </Parameters>
  </Export>
  <Export name="GetStart" target="Common" source="DriverFade.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the start interval.

/// </summary>

/// <returns> The start interval. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetStart" target="Common" source="DriverFade.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the start interval (0.0-1.0).

/// </summary>

/// <param name="start"> The new start interval. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="start" />
    </Parameters>
  </Export>
  <Export name="GetEnd" target="Common" source="DriverFade.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the end interval.

/// </summary>

/// <returns> The end interval. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetEnd" target="Common" source="DriverFade.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the end interval (0.0-1.0).

/// </summary>

/// <param name="end"> The new end interval. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="end" />
    </Parameters>
  </Export>
  <Export name="GetPeak" target="Common" source="DriverFade.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the peak value.

/// </summary>

/// <returns> The peak value. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetPeak" target="Common" source="DriverFade.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the peak value.

/// </summary>

/// <param name="peak"> The new peak value. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="peak" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** DriverLinear.hpp
  **
  ***************************************
  -->
  <Export name="DriverLinear" target="Common" source="DriverLinear.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new linear driver.

/// </summary>

/// <param name="startValue"> The start value. </param>

/// <param name="endValue"> The end value. </param>

/// <param name="length"> The time to go between values. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="startValue" />
      <Parameter type="float" name="endValue" />
      <Parameter type="global::Acid.Sharp.Time" name="length" />
    </Parameters>
  </Export>
  <Export name="GetStart" target="Common" source="DriverLinear.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the start time.

/// </summary>

/// <returns> The start time. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetStart" target="Common" source="DriverLinear.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the start time.

/// </summary>

/// <param name="start"> The new start time. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="start" />
    </Parameters>
  </Export>
  <Export name="GetEnd" target="Common" source="DriverLinear.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the end time.

/// </summary>

/// <returns> The ebd time. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetEnd" target="Common" source="DriverLinear.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the end time.

/// </summary>

/// <param name="end"> The new end time. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="end" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** DriverSinwave.hpp
  **
  ***************************************
  -->
  <Export name="DriverSinwave" target="Common" source="DriverSinwave.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new sine wave driver.

/// </summary>

/// <param name="min"> The min value. </param>

/// <param name="max"> The max value. </param>

/// <param name="length"> The length between two waves. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="min" />
      <Parameter type="float" name="max" />
      <Parameter type="global::Acid.Sharp.Time" name="length" />
    </Parameters>
  </Export>
  <Export name="GetMin" target="Common" source="DriverSinwave.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the min value.

/// </summary>

/// <returns> The min value. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetMin" target="Common" source="DriverSinwave.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the min value.

/// </summary>

/// <param name="min"> The new min value. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="min" />
    </Parameters>
  </Export>
  <Export name="GetMax" target="Common" source="DriverSinwave.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the max value.

/// </summary>

/// <returns> The max value. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetMax" target="Common" source="DriverSinwave.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the max value.

/// </summary>

/// <param name="max"> The new max value. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="max" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** DriverSlide.hpp
  **
  ***************************************
  -->
  <Export name="DriverSlide" target="Common" source="DriverSlide.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new slide driver.

/// </summary>

/// <param name="start"> The start value. </param>

/// <param name="end"> The end value. </param>

/// <param name="length"> The time to get to the end value. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="start" />
      <Parameter type="float" name="end" />
      <Parameter type="global::Acid.Sharp.Time" name="length" />
    </Parameters>
  </Export>
  <Export name="GetStart" target="Common" source="DriverSlide.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the start time.

/// </summary>

/// <returns> The start time. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetStart" target="Common" source="DriverSlide.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the start time.

/// </summary>

/// <param name="start"> The new start time. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="start" />
    </Parameters>
  </Export>
  <Export name="GetEnd" target="Common" source="DriverSlide.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the end time.

/// </summary>

/// <returns> The end time. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetEnd" target="Common" source="DriverSlide.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the end time.

/// </summary>

/// <param name="end"> The new end time. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="end" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Socket.hpp
  **
  ***************************************
  -->
  <Export name="CreateAddress" target="Common" source="Socket.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Create an internal sockaddr_in address.

/// </summary>

/// <param name="address"> Target address. </param>

/// <param name="port"> Target port. </param>

/// <returns> sockaddr_in ready to be used by socket functions. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="uint32_t" name="address" />
      <Parameter type="ushort" name="port" />
    </Parameters>
  </Export>
  <Export name="InvalidSocketHandle" target="Common" source="Socket.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Return the value of the invalid socket.

/// </summary>

/// <returns> Special value of the invalid socket. </returns>
]]>
    </Description>
  </Export>
  <Export name="CloseSocketHandle" target="Common" source="Socket.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Close and destroy a socket.

/// </summary>

/// <param name="sock"> Handle of the socket to close. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="Acid.Sharp::SocketHandle" name="sock" />
    </Parameters>
  </Export>
  <Export name="SetHandleBlocking" target="Common" source="Socket.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Set a socket as blocking or non-blocking.

/// </summary>

/// <param name="sock"> Handle of the socket. </param>

/// <param name="block"> New blocking state of the socket. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="Acid.Sharp::SocketHandle" name="sock" />
      <Parameter type="bool" name="block" />
    </Parameters>
  </Export>
  <Export name="GetErrorStatus" target="Common" source="Socket.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Get the last socket error status.

/// </summary>

/// <returns> Status corresponding to the last socket error. </returns>
]]>
    </Description>
  </Export>
  <Export name="IsBlocking" target="Common" source="Socket.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Tell whether the socket is in blocking or non-blocking mode.

/// </summary>

/// <returns> True if the socket is blocking, false otherwise. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetBlocking" target="Common" source="Socket.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Set the blocking state of the socket.

/// In blocking mode, calls will not return until they have completed their task.

/// For example, a call to Receive in blocking mode won't return until some data was actually received.

/// In non-blocking mode, calls will always return immediately, using the return code to signal

/// whether there was data available or not. By default, all sockets are blocking.

/// </summary>

/// <param name="blocking"> True to set the socket as blocking, false for non-blocking. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="bool" name="blocking" />
    </Parameters>
  </Export>
  <Export name="Socket" target="Common" source="Socket.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Default constructor.

/// This constructor can only be accessed by derived classes.

/// </summary>

/// <param name="type"> Type of the socket (TCP or UDP). </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.SocketType" name="type" />
    </Parameters>
  </Export>
  <Export name="GetHandle" target="Common" source="Socket.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Return the internal handle of the socket.

/// The returned handle may be invalid if the socket was not created yet (or already destroyed).

/// This function can only be accessed by derived classes.

/// </summary>

/// <returns> The internal (OS-specific) handle of the socket. </returns>
]]>
    </Description>
  </Export>
  <Export name="Create" target="Common" source="Socket.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Create the internal representation of the socket.

/// This function can only be accessed by derived classes.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Create" target="Common" source="Socket.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Create the internal representation of the socket from a socket handle.

/// This function can only be accessed by derived classes.

/// </summary>

/// <param name="handle"> OS-specific handle of the socket to wrap. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="Acid.Sharp::SocketHandle" name="handle" />
    </Parameters>
  </Export>
  <Export name="Close" target="Common" source="Socket.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Close the socket gracefully.

/// This function can only be accessed by derived classes.

/// </summary>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** TcpSocket.hpp
  **
  ***************************************
  -->
  <Export name="TcpSocket" target="Common" source="TcpSocket.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Default constructor.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="GetLocalPort" target="Common" source="TcpSocket.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Get the port to which the socket is bound locally. If the socket is not connected, this function returns 0.

/// </summary>

/// <returns> Port to which the socket is bound. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetRemoteAddress" target="Common" source="TcpSocket.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Get the address of the connected peer.

/// It the socket is not connected, this function returns IpAddress::NONE.

/// </summary>

/// <returns> Address of the remote peer. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetRemotePort" target="Common" source="TcpSocket.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Get the port of the connected peer to which the socket is connected.

/// If the socket is not connected, this function returns 0.

/// </summary>

/// <returns> Remote port to which the socket is connected. </returns>
]]>
    </Description>
  </Export>
  <Export name="Connect" target="Common" source="TcpSocket.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Connect the socket to a remote peer.

/// In blocking mode, this function may take a while, especially if the remote peer is not reachable.

/// The last parameter allows you to stop trying to connect after a given timeout.

/// If the socket is already connected, the connection is forcibly disconnected before attempting to connect again.

/// </summary>

/// <param name="remoteAddress"> Address of the remote peer. </param>

/// <param name="remotePort"> Port of the remote peer. </param>

/// <param name="timeout"> Optional maximum time to wait. </param>

/// <returns> Status code. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.IpAddress" name="remoteAddress" />
      <Parameter type="ushort" name="remotePort" />
      <Parameter type="global::Acid.Sharp.Time" name="timeout" />
    </Parameters>
  </Export>
  <Export name="Disconnect" target="Common" source="TcpSocket.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Disconnect the socket from its remote peer.

/// This function gracefully closes the connection. If the socket is not connected, this function has no effect.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Send" target="Common" source="TcpSocket.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Send raw data to the remote peer.

/// To be able to handle partial sends over non-blocking sockets,

/// use the send(const void*, std::size_t, std::size_t&) overload instead.

/// This function will fail if the socket is not connected.

/// </summary>

/// <param name="data"> Pointer to the sequence of bytes to send. </param>

/// <param name="size"> Number of bytes to send. </param>

/// <returns> Status code. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="IntPtr" name="data" />
      <Parameter type="size_t" name="size" />
    </Parameters>
  </Export>
  <Export name="Send" target="Common" source="TcpSocket.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Send raw data to the remote peer. This function will fail if the socket is not connected.

/// </summary>

/// <param name="data"> Pointer to the sequence of bytes to send. </param>

/// <param name="size"> Number of bytes to send. </param>

/// <param name="sent"> The number of bytes sent will be written here. </param>

/// <returns> Status code. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="IntPtr" name="data" />
      <Parameter type="size_t" name="size" />
      <Parameter type="size_t" name="sent" />
    </Parameters>
  </Export>
  <Export name="Receive" target="Common" source="TcpSocket.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Receive raw data from the remote peer.

/// In blocking mode, this function will wait until some bytes are actually received.

/// This function will fail if the socket is not connected.

/// </summary>

/// <param name="data"> Pointer to the array to fill with the received bytes. </param>

/// <param name="size"> Maximum number of bytes that can be received. </param>

/// <param name="received"> This variable is filled with the actual number of bytes received. </param>

/// <returns> Status code. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="IntPtr" name="data" />
      <Parameter type="size_t" name="size" />
      <Parameter type="size_t" name="received" />
    </Parameters>
  </Export>
  <Export name="Send" target="Common" source="TcpSocket.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Send a formatted packet of data to the remote peer.

/// In non-blocking mode, if this function returns SOCKET_STATUS_PARTIAL, you \em must retry sending the same unmodified

/// packet before sending anything else in order to guarantee the packet arrives at the remote peer uncorrupted.

/// This function will fail if the socket is not connected.

/// </summary>

/// <param name="packet"> Packet to send. </param>

/// <returns> Status code. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Packet" name="packet" />
    </Parameters>
  </Export>
  <Export name="Receive" target="Common" source="TcpSocket.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Receive a formatted packet of data from the remote peer.

/// In blocking mode, this function will wait until the whole packet has been received.

/// This function will fail if the socket is not connected.

/// </summary>

/// <param name="packet"> Packet to fill with the received data. </param>

/// <returns> Status code. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Packet" name="packet" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** IpAddress.hpp
  **
  ***************************************
  -->
  <Export name="IpAddress" target="Common" source="IpAddress.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Default constructor, this constructor creates an empty (invalid) address.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="IpAddress" target="Common" source="IpAddress.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Construct the address from a string.

/// Here \a address can be either a decimal address (ex: "192.168.1.56") or a network name (ex: "localhost").

/// </summary>

/// <param name="address"> IP address or network name. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="address" />
    </Parameters>
  </Export>
  <Export name="IpAddress" target="Common" source="IpAddress.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Construct the address from 4 bytes.

/// Calling IpAddress(a, b, c, d) is equivalent to calling IpAddress("a.b.c.d"),

/// but safer as it doesn't have to parse a string to get the address components.

/// </summary>

/// <param name="byte0"> First byte of the address. </param>

/// <param name="byte1"> Second byte of the address. </param>

/// <param name="byte2"> Third byte of the address. </param>

/// <param name="byte3"> Fourth byte of the address. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="uint8_t" name="byte0" />
      <Parameter type="uint8_t" name="byte1" />
      <Parameter type="uint8_t" name="byte2" />
      <Parameter type="uint8_t" name="byte3" />
    </Parameters>
  </Export>
  <Export name="IpAddress" target="Common" source="IpAddress.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Construct the address from a 32-bits integer.

///

/// This constructor uses the internal representation of the address directly.

/// It should be used for optimization purposes, and only if you got that representation from IpAddress::toInteger().

/// </summary>

/// <param name="address"> 4 bytes of the address packed into a 32-bits integer. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="uint32_t" name="address" />
    </Parameters>
  </Export>
  <Export name="ToString" target="Common" source="IpAddress.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Get a string representation of the address.

/// The returned string is the decimal representation of the IP address (like "192.168.1.56"), even if it was constructed from a host name.

/// </summary>

/// <returns> String representation of the address. </returns>
]]>
    </Description>
  </Export>
  <Export name="ToInteger" target="Common" source="IpAddress.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Get an integer representation of the address

///

/// The returned number is the internal representation of the

/// address, and should be used for optimization purposes only

/// (like sending the address through a socket).

/// The integer produced by this function can then be converted

/// back to a IpAddress with the proper constructor.

/// </summary>

/// <returns> 32-bits unsigned integer representation of the address. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetLocalAddress" target="Common" source="IpAddress.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Get the computer's local address.

/// The local address is the address of the computer from the LAN point of view,

/// i.e. something like 192.168.1.56. It is meaningful only for communications over the local network.

/// Unlike getPublicAddress, this function is fast and may be used safely anywhere.

/// </summary>

/// <returns> Local IP address of the computer. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetPublicAddress" target="Common" source="IpAddress.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Get the computer's public address

///

/// The public address is the address of the computer from the internet point of view, i.e. something like 89.54.1.169.

/// It is necessary for communications over the world wide web. The only way to get a public address is to ask it to a

/// distant website; as a consequence, this function depends on both your network connection and the server, and may be

/// very slow. You should use it as few as possible. Because this function depends on the network connection and on a distant

/// server, you may use a time limit if you don't want your program to be possibly stuck waiting in case there is a problem;

/// this limit is deactivated by default.

/// </summary>

/// <param name="timeout"> Maximum time to wait. </param>

/// <returns> Public IP address of the computer. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Time" name="timeout" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Ftp.hpp
  **
  ***************************************
  -->
  <Export name="Connect" target="Common" source="Ftp.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Connects to the specified FTP server.

/// The port has a default value of 21, which is the standard port used by the FTP protocol.

/// You shouldn't use a different value, unless you really know what you do.

/// This function tries to connect to the server so it may take a while to complete,

/// especially if the server is not reachable. To avoid blocking your application for too long,

/// you can use a timeout. The default value, Time::Zero, means that the system timeout will be

/// used (which is usually pretty long).

/// </summary>

/// <param name="server"> Name or address of the FTP server to connect to. </param>

/// <param name="port"> Port used for the connection. </param>

/// <param name="timeout"> Maximum time to wait. </param>

/// <returns> Server response to the request. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.IpAddress" name="server" />
      <Parameter type="ushort" name="port" />
      <Parameter type="global::Acid.Sharp.Time" name="timeout" />
    </Parameters>
  </Export>
  <Export name="Disconnect" target="Common" source="Ftp.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Close the connection with the server.

/// </summary>

/// <returns> Server response to the request. </returns>
]]>
    </Description>
  </Export>
  <Export name="Login" target="Common" source="Ftp.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Log in using an anonymous account.

/// Logging in is mandatory after connecting to the server.

/// Users that are not logged in cannot perform any operation.

/// </summary>

/// <returns> Server response to the request. </returns>
]]>
    </Description>
  </Export>
  <Export name="Login" target="Common" source="Ftp.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Log in using a username and a password.

/// Logging in is mandatory after connecting to the server.

/// Users that are not logged in cannot perform any operation.

/// </summary>

/// <param name="name"> User name. </param>

/// <param name="password"> Password. </param>

/// <returns> Server response to the request. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="name" />
      <Parameter type="string" name="password" />
    </Parameters>
  </Export>
  <Export name="KeepAlive" target="Common" source="Ftp.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Send a null command to keep the connection alive.

/// This command is useful because the server may close the connection automatically if no command is sent.

/// </summary>

/// <returns> Server response to the request. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetWorkingDirectory" target="Common" source="Ftp.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Get the current working directory.

/// The working directory is the root path for subsequent operations involving directories and/or filenames.

/// </summary>

/// <returns> Server response to the request. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetDirectoryListing" target="Common" source="Ftp.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Get the contents of the given directory.

/// This function retrieves the sub-directories and files contained in the given directory. It is not recursive.

/// The \a directory parameter is relative to the current working directory.

/// </summary>

/// <param name="directory"> Directory to list. </param>

/// <returns> Server response to the request. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="directory" />
    </Parameters>
  </Export>
  <Export name="ChangeDirectory" target="Common" source="Ftp.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Change the current working directory.

/// The new directory must be relative to the current one.

/// </summary>

/// <param name="directory"> New working directory. </param>

/// <returns> Server response to the request. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="directory" />
    </Parameters>
  </Export>
  <Export name="ParentDirectory" target="Common" source="Ftp.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Go to the parent directory of the current one.

/// </summary>

/// <returns> Server response to the request. </returns>
]]>
    </Description>
  </Export>
  <Export name="CreateRemoteDirectory" target="Common" source="Ftp.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Create a new directory.

/// The new directory is created as a child of the current working directory.

/// </summary>

/// <param name="name"> Name of the directory to create. </param>

/// <returns> Server response to the request. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="name" />
    </Parameters>
  </Export>
  <Export name="DeleteRemoteDirectory" target="Common" source="Ftp.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Remove an existing directory

/// The directory to remove must be relative to the current working directory.

/// Use this function with caution, the directory will be removed permanently!

/// </summary>

/// <param name="name"> Name of the directory to remove. </param>

/// <returns> Server response to the request. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="name" />
    </Parameters>
  </Export>
  <Export name="RenameRemoteFile" target="Common" source="Ftp.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Rename an existing file.

/// The filenames must be relative to the current working directory.

/// </summary>

/// <param name="file"> File to rename. </param>

/// <param name="newName"> New name of the file. </param>

/// <returns> Server response to the request. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="file" />
      <Parameter type="string" name="newName" />
    </Parameters>
  </Export>
  <Export name="DeleteRemoteFile" target="Common" source="Ftp.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Remove an existing file.

/// The file name must be relative to the current working directory.

/// Use this function with caution, the file will be removed permanently!

/// </summary>

/// <param name="name"> File to remove. </param>

/// <returns> Server response to the request. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="name" />
    </Parameters>
  </Export>
  <Export name="Download" target="Common" source="Ftp.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Download a file from the server.

/// The filename of the distant file is relative to the current working directory of the server,

/// and the local destination path is relative to the current directory of your application.

/// If a file with the same filename as the distant file already exists in the local destination path,

/// it will be overwritten.

/// </summary>

/// <param name="remoteFile"> Filename of the distant file to download. </param>

/// <param name="localPath"> The directory in which to put the file on the local computer. </param>

/// <param name="mode"> Transfer mode. </param>

/// <returns> Server response to the request. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="remoteFile" />
      <Parameter type="string" name="localPath" />
      <Parameter type="global::Acid.Sharp.FtpTransferMode" name="mode" />
    </Parameters>
  </Export>
  <Export name="Upload" target="Common" source="Ftp.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Upload a file to the server.

/// The name of the local file is relative to the current working directory of your application,

/// and the remote path is relative to the current directory of the FTP server.

/// The append parameter controls whether the remote file is appended to or overwritten if it already exists.

/// </summary>

/// <param name="localFile"> Path of the local file to upload. </param>

/// <param name="remotePath"> The directory in which to put the file on the server. </param>

/// <param name="mode"> Transfer mode. </param>

/// <param name="append"> Pass true to append to or false to overwrite the remote file if it already exists. </param>

/// <returns> Server response to the request. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="localFile" />
      <Parameter type="string" name="remotePath" />
      <Parameter type="global::Acid.Sharp.FtpTransferMode" name="mode" />
      <Parameter type="bool" name="append" />
    </Parameters>
  </Export>
  <Export name="SendCommand" target="Common" source="Ftp.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Send a command to the FTP server.

/// While the most often used commands are provided as member functions in the Ftp class,

/// this method can be used to send any FTP command to the server.

/// If the command requires one or more parameters, they can be specified in \a parameter.

/// If the server returns information, you can extract it from the response using FtpResponse::GetFullMessage().

/// </summary>

/// <param name="command"> Command to send. </param>

/// <param name="parameter"> Command parameter. </param>

/// <returns> Server response to the request. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="command" />
      <Parameter type="string" name="parameter" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** FtpResponse.hpp
  **
  ***************************************
  -->
  <Export name="FtpResponse" target="Common" source="FtpResponse.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Default constructor, this constructor is used by the FTP client to build the response.

/// </summary>

/// <param name="code"> Response status code. </param>

/// <param name="message"> Response message. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.FtpResponseStatus" name="code" />
      <Parameter type="string" name="message" />
    </Parameters>
  </Export>
  <Export name="IsOk" target="Common" source="FtpResponse.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Check if the status code means a success.

/// This function is defined for convenience, it is equivalent to testing if the status code is < 400.

/// </summary>

/// <returns> True if the status is a success, false if it is a failure. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetStatus" target="Common" source="FtpResponse.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Get the status code of the response.

/// </summary>

/// <returns> Status code. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetFullMessage" target="Common" source="FtpResponse.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Get the full message contained in the response.

/// </summary>

/// <returns> The response message. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** HttpRequest.hpp
  **
  ***************************************
  -->
  <Export name="HttpRequest" target="Common" source="HttpRequest.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Default constructor, this constructor creates a GET request, with the root URI ("/") and an empty body.

/// </summary>

/// <param name="uri"> Target URI. </param>

/// <param name="method"> Method to use for the request. </param>

/// <param name="body"> Content of the request's body. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="uri" />
      <Parameter type="global::Acid.Sharp.HttpRequestMethod" name="method" />
      <Parameter type="string" name="body" />
    </Parameters>
  </Export>
  <Export name="SetField" target="Common" source="HttpRequest.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Set the value of a field.

/// The field is created if it doesn't exist. The name of the field is case-insensitive.

/// By default, a request doesn't contain any field (but the mandatory fields are added

/// later by the HTTP client when sending the request).

/// </summary>

/// <param name="field"> Name of the field to set. </param>

/// <param name="value"> Value of the field. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="field" />
      <Parameter type="string" name="value" />
    </Parameters>
  </Export>
  <Export name="SetMethod" target="Common" source="HttpRequest.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Set the request method.

/// See the Method enumeration for a complete list of all the available methods.

/// The method is HTTP_REQUEST_METHOD_GET by default.

/// </summary>

/// <param name="method"> Method to use for the request. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.HttpRequestMethod" name="method" />
    </Parameters>
  </Export>
  <Export name="SetUri" target="Common" source="HttpRequest.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Set the requested URI.

/// The URI is the resource (usually a web page or a file) that you want to get or post.

/// The URI is "/" (the root page) by default.

/// </summary>

/// <param name="uri"> URI to request, relative to the host. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="uri" />
    </Parameters>
  </Export>
  <Export name="SetHttpVersion" target="Common" source="HttpRequest.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Set the HTTP version for the request. The HTTP version is 1.0 by default.

/// </summary>

/// <param name="major"> Major HTTP version number. </param>

/// <param name="minor"> Minor HTTP version number. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="uint32_t" name="major" />
      <Parameter type="uint32_t" name="minor" />
    </Parameters>
  </Export>
  <Export name="SetBody" target="Common" source="HttpRequest.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Set the body of the request.

/// The body of a request is optional and only makes sense for POST requests.

/// It is ignored for all other methods. The body is empty by default.

/// </summary>

/// <param name="body"> Content of the body. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="body" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** HttpResponse.hpp
  **
  ***************************************
  -->
  <Export name="HttpResponse" target="Common" source="HttpResponse.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Default constructor, constructs an empty response.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="GetField" target="Common" source="HttpResponse.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Get the value of a field.

/// If the field \a field is not found in the response header, the empty string is returned.

/// This function uses case-insensitive comparisons.

/// </summary>

/// <param name="field"> Name of the field to get. </param>

/// <returns> Value of the field, or empty string if not found. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="field" />
    </Parameters>
  </Export>
  <Export name="GetStatus" target="Common" source="HttpResponse.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Get the response status code.

/// The status code should be the first thing to be checked after receiving a response,

/// it defines whether it is a success, a failure or anything else (see the Status enumeration).

/// </summary>

/// <returns> Status code of the response. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetMajorHttpVersion" target="Common" source="HttpResponse.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Get the major HTTP version number of the response.

/// </summary>

/// <returns> Major HTTP version number. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetMinorHttpVersion" target="Common" source="HttpResponse.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Get the minor HTTP version number of the response.

/// </summary>

/// <returns> Minor HTTP version number. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetBody" target="Common" source="HttpResponse.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Get the body of the response.

/// The body of a response may contain:

/// <ul>

/// <li>The requested page (for GET requests).</li>

/// <li>A response from the server (for POST requests).</li>

/// <li>Nothing (for HEAD requests).</li>

/// <li>An error message (in case of an error).</li>

/// </ul>

/// </summary>

/// <returns> The response body. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Http.hpp
  **
  ***************************************
  -->
  <Export name="Http" target="Common" source="Http.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Default constructor.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Http" target="Common" source="Http.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Construct the HTTP client with the target host.

/// This is equivalent to calling setHost(host, port).

/// The port has a default value of 0, which means that the HTTP client will use the

/// right port according to the protocol used (80 for HTTP).

/// You should leave it like this unless you really need a port other than the standard one, or use an unknown protocol.

/// </summary>

/// <param name="host"> Web server to connect to. </param>

/// <param name="port"> Port to use for connection. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="host" />
      <Parameter type="ushort" name="port" />
    </Parameters>
  </Export>
  <Export name="SetHost" target="Common" source="Http.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Set the target host.

/// This function just stores the host address and port, it doesn't actually connect to it until you send a request.

/// The port has a default value of 0, which means that the HTTP client will use the right port according to the

/// protocol used (80 for HTTP). You should leave it like this unless you really need a port other than the

/// standard one, or use an unknown protocol.

/// </summary>

/// <param name="host"> Web server to connect to. </param>

/// <param name="port"> Port to use for connection. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="host" />
      <Parameter type="ushort" name="port" />
    </Parameters>
  </Export>
  <Export name="SendRequest" target="Common" source="Http.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Send a HTTP request and return the server's response.

/// You must have a valid host before sending a request (see setHost).

/// Any missing mandatory header field in the request will be added with an appropriate value.

/// Warning: this function waits for the server's response and may not return instantly;

/// use a thread if you don't want to block your application, or use a timeout to limit the time to wait.

/// A value of Time::ZERO means that the client will use the system default timeout (which is usually pretty long).

/// </summary>

/// <param name="request"> Request to send. </param>

/// <param name="timeout"> Maximum time to wait. </param>

/// <returns> Server's response. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.HttpRequest" name="request" />
      <Parameter type="global::Acid.Sharp.Time" name="timeout" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Packet.hpp
  **
  ***************************************
  -->
  <Export name="Packet" target="Common" source="Packet.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Default constructor, creates an empty packet.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Append" target="Common" source="Packet.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Append data to the end of the packet.

/// </summary>

/// <param name="data"> Pointer to the sequence of bytes to append. </param>

/// <param name="sizeInBytes"> Number of bytes to append. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="IntPtr" name="data" />
      <Parameter type="size_t" name="sizeInBytes" />
    </Parameters>
  </Export>
  <Export name="Clear" target="Common" source="Packet.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Clear the packet, after calling Clear, the packet is empty.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="GetData" target="Common" source="Packet.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Get a pointer to the data contained in the packet.

/// Warning: the returned pointer may become invalid after  you append data to the packet,

/// therefore it should never be stored.

/// The return pointer is NULL if the packet is empty.

/// </summary>

/// <returns> Pointer to the data. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetDataSize" target="Common" source="Packet.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Get the size of the data contained in the packet.

/// This function returns the number of bytes pointed to by what getData returns.

/// </summary>

/// <returns> Data size, in bytes. </returns>
]]>
    </Description>
  </Export>
  <Export name="EndOfPacket" target="Common" source="Packet.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Tell if the reading position has reached the end of the packet.

/// This function is useful to know if there is some data left to be read, without actually reading it.

/// </summary>

/// <returns> True if all data was read, false otherwise. </returns>
]]>
    </Description>
  </Export>
  <Export name="OnSend" target="Common" source="Packet.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Called before the packet is sent over the network.

/// This function can be defined by derived classes to transform the data before it is sent;

/// this can be used for compression, encryption, etc.

/// The function must return a pointer to the modified data, as well as the number of bytes pointed.

/// The default implementation provides the packet's data without transforming it.

/// </summary>

/// <param name="size"> Variable to fill with the size of data to send. </param>

/// <returns> Pointer to the array of bytes to send. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="size_t" name="size" />
    </Parameters>
  </Export>
  <Export name="OnReceive" target="Common" source="Packet.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Called after the packet is received over the network.

/// This function can be defined by derived classes to transform the data after it is received;

/// this can be used for decompression, decryption, etc.

/// The function receives a pointer to the received data, and must fill the packet with the transformed bytes.

/// The default implementation fills the packet directly without transforming the data.

/// </summary>

/// <param name="data"> Pointer to the received bytes. </param>

/// <param name="size"> Number of bytes. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="IntPtr" name="data" />
      <Parameter type="size_t" name="size" />
    </Parameters>
  </Export>
  <Export name="CheckSize" target="Common" source="Packet.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Check if the packet can extract a given number of bytes.

/// This function updates accordingly the state of the packet.

/// </summary>

/// <param name="size"> Size to check. </param>

/// <returns> True if \a size bytes can be read from the packet. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="size_t" name="size" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** TcpListener.hpp
  **
  ***************************************
  -->
  <Export name="TcpListener" target="Common" source="TcpListener.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Default constructor.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="GetLocalPort" target="Common" source="TcpListener.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Get the port to which the socket is bound locally.

/// If the socket is not listening to a port, this function returns 0.

/// </summary>

/// <returns> Port to which the socket is bound. </returns>
]]>
    </Description>
  </Export>
  <Export name="Listen" target="Common" source="TcpListener.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Start listening for incoming connection attempts.

/// This function makes the socket start listening on the specified port, waiting for incoming connection attempts.

/// If the socket is already listening on a port when this function is called,

/// it will stop listening on the old port before starting to listen on the new port.

/// </summary>

/// <param name="port"> Port to listen on for incoming connection attempts. </param>

/// <param name="address"> Address of the interface to listen on. </param>

/// <returns> Status code. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="ushort" name="port" />
      <Parameter type="global::Acid.Sharp.IpAddress" name="address" />
    </Parameters>
  </Export>
  <Export name="Close" target="Common" source="TcpListener.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Stop listening and close the socket. This function gracefully stops the listener.

/// If the socket is not listening, this function has no effect.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Accept" target="Common" source="TcpListener.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Accept a new connection.

/// If the socket is in blocking mode, this function will not return until a connection is actually received.

/// </summary>

/// <param name="socket"> Socket that will hold the new connection. </param>

/// <returns> Status code. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.TcpSocket" name="socket" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** UdpSocket.hpp
  **
  ***************************************
  -->
  <Export name="UdpSocket" target="Common" source="UdpSocket.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Default constructor.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="GetLocalPort" target="Common" source="UdpSocket.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Get the port to which the socket is bound locally. If the socket is not bound to a port, this function returns 0.

/// </summary>

/// <returns> Port to which the socket is bound. </returns>
]]>
    </Description>
  </Export>
  <Export name="Bind" target="Common" source="UdpSocket.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Bind the socket to a specific port.

/// Binding the socket to a port is necessary for being able to receive data on that port.

/// You can use the special value Socket::AnyPort to tell the system to automatically pick an available port,

/// and then call getLocalPort to retrieve the chosen port.

/// Since the socket can only be bound to a single port at any given moment, if it is already bound when this function is called,

/// it will be unbound from the previous port before being bound to the new one.

/// </summary>

/// <param name="port"> Port to bind the socket to. </param>

/// <param name="address"> Address of the interface to bind to. </param>

/// <returns> Status code. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="ushort" name="port" />
      <Parameter type="global::Acid.Sharp.IpAddress" name="address" />
    </Parameters>
  </Export>
  <Export name="Unbind" target="Common" source="UdpSocket.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Unbind the socket from the local port to which it is bound.

/// The port that the socket was previously bound to is immediately made available to the operating system after this function is called.

/// This means that a subsequent call to bind() will be able to re-bind the port if no other process has done so in the mean time.

/// If the socket is not bound to a port, this function has no effect.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Send" target="Common" source="UdpSocket.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Send raw data to a remote peer.

/// Make sure that \a size is not greater than UdpSocket::MAX_DATAGRAM_SIZE, otherwise this function will fail and no data will be sent.

/// </summary>

/// <param name="data"> Pointer to the sequence of bytes to send. </param>

/// <param name="size"> Number of bytes to send. </param>

/// <param name="remoteAddress"> Address of the receiver. </param>

/// <param name="remotePort"> Port of the receiver to send the data to. </param>

/// <returns> Status code. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="IntPtr" name="data" />
      <Parameter type="size_t" name="size" />
      <Parameter type="global::Acid.Sharp.IpAddress" name="remoteAddress" />
      <Parameter type="ushort" name="remotePort" />
    </Parameters>
  </Export>
  <Export name="Receive" target="Common" source="UdpSocket.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Receive raw data from a remote peer.

/// In blocking mode, this function will wait until some bytes are actually received.

/// Be careful to use a buffer which is large enough for the data that you intend to receive,

/// if it is too small then an error will be returned and *all* the data will be lost.

/// </summary>

/// <param name="data"> Pointer to the array to fill with the received bytes. </param>

/// <param name="size"> Maximum number of bytes that can be received. </param>

/// <param name="received"> This variable is filled with the actual number of bytes received. </param>

/// <param name="remoteAddress"> Address of the peer that sent the data. </param>

/// <param name="remotePort"> Port of the peer that sent the data. </param>

/// <returns> Status code. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="IntPtr" name="data" />
      <Parameter type="size_t" name="size" />
      <Parameter type="size_t" name="received" />
      <Parameter type="global::Acid.Sharp.IpAddress" name="remoteAddress" />
      <Parameter type="ushort*" name="remotePort" />
    </Parameters>
  </Export>
  <Export name="Send" target="Common" source="UdpSocket.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Send a formatted packet of data to a remote peer.

/// Make sure that the packet size is not greater than UdpSocket::MAX_DATAGRAM_SIZE, otherwise this function will fail and no data will be sent.

/// </summary>

/// <param name="packet"> Packet to send. </param>

/// <param name="remoteAddress"> Address of the receiver. </param>

/// <param name="remotePort"> Port of the receiver to send the data to. </param>

/// <returns> Status code. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Packet" name="packet" />
      <Parameter type="global::Acid.Sharp.IpAddress" name="remoteAddress" />
      <Parameter type="ushort" name="remotePort" />
    </Parameters>
  </Export>
  <Export name="Receive" target="Common" source="UdpSocket.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Receive a formatted packet of data from a remote peer.

/// In blocking mode, this function will wait until the whole packet has been received.

/// </summary>

/// <param name="packet"> Packet to fill with the received data. </param>

/// <param name="remoteAddress"> Address of the peer that sent the data. </param>

/// <param name="remotePort"> Port of the peer that sent the data. </param>

/// <returns> Status code. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Packet" name="packet" />
      <Parameter type="global::Acid.Sharp.IpAddress" name="remoteAddress" />
      <Parameter type="ushort*" name="remotePort" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** ComponentRegister.hpp
  **
  ***************************************
  -->
  <Export name="ComponentRegister" target="Common" source="ComponentRegister.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new component register.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="DeregisterComponent" target="Common" source="ComponentRegister.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Deregisters a component.

/// </summary>

/// <param name="name"> The components name. </param>

/// <returns> If the component was deregistered. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="name" />
    </Parameters>
  </Export>
  <Export name="CreateComponent" target="Common" source="ComponentRegister.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new component from the register.

/// </summary>

/// <param name="name"> The component name to create. </param>

/// <returns> The new component. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="name" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Particles.hpp
  **
  ***************************************
  -->
  <Export name="Get" target="Common" source="Particles.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets this engine instance.

/// </summary>

/// <returns> The current module instance. </returns>
]]>
    </Description>
  </Export>
  <Export name="Clear" target="Common" source="Particles.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Clears all particles from the scene.

/// </summary>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Collider.hpp
  **
  ***************************************
  -->
  <Export name="Collider" target="Common" source="Collider.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new collider shape.

/// </summary>

/// <param name="localTransform"> The parent offset of the body. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Transform" name="localTransform" />
    </Parameters>
  </Export>
  <Export name="GetCollisionShape" target="Common" source="Collider.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the collision shape defined in this collider.

/// </summary>

/// <returns> The collision shape. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Rigidbody.hpp
  **
  ***************************************
  -->
  <Export name="Rigidbody" target="Common" source="Rigidbody.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new rigidbody.

/// </summary>

/// <param name="mass"> The mass of the object. </param>

/// <param name="friction"> The amount of surface friction. </param>

/// <param name="linearFactor"> How effected each axis (XYZ) will be to linear movement. </param>

/// <param name="angularFactor"> How effected each axis (XYZ) will be to angular movement. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="mass" />
      <Parameter type="float" name="friction" />
      <Parameter type="global::Acid.Sharp.Vector3" name="linearFactor" />
      <Parameter type="global::Acid.Sharp.Vector3" name="angularFactor" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** RendererRegister.hpp
  **
  ***************************************
  -->
  <Export name="AddRenderer" target="Common" source="RendererRegister.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Adds a renderer to this register.

/// </summary>

/// <param name="renderer"> The renderer to add. </param>

/// <returns> The added renderer. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.IRenderer" name="renderer" />
    </Parameters>
  </Export>
  <Export name="RemoveRenderer" target="Common" source="RendererRegister.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Removes a renderer from this register.

/// </summary>

/// <param name="renderer"> The renderer to remove. </param>

/// <returns> If the renderer was removed. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.IRenderer" name="renderer" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Renderer.hpp
  **
  ***************************************
  -->
  <Export name="Get" target="Common" source="Renderer.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets this engine instance.

/// </summary>

/// <returns> The current module instance. </returns>
]]>
    </Description>
  </Export>
  <Export name="CaptureScreenshot" target="Common" source="Renderer.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Takes a screenshot of the current image of the display and saves it into a image file.

/// </summary>

///	<param name="filename"> The file to save the screenshot to. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="filename" />
    </Parameters>
  </Export>
  <Export name="GetManager" target="Common" source="Renderer.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the renderer manager.

/// </summary>

/// <returns> The renderer manager. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetManager" target="Common" source="Renderer.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the current renderer manager to a new renderer manager.

/// </summary>

/// <param name="rendererMaster"> The new renderer manager. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.IManagerRender" name="managerRender" />
    </Parameters>
  </Export>
  <Export name="AddRenderer" target="Common" source="Renderer.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Adds a renderer to this register.

/// </summary>

/// <param name="renderer"> The renderer to add. </param>

/// <returns> The added renderer. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.IRenderer" name="renderer" />
    </Parameters>
  </Export>
  <Export name="RemoveRenderer" target="Common" source="Renderer.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Removes a renderer from this register.

/// </summary>

/// <param name="renderer"> The renderer to remove. </param>

/// <returns> If the renderer was removed. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.IRenderer" name="renderer" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** IPostFilter.hpp
  **
  ***************************************
  -->
  <Export name="PushConditional" target="Common" source="IPostFilter.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Used instead of `m_descriptorSet.Push()` in instances where a writeColour is the same as samplerColour in a shader.

/// By switching between what will be the input and output of each filter previous changes are available to the shader.

/// </summary>

/// <param name="descriptorName1"> The first descriptor in the shader. </param>

/// <param name="descriptorName2"> The second descriptor in the shader. </param>

/// <param name="rendererAttachment1"> The name of the renderers attachment that will be first option. </param>

/// <param name="rendererAttachment2"> The name of the renderers attachment that will be second option. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="descriptorName1" />
      <Parameter type="string" name="descriptorName2" />
      <Parameter type="string" name="rendererAttachment1" />
      <Parameter type="string" name="rendererAttachment2" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** IPostPipeline.hpp
  **
  ***************************************
  -->
  <Export name="IPostPipeline" target="Common" source="IPostPipeline.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new post pipeline.

/// </summary>

/// <param name="graphicsStage"> The pipelines graphics stage. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.GraphicsStage" name="graphicsStage" />
    </Parameters>
  </Export>
  <Export name="Render" target="Common" source="IPostPipeline.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Renders the post pipeline.

/// </summary>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.CommandBuffer" name="commandBuffer" />
      <Parameter type="global::Acid.Sharp.Vector4" name="clipPlane" />
      <Parameter type="global::Acid.Sharp.ICamera" name="camera" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Compute.hpp
  **
  ***************************************
  -->
  <Export name="Compute" target="Common" source="Compute.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new compute pipeline.

/// </summary>

/// <param name="pipelineCreate"> The compute pipelines creation info. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.ComputeCreate" name="computeCreate" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Resources.hpp
  **
  ***************************************
  -->
  <Export name="Get" target="Common" source="Resources.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets this engine instance.

/// </summary>

/// <returns> The current module instance. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** UiSelector.hpp
  **
  ***************************************
  -->
  <Export name="IsSelected" target="Common" source="UiSelector.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if the object provided has the cursor hovered above it.

/// </summary>

/// <param name="object"> The object to check with.

/// </param>

/// <returns> If the object has the cursor inside of its box. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.UiObject" name="@object" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Scenes.hpp
  **
  ***************************************
  -->
  <Export name="Get" target="Common" source="Scenes.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets this engine instance.

/// </summary>

/// <returns> The current module instance. </returns>
]]>
    </Description>
  </Export>
  <Export name="Scenes" target="Common" source="Scenes.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new Scenes module.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="GetScene" target="Common" source="Scenes.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the current scene.

/// </summary>

/// <returns> The current scene. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetScene" target="Common" source="Scenes.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the current scene to a new scene.

/// </summary>

/// <param name="scene"> The new scene. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.IScene" name="scene" />
    </Parameters>
  </Export>
  <Export name="DeregisterComponent" target="Common" source="Scenes.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Deregisters a component.

/// </summary>

/// <param name="name"> The components name. </param>

/// <returns> If the component was deregistered. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="name" />
    </Parameters>
  </Export>
  <Export name="CreateComponent" target="Common" source="Scenes.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new component from the register.

/// </summary>

/// <param name="name"> The component name to create. </param>

/// <returns> The new component. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="name" />
    </Parameters>
  </Export>
  <Export name="GetCamera" target="Common" source="Scenes.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the current camera object.

/// </summary>

/// <returns> The current camera. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetSelectorJoystick" target="Common" source="Scenes.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the joystick controlled UI selector.

/// </summary>

/// <returns> The joystick selector. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetPhysics" target="Common" source="Scenes.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the scene physics system.

/// </summary>

/// <returns> The scenes physics system. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetStructure" target="Common" source="Scenes.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the scene object structure.

/// </summary>

/// <returns> The scene object structure. </returns>
]]>
    </Description>
  </Export>
  <Export name="IsPaused" target="Common" source="Scenes.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if the scene is paused.

/// </summary>

/// <returns> If the scene is paused. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** ShadowBox.hpp
  **
  ***************************************
  -->
  <Export name="ShadowBox" target="Common" source="ShadowBox.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new shadow box and calculates some initial values relating to the camera's view frustum.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Update" target="Common" source="ShadowBox.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Updates the bounds of the shadow box based on the light direction and the camera's view frustum.

/// Will make sure that the box covers the smallest area possible while still ensuring that everything.

/// Objects inside the camera's view (and in range) will be shadowed.

/// </summary>

/// <param name="camera"> The camera object to be used when calculating the shadow boxes size. </param>

/// <param name="lightPosition"> The lights position. </param>

/// <param name="shadowOffset"> The shadows offset. </param>

/// <param name="shadowDistance"> The shadows distance. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.ICamera" name="camera" />
      <Parameter type="global::Acid.Sharp.Vector3" name="lightPosition" />
      <Parameter type="float" name="shadowOffset" />
      <Parameter type="float" name="shadowDistance" />
    </Parameters>
  </Export>
  <Export name="IsInBox" target="Common" source="ShadowBox.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Test if a bounding sphere intersects the shadow box. Can be used to decide which engine.entities should be rendered in the shadow render pass.

/// </summary>

/// <param name="position"> The centre of the bounding sphere in world space. </param>

/// <param name="radius"> The radius of the bounding sphere.

/// </param>

/// <returns> {@code true} if the sphere intersects the box. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.Vector3" name="position" />
      <Parameter type="float" name="radius" />
    </Parameters>
  </Export>
  <Export name="GetToShadowMapSpaceMatrix" target="Common" source="ShadowBox.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// This biased projection-view matrix is used to convert fragments into "shadow map space" when rendering the main render pass.

/// </summary>

/// <returns> The to-shadow-map-space matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetLightSpaceTransform" target="Common" source="ShadowBox.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the light's "view" matrix

/// </summary>

/// <returns> The light's "view" matrix. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Shadows.hpp
  **
  ***************************************
  -->
  <Export name="Get" target="Common" source="Shadows.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets this engine instance.

/// </summary>

/// <returns> The current module instance. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetShadowBox" target="Common" source="Shadows.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Get the shadow box, so that it can be used by other class to test if engine.entities are inside the box.

/// </summary>

/// <returns> The shadow box. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** ThreadPool.hpp
  **
  ***************************************
  -->
  <Export name="Wait" target="Common" source="ThreadPool.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Waits until all threads are finished.

/// </summary>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Uis.hpp
  **
  ***************************************
  -->
  <Export name="Get" target="Common" source="Uis.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets this engine instance.

/// </summary>

/// <returns> The current module instance. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetContainer" target="Common" source="Uis.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the screen container.

/// </summary>

/// <returns> The screen container. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetSelector" target="Common" source="Uis.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the main GUI selector.

/// </summary>

/// <returns> The GUI selector. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** FtpResponseDirectory.hpp
  **
  ***************************************
  -->
  <Export name="FtpResponseDirectory" target="Common" source="FtpResponseDirectory.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Default constructor.

/// </summary>

/// <param name="response"> Source response. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.FtpResponse" name="response" />
    </Parameters>
  </Export>
  <Export name="GetDirectory" target="Common" source="FtpResponseDirectory.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Get the directory returned in the response.

/// </summary>

/// <returns> Directory name. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** FtpResponseListing.hpp
  **
  ***************************************
  -->
  <Export name="FtpResponseListing" target="Common" source="FtpResponseListing.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Default constructor.

/// </summary>

/// <param name="response"> Source response. </param>

/// <param name="data"> Data containing the raw listing. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::Acid.Sharp.FtpResponse" name="response" />
      <Parameter type="string" name="data" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Observer.hpp
  **
  ***************************************
  -->
  <Export name="Observer&lt;Args...&gt;" target="Common" source="Observer.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new callback observer.

/// </summary>
]]>
    </Description>
  </Export>
</Definitions>