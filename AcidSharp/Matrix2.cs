// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace AcidSharp
{
    /// <summary>Holds a row major 2x2 matrix.</summary>
    public unsafe partial class Matrix2 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::AcidSharp.Matrix2._.__Internal _;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Matrix2@acid@@QEAA@AEBM@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, float* diagonal);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Matrix2@acid@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr source);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Matrix2@acid@@QEAA@QEBM@Z")]
            internal static extern global::System.IntPtr ctor_1(global::System.IntPtr instance, float[] source);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Matrix2@acid@@QEAA@QEBVVector2@1@@Z")]
            internal static extern global::System.IntPtr ctor_2(global::System.IntPtr instance, global::AcidSharp.Vector2.__Internal[] source);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Add@Matrix2@acid@@QEBA?AV12@AEBV12@@Z")]
            internal static extern void Add(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Subtract@Matrix2@acid@@QEBA?AV12@AEBV12@@Z")]
            internal static extern void Subtract(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Multiply@Matrix2@acid@@QEBA?AV12@AEBV12@@Z")]
            internal static extern void Multiply(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Divide@Matrix2@acid@@QEBA?AV12@AEBV12@@Z")]
            internal static extern void Divide(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Transform@Matrix2@acid@@QEBA?AVVector2@2@AEBV32@@Z")]
            internal static extern void Transform(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Scale@Matrix2@acid@@QEBA?AV12@AEBVVector2@2@@Z")]
            internal static extern void Scale(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Negate@Matrix2@acid@@QEBA?AV12@XZ")]
            internal static extern void Negate(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetSubmatrix@Matrix2@acid@@QEBAMAEBH0@Z")]
            internal static extern float GetSubmatrix(global::System.IntPtr instance, int* row, int* col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Decode@Matrix2@acid@@QEAAXAEBVMetadata@2@@Z")]
            internal static extern void Decode(global::System.IntPtr instance, global::System.IntPtr metadata);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Encode@Matrix2@acid@@QEBAXAEAVMetadata@2@@Z")]
            internal static extern void Encode(global::System.IntPtr instance, global::System.IntPtr metadata);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??8Matrix2@acid@@QEBA_NAEBV01@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??9Matrix2@acid@@QEBA_NAEBV01@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??GMatrix2@acid@@QEBA?AV01@XZ")]
            internal static extern void OperatorMinus(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?ToString@Matrix2@acid@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ")]
            internal static extern void ToString(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Hacid@@YA?AVMatrix2@0@AEBV10@0@Z")]
            internal static extern void OperatorPlus(global::System.IntPtr @return, global::System.IntPtr left, global::System.IntPtr right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Gacid@@YA?AVMatrix2@0@AEBV10@0@Z")]
            internal static extern void OperatorMinus(global::System.IntPtr @return, global::System.IntPtr left, global::System.IntPtr right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Dacid@@YA?AVMatrix2@0@AEBV10@0@Z")]
            internal static extern void OperatorStar(global::System.IntPtr @return, global::System.IntPtr left, global::System.IntPtr right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Kacid@@YA?AVMatrix2@0@AEBV10@0@Z")]
            internal static extern void OperatorSlash(global::System.IntPtr @return, global::System.IntPtr left, global::System.IntPtr right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Dacid@@YA?AVMatrix2@0@AEBV10@AEBVVector2@0@@Z")]
            internal static extern void OperatorStar_1(global::System.IntPtr @return, global::System.IntPtr left, global::System.IntPtr right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Kacid@@YA?AVMatrix2@0@AEBV10@AEBVVector2@0@@Z")]
            internal static extern void OperatorSlash_1(global::System.IntPtr @return, global::System.IntPtr left, global::System.IntPtr right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Dacid@@YA?AVMatrix2@0@AEBMAEBV10@@Z")]
            internal static extern void OperatorStar(global::System.IntPtr @return, float* left, global::System.IntPtr right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Kacid@@YA?AVMatrix2@0@AEBMAEBV10@@Z")]
            internal static extern void OperatorSlash(global::System.IntPtr @return, float* left, global::System.IntPtr right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Dacid@@YA?AVMatrix2@0@AEBV10@AEBM@Z")]
            internal static extern void OperatorStar(global::System.IntPtr @return, global::System.IntPtr left, float* right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Kacid@@YA?AVMatrix2@0@AEBV10@AEBM@Z")]
            internal static extern void OperatorSlash(global::System.IntPtr @return, global::System.IntPtr left, float* right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??AMatrix2@acid@@QEAAAEAVVector2@1@AEBI@Z")]
            internal static extern global::System.IntPtr OperatorSubscript(global::System.IntPtr instance, uint* index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Invert@Matrix2@acid@@QEBA?AV12@XZ")]
            internal static extern void Invert(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Transpose@Matrix2@acid@@QEBA?AV12@XZ")]
            internal static extern void Transpose(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Determinant@Matrix2@acid@@QEBAMXZ")]
            internal static extern float Determinant(global::System.IntPtr instance);
        }

        public unsafe partial struct _
        {
            [StructLayout(LayoutKind.Explicit, Size = 16)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::AcidSharp.Matrix2._.__.__Internal __;

                [FieldOffset(0)]
                internal global::AcidSharp.Matrix2._.__.__Internal __1;
            }

            public unsafe partial class __
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal fixed byte m_rows[16];
                }
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AcidSharp.Matrix2> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AcidSharp.Matrix2>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::AcidSharp.Matrix2 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::AcidSharp.Matrix2(native.ToPointer(), skipVTables);
        }

        internal static global::AcidSharp.Matrix2 __CreateInstance(global::AcidSharp.Matrix2.__Internal native, bool skipVTables = false)
        {
            return new global::AcidSharp.Matrix2(native, skipVTables);
        }

        private static void* __CopyValue(global::AcidSharp.Matrix2.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::AcidSharp.Matrix2.__Internal));
            global::AcidSharp.Matrix2.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private Matrix2(global::AcidSharp.Matrix2.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Matrix2(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        /// <summary>Constructor for Matrix2. The matrix is initialised to the identity.</summary>
        /// <param name="diagonal">The value set to the diagonals.</param>
        public Matrix2(float diagonal)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AcidSharp.Matrix2.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg0 = &diagonal;
            __Internal.ctor((__Instance + __PointerAdjustment), __arg0);
        }

        /// <summary>Constructor for Matrix2.</summary>
        /// <param name="source">Creates this matrix out of a existing one.</param>
        public Matrix2(global::AcidSharp.Matrix2 source)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AcidSharp.Matrix2.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(source, null))
                throw new global::System.ArgumentNullException("source", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = source.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
        }

        /// <summary>Constructor for Matrix2.</summary>
        /// <param name="source">Creates this matrix out of a 4 element array.</param>
        public Matrix2(float[] source)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AcidSharp.Matrix2.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (source == null || source.Length != 4)
                throw new ArgumentOutOfRangeException("source", "The dimensions of the provided array don't match the required size.");
            __Internal.ctor_1((__Instance + __PointerAdjustment), source);
        }

        /// <summary>Constructor for Matrix2.</summary>
        /// <param name="source">Creates this matrix out of a 2 vector array.</param>
        public Matrix2(global::AcidSharp.Vector2[] source)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AcidSharp.Matrix2.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (source == null || source.Length != 2)
                throw new ArgumentOutOfRangeException("source", "The dimensions of the provided array don't match the required size.");
            global::AcidSharp.Vector2.__Internal[] __source;
            if (ReferenceEquals(source, null))
                __source = null;
            else
            {
                __source = new global::AcidSharp.Vector2.__Internal[source.Length];
                for (int i = 0; i < __source.Length; i++)
                {
                    var __element = source[i];
                    __source[i] = ReferenceEquals(__element, null) ? new global::AcidSharp.Vector2.__Internal() : *(global::AcidSharp.Vector2.__Internal*) __element.__Instance;
                }
            }
            var __arg0 = __source;
            __Internal.ctor_2((__Instance + __PointerAdjustment), __arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::AcidSharp.Matrix2 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Adds this matrix to another matrix.</summary>
        /// <param name="other">The other matrix.</param>
        public global::AcidSharp.Matrix2 Add(global::AcidSharp.Matrix2 other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::AcidSharp.Matrix2.__Internal();
            __Internal.Add((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::AcidSharp.Matrix2.__CreateInstance(__ret);
        }

        /// <summary>Subtracts this matrix to another matrix.</summary>
        /// <param name="other">The other matrix.</param>
        public global::AcidSharp.Matrix2 Subtract(global::AcidSharp.Matrix2 other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::AcidSharp.Matrix2.__Internal();
            __Internal.Subtract((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::AcidSharp.Matrix2.__CreateInstance(__ret);
        }

        /// <summary>Multiplies this matrix by another matrix.</summary>
        /// <param name="other">The other matrix.</param>
        public global::AcidSharp.Matrix2 Multiply(global::AcidSharp.Matrix2 other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::AcidSharp.Matrix2.__Internal();
            __Internal.Multiply((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::AcidSharp.Matrix2.__CreateInstance(__ret);
        }

        /// <summary>Divides this matrix by another matrix.</summary>
        /// <param name="other">The other matrix.</param>
        public global::AcidSharp.Matrix2 Divide(global::AcidSharp.Matrix2 other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::AcidSharp.Matrix2.__Internal();
            __Internal.Divide((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::AcidSharp.Matrix2.__CreateInstance(__ret);
        }

        /// <summary>Transforms this matrix by a vector.</summary>
        /// <param name="other">The other vector.</param>
        public global::AcidSharp.Vector2 Transform(global::AcidSharp.Vector2 other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::AcidSharp.Vector2.__Internal();
            __Internal.Transform((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::AcidSharp.Vector2.__CreateInstance(__ret);
        }

        /// <summary>Scales this matrix by a vector.</summary>
        /// <param name="other">The other vector.</param>
        public global::AcidSharp.Matrix2 Scale(global::AcidSharp.Vector2 other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::AcidSharp.Matrix2.__Internal();
            __Internal.Scale((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::AcidSharp.Matrix2.__CreateInstance(__ret);
        }

        /// <summary>Inverts this matrix.</summary>
        public global::AcidSharp.Matrix2 Negate()
        {
            var __ret = new global::AcidSharp.Matrix2.__Internal();
            __Internal.Negate((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return global::AcidSharp.Matrix2.__CreateInstance(__ret);
        }

        /// <summary>Gets the submatrix of this matrix.</summary>
        public float GetSubmatrix(int row, int col)
        {
            var __arg0 = &row;
            var __arg1 = &col;
            var __ret = __Internal.GetSubmatrix((__Instance + __PointerAdjustment), __arg0, __arg1);
            return __ret;
        }

        public void Decode(global::AcidSharp.Metadata metadata)
        {
            if (ReferenceEquals(metadata, null))
                throw new global::System.ArgumentNullException("metadata", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = metadata.__Instance;
            __Internal.Decode((__Instance + __PointerAdjustment), __arg0);
        }

        public void Encode(global::AcidSharp.Metadata metadata)
        {
            if (ReferenceEquals(metadata, null))
                throw new global::System.ArgumentNullException("metadata", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = metadata.__Instance;
            __Internal.Encode((__Instance + __PointerAdjustment), __arg0);
        }

        public static bool operator ==(global::AcidSharp.Matrix2 __op, global::AcidSharp.Matrix2 other)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool otherNull = ReferenceEquals(other, null);
            if (__opNull || otherNull)
                return __opNull && otherNull;
            var __arg0 = __op.__Instance;
            var __arg1 = other.__Instance;
            var __ret = __Internal.OperatorEqualEqual(__arg0, __arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as global::AcidSharp.Matrix2;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(global::AcidSharp.Matrix2.__Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(global::AcidSharp.Matrix2 __op, global::AcidSharp.Matrix2 other)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool otherNull = ReferenceEquals(other, null);
            if (__opNull || otherNull)
                return !(__opNull && otherNull);
            var __arg0 = __op.__Instance;
            var __arg1 = other.__Instance;
            var __ret = __Internal.OperatorExclaimEqual(__arg0, __arg1);
            return __ret;
        }

        public static global::AcidSharp.Matrix2 operator -(global::AcidSharp.Matrix2 __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = __op.__Instance;
            var __ret = new global::AcidSharp.Matrix2.__Internal();
            __Internal.OperatorMinus(__arg0, new IntPtr(&__ret));
            return global::AcidSharp.Matrix2.__CreateInstance(__ret);
        }

        public string ToString()
        {
            var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
            __Internal.ToString((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            var __basicStringRet0 = global::Std.BasicString<char, global::Std.CharTraits<char>, global::Std.Allocator<char>>.__CreateInstance(__ret);
            var __stringRet0 = global::Std.BasicStringExtensions.CStr(__basicStringRet0);
            __basicStringRet0.Dispose(false);
            return __stringRet0;
        }

        public static implicit operator global::AcidSharp.Matrix2(float diagonal)
        {
            return new global::AcidSharp.Matrix2(diagonal);
        }

        public static explicit operator global::AcidSharp.Matrix2(float[] source)
        {
            return new global::AcidSharp.Matrix2(source);
        }

        public static explicit operator global::AcidSharp.Matrix2(global::AcidSharp.Vector2[] source)
        {
            return new global::AcidSharp.Matrix2(source);
        }

        public static global::AcidSharp.Matrix2 operator +(global::AcidSharp.Matrix2 left, global::AcidSharp.Matrix2 right)
        {
            if (ReferenceEquals(left, null))
                throw new global::System.ArgumentNullException("left", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = left.__Instance;
            if (ReferenceEquals(right, null))
                throw new global::System.ArgumentNullException("right", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = right.__Instance;
            var __ret = new global::AcidSharp.Matrix2.__Internal();
            __Internal.OperatorPlus(new IntPtr(&__ret), __arg0, __arg1);
            return global::AcidSharp.Matrix2.__CreateInstance(__ret);
        }

        public static global::AcidSharp.Matrix2 operator -(global::AcidSharp.Matrix2 left, global::AcidSharp.Matrix2 right)
        {
            if (ReferenceEquals(left, null))
                throw new global::System.ArgumentNullException("left", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = left.__Instance;
            if (ReferenceEquals(right, null))
                throw new global::System.ArgumentNullException("right", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = right.__Instance;
            var __ret = new global::AcidSharp.Matrix2.__Internal();
            __Internal.OperatorMinus(new IntPtr(&__ret), __arg0, __arg1);
            return global::AcidSharp.Matrix2.__CreateInstance(__ret);
        }

        public static global::AcidSharp.Matrix2 operator *(global::AcidSharp.Matrix2 left, global::AcidSharp.Matrix2 right)
        {
            if (ReferenceEquals(left, null))
                throw new global::System.ArgumentNullException("left", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = left.__Instance;
            if (ReferenceEquals(right, null))
                throw new global::System.ArgumentNullException("right", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = right.__Instance;
            var __ret = new global::AcidSharp.Matrix2.__Internal();
            __Internal.OperatorStar(new IntPtr(&__ret), __arg0, __arg1);
            return global::AcidSharp.Matrix2.__CreateInstance(__ret);
        }

        public static global::AcidSharp.Matrix2 operator /(global::AcidSharp.Matrix2 left, global::AcidSharp.Matrix2 right)
        {
            if (ReferenceEquals(left, null))
                throw new global::System.ArgumentNullException("left", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = left.__Instance;
            if (ReferenceEquals(right, null))
                throw new global::System.ArgumentNullException("right", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = right.__Instance;
            var __ret = new global::AcidSharp.Matrix2.__Internal();
            __Internal.OperatorSlash(new IntPtr(&__ret), __arg0, __arg1);
            return global::AcidSharp.Matrix2.__CreateInstance(__ret);
        }

        public static global::AcidSharp.Matrix2 operator *(global::AcidSharp.Matrix2 left, global::AcidSharp.Vector2 right)
        {
            if (ReferenceEquals(left, null))
                throw new global::System.ArgumentNullException("left", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = left.__Instance;
            if (ReferenceEquals(right, null))
                throw new global::System.ArgumentNullException("right", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = right.__Instance;
            var __ret = new global::AcidSharp.Matrix2.__Internal();
            __Internal.OperatorStar_1(new IntPtr(&__ret), __arg0, __arg1);
            return global::AcidSharp.Matrix2.__CreateInstance(__ret);
        }

        public static global::AcidSharp.Matrix2 operator /(global::AcidSharp.Matrix2 left, global::AcidSharp.Vector2 right)
        {
            if (ReferenceEquals(left, null))
                throw new global::System.ArgumentNullException("left", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = left.__Instance;
            if (ReferenceEquals(right, null))
                throw new global::System.ArgumentNullException("right", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = right.__Instance;
            var __ret = new global::AcidSharp.Matrix2.__Internal();
            __Internal.OperatorSlash_1(new IntPtr(&__ret), __arg0, __arg1);
            return global::AcidSharp.Matrix2.__CreateInstance(__ret);
        }

        public static global::AcidSharp.Matrix2 operator *(float left, global::AcidSharp.Matrix2 right)
        {
            var __arg0 = &left;
            if (ReferenceEquals(right, null))
                throw new global::System.ArgumentNullException("right", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = right.__Instance;
            var __ret = new global::AcidSharp.Matrix2.__Internal();
            __Internal.OperatorStar(new IntPtr(&__ret), __arg0, __arg1);
            return global::AcidSharp.Matrix2.__CreateInstance(__ret);
        }

        public static global::AcidSharp.Matrix2 operator /(float left, global::AcidSharp.Matrix2 right)
        {
            var __arg0 = &left;
            if (ReferenceEquals(right, null))
                throw new global::System.ArgumentNullException("right", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = right.__Instance;
            var __ret = new global::AcidSharp.Matrix2.__Internal();
            __Internal.OperatorSlash(new IntPtr(&__ret), __arg0, __arg1);
            return global::AcidSharp.Matrix2.__CreateInstance(__ret);
        }

        public static global::AcidSharp.Matrix2 operator *(global::AcidSharp.Matrix2 left, float right)
        {
            if (ReferenceEquals(left, null))
                throw new global::System.ArgumentNullException("left", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = left.__Instance;
            var __arg1 = &right;
            var __ret = new global::AcidSharp.Matrix2.__Internal();
            __Internal.OperatorStar(new IntPtr(&__ret), __arg0, __arg1);
            return global::AcidSharp.Matrix2.__CreateInstance(__ret);
        }

        public static global::AcidSharp.Matrix2 operator /(global::AcidSharp.Matrix2 left, float right)
        {
            if (ReferenceEquals(left, null))
                throw new global::System.ArgumentNullException("left", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = left.__Instance;
            var __arg1 = &right;
            var __ret = new global::AcidSharp.Matrix2.__Internal();
            __Internal.OperatorSlash(new IntPtr(&__ret), __arg0, __arg1);
            return global::AcidSharp.Matrix2.__CreateInstance(__ret);
        }

        public static global::AcidSharp.Matrix2 Identity
        {
            get
            {
                var __ptr = (global::AcidSharp.Matrix2.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Acid", "?IDENTITY@Matrix2@acid@@2V12@B");
                return global::AcidSharp.Matrix2.__CreateInstance(*__ptr);
            }
        }

        public static global::AcidSharp.Matrix2 Zero
        {
            get
            {
                var __ptr = (global::AcidSharp.Matrix2.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Acid", "?ZERO@Matrix2@acid@@2V12@B");
                return global::AcidSharp.Matrix2.__CreateInstance(*__ptr);
            }
        }

        public global::AcidSharp.Vector2 this[uint index]
        {
            get
            {
                var __arg0 = &index;
                var __ret = __Internal.OperatorSubscript((__Instance + __PointerAdjustment), __arg0);
                return global::AcidSharp.Vector2.__CreateInstance(__ret);
            }

            set
            {
                var __arg0 = &index;
                *(global::AcidSharp.Vector2.__Internal*) global::AcidSharp.Matrix2.__Internal.OperatorSubscript((__Instance + __PointerAdjustment), &index) = ReferenceEquals(value, null) ? new global::AcidSharp.Vector2.__Internal() : *(global::AcidSharp.Vector2.__Internal*) value.__Instance;
            }
        }

        /// <summary>Negates this matrix.</summary>
        public global::AcidSharp.Matrix2 Invert
        {
            get
            {
                var __ret = new global::AcidSharp.Matrix2.__Internal();
                __Internal.Invert((__Instance + __PointerAdjustment), new IntPtr(&__ret));
                return global::AcidSharp.Matrix2.__CreateInstance(__ret);
            }
        }

        /// <summary>Transposes this matrix.</summary>
        public global::AcidSharp.Matrix2 Transpose
        {
            get
            {
                var __ret = new global::AcidSharp.Matrix2.__Internal();
                __Internal.Transpose((__Instance + __PointerAdjustment), new IntPtr(&__ret));
                return global::AcidSharp.Matrix2.__CreateInstance(__ret);
            }
        }

        /// <summary>Takes the determinant of this matrix.</summary>
        public float Determinant
        {
            get
            {
                var __ret = __Internal.Determinant((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }
}
