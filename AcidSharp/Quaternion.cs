// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace AcidSharp
{
    /// <summary>A vector like object of the form w + xi + yj + zk, where w, x, y, z are real numbers and i, j, k are imaginary units.</summary>
    public unsafe partial class Quaternion : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::AcidSharp.Quaternion._.__Internal _;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Quaternion@acid@@QEAA@XZ")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Quaternion@acid@@QEAA@AEBM000@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, float* x, float* y, float* z, float* w);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Quaternion@acid@@QEAA@AEBM00@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, float* pitch, float* yaw, float* roll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Quaternion@acid@@QEAA@AEBVVector3@1@AEBM@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, global::System.IntPtr source, float* w);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Quaternion@acid@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr source);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Quaternion@acid@@QEAA@AEBVMatrix4@1@@Z")]
            internal static extern global::System.IntPtr ctor_1(global::System.IntPtr instance, global::System.IntPtr source);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Quaternion@acid@@QEAA@AEBVVector3@1@00@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, global::System.IntPtr axisX, global::System.IntPtr axisY, global::System.IntPtr axisZ);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Add@Quaternion@acid@@QEBA?AV12@AEBV12@@Z")]
            internal static extern void Add(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Subtract@Quaternion@acid@@QEBA?AV12@AEBV12@@Z")]
            internal static extern void Subtract(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Multiply@Quaternion@acid@@QEBA?AV12@AEBV12@@Z")]
            internal static extern void Multiply(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Multiply@Quaternion@acid@@QEBA?AVVector3@2@AEBV32@@Z")]
            internal static extern void Multiply_1(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?MultiplyInverse@Quaternion@acid@@QEBA?AV12@AEBV12@@Z")]
            internal static extern void MultiplyInverse(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Dot@Quaternion@acid@@QEBAMAEBV12@@Z")]
            internal static extern float Dot(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Slerp@Quaternion@acid@@QEAA?AV12@AEBV12@AEBM@Z")]
            internal static extern void Slerp(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other, float* progression);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Scale@Quaternion@acid@@QEBA?AV12@AEBM@Z")]
            internal static extern void Scale(global::System.IntPtr instance, global::System.IntPtr @return, float* scalar);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Negate@Quaternion@acid@@QEBA?AV12@XZ")]
            internal static extern void Negate(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Normalize@Quaternion@acid@@QEBA?AV12@XZ")]
            internal static extern void Normalize(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?ToMatrix@Quaternion@acid@@QEBA?AVMatrix4@2@XZ")]
            internal static extern void ToMatrix(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?ToRotationMatrix@Quaternion@acid@@QEBA?AVMatrix4@2@XZ")]
            internal static extern void ToRotationMatrix(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?ToEuler@Quaternion@acid@@QEBA?AVVector3@2@XZ")]
            internal static extern void ToEuler(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Decode@Quaternion@acid@@QEAAXAEBVMetadata@2@@Z")]
            internal static extern void Decode(global::System.IntPtr instance, global::System.IntPtr metadata);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Encode@Quaternion@acid@@QEBAXAEAVMetadata@2@@Z")]
            internal static extern void Encode(global::System.IntPtr instance, global::System.IntPtr metadata);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??8Quaternion@acid@@QEBA_NAEBV01@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??9Quaternion@acid@@QEBA_NAEBV01@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??MQuaternion@acid@@QEBA_NAEBV01@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorLess(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??NQuaternion@acid@@QEBA_NAEBV01@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorLessEqual(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??OQuaternion@acid@@QEBA_NAEBV01@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorGreater(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??PQuaternion@acid@@QEBA_NAEBV01@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorGreaterEqual(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??8Quaternion@acid@@QEBA_NAEBM@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual(global::System.IntPtr instance, float* value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??9Quaternion@acid@@QEBA_NAEBM@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual(global::System.IntPtr instance, float* value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??GQuaternion@acid@@QEBA?AV01@XZ")]
            internal static extern void OperatorMinus(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?ToString@Quaternion@acid@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ")]
            internal static extern void ToString(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Hacid@@YA?AVQuaternion@0@AEBV10@0@Z")]
            internal static extern void OperatorPlus(global::System.IntPtr @return, global::System.IntPtr left, global::System.IntPtr right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Gacid@@YA?AVQuaternion@0@AEBV10@0@Z")]
            internal static extern void OperatorMinus(global::System.IntPtr @return, global::System.IntPtr left, global::System.IntPtr right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Dacid@@YA?AVQuaternion@0@AEBV10@0@Z")]
            internal static extern void OperatorStar(global::System.IntPtr @return, global::System.IntPtr left, global::System.IntPtr right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Dacid@@YA?AVVector3@0@AEBVQuaternion@0@AEBV10@@Z")]
            internal static extern void OperatorStar_1(global::System.IntPtr @return, global::System.IntPtr left, global::System.IntPtr right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Dacid@@YA?AVQuaternion@0@AEBMAEBV10@@Z")]
            internal static extern void OperatorStar(global::System.IntPtr @return, float* left, global::System.IntPtr right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Dacid@@YA?AVQuaternion@0@AEBV10@AEBM@Z")]
            internal static extern void OperatorStar(global::System.IntPtr @return, global::System.IntPtr left, float* right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??AQuaternion@acid@@QEAAAEAMAEBI@Z")]
            internal static extern float* OperatorSubscript(global::System.IntPtr instance, uint* index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetX@Quaternion@acid@@QEBAMXZ")]
            internal static extern float GetX(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetX@Quaternion@acid@@QEAAXAEBM@Z")]
            internal static extern void SetX(global::System.IntPtr instance, float* x);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetY@Quaternion@acid@@QEBAMXZ")]
            internal static extern float GetY(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetY@Quaternion@acid@@QEAAXAEBM@Z")]
            internal static extern void SetY(global::System.IntPtr instance, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetZ@Quaternion@acid@@QEBAMXZ")]
            internal static extern float GetZ(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetZ@Quaternion@acid@@QEAAXAEBM@Z")]
            internal static extern void SetZ(global::System.IntPtr instance, float* z);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetW@Quaternion@acid@@QEBAMXZ")]
            internal static extern float GetW(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetW@Quaternion@acid@@QEAAXAEBM@Z")]
            internal static extern void SetW(global::System.IntPtr instance, float* w);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?LengthSquared@Quaternion@acid@@QEBAMXZ")]
            internal static extern float LengthSquared(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Length@Quaternion@acid@@QEBAMXZ")]
            internal static extern float Length(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?MaxComponent@Quaternion@acid@@QEBAMXZ")]
            internal static extern float MaxComponent(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Acid", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?MinComponent@Quaternion@acid@@QEBAMXZ")]
            internal static extern float MinComponent(global::System.IntPtr instance);
        }

        public unsafe partial struct _
        {
            [StructLayout(LayoutKind.Explicit, Size = 16)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::AcidSharp.Quaternion._.__.__Internal __;

                [FieldOffset(0)]
                internal global::AcidSharp.Quaternion._.__.__Internal __1;
            }

            public unsafe partial class __
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal float m_x;

                    [FieldOffset(4)]
                    internal float m_y;

                    [FieldOffset(8)]
                    internal float m_z;

                    [FieldOffset(12)]
                    internal float m_w;
                }
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AcidSharp.Quaternion> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AcidSharp.Quaternion>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::AcidSharp.Quaternion __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::AcidSharp.Quaternion(native.ToPointer(), skipVTables);
        }

        internal static global::AcidSharp.Quaternion __CreateInstance(global::AcidSharp.Quaternion.__Internal native, bool skipVTables = false)
        {
            return new global::AcidSharp.Quaternion(native, skipVTables);
        }

        private static void* __CopyValue(global::AcidSharp.Quaternion.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::AcidSharp.Quaternion.__Internal));
            global::AcidSharp.Quaternion.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private Quaternion(global::AcidSharp.Quaternion.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Quaternion(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        /// <summary>Constructor for Quaternion.</summary>
        public Quaternion()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AcidSharp.Quaternion.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor((__Instance + __PointerAdjustment));
        }

        /// <summary>Constructor for Quaternion.</summary>
        /// <param name="x">Start x.</param>
        /// <param name="y">Start y.</param>
        /// <param name="z">Start z.</param>
        /// <param name="w">Start w.</param>
        public Quaternion(float x, float y, float z, float w)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AcidSharp.Quaternion.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg0 = &x;
            var __arg1 = &y;
            var __arg2 = &z;
            var __arg3 = &w;
            __Internal.ctor((__Instance + __PointerAdjustment), __arg0, __arg1, __arg2, __arg3);
        }

        /// <summary>Constructor for Quaternion.</summary>
        /// <param name="pitch">Start pitch.</param>
        /// <param name="yaw">Start yaw.</param>
        /// <param name="roll">Start roll.</param>
        public Quaternion(float pitch, float yaw, float roll)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AcidSharp.Quaternion.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg0 = &pitch;
            var __arg1 = &yaw;
            var __arg2 = &roll;
            __Internal.ctor((__Instance + __PointerAdjustment), __arg0, __arg1, __arg2);
        }

        /// <summary>Constructor for Quaternion.</summary>
        /// <param name="source">Creates this quaternion out of a existing vector (pitch, yaw roll).</param>
        /// <param name="w">Start w.</param>
        public Quaternion(global::AcidSharp.Vector3 source, float w)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AcidSharp.Quaternion.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(source, null))
                throw new global::System.ArgumentNullException("source", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = source.__Instance;
            var __arg1 = &w;
            __Internal.ctor((__Instance + __PointerAdjustment), __arg0, __arg1);
        }

        /// <summary>Constructor for Quaternion.</summary>
        /// <param name="source">Creates this vector out of a existing one.</param>
        public Quaternion(global::AcidSharp.Quaternion source)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AcidSharp.Quaternion.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(source, null))
                throw new global::System.ArgumentNullException("source", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = source.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
        }

        /// <summary>Constructor for Quaternion.</summary>
        /// <param name="source">Creates this vector out of a existing matrix.</param>
        public Quaternion(global::AcidSharp.Matrix4 source)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AcidSharp.Quaternion.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(source, null))
                throw new global::System.ArgumentNullException("source", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = source.__Instance;
            __Internal.ctor_1((__Instance + __PointerAdjustment), __arg0);
        }

        /// <summary>Constructor for Quaternion.</summary>
        /// <param name="axisX">The X axis.</param>
        /// <param name="axisY">The Y axis.</param>
        /// <param name="axisZ">The Z axis.</param>
        public Quaternion(global::AcidSharp.Vector3 axisX, global::AcidSharp.Vector3 axisY, global::AcidSharp.Vector3 axisZ)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AcidSharp.Quaternion.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(axisX, null))
                throw new global::System.ArgumentNullException("axisX", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = axisX.__Instance;
            if (ReferenceEquals(axisY, null))
                throw new global::System.ArgumentNullException("axisY", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = axisY.__Instance;
            if (ReferenceEquals(axisZ, null))
                throw new global::System.ArgumentNullException("axisZ", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = axisZ.__Instance;
            __Internal.ctor((__Instance + __PointerAdjustment), __arg0, __arg1, __arg2);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::AcidSharp.Quaternion __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Adds this quaternion to another quaternion.</summary>
        /// <param name="other">The other quaternion.</param>
        public global::AcidSharp.Quaternion Add(global::AcidSharp.Quaternion other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::AcidSharp.Quaternion.__Internal();
            __Internal.Add((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::AcidSharp.Quaternion.__CreateInstance(__ret);
        }

        /// <summary>Subtracts this quaternion to another quaternion.</summary>
        /// <param name="other">The other quaternion.</param>
        public global::AcidSharp.Quaternion Subtract(global::AcidSharp.Quaternion other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::AcidSharp.Quaternion.__Internal();
            __Internal.Subtract((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::AcidSharp.Quaternion.__CreateInstance(__ret);
        }

        /// <summary>Multiplies this quaternion with another quaternion.</summary>
        /// <param name="other">The other quaternion.</param>
        public global::AcidSharp.Quaternion Multiply(global::AcidSharp.Quaternion other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::AcidSharp.Quaternion.__Internal();
            __Internal.Multiply((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::AcidSharp.Quaternion.__CreateInstance(__ret);
        }

        /// <summary>Multiplies this quaternion with another vector.</summary>
        /// <param name="other">The other vector.</param>
        public global::AcidSharp.Vector3 Multiply(global::AcidSharp.Vector3 other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::AcidSharp.Vector3.__Internal();
            __Internal.Multiply_1((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::AcidSharp.Vector3.__CreateInstance(__ret);
        }

        /// <summary>Multiplies this quaternion with the inverse of another quaternion. The value of both argument quaternions is persevered (this = left * right^-1).</summary>
        /// <param name="other">The other quaternion.</param>
        public global::AcidSharp.Quaternion MultiplyInverse(global::AcidSharp.Quaternion other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::AcidSharp.Quaternion.__Internal();
            __Internal.MultiplyInverse((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::AcidSharp.Quaternion.__CreateInstance(__ret);
        }

        /// <summary>Calculates the dot product of the this quaternion and another quaternion.</summary>
        /// <param name="other">The other quaternion.</param>
        public float Dot(global::AcidSharp.Quaternion other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = __Internal.Dot((__Instance + __PointerAdjustment), __arg0);
            return __ret;
        }

        /// <summary>Calculates the slerp between this quaternion and another quaternion, they must be normalized!</summary>
        /// <param name="other">The other quaternion.</param>
        /// <param name="progression">The progression.</param>
        public global::AcidSharp.Quaternion Slerp(global::AcidSharp.Quaternion other, float progression)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __arg1 = &progression;
            var __ret = new global::AcidSharp.Quaternion.__Internal();
            __Internal.Slerp((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0, __arg1);
            return global::AcidSharp.Quaternion.__CreateInstance(__ret);
        }

        /// <summary>Scales this quaternion by a scalar.</summary>
        /// <param name="scalar">The scalar value.</param>
        public global::AcidSharp.Quaternion Scale(float scalar)
        {
            var __arg0 = &scalar;
            var __ret = new global::AcidSharp.Quaternion.__Internal();
            __Internal.Scale((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::AcidSharp.Quaternion.__CreateInstance(__ret);
        }

        /// <summary>Negates this quaternion.</summary>
        public global::AcidSharp.Quaternion Negate()
        {
            var __ret = new global::AcidSharp.Quaternion.__Internal();
            __Internal.Negate((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return global::AcidSharp.Quaternion.__CreateInstance(__ret);
        }

        /// <summary>Normalizes this quaternion.</summary>
        public global::AcidSharp.Quaternion Normalize()
        {
            var __ret = new global::AcidSharp.Quaternion.__Internal();
            __Internal.Normalize((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return global::AcidSharp.Quaternion.__CreateInstance(__ret);
        }

        /// <summary>Converts this quaternion to a 4x4 matrix.</summary>
        public global::AcidSharp.Matrix4 ToMatrix()
        {
            var __ret = new global::AcidSharp.Matrix4.__Internal();
            __Internal.ToMatrix((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return global::AcidSharp.Matrix4.__CreateInstance(__ret);
        }

        /// <summary>Converts this quaternion to a 3x3 matrix representing the exact same rotation as this quaternion.</summary>
        public global::AcidSharp.Matrix4 ToRotationMatrix()
        {
            var __ret = new global::AcidSharp.Matrix4.__Internal();
            __Internal.ToRotationMatrix((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return global::AcidSharp.Matrix4.__CreateInstance(__ret);
        }

        /// <summary>Converts this quaternion to euler angles.</summary>
        public global::AcidSharp.Vector3 ToEuler()
        {
            var __ret = new global::AcidSharp.Vector3.__Internal();
            __Internal.ToEuler((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return global::AcidSharp.Vector3.__CreateInstance(__ret);
        }

        public void Decode(global::AcidSharp.Metadata metadata)
        {
            if (ReferenceEquals(metadata, null))
                throw new global::System.ArgumentNullException("metadata", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = metadata.__Instance;
            __Internal.Decode((__Instance + __PointerAdjustment), __arg0);
        }

        public void Encode(global::AcidSharp.Metadata metadata)
        {
            if (ReferenceEquals(metadata, null))
                throw new global::System.ArgumentNullException("metadata", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = metadata.__Instance;
            __Internal.Encode((__Instance + __PointerAdjustment), __arg0);
        }

        public static bool operator ==(global::AcidSharp.Quaternion __op, global::AcidSharp.Quaternion other)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool otherNull = ReferenceEquals(other, null);
            if (__opNull || otherNull)
                return __opNull && otherNull;
            var __arg0 = __op.__Instance;
            var __arg1 = other.__Instance;
            var __ret = __Internal.OperatorEqualEqual(__arg0, __arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as global::AcidSharp.Quaternion;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(global::AcidSharp.Quaternion.__Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(global::AcidSharp.Quaternion __op, global::AcidSharp.Quaternion other)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool otherNull = ReferenceEquals(other, null);
            if (__opNull || otherNull)
                return !(__opNull && otherNull);
            var __arg0 = __op.__Instance;
            var __arg1 = other.__Instance;
            var __ret = __Internal.OperatorExclaimEqual(__arg0, __arg1);
            return __ret;
        }

        public static bool operator <(global::AcidSharp.Quaternion __op, global::AcidSharp.Quaternion other)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = __op.__Instance;
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = other.__Instance;
            var __ret = __Internal.OperatorLess(__arg0, __arg1);
            return __ret;
        }

        public static bool operator <=(global::AcidSharp.Quaternion __op, global::AcidSharp.Quaternion other)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = __op.__Instance;
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = other.__Instance;
            var __ret = __Internal.OperatorLessEqual(__arg0, __arg1);
            return __ret;
        }

        public static bool operator >(global::AcidSharp.Quaternion __op, global::AcidSharp.Quaternion other)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = __op.__Instance;
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = other.__Instance;
            var __ret = __Internal.OperatorGreater(__arg0, __arg1);
            return __ret;
        }

        public static bool operator >=(global::AcidSharp.Quaternion __op, global::AcidSharp.Quaternion other)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = __op.__Instance;
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = other.__Instance;
            var __ret = __Internal.OperatorGreaterEqual(__arg0, __arg1);
            return __ret;
        }

        public static bool operator ==(global::AcidSharp.Quaternion __op, float value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return __opNull && valueNull;
            var __arg0 = __op.__Instance;
            var __arg1 = &value;
            var __ret = __Internal.OperatorEqualEqual(__arg0, __arg1);
            return __ret;
        }

        public static bool operator !=(global::AcidSharp.Quaternion __op, float value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return !(__opNull && valueNull);
            var __arg0 = __op.__Instance;
            var __arg1 = &value;
            var __ret = __Internal.OperatorExclaimEqual(__arg0, __arg1);
            return __ret;
        }

        public static global::AcidSharp.Quaternion operator -(global::AcidSharp.Quaternion __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = __op.__Instance;
            var __ret = new global::AcidSharp.Quaternion.__Internal();
            __Internal.OperatorMinus(__arg0, new IntPtr(&__ret));
            return global::AcidSharp.Quaternion.__CreateInstance(__ret);
        }

        public string ToString()
        {
            var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
            __Internal.ToString((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            var __basicStringRet0 = global::Std.BasicString<char, global::Std.CharTraits<char>, global::Std.Allocator<char>>.__CreateInstance(__ret);
            var __stringRet0 = global::Std.BasicStringExtensions.CStr(__basicStringRet0);
            __basicStringRet0.Dispose(false);
            return __stringRet0;
        }

        public static implicit operator global::AcidSharp.Quaternion(global::AcidSharp.Matrix4 source)
        {
            return new global::AcidSharp.Quaternion(source);
        }

        public static global::AcidSharp.Quaternion operator +(global::AcidSharp.Quaternion left, global::AcidSharp.Quaternion right)
        {
            if (ReferenceEquals(left, null))
                throw new global::System.ArgumentNullException("left", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = left.__Instance;
            if (ReferenceEquals(right, null))
                throw new global::System.ArgumentNullException("right", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = right.__Instance;
            var __ret = new global::AcidSharp.Quaternion.__Internal();
            __Internal.OperatorPlus(new IntPtr(&__ret), __arg0, __arg1);
            return global::AcidSharp.Quaternion.__CreateInstance(__ret);
        }

        public static global::AcidSharp.Quaternion operator -(global::AcidSharp.Quaternion left, global::AcidSharp.Quaternion right)
        {
            if (ReferenceEquals(left, null))
                throw new global::System.ArgumentNullException("left", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = left.__Instance;
            if (ReferenceEquals(right, null))
                throw new global::System.ArgumentNullException("right", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = right.__Instance;
            var __ret = new global::AcidSharp.Quaternion.__Internal();
            __Internal.OperatorMinus(new IntPtr(&__ret), __arg0, __arg1);
            return global::AcidSharp.Quaternion.__CreateInstance(__ret);
        }

        public static global::AcidSharp.Quaternion operator *(global::AcidSharp.Quaternion left, global::AcidSharp.Quaternion right)
        {
            if (ReferenceEquals(left, null))
                throw new global::System.ArgumentNullException("left", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = left.__Instance;
            if (ReferenceEquals(right, null))
                throw new global::System.ArgumentNullException("right", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = right.__Instance;
            var __ret = new global::AcidSharp.Quaternion.__Internal();
            __Internal.OperatorStar(new IntPtr(&__ret), __arg0, __arg1);
            return global::AcidSharp.Quaternion.__CreateInstance(__ret);
        }

        public static global::AcidSharp.Vector3 operator *(global::AcidSharp.Quaternion left, global::AcidSharp.Vector3 right)
        {
            if (ReferenceEquals(left, null))
                throw new global::System.ArgumentNullException("left", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = left.__Instance;
            if (ReferenceEquals(right, null))
                throw new global::System.ArgumentNullException("right", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = right.__Instance;
            var __ret = new global::AcidSharp.Vector3.__Internal();
            __Internal.OperatorStar_1(new IntPtr(&__ret), __arg0, __arg1);
            return global::AcidSharp.Vector3.__CreateInstance(__ret);
        }

        public static global::AcidSharp.Quaternion operator *(float left, global::AcidSharp.Quaternion right)
        {
            var __arg0 = &left;
            if (ReferenceEquals(right, null))
                throw new global::System.ArgumentNullException("right", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = right.__Instance;
            var __ret = new global::AcidSharp.Quaternion.__Internal();
            __Internal.OperatorStar(new IntPtr(&__ret), __arg0, __arg1);
            return global::AcidSharp.Quaternion.__CreateInstance(__ret);
        }

        public static global::AcidSharp.Quaternion operator *(global::AcidSharp.Quaternion left, float right)
        {
            if (ReferenceEquals(left, null))
                throw new global::System.ArgumentNullException("left", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = left.__Instance;
            var __arg1 = &right;
            var __ret = new global::AcidSharp.Quaternion.__Internal();
            __Internal.OperatorStar(new IntPtr(&__ret), __arg0, __arg1);
            return global::AcidSharp.Quaternion.__CreateInstance(__ret);
        }

        public static global::AcidSharp.Quaternion Zero
        {
            get
            {
                var __ptr = (global::AcidSharp.Quaternion.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Acid", "?ZERO@Quaternion@acid@@2V12@B");
                return global::AcidSharp.Quaternion.__CreateInstance(*__ptr);
            }
        }

        public static global::AcidSharp.Quaternion One
        {
            get
            {
                var __ptr = (global::AcidSharp.Quaternion.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Acid", "?ONE@Quaternion@acid@@2V12@B");
                return global::AcidSharp.Quaternion.__CreateInstance(*__ptr);
            }
        }

        public static global::AcidSharp.Quaternion WOne
        {
            get
            {
                var __ptr = (global::AcidSharp.Quaternion.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Acid", "?W_ONE@Quaternion@acid@@2V12@B");
                return global::AcidSharp.Quaternion.__CreateInstance(*__ptr);
            }
        }

        public static global::AcidSharp.Quaternion PositiveInfinity
        {
            get
            {
                var __ptr = (global::AcidSharp.Quaternion.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Acid", "?POSITIVE_INFINITY@Quaternion@acid@@2V12@B");
                return global::AcidSharp.Quaternion.__CreateInstance(*__ptr);
            }
        }

        public static global::AcidSharp.Quaternion NegativeInfinity
        {
            get
            {
                var __ptr = (global::AcidSharp.Quaternion.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Acid", "?NEGATIVE_INFINITY@Quaternion@acid@@2V12@B");
                return global::AcidSharp.Quaternion.__CreateInstance(*__ptr);
            }
        }

        public float this[uint index]
        {
            get
            {
                var __arg0 = &index;
                var __ret = __Internal.OperatorSubscript((__Instance + __PointerAdjustment), __arg0);
                return *__ret;
            }

            set
            {
                var __arg0 = &index;
                *global::AcidSharp.Quaternion.__Internal.OperatorSubscript((__Instance + __PointerAdjustment), &index) = value;
            }
        }

        public float X
        {
            get
            {
                var __ret = __Internal.GetX((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetX((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public float Y
        {
            get
            {
                var __ret = __Internal.GetY((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetY((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public float Z
        {
            get
            {
                var __ret = __Internal.GetZ((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetZ((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public float W
        {
            get
            {
                var __ret = __Internal.GetW((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetW((__Instance + __PointerAdjustment), __arg0);
            }
        }

        /// <summary>Gets the length squared of this quaternion.</summary>
        public float LengthSquared
        {
            get
            {
                var __ret = __Internal.LengthSquared((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        /// <summary>Gets the length of this quaternion.</summary>
        public float Length
        {
            get
            {
                var __ret = __Internal.Length((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        /// <summary>Gets the maximum value in this quaternion.</summary>
        public float MaxComponent
        {
            get
            {
                var __ret = __Internal.MaxComponent((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        /// <summary>Gets the lowest value in this quaternion.</summary>
        public float MinComponent
        {
            get
            {
                var __ret = __Internal.MinComponent((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }
}
