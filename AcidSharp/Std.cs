// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using System.Runtime.CompilerServices;

[assembly:InternalsVisibleTo("AcidSharp")]

namespace Std
{
    namespace CharTraits
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public unsafe partial struct __Internal
        {
        }
    }

    public unsafe partial class CharTraits<_Elem> : IDisposable
    {
        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Std.CharTraits<_Elem>> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Std.CharTraits<_Elem>>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::Std.CharTraits<_Elem> __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Std.CharTraits<_Elem>(native.ToPointer(), skipVTables);
        }

        internal static global::Std.CharTraits<_Elem> __CreateInstance(global::Std.CharTraits.__Internal native, bool skipVTables = false)
        {
            return new global::Std.CharTraits<_Elem>(native, skipVTables);
        }

        private static void* __CopyValue(global::Std.CharTraits.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Std.CharTraits.__Internal));
            *(global::Std.CharTraits.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CharTraits(global::Std.CharTraits.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CharTraits(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Std.CharTraits<_Elem> __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }
}

namespace Std
{
}

namespace Std
{
    namespace CompressedPair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_less__f___N_std_S__Compressed_pair____N_std_S_allocator____N_std_S__Tree_node____N_std_S_pair__1f____N_fl_S_IModule__v___N_std_S__Tree_val____N_std_S__Tree_simple_types__S4__Vb1_Vb1
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_std_S__Tree_node____N_std_S_pair__1f____N_fl_S_IModule__v___N_std_S__Tree_val____N_std_S__Tree_simple_types__S2__Vb1 _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_std_S__Tree_node____N_std_S_pair__1f____N_fl_S_IModule__v___N_std_S__Tree_val____N_std_S__Tree_simple_types__S2__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.TreeVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 32)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator__C___N_std_S__String_val____N_std_S__Simple_types__C_Vb1
        {
            [FieldOffset(0)]
            internal global::Std.StringVal.__Internalc__N_std_S__String_val____N_std_S__Simple_types__C _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator_____N_fl_S_LoadedValue___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_std_S_shared_ptr____N_fl_S_IResource___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator___1C___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_std_S_function__Fv_____N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_std_S_shared_ptr____N_fl_S_IEvent___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_less____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_std_S__Compressed_pair____N_std_S_allocator____N_std_S__Tree_node____N_std_S_pair__1S1____N_std_S_shared_ptr____N_fl_S_ConfigKey__v___N_std_S__Tree_val____N_std_S__Tree_simple_types__S7__Vb1_Vb1
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_std_S__Tree_node____N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_std_S_shared_ptr____N_fl_S_ConfigKey__v___N_std_S__Tree_val____N_std_S__Tree_simple_types__S2__Vb1 _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_std_S__Tree_node____N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_std_S_shared_ptr____N_fl_S_ConfigKey__v___N_std_S__Tree_val____N_std_S__Tree_simple_types__S2__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.TreeVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_fl_S_RowCsv___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_std_S_shared_ptr____N_fl_S_JsonSection___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator_____N_fl_S_IAxis___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator____E_WsiAction___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator__f___N_std_S__Vector_val____N_std_S__Simple_types__f_Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator__i___N_std_S__Vector_val____N_std_S__Simple_types__i_Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator_____N_fl_S_IButton___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator____E_WsiKey___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator____E_WsiMouseButton___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_std_S_shared_ptr____N_fl_S_IComponent___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator_____N_fl_S_GameObject___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_less____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_std_S__Compressed_pair____N_std_S_allocator____N_std_S__Tree_node____N_std_S_pair__1S1____N_std_S_function__F__N_std_S_shared_ptr____N_fl_S_IComponent____v___N_std_S__Tree_val____N_std_S__Tree_simple_types__S7__Vb1_Vb1
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_std_S__Tree_node____N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_std_S_function__F__N_std_S_shared_ptr____N_fl_S_IComponent____v___N_std_S__Tree_val____N_std_S__Tree_simple_types__S2__Vb1 _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_std_S__Tree_node____N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_std_S_function__F__N_std_S_shared_ptr____N_fl_S_IComponent____v___N_std_S__Tree_val____N_std_S__Tree_simple_types__S2__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.TreeVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator____S_VkVertexInputBindingDescription___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator____S_VkVertexInputAttributeDescription___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator_____N_fl_S_Uniform___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator_____N_fl_S_UniformBlock___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator_____N_fl_S_VertexAttribute___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_fl_S_DescriptorType___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator_____N_fl_S_Particle___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_less____N_std_S_shared_ptr____N_fl_S_ParticleType___N_std_S__Compressed_pair____N_std_S_allocator____N_std_S__Tree_node____N_std_S_pair__1S1____N_std_S_vector_____N_fl_S_Particle___N_std_S_allocator__S8___v___N_std_S__Tree_val____N_std_S__Tree_simple_types__S6__Vb1_Vb1
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_std_S__Tree_node____N_std_S_pair__1__N_std_S_shared_ptr____N_fl_S_ParticleType___N_std_S_vector_____N_fl_S_Particle___N_std_S_allocator__S6___v___N_std_S__Tree_val____N_std_S__Tree_simple_types__S2__Vb1 _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_std_S__Tree_node____N_std_S_pair__1__N_std_S_shared_ptr____N_fl_S_ParticleType___N_std_S_vector_____N_fl_S_Particle___N_std_S_allocator__S6___v___N_std_S__Tree_val____N_std_S__Tree_simple_types__S2__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.TreeVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_std_S_shared_ptr____N_fl_S_ParticleType___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_fl_S_Attachment___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_fl_S_SubpassType___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator_____S_VkImage_T___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator_____S_VkImageView_T___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator_____N_fl_S_Texture___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator_____S_VkFramebuffer_T___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator____U_VkClearValue___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_std_S_shared_ptr____N_fl_S_IRenderer___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_less__f___N_std_S__Compressed_pair____N_std_S_allocator____N_std_S__Tree_node____N_std_S_pair__1f___N_std_S_vector____N_std_S_shared_ptr____N_fl_S_IRenderer___N_std_S_allocator__S6___v___N_std_S__Tree_val____N_std_S__Tree_simple_types__S4__Vb1_Vb1
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_std_S__Tree_node____N_std_S_pair__1f___N_std_S_vector____N_std_S_shared_ptr____N_fl_S_IRenderer___N_std_S_allocator__S4___v___N_std_S__Tree_val____N_std_S__Tree_simple_types__S2__Vb1 _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_std_S__Tree_node____N_std_S_pair__1f___N_std_S_vector____N_std_S_shared_ptr____N_fl_S_IRenderer___N_std_S_allocator__S4___v___N_std_S__Tree_val____N_std_S__Tree_simple_types__S2__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.TreeVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator_____N_fl_S_RenderStage___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_allocator_____N_fl_S_UiObject___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }
    }
}

namespace Std
{
    namespace Allocator
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public unsafe partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("Std-symbols", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0?$allocator@D@std@@QEAA@XZ")]
            internal static extern global::System.IntPtr ctorc__N_std_S_allocator__C(global::System.IntPtr instance);
        }
    }

    public unsafe partial class Allocator<_Ty> : IDisposable
    {
        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Std.Allocator<_Ty>> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Std.Allocator<_Ty>>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::Std.Allocator<_Ty> __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Std.Allocator<_Ty>(native.ToPointer(), skipVTables);
        }

        internal static global::Std.Allocator<_Ty> __CreateInstance(global::Std.Allocator.__Internal native, bool skipVTables = false)
        {
            return new global::Std.Allocator<_Ty>(native, skipVTables);
        }

        private static void* __CopyValue(global::Std.Allocator.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Std.Allocator.__Internal));
            *(global::Std.Allocator.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Allocator(global::Std.Allocator.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Allocator(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Allocator()
        {
            var ___Ty = typeof(_Ty);
            if (___Ty.IsAssignableFrom(typeof(char)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::Std.Allocator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::Std.Allocator.__Internal.ctorc__N_std_S_allocator__C((__Instance + __PointerAdjustment));
                return;
            }
            throw new ArgumentOutOfRangeException("_Ty", string.Join(", ", new[] { typeof(_Ty).FullName }), "global::Std.Allocator<_Ty> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <char>.");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Std.Allocator<_Ty> __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }
}

namespace Std
{
    public unsafe static partial class BasicStringExtensions
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("Std-symbols", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ")]
            internal static extern global::System.IntPtr CStr(global::System.IntPtr instance);
        }

        public static string CStr(this global::Std.BasicString<char, global::Std.CharTraits<char>, global::Std.Allocator<char>> @this)
        {
            var __arg0 = ReferenceEquals(@this, null) ? global::System.IntPtr.Zero : @this.__Instance;
            var __ret = __Internal.CStr(__arg0);
            return Marshal.PtrToStringAnsi(__ret);
        }
    }

    namespace BasicString
    {
        [StructLayout(LayoutKind.Explicit, Size = 32)]
        public unsafe partial struct __Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator__C___N_std_S__String_val____N_std_S__Simple_types__C_Vb1 _Mypair;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Std-symbols", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ")]
            internal static extern void dtorc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Std-symbols", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ")]
            internal static extern global::System.IntPtr CStrc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C(global::System.IntPtr instance);
        }
    }

    public unsafe partial class BasicString<_Elem, _Traits, _Alloc> : IDisposable
    {
        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Std.BasicString<_Elem, _Traits, _Alloc>> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Std.BasicString<_Elem, _Traits, _Alloc>>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::Std.BasicString<_Elem, _Traits, _Alloc> __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Std.BasicString<_Elem, _Traits, _Alloc>(native.ToPointer(), skipVTables);
        }

        internal static global::Std.BasicString<_Elem, _Traits, _Alloc> __CreateInstance(global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C native, bool skipVTables = false)
        {
            return new global::Std.BasicString<_Elem, _Traits, _Alloc>(native, skipVTables);
        }

        private static void* __CopyValue(global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C));
            *(global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C*) ret = native;
            return ret.ToPointer();
        }

        private BasicString(global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected BasicString(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Std.BasicString<_Elem, _Traits, _Alloc> __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
            {
                var ___Elem = typeof(_Elem);
                var ___Traits = typeof(_Traits);
                var ___Alloc = typeof(_Alloc);
                if (___Elem.IsAssignableFrom(typeof(char)) && ___Traits.IsAssignableFrom(typeof(global::Std.CharTraits<char>)) && ___Alloc.IsAssignableFrom(typeof(global::Std.Allocator<char>)))
                {
                    global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C.dtorc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C((__Instance + __PointerAdjustment), 0);
                    return;
                }
                throw new ArgumentOutOfRangeException("_Elem, _Traits, _Alloc", string.Join(", ", new[] { typeof(_Elem).FullName, typeof(_Traits).FullName, typeof(_Alloc).FullName }), "global::Std.BasicString<_Elem, _Traits, _Alloc> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <char, global::Std.CharTraits<char>, global::Std.Allocator<char>>.");
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    namespace StringVal
    {
        [StructLayout(LayoutKind.Explicit, Size = 32)]
        public unsafe partial struct __Internalc__N_std_S__String_val____N_std_S__Simple_types__C
        {
            [FieldOffset(0)]
            internal global::Std.StringVal.Bxty.__Internal _Bx;

            [FieldOffset(16)]
            internal ulong _Mysize;

            [FieldOffset(24)]
            internal ulong _Myres;
        }

        namespace Bxty
        {
            [StructLayout(LayoutKind.Explicit, Size = 16)]
            public unsafe partial struct __Internal
            {
                [FieldOffset(0)]
                internal fixed sbyte _Buf[16];

                [FieldOffset(0)]
                internal global::System.IntPtr _Ptr;

                [FieldOffset(0)]
                internal fixed sbyte _Alias[16];
            }
        }

    }
}

namespace Std
{
    namespace SharedPtr
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr _Ptr;

            [FieldOffset(8)]
            internal global::System.IntPtr _Rep;
        }
    }

    namespace WeakPtr
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr _Ptr;

            [FieldOffset(8)]
            internal global::System.IntPtr _Rep;
        }
    }
}

namespace Std
{
    namespace Array
    {
        [StructLayout(LayoutKind.Explicit, Size = 1320)]
        public unsafe partial struct __Internalc__N_std_S_array____N_fl_S_Joystick_Vk15
        {
            [FieldOffset(0)]
            internal fixed byte _Elems[1320];
        }

        [StructLayout(LayoutKind.Explicit, Size = 1392)]
        public unsafe partial struct __Internalc__N_std_S_array____E_WsiAction_Vk348
        {
            [FieldOffset(0)]
            internal fixed int _Elems[348];
        }

        [StructLayout(LayoutKind.Explicit, Size = 28)]
        public unsafe partial struct __Internalc__N_std_S_array____E_WsiAction_Vk7
        {
            [FieldOffset(0)]
            internal fixed int _Elems[7];
        }
    }
}

namespace Std
{
    namespace Chrono
    {
        namespace TimePoint
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public unsafe partial struct __Internalc__N_std_N_chrono_S_time_point____N_std_N_chrono_S_steady_clock___N_std_N_chrono_S_duration__K___N_std_S_ratio__VK1_VK1000000000
            {
                [FieldOffset(0)]
                internal global::Std.Chrono.Duration.__Internalc__N_std_N_chrono_S_duration__K___N_std_S_ratio__VK1_VK1000000000 _MyDur;
            }
        }

        namespace Duration
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public unsafe partial struct __Internalc__N_std_N_chrono_S_duration__K___N_std_S_ratio__VK1_VK1000000000
            {
                [FieldOffset(0)]
                internal long _MyRep;
            }
        }
    }
}

namespace Std
{
    namespace TreeVal
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr _Myhead;

            [FieldOffset(8)]
            internal ulong _Mysize;
        }
    }
}

namespace Std
{
    namespace Map
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_map__f____N_fl_S_IModule___N_std_S_less__f___N_std_S_allocator____N_std_S_pair__1f_S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_less__f___N_std_S__Compressed_pair____N_std_S_allocator____N_std_S__Tree_node____N_std_S_pair__1f____N_fl_S_IModule__v___N_std_S__Tree_val____N_std_S__Tree_simple_types__S4__Vb1_Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_map____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_std_S_shared_ptr____N_fl_S_ConfigKey___N_std_S_less__S0____N_std_S_allocator____N_std_S_pair__1S0__S3_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_less____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_std_S__Compressed_pair____N_std_S_allocator____N_std_S__Tree_node____N_std_S_pair__1S1____N_std_S_shared_ptr____N_fl_S_ConfigKey__v___N_std_S__Tree_val____N_std_S__Tree_simple_types__S7__Vb1_Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_map____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_std_S_function__F__N_std_S_shared_ptr____N_fl_S_IComponent_____N_std_S_less__S0____N_std_S_allocator____N_std_S_pair__1S0__S3_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_less____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_std_S__Compressed_pair____N_std_S_allocator____N_std_S__Tree_node____N_std_S_pair__1S1____N_std_S_function__F__N_std_S_shared_ptr____N_fl_S_IComponent____v___N_std_S__Tree_val____N_std_S__Tree_simple_types__S7__Vb1_Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_map____N_std_S_shared_ptr____N_fl_S_ParticleType___N_std_S_vector_____N_fl_S_Particle___N_std_S_allocator__S3____N_std_S_less__S0____N_std_S_allocator____N_std_S_pair__1S0__S2_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_less____N_std_S_shared_ptr____N_fl_S_ParticleType___N_std_S__Compressed_pair____N_std_S_allocator____N_std_S__Tree_node____N_std_S_pair__1S1____N_std_S_vector_____N_fl_S_Particle___N_std_S_allocator__S8___v___N_std_S__Tree_val____N_std_S__Tree_simple_types__S6__Vb1_Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_map__f___N_std_S_vector____N_std_S_shared_ptr____N_fl_S_IRenderer___N_std_S_allocator__S1____N_std_S_less__f___N_std_S_allocator____N_std_S_pair__1f_S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_less__f___N_std_S__Compressed_pair____N_std_S_allocator____N_std_S__Tree_node____N_std_S_pair__1f___N_std_S_vector____N_std_S_shared_ptr____N_fl_S_IRenderer___N_std_S_allocator__S6___v___N_std_S__Tree_val____N_std_S__Tree_simple_types__S4__Vb1_Vb1 _Mypair;
        }
    }
}

namespace Std
{
    namespace Vector
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_std_S_allocator__S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector_____N_fl_S_LoadedValue___N_std_S_allocator__S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator_____N_fl_S_LoadedValue___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector____N_std_S_shared_ptr____N_fl_S_IResource___N_std_S_allocator__S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_std_S_shared_ptr____N_fl_S_IResource___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector___1C___N_std_S_allocator__S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator___1C___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector____N_std_S_function__Fv_____N_std_S_allocator__S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_std_S_function__Fv_____N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector____N_std_S_shared_ptr____N_fl_S_IEvent___N_std_S_allocator__S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_std_S_shared_ptr____N_fl_S_IEvent___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector____N_fl_S_RowCsv___N_std_S_allocator__S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_fl_S_RowCsv___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector____N_std_S_shared_ptr____N_fl_S_JsonSection___N_std_S_allocator__S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_std_S_shared_ptr____N_fl_S_JsonSection___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector_____N_fl_S_IAxis___N_std_S_allocator__S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator_____N_fl_S_IAxis___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector____E_WsiAction___N_std_S_allocator__S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator____E_WsiAction___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector__f___N_std_S_allocator__f
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator__f___N_std_S__Vector_val____N_std_S__Simple_types__f_Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector__i___N_std_S_allocator__i
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator__i___N_std_S__Vector_val____N_std_S__Simple_types__i_Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector_____N_fl_S_IButton___N_std_S_allocator__S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator_____N_fl_S_IButton___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector____E_WsiKey___N_std_S_allocator__S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator____E_WsiKey___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector____E_WsiMouseButton___N_std_S_allocator__S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator____E_WsiMouseButton___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector____N_std_S_shared_ptr____N_fl_S_IComponent___N_std_S_allocator__S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_std_S_shared_ptr____N_fl_S_IComponent___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector_____N_fl_S_GameObject___N_std_S_allocator__S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator_____N_fl_S_GameObject___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector____S_VkVertexInputBindingDescription___N_std_S_allocator__S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator____S_VkVertexInputBindingDescription___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector____S_VkVertexInputAttributeDescription___N_std_S_allocator__S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator____S_VkVertexInputAttributeDescription___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector_____N_fl_S_Uniform___N_std_S_allocator__S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator_____N_fl_S_Uniform___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector_____N_fl_S_UniformBlock___N_std_S_allocator__S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator_____N_fl_S_UniformBlock___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector_____N_fl_S_VertexAttribute___N_std_S_allocator__S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator_____N_fl_S_VertexAttribute___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector____N_fl_S_DescriptorType___N_std_S_allocator__S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_fl_S_DescriptorType___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector_____N_fl_S_Particle___N_std_S_allocator__S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator_____N_fl_S_Particle___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector____N_std_S_shared_ptr____N_fl_S_ParticleType___N_std_S_allocator__S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_std_S_shared_ptr____N_fl_S_ParticleType___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector____N_fl_S_Attachment___N_std_S_allocator__S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_fl_S_Attachment___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector____N_fl_S_SubpassType___N_std_S_allocator__S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_fl_S_SubpassType___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector_____S_VkImage_T___N_std_S_allocator__S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator_____S_VkImage_T___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector_____S_VkImageView_T___N_std_S_allocator__S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator_____S_VkImageView_T___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector_____N_fl_S_Texture___N_std_S_allocator__S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator_____N_fl_S_Texture___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector_____S_VkFramebuffer_T___N_std_S_allocator__S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator_____S_VkFramebuffer_T___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector____U_VkClearValue___N_std_S_allocator__S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator____U_VkClearValue___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector____N_std_S_shared_ptr____N_fl_S_IRenderer___N_std_S_allocator__S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator____N_std_S_shared_ptr____N_fl_S_IRenderer___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector_____N_fl_S_RenderStage___N_std_S_allocator__S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator_____N_fl_S_RenderStage___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1 _Mypair;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_vector_____N_fl_S_UiObject___N_std_S_allocator__S0_
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_allocator_____N_fl_S_UiObject___N_std_S__Vector_val____N_std_S__Simple_types__S1__Vb1 _Mypair;
        }
    }

    namespace VectorVal
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr _Myfirst;

            [FieldOffset(8)]
            internal global::System.IntPtr _Mylast;

            [FieldOffset(16)]
            internal global::System.IntPtr _Myend;
        }
    }
}

namespace Std
{
    namespace Function
    {
        [StructLayout(LayoutKind.Explicit, Size = 64)]
        public unsafe partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Std.FuncClass.Storage.__Internal _Mystorage;
        }
    }

    namespace FuncClass
    {
        [StructLayout(LayoutKind.Explicit, Size = 64)]
        public unsafe partial struct __Internalc__N_std_S__Func_class__v_p0
        {
            [FieldOffset(0)]
            internal global::Std.FuncClass.Storage.__Internal _Mystorage;
        }

        [StructLayout(LayoutKind.Explicit, Size = 64)]
        public unsafe partial struct __Internalc__N_std_S__Func_class__b_p0
        {
            [FieldOffset(0)]
            internal global::Std.FuncClass.Storage.__Internal _Mystorage;
        }

        [StructLayout(LayoutKind.Explicit, Size = 64)]
        public unsafe partial struct __Internalc__N_std_S__Func_class____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C_p0
        {
            [FieldOffset(0)]
            internal global::Std.FuncClass.Storage.__Internal _Mystorage;
        }

        [StructLayout(LayoutKind.Explicit, Size = 64)]
        public unsafe partial struct __Internalc__N_std_S__Func_class____N_std_S_shared_ptr____N_fl_S_IComponent_p0
        {
            [FieldOffset(0)]
            internal global::Std.FuncClass.Storage.__Internal _Mystorage;
        }

        namespace Storage
        {
            [StructLayout(LayoutKind.Explicit, Size = 64)]
            public unsafe partial struct __Internal
            {
                [FieldOffset(0)]
                internal double _Dummy1;

                [FieldOffset(0)]
                internal fixed sbyte _Dummy2[56];

                [FieldOffset(0)]
                internal fixed long _Ptrs[8];
            }
        }

    }
}
