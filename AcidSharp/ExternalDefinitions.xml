<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Definitions>
  <!--
  ***************************************
  **
  ** IModule.hpp
  **
  ***************************************
  -->
  <Export name="IModule" target="Common" source="IModule.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new module.
/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Update" target="Common" source="IModule.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// The update function for the module.
/// </summary>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** IEvent.hpp
  **
  ***************************************
  -->
  <Export name="IEvent" target="Common" source="IEvent.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new event.
/// </summary>
]]>
    </Description>
  </Export>
  <Export name="EventTriggered" target="Common" source="IEvent.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets if the event has occurred.
/// </summary>
/// <returns> The event has occurred. </returns>
]]>
    </Description>
  </Export>
  <Export name="OnEvent" target="Common" source="IEvent.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Run when a event has occurred.
/// </summary>
]]>
    </Description>
  </Export>
  <Export name="RemoveAfterEvent" target="Common" source="IEvent.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets if the event is removed after it has run once.
/// </summary>
/// <returns> If the even will run. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Colour.hpp
  **
  ***************************************
  -->
  <Export name="Colour" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for colour.
/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Colour" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for colour.
/// </summary>
/// <param name="r"> The new R value. </param>
/// <param name="g"> The new G value. </param>
/// <param name="b"> The new B value. </param>
/// <param name="a"> The new A value. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="r" />
      <Parameter type="float" name="g" />
      <Parameter type="float" name="b" />
      <Parameter type="float" name="a" />
    </Parameters>
  </Export>
  <Export name="Colour" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for colour.
/// </summary>
/// <param name="hex"> The new values from HEX. </param>
/// <param name="a"> The new A value. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="hex" />
      <Parameter type="float" name="a" />
    </Parameters>
  </Export>
  <Export name="Colour" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for colour.
/// </summary>
/// <param name="source"> Creates this colour out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Colour" name="source" />
    </Parameters>
  </Export>
  <Export name="Colour" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for colour.
/// </summary>
/// <param name="source"> Creates this colour out of a existing vector. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="source" />
    </Parameters>
  </Export>
  <Export name="Colour" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for colour.
/// </summary>
/// <param name="source"> Creates this colour out of a existing vector. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector4" name="source" />
    </Parameters>
  </Export>
  <Export name="Add" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Adds this vector to another vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Colour" name="other" />
    </Parameters>
  </Export>
  <Export name="Subtract" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Subtracts this vector to another vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Colour" name="other" />
    </Parameters>
  </Export>
  <Export name="Multiply" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Multiplies this vector with another vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Colour" name="other" />
    </Parameters>
  </Export>
  <Export name="Divide" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Divides this vector by another vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Colour" name="other" />
    </Parameters>
  </Export>
  <Export name="Scale" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Scales this vector by a scalar.
/// </summary>
/// <param name="scalar"> The scalar value. </param>
/// <returns> The scaled vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="scalar" />
    </Parameters>
  </Export>
  <Export name="Normalize" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Normalizes this vector.
/// </summary>
/// <returns> The normalized vector. </returns>
]]>
    </Description>
  </Export>
  <Export name="LengthSquared" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the length squared of this vector.
/// </summary>
/// <returns> The length squared. </returns>
]]>
    </Description>
  </Export>
  <Export name="Length" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the length of this vector.
/// </summary>
/// <returns> The length. </returns>
]]>
    </Description>
  </Export>
  <Export name="Interpolate" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Interpolates between this and another colour.
/// </summary>
/// <param name="other"> The other colour. </param>
/// <param name="blend"> The blend factor. </param>
/// <returns> The interpolated colour. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Colour" name="other" />
      <Parameter type="float" name="blend" />
    </Parameters>
  </Export>
  <Export name="SmoothDamp" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gradually changes this vector to a target.
/// </summary>
/// <param name="target"> The target vector. </param>
/// <param name="rate"> The rate to go from current to the target. </param>
/// <returns> The changed vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Colour" name="target" />
      <Parameter type="global::AcidSharp.Colour" name="rate" />
    </Parameters>
  </Export>
  <Export name="GetUnit" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets a colour representing the unit value of this colour.
/// </summary>
/// <returns> The unit colour. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetHex" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the hex code from this colour.
/// </summary>
/// <returns> The hex code. </returns>
]]>
    </Description>
  </Export>
  <Export name="Write" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Saves this vector into a loaded value.
/// </summary>
/// <param name="destination"> The destination loaded value. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.LoadedValue" name="destination" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Vector3.hpp
  **
  ***************************************
  -->
  <Export name="Vector3" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Vector3.
/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Vector3" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Vector3.
/// </summary>
/// <param name="x"> Start x. </param>
/// <param name="y"> Start y. </param>
/// <param name="z"> Start z. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="x" />
      <Parameter type="float" name="y" />
      <Parameter type="float" name="z" />
    </Parameters>
  </Export>
  <Export name="Vector3" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Vector3.
/// </summary>
/// <param name="source"> Creates this vector out of a existing one. </param>
/// <param name="z"> Start z. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector2" name="source" />
      <Parameter type="float" name="z" />
    </Parameters>
  </Export>
  <Export name="Vector3" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Vector3.
/// </summary>
/// <param name="source"> Creates this vector out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="source" />
    </Parameters>
  </Export>
  <Export name="Vector3" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Vector3.
/// </summary>
/// <param name="source"> Creates this vector out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector4" name="source" />
    </Parameters>
  </Export>
  <Export name="Vector3" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Vector3.
/// </summary>
/// <param name="source"> Creates this vector out of a existing colour. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Colour" name="source" />
    </Parameters>
  </Export>
  <Export name="Add" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Adds this vector to another vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Subtract" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Subtracts this vector to another vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Multiply" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Multiplies this vector with another vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Divide" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Divides this vector by another vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Angle" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Calculates the angle between this vector and another vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The angle, in radians. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Dot" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Calculates the dot product of the this vector and another vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The dot product. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Cross" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Calculates the cross product of the this vector and another vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The cross product. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Scale" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Scales this vector by a scalar.
/// </summary>
/// <param name="scalar"> The scalar value. </param>
/// <returns> The scaled vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="scalar" />
    </Parameters>
  </Export>
  <Export name="Rotate" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Rotates this vector by a angle around the origin.
/// </summary>
/// <param name="rotation"> The rotation amount. </param>
/// <returns> The rotated vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="rotation" />
    </Parameters>
  </Export>
  <Export name="Negate" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Negates this vector.
/// </summary>
/// <returns> The negated vector. </returns>
]]>
    </Description>
  </Export>
  <Export name="Normalize" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Normalizes this vector.
/// </summary>
/// <returns> The normalized vector. </returns>
]]>
    </Description>
  </Export>
  <Export name="LengthSquared" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the length squared of this vector.
/// </summary>
/// <returns> The length squared. </returns>
]]>
    </Description>
  </Export>
  <Export name="Length" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the length of this vector.
/// </summary>
/// <returns> The length. </returns>
]]>
    </Description>
  </Export>
  <Export name="MaxComponent" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the maximum value in this vector.
/// </summary>
/// <returns> The largest components. </returns>
]]>
    </Description>
  </Export>
  <Export name="MinComponent" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the lowest value in this vector.
/// </summary>
/// <returns> The smallest components. </returns>
]]>
    </Description>
  </Export>
  <Export name="ToQuaternion" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Converts these euler angles to a quaternion.
/// </summary>
/// <returns> The quaternion representation of this vector. </returns>
]]>
    </Description>
  </Export>
  <Export name="DistanceSquared" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the distance between this vector and another vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The squared distance. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Distance" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the between this vector and another vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The distance. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="DistanceVector" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the vector distance between this vector and another vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The vector distance. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="SmoothDamp" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gradually changes this vector to a target.
/// </summary>
/// <param name="target"> The target vector. </param>
/// <param name="rate"> The rate to go from current to the target. </param>
/// <returns> The changed vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="target" />
      <Parameter type="global::AcidSharp.Vector3" name="rate" />
    </Parameters>
  </Export>
  <Export name="CartesianToPolar" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Converts from rectangular to spherical coordinates, this vector is in cartesian (x, y, z).
/// </summary>
/// <returns> The polar coordinates (radius, theta, phi). </returns>
]]>
    </Description>
  </Export>
  <Export name="PolarToCartesian" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Converts from spherical to rectangular coordinates, this vector is in polar (radius, theta, phi).
/// </summary>
/// <returns> The cartesian coordinates (x, y, z). </returns>
]]>
    </Description>
  </Export>
  <Export name="ProjectCubeToSphere" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Projects this cube coordinate onto a sphere.
/// </summary>
/// <param name="radius"> The sphere radius. </param>
/// <returns> The projected cartesian coordinates. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="radius" />
    </Parameters>
  </Export>
  <Export name="BaryCentric" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the height of this vector on a point off of a 3d triangle.
/// </summary>
/// <param name="p1"> Point 1 on the triangle. </param>
/// <param name="p2"> Point 2 on the triangle. </param>
/// <param name="p3"> Point 3 on the triangle. </param>
/// <returns> Height of the triangle. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="p1" />
      <Parameter type="global::AcidSharp.Vector3" name="p2" />
      <Parameter type="global::AcidSharp.Vector3" name="p3" />
    </Parameters>
  </Export>
  <Export name="MinVector" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the lowest vector size.
/// </summary>
/// <param name="a"> The first vector to get values from. </param>
/// <param name="b"> The second vector to get values from. </param>
/// <returns> The lowest vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="a" />
      <Parameter type="global::AcidSharp.Vector3" name="b" />
    </Parameters>
  </Export>
  <Export name="MaxVector" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the maximum vector size.
/// </summary>
/// <param name="a"> The first vector to get values from. </param>
/// <param name="b"> The second vector to get values from. </param>
/// <returns> The maximum vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="a" />
      <Parameter type="global::AcidSharp.Vector3" name="b" />
    </Parameters>
  </Export>
  <Export name="RandomUnitVector" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Generates a random unit vector.
/// </summary>
/// <returns> The random unit vector. </returns>
]]>
    </Description>
  </Export>
  <Export name="RandomPointOnCircle" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets a random point from on a circle.
/// </summary>
/// <param name="normal"> The circles normal. </param>
/// <param name="radius"> The circles radius. </param>
/// <returns> The random point in a circle. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="normal" />
      <Parameter type="float" name="radius" />
    </Parameters>
  </Export>
  <Export name="RandomUnitVectorWithinCone" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Generates a random unit vector from within a cone.
/// </summary>
/// <param name="coneDirection"> The cones direction. </param>
/// <param name="angle"> The cones major angle. </param>
/// <returns> The random unitt vector in a code. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="coneDirection" />
      <Parameter type="float" name="angle" />
    </Parameters>
  </Export>
  <Export name="Write" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Saves this vector into a loaded value.
/// </summary>
/// <param name="destination"> The destination loaded value. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.LoadedValue" name="destination" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Transform.hpp
  **
  ***************************************
  -->
  <Export name="Transform" target="Common" source="Transform.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Transform.
/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Transform" target="Common" source="Transform.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Transform.
/// </summary>
/// <param name="source"> Creates this vector out of a transform. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Transform" name="source" />
    </Parameters>
  </Export>
  <Export name="Transform" target="Common" source="Transform.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Transform.
/// </summary>
/// <param name="position"> The position. </param>
/// <param name="rotation"> The rotation. </param>
/// <param name="scaling"> The scaling. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="position" />
      <Parameter type="global::AcidSharp.Vector3" name="rotation" />
      <Parameter type="global::AcidSharp.Vector3" name="scaling" />
    </Parameters>
  </Export>
  <Export name="Transform" target="Common" source="Transform.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Transform.
/// </summary>
/// <param name="position"> The position. </param>
/// <param name="rotation"> The rotation. </param>
/// <param name="scale"> The scale. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="position" />
      <Parameter type="global::AcidSharp.Vector3" name="rotation" />
      <Parameter type="float" name="scale" />
    </Parameters>
  </Export>
  <Export name="Write" target="Common" source="Transform.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Saves this transform into a loaded value.
/// </summary>
/// <param name="destination"> The destination loaded value. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.LoadedValue" name="destination" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** ISpatialStructure.hpp
  **
  ***************************************
  -->
  <Export name="ISpatialStructure" target="Common" source="ISpatialStructure.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new spatial structure.
/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Add" target="Common" source="ISpatialStructure.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Adds a new object to the spatial structure.
/// </summary>
/// <param name="object"> The object to add. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.GameObject" name="@object" />
    </Parameters>
  </Export>
  <Export name="Remove" target="Common" source="ISpatialStructure.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Removes an object from the spatial structure.
/// </summary>
/// <param name="object"> The object to remove. </param>
/// <returns> If the object was removed. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.GameObject" name="@object" />
    </Parameters>
  </Export>
  <Export name="Clear" target="Common" source="ISpatialStructure.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Removes all objects from the spatial structure..
/// </summary>
]]>
    </Description>
  </Export>
  <Export name="GetSize" target="Common" source="ISpatialStructure.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the size of this structure.
/// </summary>
/// <returns> The structures size. </returns>
]]>
    </Description>
  </Export>
  <Export name="Contains" target="Common" source="ISpatialStructure.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// If the structure contains the object.
/// </summary>
/// <param name="object"> The object to check for.
/// </param>
/// <returns> If the structure contains the object. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.GameObject" name="@object" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** GameObject.hpp
  **
  ***************************************
  -->
  <Export name="AddComponent" target="Common" source="GameObject.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Adds a component to this game object.
/// </summary>
/// <param name="component"> The component to add. </param>
/// <returns> The added component. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.IComponent" name="component" />
    </Parameters>
  </Export>
  <Export name="RemoveComponent" target="Common" source="GameObject.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Removes a component from this game object.
/// </summary>
/// <param name="component"> The component to remove. </param>
/// <returns> If the component was removed. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.IComponent" name="component" />
    </Parameters>
  </Export>
  <Export name="RemoveComponent" target="Common" source="GameObject.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Removes a component from this game object.
/// </summary>
/// <param name="name"> The name of the component to remove. </param>
/// <returns> If the component was removed. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="name" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Vector2.hpp
  **
  ***************************************
  -->
  <Export name="Vector2" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Vector2.
/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Vector2" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Vector2.
/// </summary>
/// <param name="x"> Start x. </param>
/// <param name="y"> Start y. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="x" />
      <Parameter type="float" name="y" />
    </Parameters>
  </Export>
  <Export name="Vector2" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Vector2.
/// </summary>
/// <param name="source"> Creates this vector out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector2" name="source" />
    </Parameters>
  </Export>
  <Export name="Vector2" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Vector2.
/// </summary>
/// <param name="source"> Creates this vector out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="source" />
    </Parameters>
  </Export>
  <Export name="Add" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Adds this vector to another vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Subtract" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Subtracts this vector to another vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Multiply" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Multiplies this vector with another vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Divide" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Divides this vector by another vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Angle" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Calculates the angle between this vector and another vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The angle, in radians. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Dot" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Calculates the dot product of the this vector and another vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The dot product. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Scale" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Scales this vector by a scalar.
/// </summary>
/// <param name="scalar"> The scalar value. </param>
/// <returns> The scaled vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="scalar" />
    </Parameters>
  </Export>
  <Export name="Rotate" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Rotates this vector by a angle around the origin.
/// </summary>
/// <param name="angle"> The angle to rotate by, in radians. </param>
/// <returns> The rotated vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="angle" />
    </Parameters>
  </Export>
  <Export name="Rotate" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Rotates this vector by a angle around a rotation axis.
/// </summary>
/// <param name="angle"> The angle to rotate by, in radians. </param>
/// <param name="rotationAxis"> The point to rotate the vector around. </param>
/// <returns> The rotated vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="angle" />
      <Parameter type="global::AcidSharp.Vector2" name="rotationAxis" />
    </Parameters>
  </Export>
  <Export name="Negate" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Negates this vector.
/// </summary>
/// <returns> The negated vector. </returns>
]]>
    </Description>
  </Export>
  <Export name="Normalize" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Normalizes this vector.
/// </summary>
/// <returns> The normalized vector. </returns>
]]>
    </Description>
  </Export>
  <Export name="LengthSquared" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the length squared of this vector.
/// </summary>
/// <returns> The length squared. </returns>
]]>
    </Description>
  </Export>
  <Export name="Length" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the length of this vector.
/// </summary>
/// <returns> The length. </returns>
]]>
    </Description>
  </Export>
  <Export name="MaxComponent" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the maximum value in this vector.
/// </summary>
/// <returns> The largest components. </returns>
]]>
    </Description>
  </Export>
  <Export name="MinComponent" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the lowest value in this vector.
/// </summary>
/// <returns> The smallest components. </returns>
]]>
    </Description>
  </Export>
  <Export name="DistanceSquared" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the distance between this vector and another vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The squared distance. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Distance" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the between this vector and another vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The distance. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="DistanceVector" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the vector distance between this vector and another vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The vector distance. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="InTriangle" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets if this vector is in a triangle.
/// </summary>
/// <param name="v1"> The first triangle vertex. </param>
/// <param name="v2"> The second triangle vertex. </param>
/// <param name="v3"> The third triangle vertex. </param>
/// <returns> If this vector is in a triangle. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector2" name="v1" />
      <Parameter type="global::AcidSharp.Vector2" name="v2" />
      <Parameter type="global::AcidSharp.Vector2" name="v3" />
    </Parameters>
  </Export>
  <Export name="SmoothDamp" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gradually changes this vector to a target.
/// </summary>
/// <param name="target"> The target vector. </param>
/// <param name="rate"> The rate to go from current to the target. </param>
/// <returns> The changed vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector2" name="target" />
      <Parameter type="global::AcidSharp.Vector2" name="rate" />
    </Parameters>
  </Export>
  <Export name="CartesianToPolar" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Converts from rectangular to spherical coordinates, this vector is in cartesian (x, y).
/// </summary>
/// <returns> The polar coordinates (radius, theta). </returns>
]]>
    </Description>
  </Export>
  <Export name="PolarToCartesian" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Converts from spherical to rectangular coordinates, this vector is in polar (radius, theta).
/// </summary>
/// <returns> The cartesian coordinates (x, y). </returns>
]]>
    </Description>
  </Export>
  <Export name="Write" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Saves this vector into a loaded value.
/// </summary>
/// <param name="destination"> The destination loaded value. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.LoadedValue" name="destination" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** UiBound.hpp
  **
  ***************************************
  -->
  <Export name="UiBound" target="Common" source="UiBound.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for rectangle.
/// </summary>
/// <param name="position"> The object screen position. </param>
/// <param name="reference"> The reference pivot vertex (TopLeft, TopCentre, TopRight, CentreLeft, Centre, CentreRight, BottomLeft, BottomCentre, BottomRight). </param>
/// <param name="aspectPosition"> The if the x position will change with display width. </param>
/// <param name="aspectSize"> The if the width will scale with display width. </param>
/// <param name="dimensions"> The object dimensions. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector2" name="position" />
      <Parameter type="string" name="reference" />
      <Parameter type="bool" name="aspectPosition" />
      <Parameter type="bool" name="aspectSize" />
      <Parameter type="global::AcidSharp.Vector2" name="dimensions" />
    </Parameters>
  </Export>
  <Export name="UiBound" target="Common" source="UiBound.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new rectangle.
/// </summary>
/// <param name="source"> Creates this rectangle out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.UiBound" name="source" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Vector4.hpp
  **
  ***************************************
  -->
  <Export name="Vector4" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Vector4.
/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Vector4" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Vector4.
/// </summary>
/// <param name="x"> Start x. </param>
/// <param name="y"> Start y. </param>
/// <param name="z"> Start z. </param>
/// <param name="w"> Start w. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="x" />
      <Parameter type="float" name="y" />
      <Parameter type="float" name="z" />
      <Parameter type="float" name="w" />
    </Parameters>
  </Export>
  <Export name="Vector4" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Vector4.
/// </summary>
/// <param name="source"> Creates this vector out of a existing one. </param>>
/// <param name="w"> Start w. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="source" />
      <Parameter type="float" name="w" />
    </Parameters>
  </Export>
  <Export name="Vector4" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Vector4.
/// </summary>
/// <param name="source"> Creates this vector out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector4" name="source" />
    </Parameters>
  </Export>
  <Export name="Vector4" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Vector4.
/// </summary>
/// <param name="source"> Creates this vector out of a existing colour. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Colour" name="source" />
    </Parameters>
  </Export>
  <Export name="Add" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Adds this vector to another vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="Subtract" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Subtracts this vector to another vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="Multiply" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Multiplies this vector with another vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="Divide" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Divides this vector by another vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="Angle" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Calculates the angle between this vector and another vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The angle, in radians. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="Dot" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Calculates the dot product of the this vector and another vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The dot product. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="Scale" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Scales this vector by a scalar.
/// </summary>
/// <param name="scalar"> The scalar value. </param>
/// <returns> The scaled vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="scalar" />
    </Parameters>
  </Export>
  <Export name="Negate" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Negates this vector.
/// </summary>
/// <returns> The negated vector. </returns>
]]>
    </Description>
  </Export>
  <Export name="Normalize" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Normalizes this vector.
/// </summary>
/// <returns> The normalized vector. </returns>
]]>
    </Description>
  </Export>
  <Export name="LengthSquared" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the length squared of this vector.
/// </summary>
/// <returns> The length squared. </returns>
]]>
    </Description>
  </Export>
  <Export name="Length" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the length of this vector.
/// </summary>
/// <returns> The length. </returns>
]]>
    </Description>
  </Export>
  <Export name="MaxComponent" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the maximum value in this vector.
/// </summary>
/// <returns> The largest components. </returns>
]]>
    </Description>
  </Export>
  <Export name="MinComponent" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the lowest value in this vector.
/// </summary>
/// <returns> The smallest components. </returns>
]]>
    </Description>
  </Export>
  <Export name="DistanceSquared" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the distance between this vector and another vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The squared distance. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="Distance" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the between this vector and another vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The distance. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="DistanceVector" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the vector distance between this vector and another vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The vector distance. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="SmoothDamp" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gradually changes this vector to a target.
/// </summary>
/// <param name="target"> The target vector. </param>
/// <param name="rate"> The rate to go from current to the target. </param>
/// <returns> The changed vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector4" name="target" />
      <Parameter type="global::AcidSharp.Vector4" name="rate" />
    </Parameters>
  </Export>
  <Export name="Write" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Saves this vector into a loaded value.
/// </summary>
/// <param name="destination"> The destination loaded value. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.LoadedValue" name="destination" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** IDriver.hpp
  **
  ***************************************
  -->
  <Export name="IDriver" target="Common" source="IDriver.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new driver with a length.
/// </summary>
/// <param name="length"> The drivers length. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="length" />
    </Parameters>
  </Export>
  <Export name="Update" target="Common" source="IDriver.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Updates the driver with the passed time.
/// </summary>
/// <param name="delta"> The time between the last update. </param>
/// <returns> The calculated value. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="double" name="delta" />
    </Parameters>
  </Export>
  <Export name="Calculate" target="Common" source="IDriver.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Calculates the new value.
/// </summary>
/// <param name="time"> The time into the drivers life.
/// </param>
/// <returns> The calculated value. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="time" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** UiObject.hpp
  **
  ***************************************
  -->
  <Export name="UiObject" target="Common" source="UiObject.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new screen object.
/// </summary>
/// <param name="parent"> The parent screen object. </param>
/// <param name="rectangle"> The rectangle that will represent the bounds of the ui object. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.UiObject" name="parent" />
      <Parameter type="global::AcidSharp.UiBound" name="rectangle" />
    </Parameters>
  </Export>
  <Export name="Update" target="Common" source="UiObject.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Updates this screen object and the extended object.
/// </summary>
]]>
    </Description>
  </Export>
  <Export name="UpdateObject" target="Common" source="UiObject.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Updates the implementation.
/// </summary>
]]>
    </Description>
  </Export>
  <Export name="RemoveChild" target="Common" source="UiObject.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Disowns a child from this screen objects children list.
/// </summary>
/// <param name="child"> The child to disown. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.UiObject" name="child" />
    </Parameters>
  </Export>
  <Export name="GetParent" target="Common" source="UiObject.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the parent object.
/// </summary>
/// <returns> The parent object. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetParent" target="Common" source="UiObject.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Removes this object from the previous parent and attaches it to another parent.
/// </summary>
/// <param name="parent"> The new parent object. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.UiObject" name="parent" />
    </Parameters>
  </Export>
  <Export name="GetScreenTransform" target="Common" source="UiObject.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the ui object screen space transform.
/// </summary>
/// <returns> The screen transform. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** ModuleRegister.hpp
  **
  ***************************************
  -->
  <Export name="ModuleRegister" target="Common" source="ModuleRegister.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new module register.
/// </summary>
]]>
    </Description>
  </Export>
  <Export name="FillRegister" target="Common" source="ModuleRegister.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Fills the module register with default modules.
/// </summary>
]]>
    </Description>
  </Export>
  <Export name="ContainsModule" target="Common" source="ModuleRegister.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets if a module is contained in this registry.
/// </summary>
/// <param name="module"> The module to find. </param>
/// <returns> If the module is in the registry. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.IModule" name="module" />
    </Parameters>
  </Export>
  <Export name="RegisterModule" target="Common" source="ModuleRegister.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Registers a module with the register.
/// </summary>
/// <param name="module"> The modules object. </param>
/// <param name="update"> The modules update type. </param>
/// <returns> The registered module. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.IModule" name="module" />
      <Parameter type="global::AcidSharp.ModuleUpdate*" name="update" />
    </Parameters>
  </Export>
  <Export name="DeregisterModule" target="Common" source="ModuleRegister.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Deregisters a module.
/// </summary>
/// <param name="module"> The module to deregister. </param>
/// <returns> If the module was deregistered. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.IModule" name="module" />
    </Parameters>
  </Export>
  <Export name="RunUpdate" target="Common" source="ModuleRegister.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Runs updates for all module update types.
/// </summary>
/// <param name="update"> The modules update type. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.ModuleUpdate*" name="update" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** IUpdater.hpp
  **
  ***************************************
  -->
  <Export name="IUpdater" target="Common" source="IUpdater.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new updater.
/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Update" target="Common" source="IUpdater.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Updates all modules in order.
/// </summary>
/// <returns> The module register. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.ModuleRegister" name="moduleRegister" />
    </Parameters>
  </Export>
  <Export name="GetDelta" target="Common" source="IUpdater.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the delta (seconds) between updates.
/// </summary>
/// <returns> The delta between updates. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetDeltaRender" target="Common" source="IUpdater.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the delta (seconds) between renders.
/// </summary>
/// <returns> The delta between renders. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Engine.hpp
  **
  ***************************************
  -->
  <Export name="Get" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets this engine instance.
/// </summary>
/// <returns> The current engine instance. </returns>
]]>
    </Description>
  </Export>
  <Export name="Engine" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Carries out the setup for basic engine components and the engine. Call <seealso cref="#run()"/> after creating a instance.
/// </summary>
/// <param name="emptyRegister"> If the module register will start empty. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="bool" name="emptyRegister" />
    </Parameters>
  </Export>
  <Export name="Run" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// The update function for the updater.
/// </summary>
/// <returns> EXIT_SUCCESS or EXIT_FAILURE. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetUpdater" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the current updater.
/// </summary>
/// <returns> The current updater. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetUpdater" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Loads the updater into the engine.
/// </summary>
/// <param name="updater"> The updater. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.IUpdater" name="updater" />
    </Parameters>
  </Export>
  <Export name="GetTimeOffset" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the added/removed time for the engine (seconds).
/// </summary>
/// <returns> The time offset. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetTimeOffset" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Sets the time offset for the engine (seconds).
/// </summary>
/// <param name="timeOffset"> The new time offset. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="timeOffset" />
    </Parameters>
  </Export>
  <Export name="GetFpsLimit" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the fps limit.
/// </summary>
/// <returns> The fps limit. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetFpsLimit" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Sets the fps limit. -1 disables limits.
/// </summary>
/// <param name="fpsLimit"> The new fps limit. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="fpsLimit" />
    </Parameters>
  </Export>
  <Export name="GetDelta" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the delta (seconds) between updates.
/// </summary>
/// <returns> The delta between updates. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetDeltaRender" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the delta (seconds) between renders.
/// </summary>
/// <returns> The delta between renders. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetTimeMs" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the current time of the engine instance.
/// </summary>
/// <returns> The current engine time in milliseconds. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetTime" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the current time of the engine instance.
/// </summary>
/// <returns> The current engine time in seconds. </returns>
]]>
    </Description>
  </Export>
  <Export name="IsInitialized" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets if the engine has been initialized.
/// </summary>
/// <returns> If the engine has been initialized. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetInitialized" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Sets if the engine has been initialized.
/// </summary>
/// <param name="initialized"> If the engine has been initialized. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="bool" name="initialized" />
    </Parameters>
  </Export>
  <Export name="IsRunning" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets if the engine is running.
/// </summary>
/// <returns> If the engine is running. </returns>
]]>
    </Description>
  </Export>
  <Export name="RequestClose" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Requests the engine to delete and stop the gameloop.
/// </summary>
/// <param name="error"> If a bad error occured. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="bool" name="error" />
    </Parameters>
  </Export>
  <Export name="GetDateTime" target="Common" source="Engine.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the current date time as a string. "%d-%m-%Y %I:%M:%S"
/// </summary>
/// <returns> The date time as a string. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Events.hpp
  **
  ***************************************
  -->
  <Export name="Get" target="Common" source="Events.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets this engine instance.
/// </summary>
/// <returns> The current module instance. </returns>
]]>
    </Description>
  </Export>
  <Export name="Events" target="Common" source="Events.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new events module.
/// </summary>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Timer.hpp
  **
  ***************************************
  -->
  <Export name="Timer" target="Common" source="Timer.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new timer.
/// </summary>
/// <param name="interval"> The time between events (seconds). </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="interval" />
    </Parameters>
  </Export>
  <Export name="IsPassedTime" target="Common" source="Timer.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets if the interval has been passes for the timer.
/// </summary>
/// <returns> If the interval was exceeded. </returns>
]]>
    </Description>
  </Export>
  <Export name="ResetStartTime" target="Common" source="Timer.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Adds the intervals value to the start time.
/// </summary>
]]>
    </Description>
  </Export>
  <Export name="GetInterval" target="Common" source="Timer.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets what the interval is. (Seconds).
/// </summary>
/// <returns> The timers current interval. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetInterval" target="Common" source="Timer.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the timers interval. (Seconds, Resets timer).
/// </summary>
/// <param name="interval"> The new timer interval. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="interval" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** FormatString.hpp
  **
  ***************************************
  -->
  <Export name="StartsWith" target="Common" source="FormatString.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets if a string starts with a token.
/// </summary>
/// <param name="str"> The string. </param>
/// <param name="token"> The token. </param>
/// <returns> If a string starts with the token. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="str" />
      <Parameter type="string" name="token" />
    </Parameters>
  </Export>
  <Export name="Contains" target="Common" source="FormatString.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets if a string contains a token.
/// </summary>
/// <param name="str"> The string. </param>
/// <param name="token"> The token. </param>
/// <returns> If a string contains the token. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="str" />
      <Parameter type="string" name="token" />
    </Parameters>
  </Export>
  <Export name="IsInteger" target="Common" source="FormatString.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets if a string is a integer.
/// </summary>
/// <param name="str"> The string. </param>
/// <returns> If a string is a integer. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="str" />
    </Parameters>
  </Export>
  <Export name="FindCharPos" target="Common" source="FormatString.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the first char index in the string.
/// </summary>
/// <param name="str"> The string. </param>
/// <param name="c"> The char to look for. </param>
/// <returns> The char index. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="str" />
      <Parameter type="char" name="c" />
    </Parameters>
  </Export>
  <Export name="Trim" target="Common" source="FormatString.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Trims the left and right side of a string of whitespace.
/// </summary>
/// <param name="str"> The string. </param>
/// <param name="whitespace"> The whitespace type. </param>
/// <returns> The trimmed string. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="str" />
      <Parameter type="string" name="whitespace" />
    </Parameters>
  </Export>
  <Export name="Substring" target="Common" source="FormatString.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Takes a substring of a string between two bounds.
/// </summary>
/// <param name="str"> The string. </param>
/// <param name="start"> The left bound. </param>
/// <param name="end"> The right bound. </param>
/// <returns> The substring of the string. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="str" />
      <Parameter type="uint32_t" name="start" />
      <Parameter type="uint32_t" name="end" />
    </Parameters>
  </Export>
  <Export name="RemoveAll" target="Common" source="FormatString.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Removes all tokens from a string.
/// </summary>
/// <param name="str"> The string. </param>
/// <param name="token"> The token. </param>
/// <returns> The string with the tokens removed. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="str" />
      <Parameter type="char" name="token" />
    </Parameters>
  </Export>
  <Export name="RemoveLast" target="Common" source="FormatString.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Removes the last token from a string.
/// </summary>
/// <param name="str"> The string. </param>
/// <param name="token"> The token. </param>
/// <returns> The string with the last token removed. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="str" />
      <Parameter type="char" name="token" />
    </Parameters>
  </Export>
  <Export name="Replace" target="Common" source="FormatString.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Replaces all tokens from a string.
/// </summary>
/// <param name="str"> The string. </param>
/// <param name="token"> The token. </param>
/// <param name="to"> The string to replace the tokens with. </param>
/// <returns> The string with the tokens replaced. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="str" />
      <Parameter type="string" name="token" />
      <Parameter type="string" name="to" />
    </Parameters>
  </Export>
  <Export name="Lowercase" target="Common" source="FormatString.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Lowercases a string.
/// </summary>
/// <param name="str"> The string. </param>
/// <returns> The lowercased string. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="str" />
    </Parameters>
  </Export>
  <Export name="Uppercase" target="Common" source="FormatString.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// uppercased a string.
/// </summary>
/// <param name="str"> The string. </param>
/// <returns> The uppercased string. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="str" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Files.hpp
  **
  ***************************************
  -->
  <Export name="Get" target="Common" source="Files.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets this engine instance.
/// </summary>
/// <returns> The current module instance. </returns>
]]>
    </Description>
  </Export>
  <Export name="AddSearchPath" target="Common" source="Files.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Adds an file search path.
/// </summary>
/// <param name="path"> The task to add. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="path" />
    </Parameters>
  </Export>
  <Export name="SearchFile" target="Common" source="Files.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Find a file by partial path in a search path.
/// </summary>
/// <param name="filename"> The filename to find. </param>
/// <returns> The path to the first file found. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="filename" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** FileSystem.hpp
  **
  ***************************************
  -->
  <Export name="FileExists" target="Common" source="FileSystem.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets if a file exists.
/// </summary>
/// <param name="filepath"> The filepath. </param>
/// <returns> If the file exists. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="filepath" />
    </Parameters>
  </Export>
  <Export name="DeleteFile" target="Common" source="FileSystem.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Deletes a file.
/// </summary>
/// <param name="filepath"> The filepath. </param>
/// <returns> If the file was deleted. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="filepath" />
    </Parameters>
  </Export>
  <Export name="CreateFile" target="Common" source="FileSystem.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a file, and the folder path.
/// </summary>
/// <param name="filepath"> The filepath. </param>
/// <param name="createFolders"> If folders should also be created. </param>
/// <returns> If the file was created. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="filepath" />
      <Parameter type="bool" name="createFolders" />
    </Parameters>
  </Export>
  <Export name="ClearFile" target="Common" source="FileSystem.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Clears the contents from a file.
/// </summary>
/// <param name="filepath"> The filepath. </param>
/// <returns> If the file was cleared. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="filepath" />
    </Parameters>
  </Export>
  <Export name="CreateFolder" target="Common" source="FileSystem.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a directory.
/// </summary>
/// <param name="path"> The directory to create. </param>
/// <returns> If the folder was created. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="path" />
    </Parameters>
  </Export>
  <Export name="WriteTextFile" target="Common" source="FileSystem.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Writes to a text file from a string.
/// </summary>
/// <param name="filepath"> The filepath. </param>
/// <param name="data"> The text data. </param>
/// <returns> If the file was written to. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="filepath" />
      <Parameter type="string" name="data" />
    </Parameters>
  </Export>
  <Export name="GetWorkingDirectory" target="Common" source="FileSystem.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the current working directory.
/// </summary>
/// <returns> If the working directory. </returns>
]]>
    </Description>
  </Export>
  <Export name="FixPaths" target="Common" source="FileSystem.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Removes backslashes from directories.
/// </summary>
/// <returns> The path with only forward slashes. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="filepath" />
    </Parameters>
  </Export>
  <Export name="FindName" target="Common" source="FileSystem.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the file name from the full path.
/// </summary>
/// <returns> The file name. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="filepath" />
    </Parameters>
  </Export>
  <Export name="FindExt" target="Common" source="FileSystem.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the file extension from the full path.
/// </summary>
/// <returns> The file extension. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="filepath" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** SquareArray.hpp
  **
  ***************************************
  -->
  <Export name="FloatArray" target="Common" source="SquareArray.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new rectangular float array.
/// </summary>
/// <param name="size1"> The first size. </param>
/// <param name="size2"> The seconds size. </param>
/// <returns> The new rectangular float array. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="int" name="size1" />
      <Parameter type="int" name="size2" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Fog.hpp
  **
  ***************************************
  -->
  <Export name="Fog" target="Common" source="Fog.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new fog.
/// </summary>
/// <param name="colour"> The colour of the fog. </param>
/// <param name="density"> How dense the fog will be. </param>
/// <param name="gradient"> The gradient of the fog. </param>
/// <param name="lowerLimit"> At what height will the skybox fog begin to appear. </param>
/// <param name="upperLimit"> At what height will there be skybox no fog. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Colour" name="colour" />
      <Parameter type="float" name="density" />
      <Parameter type="float" name="gradient" />
      <Parameter type="float" name="lowerLimit" />
      <Parameter type="float" name="upperLimit" />
    </Parameters>
  </Export>
  <Export name="Write" target="Common" source="Fog.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Saves this vector into a loaded value.
/// </summary>
/// <param name="destination"> The destination loaded value. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.LoadedValue" name="destination" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Matrix4.hpp
  **
  ***************************************
  -->
  <Export name="Matrix4" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Matrix4. The matrix is initialised to the identity.
/// </summary>
/// <param name="diagonal"> The value set to the diagonals. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="diagonal" />
    </Parameters>
  </Export>
  <Export name="Matrix4" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Matrix4.
/// </summary>
/// <param name="source"> Creates this matrix out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Matrix4" name="source" />
    </Parameters>
  </Export>
  <Export name="Matrix4" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Matrix4.
/// </summary>
/// <param name="source"> Creates this matrix out of a 16 element array. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float[]" name="source" />
    </Parameters>
  </Export>
  <Export name="Matrix4" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Matrix4.
/// </summary>
/// <param name="source"> Creates this matrix out of a 4 vector array. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector4[]" name="source" />
    </Parameters>
  </Export>
  <Export name="Add" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Adds this matrix to another matrix.
/// </summary>
/// <param name="other"> The other matrix. </param>
/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Matrix4" name="other" />
    </Parameters>
  </Export>
  <Export name="Subtract" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Subtracts this matrix to another matrix.
/// </summary>
/// <param name="other"> The other matrix. </param>
/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Matrix4" name="other" />
    </Parameters>
  </Export>
  <Export name="Multiply" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Multiplies this matrix by another matrix.
/// </summary>
/// <param name="other"> The other matrix. </param>
/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Matrix4" name="other" />
    </Parameters>
  </Export>
  <Export name="Multiply" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Multiplies this matrix by a vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="Divide" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Divides this matrix by another matrix.
/// </summary>
/// <param name="other"> The other matrix. </param>
/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Matrix4" name="other" />
    </Parameters>
  </Export>
  <Export name="Transform" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Transforms this matrix by a vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="Translate" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Translates this matrix by a vector.
/// </summary>
/// <param name="other"> The vector. </param>
/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Translate" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Translates this matrix by a vector.
/// </summary>
/// <param name="other"> The vector. </param>
/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Scale" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Scales this matrix by a vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Scale" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Scales this matrix by a vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="Rotate" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Rotates this matrix around the given axis the specified angle.
/// </summary>
/// <param name="angle"> The angle, in radians. </param>
/// <param name="axis"> The vector representing the rotation axis. </param>
/// <returns> The rotated matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="angle" />
      <Parameter type="global::AcidSharp.Vector3" name="axis" />
    </Parameters>
  </Export>
  <Export name="Negate" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Inverts this matrix.
/// </summary>
/// <returns> The inverted matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="Invert" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Negates this matrix.
/// </summary>
/// <returns> The negated matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="Transpose" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Transposes this matrix.
/// </summary>
/// <returns> The transposed matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="Determinant" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Takes the determinant of this matrix.
/// </summary>
/// <returns> The determinant. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetSubmatrix" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the submatrix of this matrix.
/// </summary>
/// <returns> The submatrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="int" name="row" />
      <Parameter type="int" name="col" />
    </Parameters>
  </Export>
  <Export name="TransformationMatrix" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new transformation matrix for a object in 3d space.
/// </summary>
/// <param name="translation"> Translation amount the XYZ. </param>
/// <param name="rotation"> Rotation amount (Pitch, Yaw, Roll). </param>
/// <param name="scale"> How much to scale the matrix. </param>
/// <returns> Returns the transformation matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="translation" />
      <Parameter type="global::AcidSharp.Vector3" name="rotation" />
      <Parameter type="global::AcidSharp.Vector3" name="scale" />
    </Parameters>
  </Export>
  <Export name="TransformationMatrix" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new transformation matrix for a object in 3d space.
/// </summary>
/// <param name="translation"> Translation amount the XYZ. </param>
/// <param name="rotation"> Rotation amount. </param>
/// <param name="scale"> How much to scale the matrix. </param>
/// <returns> Returns the transformation matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="translation" />
      <Parameter type="global::AcidSharp.Quaternion" name="rotation" />
      <Parameter type="global::AcidSharp.Vector3" name="scale" />
    </Parameters>
  </Export>
  <Export name="PerspectiveMatrix" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new perspective matrix.
/// </summary>
/// <param name="fov"> The cameras FOV. </param>
/// <param name="aspectRatio"> The cameras aspect ratio. </param>
/// <param name="zNear"> The cameras near plane. </param>
/// <param name="zFar"> The cameras far plane. </param>
/// <returns> The transformation matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="fov" />
      <Parameter type="float" name="aspectRatio" />
      <Parameter type="float" name="zNear" />
      <Parameter type="float" name="zFar" />
    </Parameters>
  </Export>
  <Export name="OrthographicMatrix" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new orthographic matrix.
/// </summary>
/// <param name="left"> The left plane. </param>
/// <param name="right"> The right plane. </param>
/// <param name="bottom"> The bottom plane. </param>
/// <param name="top"> The top plane. </param>
/// <param name="near"> The near plane. </param>
/// <param name="far"> The far plane. </param>
/// <param name="destination"> The destination matrix or nullptr if a new matrix is to be created. </param>
/// <returns> The transformation matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="left" />
      <Parameter type="float" name="right" />
      <Parameter type="float" name="bottom" />
      <Parameter type="float" name="top" />
      <Parameter type="float" name="near" />
      <Parameter type="float" name="far" />
    </Parameters>
  </Export>
  <Export name="ViewMatrix" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new view matrix.
/// </summary>
/// <param name="position"> The cameras position. </param>
/// <param name="rotation"> The cameras rotation. </param>
/// <returns> The transformation matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="position" />
      <Parameter type="global::AcidSharp.Vector3" name="rotation" />
    </Parameters>
  </Export>
  <Export name="ViewMatrix" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new view matrix.
/// </summary>
/// <param name="position"> The cameras position. </param>
/// <param name="rotation"> The cameras rotation. </param>
/// <returns> The transformation matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="position" />
      <Parameter type="global::AcidSharp.Quaternion" name="rotation" />
    </Parameters>
  </Export>
  <Export name="WorldToScreenSpace" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Transforms a 3D world point into screen space.
/// </summary>
/// <param name="worldSpace"> The point to get into screen space. </param>
/// <param name="viewMatrix"> The cameras view matrix. </param>
/// <param name="projectionMatrix"> The cameras projection matrix. </param>
/// <returns> A 2D point stored in XY, and the distance (Z, if negative the point is behind the screen). </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="worldSpace" />
      <Parameter type="global::AcidSharp.Matrix4" name="viewMatrix" />
      <Parameter type="global::AcidSharp.Matrix4" name="projectionMatrix" />
    </Parameters>
  </Export>
  <Export name="LookAt" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new transformation matrix that has the camera looking at the target.
/// </summary>
/// <param name="camera"> The source position. </param>
/// <param name="object"> The target position. </param>
/// <param name="up"> What view direction is up. </param>
/// <returns> Returns the transformation matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="camera" />
      <Parameter type="global::AcidSharp.Vector3" name="@object" />
      <Parameter type="global::AcidSharp.Vector3" name="up" />
    </Parameters>
  </Export>
  <Export name="Write" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Saves this matrix into a loaded value.
/// </summary>
/// <param name="destination"> The destination loaded value. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.LoadedValue" name="destination" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Frustum.hpp
  **
  ***************************************
  -->
  <Export name="Frustum" target="Common" source="Frustum.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new frustum.
/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Update" target="Common" source="Frustum.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Updates a frustum from the view and projection matrix.
/// </summary>
/// <param name="view"> The view matrix. </param>
/// <param name="projection"> The projection matrix. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Matrix4" name="view" />
      <Parameter type="global::AcidSharp.Matrix4" name="projection" />
    </Parameters>
  </Export>
  <Export name="PointInFrustum" target="Common" source="Frustum.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Is the point contained in the frustum?
/// </summary>
/// <param name="position"> The points position. </param>
/// <returns> True if contained, false if outside. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="position" />
    </Parameters>
  </Export>
  <Export name="SphereInFrustum" target="Common" source="Frustum.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Is the sphere contained in the frustum?
/// </summary>
/// <param name="position"> The points position. </param>
/// <param name="radius"> The spheres radius. </param>
/// <returns> True if contained, false if outside. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="position" />
      <Parameter type="float" name="radius" />
    </Parameters>
  </Export>
  <Export name="CubeInFrustum" target="Common" source="Frustum.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Is the cube contained partially in the frustum?
/// </summary>
/// <param name="min"> The point 1st position. </param>
/// <param name="max"> The point 2nd position. </param>
/// <returns> True if partially contained, false if outside. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="min" />
      <Parameter type="global::AcidSharp.Vector3" name="max" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Light.hpp
  **
  ***************************************
  -->
  <Export name="Light" target="Common" source="Light.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new point light.
/// </summary>
/// <param name="colour"> The colour of the light. </param>
/// <param name="radius"> How far the light will have influence (-1 sets this to a directional light). </param>
/// <param name="offset"> The parent offset of the light. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Colour" name="colour" />
      <Parameter type="float" name="radius" />
      <Parameter type="global::AcidSharp.Vector3" name="offset" />
    </Parameters>
  </Export>
  <Export name="Light" target="Common" source="Light.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new point light from a source object.
/// </summary>
/// <param name="source"> The source light object. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Light" name="source" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Delta.hpp
  **
  ***************************************
  -->
  <Export name="Delta" target="Common" source="Delta.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new change handler.
/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Update" target="Common" source="Delta.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Updates change and times.
/// </summary>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** SmoothFloat.hpp
  **
  ***************************************
  -->
  <Export name="SmoothFloat" target="Common" source="SmoothFloat.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new smooth float.
/// </summary>
/// <param name="initialValue"> The initial value. </param>
/// <param name="agility"> The agility for increasing actual. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="initialValue" />
      <Parameter type="float" name="agility" />
    </Parameters>
  </Export>
  <Export name="Update" target="Common" source="SmoothFloat.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Updates the driver with the passed time.
/// </summary>
/// <param name="delta"> The time between the last update. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="delta" />
    </Parameters>
  </Export>
  <Export name="SetTarget" target="Common" source="SmoothFloat.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Sets the target for the smooth float.
/// </summary>
/// <param name="target"> The new target. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="target" />
    </Parameters>
  </Export>
  <Export name="GetTarget" target="Common" source="SmoothFloat.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the smooth floats current target.
/// </summary>
/// <returns> The target. </returns>
]]>
    </Description>
  </Export>
  <Export name="IncreaseTarget" target="Common" source="SmoothFloat.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Increases the smooth floats target.
/// </summary>
/// <param name="increase"> How much to increase the target by. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="increase" />
    </Parameters>
  </Export>
  <Export name="Get" target="Common" source="SmoothFloat.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the currently calculated value.
/// </summary>
/// <returns> The calculated value. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Maths.hpp
  **
  ***************************************
  -->
  <Export name="Random" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Generates a random value from between a range.
/// </summary>
/// <param name="min"> The min value. </param>
/// <param name="max"> The max value. </param>
/// <returns> The randomly selected value within the range. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="min" />
      <Parameter type="float" name="max" />
    </Parameters>
  </Export>
  <Export name="RandomNormal" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Generates a single value from a normal distribution, using Box-Muller.
/// https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform
/// </summary>
/// <param name="standardDeviation"> The standards deviation of the distribution. </param>
/// <param name="mean"> The mean of the distribution. </param>
/// <returns> A normally distributed value. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="standardDeviation" />
      <Parameter type="float" name="mean" />
    </Parameters>
  </Export>
  <Export name="RandomLog" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a number between two numbers, logarithmic.
/// </summary>
/// <param name="min"> The min value. </param>
/// <param name="max"> The max value. </param>
/// <returns> The final random number. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="min" />
      <Parameter type="float" name="max" />
    </Parameters>
  </Export>
  <Export name="Radians" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Converts degrees to radians.
/// </summary>
/// <param name="degrees"> The degrees value. </param>
/// <returns> The radians value. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="degrees" />
    </Parameters>
  </Export>
  <Export name="Degrees" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Converts radians to degrees.
/// </summary>
/// <param name="radians"> The radians value. </param>
/// <returns> The degrees value. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="radians" />
    </Parameters>
  </Export>
  <Export name="WrapDegrees" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Normalizes a angle into the range of 0-360.
/// </summary>
/// <param name="degrees"> The source angle. </param>
/// <returns> The normalized angle. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="degrees" />
    </Parameters>
  </Export>
  <Export name="WrapRadians" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Normalizes a angle into the range of 0-2PI.
/// </summary>
/// <param name="radians"> The source angle. </param>
/// <returns> The normalized angle. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="radians" />
    </Parameters>
  </Export>
  <Export name="RoundToPlace" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Rounds a value to a amount of places after the decimal point.
/// </summary>
/// <param name="value"> The value to round. </param>
/// <param name="place"> How many places after the decimal to round to. </param>
/// <returns> The rounded value. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="value" />
      <Parameter type="int" name="place" />
    </Parameters>
  </Export>
  <Export name="Deadband" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Used to floor the value if less than the min.
/// </summary>
/// <param name="min"> The minimum value. </param>
/// <param name="value"> The value. </param>
/// <returns> Returns a value with deadband applied. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="min" />
      <Parameter type="float" name="value" />
    </Parameters>
  </Export>
  <Export name="Clamp" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Ensures {@code value} is in the range of {@code min} to {@code max}. If {@code value} is greater than {@code max}, this will return {@code max}. If {@code value} is less than {@code min}, this will return {@code min}. Otherwise, {@code value} is returned unchanged.
/// </summary>
/// <param name="value"> The value to clamp. </param>
/// <param name="min"> The smallest value of the result. </param>
/// <param name="max"> The largest value of the result. </param>
/// <returns> {@code value}, clamped between {@code min} and {@code max}. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="value" />
      <Parameter type="float" name="min" />
      <Parameter type="float" name="max" />
    </Parameters>
  </Export>
  <Export name="Limit" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Limits the value.
/// </summary>
/// <param name="value"> The value. </param>
/// <param name="limit"> The limit. </param>
/// <returns> A limited value. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="value" />
      <Parameter type="float" name="limit" />
    </Parameters>
  </Export>
  <Export name="AlmostEqual" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Checks if two values are almost equal.
/// </summary>
/// <param name="a"> The first value. </param>
/// <param name="b"> The second value. </param>
/// <param name="eps"> EPS is the measure of equality. </param>
/// <returns> If both are almost equal. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="a" />
      <Parameter type="float" name="b" />
      <Parameter type="float" name="eps" />
    </Parameters>
  </Export>
  <Export name="SmoothDamp" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gradually changes a value to a target.
/// </summary>
/// <param name="current"> The current value. </param>
/// <param name="target"> The target value. </param>
/// <param name="rate"> The rate to go from current to the target. </param>
/// <returns> The changed value. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="current" />
      <Parameter type="float" name="target" />
      <Parameter type="float" name="rate" />
    </Parameters>
  </Export>
  <Export name="Interpolate" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Interpolates two values by a blendFactor using linear interpolation.
/// </summary>
/// <param name="a"> The first value. </param>
/// <param name="b"> The second value. </param>
/// <param name="blend"> The blend value. </param>
/// <returns> Returns a interpolated value. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="a" />
      <Parameter type="float" name="b" />
      <Parameter type="float" name="blend" />
    </Parameters>
  </Export>
  <Export name="InterpolateCosine" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Interpolates two values by a blendFactor using cosine interpolation.
/// </summary>
/// <param name="a"> The first value. </param>
/// <param name="b"> The second value. </param>
/// <param name="blend"> The blend value. </param>
/// <returns> Returns a interpolated value. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="a" />
      <Parameter type="float" name="b" />
      <Parameter type="float" name="blend" />
    </Parameters>
  </Export>
  <Export name="SmoothlyStep" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// A calculation that steps smoothly between two edges.
/// </summary>
/// <param name="edge0"> The inner edge. </param>
/// <param name="edge1"> The outer edge. </param>
/// <param name="x"> The sample. </param>
/// <returns> The resulting stepped value. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="edge0" />
      <Parameter type="float" name="edge1" />
      <Parameter type="float" name="x" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Matrix2.hpp
  **
  ***************************************
  -->
  <Export name="Matrix2" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Matrix2. The matrix is initialised to the identity.
/// </summary>
/// <param name="diagonal"> The value set to the diagonals. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="diagonal" />
    </Parameters>
  </Export>
  <Export name="Matrix2" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Matrix2.
/// </summary>
/// <param name="source"> Creates this matrix out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Matrix2" name="source" />
    </Parameters>
  </Export>
  <Export name="Matrix2" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Matrix2.
/// </summary>
/// <param name="source"> Creates this matrix out of a 4 element array. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float[]" name="source" />
    </Parameters>
  </Export>
  <Export name="Matrix2" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Matrix2.
/// </summary>
/// <param name="source"> Creates this matrix out of a 2 vector array. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector2[]" name="source" />
    </Parameters>
  </Export>
  <Export name="Add" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Adds this matrix to another matrix.
/// </summary>
/// <param name="other"> The other matrix. </param>
/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Matrix2" name="other" />
    </Parameters>
  </Export>
  <Export name="Subtract" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Subtracts this matrix to another matrix.
/// </summary>
/// <param name="other"> The other matrix. </param>
/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Matrix2" name="other" />
    </Parameters>
  </Export>
  <Export name="Multiply" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Multiplies this matrix by another matrix.
/// </summary>
/// <param name="other"> The other matrix. </param>
/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Matrix2" name="other" />
    </Parameters>
  </Export>
  <Export name="Divide" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Divides this matrix by another matrix.
/// </summary>
/// <param name="other"> The other matrix. </param>
/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Matrix2" name="other" />
    </Parameters>
  </Export>
  <Export name="Transform" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Transforms this matrix by a vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Scale" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Scales this matrix by a vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Negate" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Inverts this matrix.
/// </summary>
/// <returns> The inverted matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="Invert" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Negates this matrix.
/// </summary>
/// <returns> The negated matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="Transpose" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Transposes this matrix.
/// </summary>
/// <returns> The transposed matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="Determinant" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Takes the determinant of this matrix.
/// </summary>
/// <returns> The determinant. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetSubmatrix" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the submatrix of this matrix.
/// </summary>
/// <returns> The submatrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="int" name="row" />
      <Parameter type="int" name="col" />
    </Parameters>
  </Export>
  <Export name="Write" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Saves this matrix into a loaded value.
/// </summary>
/// <param name="destination"> The destination loaded value. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.LoadedValue" name="destination" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Matrix3.hpp
  **
  ***************************************
  -->
  <Export name="Matrix3" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Matrix3. The matrix is initialised to the identity.
/// </summary>
/// <param name="diagonal"> The value set to the diagonals. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="diagonal" />
    </Parameters>
  </Export>
  <Export name="Matrix3" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Matrix3.
/// </summary>
/// <param name="source"> Creates this matrix out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Matrix3" name="source" />
    </Parameters>
  </Export>
  <Export name="Matrix3" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Matrix3.
/// </summary>
/// <param name="source"> Creates this matrix out of a 9 element array. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float[]" name="source" />
    </Parameters>
  </Export>
  <Export name="Matrix3" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Matrix3.
/// </summary>
/// <param name="source"> Creates this matrix out of a 3 vector array. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3[]" name="source" />
    </Parameters>
  </Export>
  <Export name="Add" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Adds this matrix to another matrix.
/// </summary>
/// <param name="other"> The other matrix. </param>
/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Matrix3" name="other" />
    </Parameters>
  </Export>
  <Export name="Subtract" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Subtracts this matrix to another matrix.
/// </summary>
/// <param name="other"> The other matrix. </param>
/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Matrix3" name="other" />
    </Parameters>
  </Export>
  <Export name="Multiply" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Multiplies this matrix by another matrix.
/// </summary>
/// <param name="other"> The other matrix. </param>
/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Matrix3" name="other" />
    </Parameters>
  </Export>
  <Export name="Multiply" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Multiplies this matrix by a vector.
/// </summary>
/// <param name="other"> The vector. </param>
/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Divide" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Divides this matrix by another matrix.
/// </summary>
/// <param name="other"> The other matrix. </param>
/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Matrix3" name="other" />
    </Parameters>
  </Export>
  <Export name="Transform" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Transforms this matrix by a vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Scale" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Scales this matrix by a vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Negate" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Inverts this matrix.
/// </summary>
/// <returns> The inverted matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="Invert" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Negates this matrix.
/// </summary>
/// <returns> The negated matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="Transpose" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Transposes this matrix.
/// </summary>
/// <returns> The transposed matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="Determinant" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Takes the determinant of this matrix.
/// </summary>
/// <returns> The determinant. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetSubmatrix" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the submatrix of this matrix.
/// </summary>
/// <returns> The submatrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="int" name="row" />
      <Parameter type="int" name="col" />
    </Parameters>
  </Export>
  <Export name="Write" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Saves this matrix into a loaded value.
/// </summary>
/// <param name="destination"> The destination loaded value. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.LoadedValue" name="destination" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Quaternion.hpp
  **
  ***************************************
  -->
  <Export name="Quaternion" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Quaternion.
/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Quaternion" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Quaternion.
/// </summary>
/// <param name="x"> Start x. </param>
/// <param name="y"> Start y. </param>
/// <param name="z"> Start z. </param>
/// <param name="w"> Start w. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="x" />
      <Parameter type="float" name="y" />
      <Parameter type="float" name="z" />
      <Parameter type="float" name="w" />
    </Parameters>
  </Export>
  <Export name="Quaternion" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Quaternion.
/// </summary>
/// <param name="pitch"> Start pitch. </param>
/// <param name="yaw"> Start yaw. </param>
/// <param name="roll"> Start roll. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="pitch" />
      <Parameter type="float" name="yaw" />
      <Parameter type="float" name="roll" />
    </Parameters>
  </Export>
  <Export name="Quaternion" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Quaternion.
/// </summary>
/// <param name="source"> Creates this quaternion out of a existing vector (pitch, yaw roll). </param>>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="source" />
    </Parameters>
  </Export>
  <Export name="Quaternion" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Quaternion.
/// </summary>
/// <param name="source"> Creates this vector out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Quaternion" name="source" />
    </Parameters>
  </Export>
  <Export name="Quaternion" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Quaternion.
/// </summary>
/// <param name="source"> Creates this vector out of a existing matrix. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Matrix4" name="source" />
    </Parameters>
  </Export>
  <Export name="Quaternion" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Quaternion.
/// </summary>
/// <param name="axis"> The axis to create from. </param>
/// <param name="angle"> The angle to rotate the angle around. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="axis" />
      <Parameter type="float" name="angle" />
    </Parameters>
  </Export>
  <Export name="Quaternion" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Constructor for Quaternion.
/// </summary>
/// <param name="axisX"> The X axis. </param>
/// <param name="axisY"> The Y axis. </param>
/// <param name="axisZ"> The Z axis. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="axisX" />
      <Parameter type="global::AcidSharp.Vector3" name="axisY" />
      <Parameter type="global::AcidSharp.Vector3" name="axisZ" />
    </Parameters>
  </Export>
  <Export name="Add" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Adds this quaternion to another quaternion.
/// </summary>
/// <param name="other"> The other quaternion. </param>
/// <returns> The resultant quaternion. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Quaternion" name="other" />
    </Parameters>
  </Export>
  <Export name="Subtract" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Subtracts this quaternion to another quaternion.
/// </summary>
/// <param name="other"> The other quaternion. </param>
/// <returns> The resultant quaternion. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Quaternion" name="other" />
    </Parameters>
  </Export>
  <Export name="Multiply" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Multiplies this quaternion with another quaternion.
/// </summary>
/// <param name="other"> The other quaternion. </param>
/// <returns> The resultant quaternion. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Quaternion" name="other" />
    </Parameters>
  </Export>
  <Export name="Multiply" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Multiplies this quaternion with another vector.
/// </summary>
/// <param name="other"> The other vector. </param>
/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="MultiplyInverse" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Multiplies this quaternion with the inverse of another quaternion. The value of both argument quaternions is persevered (this = left * right^-1).
/// </summary>
/// <param name="other"> The other quaternion. </param>
/// <returns> The resultant quaternion. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Quaternion" name="other" />
    </Parameters>
  </Export>
  <Export name="Dot" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Calculates the dot product of the this quaternion and another quaternion.
/// </summary>
/// <param name="other"> The other quaternion. </param>
/// <returns> The dot product. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Quaternion" name="other" />
    </Parameters>
  </Export>
  <Export name="Slerp" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Calculates the slerp between this quaternion and another quaternion, they must be normalized!
/// </summary>
/// <param name="other"> The other quaternion. </param>
/// <param name="progression"> The progression. </param>
/// <returns> Left slerp right. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Quaternion" name="other" />
      <Parameter type="float" name="progression" />
    </Parameters>
  </Export>
  <Export name="Scale" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Scales this quaternion by a scalar.
/// </summary>
/// <param name="scalar"> The scalar value. </param>
/// <returns> The scaled quaternion. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="scalar" />
    </Parameters>
  </Export>
  <Export name="Negate" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Negates this quaternion.
/// </summary>
/// <returns> The negated quaternion. </returns>
]]>
    </Description>
  </Export>
  <Export name="Normalize" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Normalizes this quaternion.
/// </summary>
/// <returns> The normalized quaternion. </returns>
]]>
    </Description>
  </Export>
  <Export name="LengthSquared" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the length squared of this quaternion.
/// </summary>
/// <returns> The length squared. </returns>
]]>
    </Description>
  </Export>
  <Export name="Length" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the length of this quaternion.
/// </summary>
/// <returns> The length. </returns>
]]>
    </Description>
  </Export>
  <Export name="MaxComponent" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the maximum value in this quaternion.
/// </summary>
/// <returns> The largest components. </returns>
]]>
    </Description>
  </Export>
  <Export name="MinComponent" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the lowest value in this quaternion.
/// </summary>
/// <returns> The smallest components. </returns>
]]>
    </Description>
  </Export>
  <Export name="ToMatrix" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Converts this quaternion to a 4x4 matrix.
/// </summary>
/// <returns> The rotation matrix which represents the exact same rotation as this quaternion. </returns>
]]>
    </Description>
  </Export>
  <Export name="ToRotationMatrix" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Converts this quaternion to a 3x3 matrix representing the exact same
/// rotation as this quaternion.
/// </summary>
/// <returns> The rotation matrix which represents the exact same rotation as this quaternion. </returns>
]]>
    </Description>
  </Export>
  <Export name="ToEuler" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Converts this quaternion to euler angles.
/// </summary>
/// <returns> The euler angle representation of this quaternion. </returns>
]]>
    </Description>
  </Export>
  <Export name="Write" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Saves this quaternion into a loaded value.
/// </summary>
/// <param name="destination"> The destination loaded value. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.LoadedValue" name="destination" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** DriverBounce.hpp
  **
  ***************************************
  -->
  <Export name="DriverBounce" target="Common" source="DriverBounce.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new sine wave driver.
/// </summary>
/// <param name="start"> The start value. </param>
/// <param name="end"> The end value. </param>
/// <param name="length"> The length between two waves. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="start" />
      <Parameter type="float" name="end" />
      <Parameter type="float" name="length" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** DriverConstant.hpp
  **
  ***************************************
  -->
  <Export name="DriverConstant" target="Common" source="DriverConstant.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new constant driver.
/// </summary>
/// <param name="constant"> The constant value. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="constant" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** DriverFade.hpp
  **
  ***************************************
  -->
  <Export name="DriverFade" target="Common" source="DriverFade.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new fade driver.
/// </summary>
/// <param name="start"> The start time. </param>
/// <param name="end"> The end time. </param>
/// <param name="peak"> The peak value. </param>
/// <param name="length"> The time taken to get to the end. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="start" />
      <Parameter type="float" name="end" />
      <Parameter type="float" name="peak" />
      <Parameter type="float" name="length" />
    </Parameters>
  </Export>
  <Export name="GetStart" target="Common" source="DriverFade.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the start time.
/// </summary>
/// <returns> The start time. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetStart" target="Common" source="DriverFade.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Sets the start time.
/// </summary>
/// <param name="start"> The new start time. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="start" />
    </Parameters>
  </Export>
  <Export name="GetEnd" target="Common" source="DriverFade.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the end time.
/// </summary>
/// <returns> The ebd time. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetEnd" target="Common" source="DriverFade.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Sets the end time.
/// </summary>
/// <param name="end"> The new end time. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="end" />
    </Parameters>
  </Export>
  <Export name="GetPeak" target="Common" source="DriverFade.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the peak value.
/// </summary>
/// <returns> The peak value. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetPeak" target="Common" source="DriverFade.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Sets the peak value.
/// </summary>
/// <param name="peak"> The new peak value. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="peak" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** DriverLinear.hpp
  **
  ***************************************
  -->
  <Export name="DriverLinear" target="Common" source="DriverLinear.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new linear driver.
/// </summary>
/// <param name="startValue"> The start value. </param>
/// <param name="endValue"> The end value. </param>
/// <param name="length"> The time to go between values. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="startValue" />
      <Parameter type="float" name="endValue" />
      <Parameter type="float" name="length" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** DriverSinwave.hpp
  **
  ***************************************
  -->
  <Export name="DriverSinwave" target="Common" source="DriverSinwave.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new sine wave driver.
/// </summary>
/// <param name="min"> The min value. </param>
/// <param name="max"> The max value. </param>
/// <param name="length"> The length between two waves. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="min" />
      <Parameter type="float" name="max" />
      <Parameter type="float" name="length" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** DriverSlide.hpp
  **
  ***************************************
  -->
  <Export name="DriverSlide" target="Common" source="DriverSlide.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new slide driver.
/// </summary>
/// <param name="start"> The start value. </param>
/// <param name="end"> The end value. </param>
/// <param name="length"> The time to get to the end value. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="start" />
      <Parameter type="float" name="end" />
      <Parameter type="float" name="length" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** IManagerRender.hpp
  **
  ***************************************
  -->
  <Export name="Update" target="Common" source="IManagerRender.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Run when rendering the master renderer.
/// </summary>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Resources.hpp
  **
  ***************************************
  -->
  <Export name="Get" target="Common" source="Resources.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets this engine instance.
/// </summary>
/// <returns> The current module instance. </returns>
]]>
    </Description>
  </Export>
  <Export name="Resources" target="Common" source="Resources.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new Resources module.
/// </summary>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Ray.hpp
  **
  ***************************************
  -->
  <Export name="Ray" target="Common" source="Ray.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new 3D ray.
/// </summary>
/// <param name="useMouse"> If the ray will use the mouse coords or to start from screenStart. </param>
/// <param name="screenStart"> If useMouse is false then this will be used as the rays start. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="bool" name="useMouse" />
      <Parameter type="global::AcidSharp.Vector2" name="screenStart" />
    </Parameters>
  </Export>
  <Export name="Update" target="Common" source="Ray.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Updates the ray to a new position.
/// </summary>
/// <param name="currentPosition"> The new position. </param>
/// <param name="currentPosition"> The mouses xy screen space position. </param>
/// <param name="viewMatrix"> The cameras view matrix. </param>
/// <param name="projectionMatrix"> The projection view matrix. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="currentPosition" />
      <Parameter type="global::AcidSharp.Vector2" name="mousePosition" />
      <Parameter type="global::AcidSharp.Matrix4" name="viewMatrix" />
      <Parameter type="global::AcidSharp.Matrix4" name="projectionMatrix" />
    </Parameters>
  </Export>
  <Export name="GetPointOnRay" target="Common" source="Ray.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets a point on the ray.
/// </summary>
/// <param name="distance"> Distance down the ray to sample. </param>
/// <returns> Returns the destination vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="distance" />
    </Parameters>
  </Export>
  <Export name="ConvertToScreenSpace" target="Common" source="Ray.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Converts a position from world space to screen space.
/// </summary>
/// <param name="position"> The position to convert. </param>
/// <returns> Returns the destination vector X and Y being screen space coords and Z being the distance to the camera. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.Vector3" name="position" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** ICamera.hpp
  **
  ***************************************
  -->
  <Export name="ICamera" target="Common" source="ICamera.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new camera.
/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Update" target="Common" source="ICamera.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Checks inputs and carries out smooth camera movement. Called before every frame.
/// </summary>
]]>
    </Description>
  </Export>
  <Export name="ReflectView" target="Common" source="ICamera.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Prepares the camera for the reflection render pass.
/// </summary>
/// <param name="height"> The height of the horizontal plane to be reflected over. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="height" />
    </Parameters>
  </Export>
  <Export name="GetNearPlane" target="Common" source="ICamera.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the distance of the near pane of the view frustum.
/// </summary>
/// <returns> The distance of the near pane of the view frustum. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetFarPlane" target="Common" source="ICamera.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the distance of the view frustum's far plane.
/// </summary>
/// <returns> The distance of the view frustum's far plane. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetFov" target="Common" source="ICamera.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the field of view angle for the view frustum.
/// </summary>
/// <returns> The field of view angle for the view frustum. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetViewFrustum" target="Common" source="ICamera.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the view frustum created by the current camera position and rotation.
/// </summary>
/// <returns> The view frustum created by the current camera position and rotation. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetViewRay" target="Common" source="ICamera.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the ray that extends from the cameras position though the screen.
/// </summary>
/// <returns> The cameras view ray. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetViewMatrix" target="Common" source="ICamera.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the view matrix created by the current camera position and rotation.
/// </summary>
/// <returns> The view matrix created by the current camera position and rotation. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetProjectionMatrix" target="Common" source="ICamera.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the projection matrix used in the current scene render.
/// </summary>
/// <returns> The projection matrix used in the current scene render. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetPosition" target="Common" source="ICamera.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the cameras 3D position in the world.
/// </summary>
/// <returns> The cameras 3D position in the world. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetVelocity" target="Common" source="ICamera.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the cameras 3D velocity in the world.
/// </summary>
/// <returns> The cameras 3D velocity in the world. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetRotation" target="Common" source="ICamera.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the cameras 3D rotation in the world, where x=pitch, y=yaw, z=roll.
/// </summary>
/// <returns> The cameras 3D rotation in the world, where x=pitch, y=yaw, z=roll. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** IAxis.hpp
  **
  ***************************************
  -->
  <Export name="IAxis" target="Common" source="IAxis.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new axis.
/// </summary>
]]>
    </Description>
  </Export>
  <Export name="GetAmount" target="Common" source="IAxis.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the current value along the axis. -1 is smallest input, 1 is largest input.
/// </summary>
/// <returns> The current value of the axis in the range (-1, 1). </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** glfw3.h
  **
  ***************************************
  -->
  <Export name="glfwInit" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
  </Export>
  <Export name="glfwTerminate" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
  </Export>
  <Export name="glfwInitHint" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="int" name="hint" />
      <Parameter type="int" name="value" />
    </Parameters>
  </Export>
  <Export name="glfwGetVersion" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="int" name="major" />
      <Parameter type="int" name="minor" />
      <Parameter type="int" name="rev" />
    </Parameters>
  </Export>
  <Export name="glfwGetVersionString" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
  </Export>
  <Export name="glfwGetError" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="char**" name="description" />
    </Parameters>
  </Export>
  <Export name="glfwSetErrorCallback" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWerrorfun" name="cbfun" />
    </Parameters>
  </Export>
  <Export name="glfwGetMonitors" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="int" name="count" />
    </Parameters>
  </Export>
  <Export name="glfwGetPrimaryMonitor" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
  </Export>
  <Export name="glfwGetMonitorPos" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWmonitor" name="monitor" />
      <Parameter type="int" name="xpos" />
      <Parameter type="int" name="ypos" />
    </Parameters>
  </Export>
  <Export name="glfwGetMonitorPhysicalSize" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWmonitor" name="monitor" />
      <Parameter type="int" name="widthMM" />
      <Parameter type="int" name="heightMM" />
    </Parameters>
  </Export>
  <Export name="glfwGetMonitorContentScale" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWmonitor" name="monitor" />
      <Parameter type="float*" name="xscale" />
      <Parameter type="float*" name="yscale" />
    </Parameters>
  </Export>
  <Export name="glfwGetMonitorName" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWmonitor" name="monitor" />
    </Parameters>
  </Export>
  <Export name="glfwSetMonitorUserPointer" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWmonitor" name="monitor" />
      <Parameter type="IntPtr" name="pointer" />
    </Parameters>
  </Export>
  <Export name="glfwGetMonitorUserPointer" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWmonitor" name="monitor" />
    </Parameters>
  </Export>
  <Export name="glfwSetMonitorCallback" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWmonitorfun" name="cbfun" />
    </Parameters>
  </Export>
  <Export name="glfwGetVideoModes" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWmonitor" name="monitor" />
      <Parameter type="int" name="count" />
    </Parameters>
  </Export>
  <Export name="glfwGetVideoMode" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWmonitor" name="monitor" />
    </Parameters>
  </Export>
  <Export name="glfwSetGamma" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWmonitor" name="monitor" />
      <Parameter type="float" name="gamma" />
    </Parameters>
  </Export>
  <Export name="glfwGetGammaRamp" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWmonitor" name="monitor" />
    </Parameters>
  </Export>
  <Export name="glfwSetGammaRamp" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWmonitor" name="monitor" />
      <Parameter type="GLFWgammaramp" name="ramp" />
    </Parameters>
  </Export>
  <Export name="glfwDefaultWindowHints" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
  </Export>
  <Export name="glfwWindowHint" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="int" name="hint" />
      <Parameter type="int" name="value" />
    </Parameters>
  </Export>
  <Export name="glfwWindowHintString" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="int" name="hint" />
      <Parameter type="string" name="value" />
    </Parameters>
  </Export>
  <Export name="glfwCreateWindow" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="int" name="width" />
      <Parameter type="int" name="height" />
      <Parameter type="string" name="title" />
      <Parameter type="GLFWmonitor" name="monitor" />
      <Parameter type="GLFWwindow" name="share" />
    </Parameters>
  </Export>
  <Export name="glfwDestroyWindow" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
    </Parameters>
  </Export>
  <Export name="glfwWindowShouldClose" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
    </Parameters>
  </Export>
  <Export name="glfwSetWindowShouldClose" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="int" name="value" />
    </Parameters>
  </Export>
  <Export name="glfwSetWindowTitle" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="string" name="title" />
    </Parameters>
  </Export>
  <Export name="glfwSetWindowIcon" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="int" name="count" />
      <Parameter type="GLFWimage" name="images" />
    </Parameters>
  </Export>
  <Export name="glfwGetWindowPos" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="int" name="xpos" />
      <Parameter type="int" name="ypos" />
    </Parameters>
  </Export>
  <Export name="glfwSetWindowPos" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="int" name="xpos" />
      <Parameter type="int" name="ypos" />
    </Parameters>
  </Export>
  <Export name="glfwGetWindowSize" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="int" name="width" />
      <Parameter type="int" name="height" />
    </Parameters>
  </Export>
  <Export name="glfwSetWindowSizeLimits" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="int" name="minwidth" />
      <Parameter type="int" name="minheight" />
      <Parameter type="int" name="maxwidth" />
      <Parameter type="int" name="maxheight" />
    </Parameters>
  </Export>
  <Export name="glfwSetWindowAspectRatio" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="int" name="numer" />
      <Parameter type="int" name="denom" />
    </Parameters>
  </Export>
  <Export name="glfwSetWindowSize" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="int" name="width" />
      <Parameter type="int" name="height" />
    </Parameters>
  </Export>
  <Export name="glfwGetFramebufferSize" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="int" name="width" />
      <Parameter type="int" name="height" />
    </Parameters>
  </Export>
  <Export name="glfwGetWindowFrameSize" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="int" name="left" />
      <Parameter type="int" name="top" />
      <Parameter type="int" name="right" />
      <Parameter type="int" name="bottom" />
    </Parameters>
  </Export>
  <Export name="glfwGetWindowContentScale" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="float*" name="xscale" />
      <Parameter type="float*" name="yscale" />
    </Parameters>
  </Export>
  <Export name="glfwGetWindowOpacity" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
    </Parameters>
  </Export>
  <Export name="glfwSetWindowOpacity" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="float" name="opacity" />
    </Parameters>
  </Export>
  <Export name="glfwIconifyWindow" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
    </Parameters>
  </Export>
  <Export name="glfwRestoreWindow" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
    </Parameters>
  </Export>
  <Export name="glfwMaximizeWindow" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
    </Parameters>
  </Export>
  <Export name="glfwShowWindow" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
    </Parameters>
  </Export>
  <Export name="glfwHideWindow" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
    </Parameters>
  </Export>
  <Export name="glfwFocusWindow" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
    </Parameters>
  </Export>
  <Export name="glfwRequestWindowAttention" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
    </Parameters>
  </Export>
  <Export name="glfwGetWindowMonitor" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
    </Parameters>
  </Export>
  <Export name="glfwSetWindowMonitor" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="GLFWmonitor" name="monitor" />
      <Parameter type="int" name="xpos" />
      <Parameter type="int" name="ypos" />
      <Parameter type="int" name="width" />
      <Parameter type="int" name="height" />
      <Parameter type="int" name="refreshRate" />
    </Parameters>
  </Export>
  <Export name="glfwGetWindowAttrib" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="int" name="attrib" />
    </Parameters>
  </Export>
  <Export name="glfwSetWindowAttrib" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="int" name="attrib" />
      <Parameter type="int" name="value" />
    </Parameters>
  </Export>
  <Export name="glfwSetWindowUserPointer" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="IntPtr" name="pointer" />
    </Parameters>
  </Export>
  <Export name="glfwGetWindowUserPointer" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
    </Parameters>
  </Export>
  <Export name="glfwSetWindowPosCallback" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="GLFWwindowposfun" name="cbfun" />
    </Parameters>
  </Export>
  <Export name="glfwSetWindowSizeCallback" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="GLFWwindowsizefun" name="cbfun" />
    </Parameters>
  </Export>
  <Export name="glfwSetWindowCloseCallback" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="GLFWwindowclosefun" name="cbfun" />
    </Parameters>
  </Export>
  <Export name="glfwSetWindowRefreshCallback" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="GLFWwindowrefreshfun" name="cbfun" />
    </Parameters>
  </Export>
  <Export name="glfwSetWindowFocusCallback" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="GLFWwindowfocusfun" name="cbfun" />
    </Parameters>
  </Export>
  <Export name="glfwSetWindowIconifyCallback" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="GLFWwindowiconifyfun" name="cbfun" />
    </Parameters>
  </Export>
  <Export name="glfwSetWindowMaximizeCallback" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="GLFWwindowmaximizefun" name="cbfun" />
    </Parameters>
  </Export>
  <Export name="glfwSetFramebufferSizeCallback" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="GLFWframebuffersizefun" name="cbfun" />
    </Parameters>
  </Export>
  <Export name="glfwSetWindowContentScaleCallback" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="GLFWwindowcontentscalefun" name="cbfun" />
    </Parameters>
  </Export>
  <Export name="glfwPollEvents" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
  </Export>
  <Export name="glfwWaitEvents" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
  </Export>
  <Export name="glfwWaitEventsTimeout" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="double" name="timeout" />
    </Parameters>
  </Export>
  <Export name="glfwPostEmptyEvent" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
  </Export>
  <Export name="glfwGetInputMode" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="int" name="mode" />
    </Parameters>
  </Export>
  <Export name="glfwSetInputMode" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="int" name="mode" />
      <Parameter type="int" name="value" />
    </Parameters>
  </Export>
  <Export name="glfwGetKeyName" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="int" name="key" />
      <Parameter type="int" name="scancode" />
    </Parameters>
  </Export>
  <Export name="glfwGetKeyScancode" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="int" name="key" />
    </Parameters>
  </Export>
  <Export name="glfwGetKey" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="int" name="key" />
    </Parameters>
  </Export>
  <Export name="glfwGetMouseButton" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="int" name="button" />
    </Parameters>
  </Export>
  <Export name="glfwGetCursorPos" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="double" name="xpos" />
      <Parameter type="double" name="ypos" />
    </Parameters>
  </Export>
  <Export name="glfwSetCursorPos" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="double" name="xpos" />
      <Parameter type="double" name="ypos" />
    </Parameters>
  </Export>
  <Export name="glfwCreateCursor" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWimage" name="image" />
      <Parameter type="int" name="xhot" />
      <Parameter type="int" name="yhot" />
    </Parameters>
  </Export>
  <Export name="glfwCreateStandardCursor" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="int" name="shape" />
    </Parameters>
  </Export>
  <Export name="glfwDestroyCursor" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWcursor" name="cursor" />
    </Parameters>
  </Export>
  <Export name="glfwSetCursor" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="GLFWcursor" name="cursor" />
    </Parameters>
  </Export>
  <Export name="glfwSetKeyCallback" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="GLFWkeyfun" name="cbfun" />
    </Parameters>
  </Export>
  <Export name="glfwSetCharCallback" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="GLFWcharfun" name="cbfun" />
    </Parameters>
  </Export>
  <Export name="glfwSetCharModsCallback" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="GLFWcharmodsfun" name="cbfun" />
    </Parameters>
  </Export>
  <Export name="glfwSetMouseButtonCallback" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="GLFWmousebuttonfun" name="cbfun" />
    </Parameters>
  </Export>
  <Export name="glfwSetCursorPosCallback" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="GLFWcursorposfun" name="cbfun" />
    </Parameters>
  </Export>
  <Export name="glfwSetCursorEnterCallback" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="GLFWcursorenterfun" name="cbfun" />
    </Parameters>
  </Export>
  <Export name="glfwSetScrollCallback" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="GLFWscrollfun" name="cbfun" />
    </Parameters>
  </Export>
  <Export name="glfwSetDropCallback" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="GLFWdropfun" name="cbfun" />
    </Parameters>
  </Export>
  <Export name="glfwJoystickPresent" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="int" name="jid" />
    </Parameters>
  </Export>
  <Export name="glfwGetJoystickAxes" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="int" name="jid" />
      <Parameter type="int" name="count" />
    </Parameters>
  </Export>
  <Export name="glfwGetJoystickButtons" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="int" name="jid" />
      <Parameter type="int" name="count" />
    </Parameters>
  </Export>
  <Export name="glfwGetJoystickHats" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="int" name="jid" />
      <Parameter type="int" name="count" />
    </Parameters>
  </Export>
  <Export name="glfwGetJoystickName" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="int" name="jid" />
    </Parameters>
  </Export>
  <Export name="glfwGetJoystickGUID" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="int" name="jid" />
    </Parameters>
  </Export>
  <Export name="glfwSetJoystickUserPointer" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="int" name="jid" />
      <Parameter type="IntPtr" name="pointer" />
    </Parameters>
  </Export>
  <Export name="glfwGetJoystickUserPointer" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="int" name="jid" />
    </Parameters>
  </Export>
  <Export name="glfwJoystickIsGamepad" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="int" name="jid" />
    </Parameters>
  </Export>
  <Export name="glfwSetJoystickCallback" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWjoystickfun" name="cbfun" />
    </Parameters>
  </Export>
  <Export name="glfwUpdateGamepadMappings" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="string" />
    </Parameters>
  </Export>
  <Export name="glfwGetGamepadName" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="int" name="jid" />
    </Parameters>
  </Export>
  <Export name="glfwGetGamepadState" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="int" name="jid" />
      <Parameter type="GLFWgamepadstate" name="state" />
    </Parameters>
  </Export>
  <Export name="glfwSetClipboardString" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="string" name="string" />
    </Parameters>
  </Export>
  <Export name="glfwGetClipboardString" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
    </Parameters>
  </Export>
  <Export name="glfwGetTime" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
  </Export>
  <Export name="glfwSetTime" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="double" name="time" />
    </Parameters>
  </Export>
  <Export name="glfwGetTimerValue" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
  </Export>
  <Export name="glfwGetTimerFrequency" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
  </Export>
  <Export name="glfwMakeContextCurrent" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
    </Parameters>
  </Export>
  <Export name="glfwGetCurrentContext" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
  </Export>
  <Export name="glfwSwapBuffers" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="GLFWwindow" name="window" />
    </Parameters>
  </Export>
  <Export name="glfwSwapInterval" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="int" name="interval" />
    </Parameters>
  </Export>
  <Export name="glfwExtensionSupported" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="extension" />
    </Parameters>
  </Export>
  <Export name="glfwGetProcAddress" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="procname" />
    </Parameters>
  </Export>
  <Export name="glfwVulkanSupported" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
  </Export>
  <Export name="glfwGetRequiredInstanceExtensions" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="uint32_t" name="count" />
    </Parameters>
  </Export>
  <Export name="glfwGetInstanceProcAddress" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="VkInstance" name="instance" />
      <Parameter type="string" name="procname" />
    </Parameters>
  </Export>
  <Export name="glfwGetPhysicalDevicePresentationSupport" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="VkInstance" name="instance" />
      <Parameter type="VkPhysicalDevice" name="device" />
      <Parameter type="uint32_t" name="queuefamily" />
    </Parameters>
  </Export>
  <Export name="glfwCreateWindowSurface" target="Common" source="glfw3.h">
    <Description>
      <![CDATA[
]]>
    </Description>
    <Parameters>
      <Parameter type="VkInstance" name="instance" />
      <Parameter type="GLFWwindow" name="window" />
      <Parameter type="VkAllocationCallbacks" name="allocator" />
      <Parameter type="VkSurfaceKHR" name="surface" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Display.hpp
  **
  ***************************************
  -->
  <Export name="Get" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets this engine instance.

/// </summary>

/// <returns> The current module instance. </returns>
]]>
    </Description>
  </Export>
  <Export name="Display" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new display module.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="GetWidth" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the width of the display in pixels.

/// </summary>

/// <returns> The width of the display. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetWindowWidth" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the non-fullscreen width of the display in pixels.

/// </summary>

/// <returns> The width of the display. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetWidth" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the width of the display in pixels.

/// </summary>

/// <param name="width"> The new width in pixels. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="uint32_t" name="width" />
    </Parameters>
  </Export>
  <Export name="GetHeight" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the height of the display in pixels.

/// </summary>

/// <returns> The height of the display. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetWindowHeight" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the non-fullscreen height of the display in pixels.

/// </summary>

/// <returns> The height of the display. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetHeight" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the height of the display in pixels.

/// </summary>

/// <param name="height"> The new height in pixels. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="uint32_t" name="height" />
    </Parameters>
  </Export>
  <Export name="SetWindowSize" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets window size to a new size.

/// </summary>

/// <param name="width"> The new width in pixels. </param>

/// <param name="height"> The new height in pixels. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="uint32_t" name="width" />
      <Parameter type="uint32_t" name="height" />
    </Parameters>
  </Export>
  <Export name="GetAspectRatio" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the aspect ratio between the displays width and height.

/// </summary>

/// <returns> The aspect ratio. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetTitle" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the window's title.

/// </summary>

/// <returns> The window's title. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetTitle" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets window title

/// </summary>

/// <param name="title"> The new title. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="title" />
    </Parameters>
  </Export>
  <Export name="GetIcon" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the window's icon file.

/// </summary>

/// <returns> The window's icon file. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetIcon" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets window icon image.

/// </summary>

/// <param name="filename"> The new icon file. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="filename" />
    </Parameters>
  </Export>
  <Export name="IsAntialiasing" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if the display requests antialiased images.

/// </summary>

/// <returns> If using antialiased images. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetAntialiasing" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Requests the display to antialias.

/// </summary>

/// <param name="antialiasing"> If the display should antialias. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="bool" name="antialiasing" />
    </Parameters>
  </Export>
  <Export name="IsFullscreen" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets weather the display is fullscreen or not.

/// </summary>

/// <returns> Fullscreen or windowed. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetFullscreen" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the display to be fullscreen or windowed.

/// </summary>

/// <param name="fullscreen"> Weather or not to be fullscreen. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="bool" name="fullscreen" />
    </Parameters>
  </Export>
  <Export name="IsClosed" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if the display is closed.

/// </summary>

/// <returns> If the display is closed. </returns>
]]>
    </Description>
  </Export>
  <Export name="IsFocused" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if the display is selected.

/// </summary>

/// <returns> If the display is selected. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetWindowXPos" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the windows Y position of the display in pixels.

/// </summary>

/// <returns> The windows x position. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetWindowYPos" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the windows Y position of the display in pixels.

/// </summary>

/// <returns> The windows Y position. </returns>
]]>
    </Description>
  </Export>
  <Export name="IsIconified" target="Common" source="Display.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the windows is minimized.

/// </summary>

/// <returns> If the window is minimized. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Joysticks.hpp
  **
  ***************************************
  -->
  <Export name="Get" target="Common" source="Joysticks.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets this engine instance.
/// </summary>
/// <returns> The current module instance. </returns>
]]>
    </Description>
  </Export>
  <Export name="Joysticks" target="Common" source="Joysticks.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new joysticks module.
/// </summary>
]]>
    </Description>
  </Export>
  <Export name="IsConnected" target="Common" source="Joysticks.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Determines if the joystick is connected
/// </summary>
/// <param name="port"> The joystick to check connection with. </param>
/// <returns> If the joystick is connected. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.JoystickPort*" name="port" />
    </Parameters>
  </Export>
  <Export name="GetName" target="Common" source="Joysticks.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the name of the joystick.
/// </summary>
/// <param name="port"> The joystick to get the name of. </param>
/// <returns> The joysticks name. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.JoystickPort*" name="port" />
    </Parameters>
  </Export>
  <Export name="GetButton" target="Common" source="Joysticks.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the whether a button on a joystick is pressed.
/// </summary>
/// <param name="port"> The joystick to get the button from. </param>
/// <param name="button"> The button of interest. </param>
/// <returns> Whether a button on a joystick is pressed. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.JoystickPort*" name="port" />
      <Parameter type="uint32_t" name="button" />
    </Parameters>
  </Export>
  <Export name="GetAxis" target="Common" source="Joysticks.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the value of a joysticks axis.
/// </summary>
/// <param name="port"> The joystick to get the axis from. </param>
/// <param name="axis"> The axis of interest. </param>
/// <returns> The value of the joystick's axis. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.JoystickPort*" name="port" />
      <Parameter type="uint32_t" name="axis" />
    </Parameters>
  </Export>
  <Export name="GetCountButtons" target="Common" source="Joysticks.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the number of buttons the joystick offers.
/// </summary>
/// <param name="port"> The joystick to the the button count from. </param>
/// <returns> The number of buttons the joystick offers. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.JoystickPort*" name="port" />
    </Parameters>
  </Export>
  <Export name="GetCountAxes" target="Common" source="Joysticks.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the number of axes the joystick offers.
/// </summary>
/// <param name="port"> The joystick to the the axis count from. </param>
/// <returns> The number of axes the joystick offers. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.JoystickPort*" name="port" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** IButton.hpp
  **
  ***************************************
  -->
  <Export name="IButton" target="Common" source="IButton.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new axis.
/// </summary>
]]>
    </Description>
  </Export>
  <Export name="IsDown" target="Common" source="IButton.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Returns whether this button is currently pressed.
/// </summary>
/// <returns> True if the button is pressed, false otherwise. </returns>
]]>
    </Description>
  </Export>
  <Export name="WasDown" target="Common" source="IButton.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets if the key is down and was not down before. Key press recognized as one click.
/// </summary>
/// <returns> Is the key down and was not down before? </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Mouse.hpp
  **
  ***************************************
  -->
  <Export name="Get" target="Common" source="Mouse.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets this engine instance.
/// </summary>
/// <returns> The current module instance. </returns>
]]>
    </Description>
  </Export>
  <Export name="Mouse" target="Common" source="Mouse.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new mouse module.
/// </summary>
]]>
    </Description>
  </Export>
  <Export name="GetCustomMouse" target="Common" source="Mouse.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the mouses custom mouse file.
/// </summary>
/// <returns> The custom mouse file. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetCustomMouse" target="Common" source="Mouse.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Sets the custom mouse file.
/// </summary>
/// <param name="filename"> The new custom mouse file. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="filename" />
    </Parameters>
  </Export>
  <Export name="SetCursorHidden" target="Common" source="Mouse.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Sets if the operating systems cursor is hidden whilst in the display.
/// </summary>
/// <param name="disabled"> If the system cursor should be disabled or hidden when not shown. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="bool" name="disabled" />
    </Parameters>
  </Export>
  <Export name="GetButton" target="Common" source="Mouse.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets whether or not a particular mouse button is currently pressed.
/// <p>Actions: WSI_ACTION_PRESS, WSI_ACTION_RELEASE, WSI_ACTION_REPEAT</p>
/// </summary>
/// <param name="mouseButton"> The mouse button to test. </param>
/// <returns> If the mouse button is currently pressed. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.MouseButton*" name="mouseButton" />
    </Parameters>
  </Export>
  <Export name="GetPositionX" target="Common" source="Mouse.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the mouses screen x position.
/// </summary>
/// <returns> The mouses x position. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetPositionY" target="Common" source="Mouse.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the mouses screen y position.
/// </summary>
/// <returns> The mouses y position. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetPosition" target="Common" source="Mouse.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Sets the mouse position.
/// </summary>
/// <param name="cursorX"> The x position in screenspace. </param>
/// <param name="cursorY"> The y position in screenspace. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="cursorX" />
      <Parameter type="float" name="cursorY" />
    </Parameters>
  </Export>
  <Export name="GetDeltaX" target="Common" source="Mouse.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the mouses delta x.
/// </summary>
/// <returns> The mouses delta x. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetDeltaY" target="Common" source="Mouse.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the mouses delta y.
/// </summary>
/// <returns> The mouses delta y. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetDeltaWheel" target="Common" source="Mouse.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the mouses wheel delta.
/// </summary>
/// <returns> The mouses wheel delta. </returns>
]]>
    </Description>
  </Export>
  <Export name="IsDisplaySelected" target="Common" source="Mouse.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets if the display is selected.
/// </summary>
/// <returns> If the display is selected. </returns>
]]>
    </Description>
  </Export>
  <Export name="IsCursorDisabled" target="Common" source="Mouse.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// If the cursor is hidden, the mouse is the display locked if true.
/// </summary>
/// <returns> If the cursor is hidden. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** UiSelector.hpp
  **
  ***************************************
  -->
  <Export name="IsSelected" target="Common" source="UiSelector.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets if the object provided has the cursor hovered above it.
/// </summary>
/// <param name="object"> The object to check with.
/// </param>
/// <returns> If the object has the cursor inside of its box. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.UiObject" name="@object" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** SceneStructure.hpp
  **
  ***************************************
  -->
  <Export name="SceneStructure" target="Common" source="SceneStructure.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new basic structure.
/// </summary>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** IScene.hpp
  **
  ***************************************
  -->
  <Export name="IScene" target="Common" source="IScene.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new scene.
/// </summary>
/// <param name="camera"> The scenes camera. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.ICamera" name="camera" />
    </Parameters>
  </Export>
  <Export name="Update" target="Common" source="IScene.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Run when updating the scene.
/// </summary>
]]>
    </Description>
  </Export>
  <Export name="GetCamera" target="Common" source="IScene.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the current camera object.
/// </summary>
/// <returns> The current camera. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetCamera" target="Common" source="IScene.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Sets the current camera to a new camera.
/// </summary>
/// <param name="camera"> The new camera. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::AcidSharp.ICamera" name="camera" />
    </Parameters>
  </Export>
  <Export name="GetPhysics" target="Common" source="IScene.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the scene physics system.
/// </summary>
/// <returns> The scenes physics syste,. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetStructure" target="Common" source="IScene.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the scene object structure.
/// </summary>
/// <returns> The scene object structure. </returns>
]]>
    </Description>
  </Export>
  <Export name="IsStarted" target="Common" source="IScene.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets if this scene has started.
/// </summary>
/// <returns> If the scene has started. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetStarted" target="Common" source="IScene.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Sets if this scene has started.
/// </summary>
/// <param name="started"> If the scene has started. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="bool" name="started" />
    </Parameters>
  </Export>
  <Export name="IsGamePaused" target="Common" source="IScene.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets if the main menu is open.
/// </summary>
/// <returns> If the main menu is open. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetUiColour" target="Common" source="IScene.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// The primary colour to be used in UI elements.
/// </summary>
/// <returns> The primary colour. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetSelectorJoystick" target="Common" source="IScene.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// The UI selector for a joystick.
/// </summary>
/// <returns> The joystick selector. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** ComponentRegister.hpp
  **
  ***************************************
  -->
  <Export name="ComponentRegister" target="Common" source="ComponentRegister.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new component register.
/// </summary>
]]>
    </Description>
  </Export>
  <Export name="CreateComponent" target="Common" source="ComponentRegister.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new component from the register.
/// </summary>
/// <param name="name"> The component name to create. </param>
/// <returns> The new component. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="name" />
    </Parameters>
  </Export>
  <Export name="DeregisterComponent" target="Common" source="ComponentRegister.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Deregisters a component.
/// </summary>
/// <param name="name"> The components name. </param>
/// <returns> If the component was deregistered. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="name" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Scenes.hpp
  **
  ***************************************
  -->
  <Export name="Get" target="Common" source="Scenes.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets this engine instance.
/// </summary>
/// <returns> The current module instance. </returns>
]]>
    </Description>
  </Export>
  <Export name="Scenes" target="Common" source="Scenes.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new Scenes module.
/// </summary>
]]>
    </Description>
  </Export>
  <Export name="CreateComponent" target="Common" source="Scenes.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Creates a new component from the register.
/// </summary>
/// <param name="name"> The component name to create. </param>
/// <returns> The new component. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="name" />
    </Parameters>
  </Export>
  <Export name="DeregisterComponent" target="Common" source="Scenes.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Deregisters a component.
/// </summary>
/// <param name="name"> The components name. </param>
/// <returns> If the component was deregistered. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="name" />
    </Parameters>
  </Export>
  <Export name="GetCamera" target="Common" source="Scenes.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the current camera object.
/// </summary>
/// <returns> The current camera. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetPhysics" target="Common" source="Scenes.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the scene physics system.
/// </summary>
/// <returns> The scenes physics syste,. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetStructure" target="Common" source="Scenes.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets the scene object structure.
/// </summary>
/// <returns> The scene object structure. </returns>
]]>
    </Description>
  </Export>
  <Export name="IsGamePaused" target="Common" source="Scenes.hpp">
    <Description>
      <![CDATA[
/// <summary>
/// Gets if the scene is paused.
/// </summary>
/// <returns> If the scene is paused. </returns>
]]>
    </Description>
  </Export>
</Definitions>