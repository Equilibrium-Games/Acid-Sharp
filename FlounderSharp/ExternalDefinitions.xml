<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Definitions>
  <!--
  ***************************************
  **
  ** FileSystem.hpp
  **
  ***************************************
  -->
  <Export name="FileExists" target="Common" source="FileSystem.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if a file exists.

/// </summary>

/// <param name="filepath"> The filepath. </param>

/// <returns> If the file exists. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="filepath" />
    </Parameters>
  </Export>
  <Export name="DeleteFile" target="Common" source="FileSystem.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Deletes a file.

/// </summary>

/// <param name="filepath"> The filepath. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="filepath" />
    </Parameters>
  </Export>
  <Export name="CreateFile" target="Common" source="FileSystem.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a file, and the folder path.

/// </summary>

/// <param name="filepath"> The filepath. </param>

/// <param name="createFolders"> If folders should also be created. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="filepath" />
      <Parameter type="bool" name="createFolders" />
    </Parameters>
  </Export>
  <Export name="ClearFile" target="Common" source="FileSystem.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Clears the contents from a file.

/// </summary>

/// <param name="filepath"> The filepath. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="filepath" />
    </Parameters>
  </Export>
  <Export name="CreateFolder" target="Common" source="FileSystem.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a directory.

/// </summary>

/// <param name="path"> The directory to create. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="path" />
    </Parameters>
  </Export>
  <Export name="ReadTextFile" target="Common" source="FileSystem.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Reads a text file into a string.

/// </summary>

/// <param name="filepath"> The filepath. </param>

/// <returns> The string containing the read file. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="filepath" />
    </Parameters>
  </Export>
  <Export name="WriteTextFile" target="Common" source="FileSystem.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Writes to a text file from a string.

/// </summary>

/// <param name="filepath"> The filepath. </param>

/// <param name="data"> The text data. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="filepath" />
      <Parameter type="string" name="data" />
    </Parameters>
  </Export>
  <Export name="GetWorkingDirectory" target="Common" source="FileSystem.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the current working directory.

/// </summary>

/// <returns> If the working directory. </returns>
]]>
    </Description>
  </Export>
  <Export name="FixPaths" target="Common" source="FileSystem.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Removes backslashes from directories.

/// </summary>

/// <returns> The path with only forward slashes. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="filepath" />
    </Parameters>
  </Export>
  <Export name="FindExt" target="Common" source="FileSystem.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the file extension for the file.

/// </summary>

/// <returns> The file extension. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="filepath" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** FormatString.hpp
  **
  ***************************************
  -->
  <Export name="StartsWith" target="Common" source="FormatString.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if a string starts with a token.

/// </summary>

/// <param name="str"> The string. </param>

/// <param name="token"> The token. </param>

/// <returns> If a string starts with the token. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="str" />
      <Parameter type="string" name="token" />
    </Parameters>
  </Export>
  <Export name="Contains" target="Common" source="FormatString.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if a string contains a token.

/// </summary>

/// <param name="str"> The string. </param>

/// <param name="token"> The token. </param>

/// <returns> If a string contains the token. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="str" />
      <Parameter type="string" name="token" />
    </Parameters>
  </Export>
  <Export name="IsInteger" target="Common" source="FormatString.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if a string is a integer.

/// </summary>

/// <param name="str"> The string. </param>

/// <returns> If a string is a integer. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="str" />
    </Parameters>
  </Export>
  <Export name="FindCharPos" target="Common" source="FormatString.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the first char index in the string.

/// </summary>

/// <param name="str"> The string. </param>

/// <param name="c"> The char to look for. </param>

/// <returns> The char index. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="str" />
      <Parameter type="sbyte*" name="c" />
    </Parameters>
  </Export>
  <Export name="Trim" target="Common" source="FormatString.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Trims the left and right side of a string of whitespace.

/// </summary>

/// <param name="str"> The string. </param>

/// <param name="whitespace"> The whitespace type. </param>

/// <returns> The trimmed string. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="str" />
      <Parameter type="string" name="whitespace" />
    </Parameters>
  </Export>
  <Export name="Substring" target="Common" source="FormatString.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Takes a substring of a string between two bounds.

/// </summary>

/// <param name="str"> The string. </param>

/// <param name="start"> The left bound. </param>

/// <param name="end"> The right bound. </param>

/// <returns> The substring of the string. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="str" />
      <Parameter type="uint" name="start" />
      <Parameter type="uint" name="end" />
    </Parameters>
  </Export>
  <Export name="RemoveAll" target="Common" source="FormatString.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Removes all tokens from a string.

/// </summary>

/// <param name="str"> The string. </param>

/// <param name="token"> The token. </param>

/// <returns> The string with the tokens removed. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="str" />
      <Parameter type="sbyte*" name="token" />
    </Parameters>
  </Export>
  <Export name="Replace" target="Common" source="FormatString.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Replaces all tokens from a string.

/// </summary>

/// <param name="str"> The string. </param>

/// <param name="token"> The token. </param>

/// <param name="to"> The string to replace the tokens with. </param>

/// <returns> The string with the tokens replaced. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="str" />
      <Parameter type="string" name="token" />
      <Parameter type="string" name="to" />
    </Parameters>
  </Export>
  <Export name="Lowercase" target="Common" source="FormatString.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Lowercases a string.

/// </summary>

/// <param name="str"> The string. </param>

/// <returns> The lowercased string. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="str" />
    </Parameters>
  </Export>
  <Export name="Uppercase" target="Common" source="FormatString.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// uppercased a string.

/// </summary>

/// <param name="str"> The string. </param>

/// <returns> The uppercased string. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="str" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Vector3.hpp
  **
  ***************************************
  -->
  <Export name="Vector3" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector3.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Vector3" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector3.

/// </summary>

/// <param name="x"> Start x. </param>

/// <param name="y"> Start y. </param>

/// <param name="z"> Start z. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float*" name="x" />
      <Parameter type="float*" name="y" />
      <Parameter type="float*" name="z" />
    </Parameters>
  </Export>
  <Export name="Vector3" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector3.

/// </summary>

/// <param name="source"> Creates this vector out of a existing one. </param>

/// <param name="z"> Start z. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector2" name="source" />
      <Parameter type="float*" name="z" />
    </Parameters>
  </Export>
  <Export name="Vector3" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector3.

/// </summary>

/// <param name="source"> Creates this vector out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="source" />
    </Parameters>
  </Export>
  <Export name="Vector3" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector3.

/// </summary>

/// <param name="source"> Creates this vector out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector4" name="source" />
    </Parameters>
  </Export>
  <Export name="Vector3" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector3.

/// </summary>

/// <param name="source"> Creates this vector out of a existing colour. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Colour" name="source" />
    </Parameters>
  </Export>
  <Export name="Add" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Adds this vector to another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Subtract" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Subtracts this vector to another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Multiply" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Multiplies this vector with another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Divide" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Divides this vector by another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Angle" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Calculates the angle between this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The angle, in radians. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Dot" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Calculates the dot product of the this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The dot product. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Cross" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Calculates the cross product of the this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The cross product. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Scale" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Scales this vector by a scalar.

/// </summary>

/// <param name="scalar"> The scalar value. </param>

/// <returns> The scaled vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float*" name="scalar" />
    </Parameters>
  </Export>
  <Export name="Rotate" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Rotates this vector by a angle around the origin.

/// </summary>

/// <param name="rotation"> The rotation amount. </param>

/// <returns> The rotated vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="rotation" />
    </Parameters>
  </Export>
  <Export name="Negate" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Negates this vector.

/// </summary>

/// <returns> The negated vector. </returns>
]]>
    </Description>
  </Export>
  <Export name="Normalize" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Normalizes this vector.

/// </summary>

/// <returns> The normalized vector. </returns>
]]>
    </Description>
  </Export>
  <Export name="LengthSquared" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the length squared of this vector.

/// </summary>

/// <returns> The length squared. </returns>
]]>
    </Description>
  </Export>
  <Export name="Length" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the length of this vector.

/// </summary>

/// <returns> The length. </returns>
]]>
    </Description>
  </Export>
  <Export name="MaxComponent" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the maximum value in this vector.

/// </summary>

/// <returns> The largest components. </returns>
]]>
    </Description>
  </Export>
  <Export name="MinComponent" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the lowest value in this vector.

/// </summary>

/// <returns> The smallest components. </returns>
]]>
    </Description>
  </Export>
  <Export name="DistanceSquared" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the distance between this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The squared distance. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Distance" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the between this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The distance. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="DistanceVector" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the vector distance between this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The vector distance. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="SmoothDamp" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gradually changes this vector to a target.

/// </summary>

/// <param name="target"> The target vector. </param>

/// <param name="rate"> The rate to go from current to the target. </param>

/// <returns> The changed vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="target" />
      <Parameter type="global::fl.Vector3" name="rate" />
    </Parameters>
  </Export>
  <Export name="CartesianToPolar" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Converts from rectangular to spherical coordinates, this vector is in cartesian (x, y, z).

/// </summary>

/// <returns> The polar coordinates (radius, theta, phi). </returns>
]]>
    </Description>
  </Export>
  <Export name="PolarToCartesian" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Converts from spherical to rectangular coordinates, this vector is in polar (radius, theta, phi).

/// </summary>

/// <returns> The cartesian coordinates (x, y, z). </returns>
]]>
    </Description>
  </Export>
  <Export name="ProjectCubeToSphere" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Projects this cube coordinate onto a sphere.

/// </summary>

/// <param name="radius"> The sphere radius. </param>

/// <returns> The projected cartesian coordinates. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float*" name="radius" />
    </Parameters>
  </Export>
  <Export name="BaryCentric" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the height of this vector on a point off of a 3d triangle.

/// </summary>

/// <param name="p1"> Point 1 on the triangle. </param>

/// <param name="p2"> Point 2 on the triangle. </param>

/// <param name="p3"> Point 3 on the triangle. </param>

/// <returns> Height of the triangle. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="p1" />
      <Parameter type="global::fl.Vector3" name="p2" />
      <Parameter type="global::fl.Vector3" name="p3" />
    </Parameters>
  </Export>
  <Export name="MinVector" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the lowest vector size.

/// </summary>

/// <param name="a"> The first vector to get values from. </param>

/// <param name="b"> The second vector to get values from. </param>

/// <returns> The lowest vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="a" />
      <Parameter type="global::fl.Vector3" name="b" />
    </Parameters>
  </Export>
  <Export name="MaxVector" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the maximum vector size.

/// </summary>

/// <param name="a"> The first vector to get values from. </param>

/// <param name="b"> The second vector to get values from. </param>

/// <returns> The maximum vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="a" />
      <Parameter type="global::fl.Vector3" name="b" />
    </Parameters>
  </Export>
  <Export name="RandomUnitVector" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Generates a random unit vector.

/// </summary>

/// <returns> The random unit vector. </returns>
]]>
    </Description>
  </Export>
  <Export name="RandomPointOnCircle" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets a random point from on a circle.

/// </summary>

/// <param name="normal"> The circles normal. </param>

/// <param name="radius"> The circles radius. </param>

/// <returns> The random point in a circle. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="normal" />
      <Parameter type="float*" name="radius" />
    </Parameters>
  </Export>
  <Export name="RandomUnitVectorWithinCone" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Generates a random unit vector from within a cone.

/// </summary>

/// <param name="coneDirection"> The cones direction. </param>

/// <param name="angle"> The cones major angle. </param>

/// <returns> The random unitt vector in a code. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="coneDirection" />
      <Parameter type="float*" name="angle" />
    </Parameters>
  </Export>
  <Export name="Write" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Saves this vector into a loaded value.

/// </summary>

/// <param name="destination"> The destination loaded value. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.LoadedValue" name="destination" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** SquareArray.hpp
  **
  ***************************************
  -->
  <Export name="FloatArray" target="Common" source="SquareArray.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new rectangular float array.

/// </summary>

/// <param name="size1"> The first size. </param>

/// <param name="size2"> The seconds size. </param>

/// <returns> The new rectangular float array. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="int" name="size1" />
      <Parameter type="int" name="size2" />
    </Parameters>
  </Export>
  <Export name="Vector3Array" target="Common" source="SquareArray.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new rectangular Vector3 array.

/// </summary>

/// <param name="size1"> The first size. </param>

/// <param name="size2"> The seconds size. </param>

/// <returns> The new rectangular Vector3 array. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="int" name="size1" />
      <Parameter type="int" name="size2" />
    </Parameters>
  </Export>
</Definitions>