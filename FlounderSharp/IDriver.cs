// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    /// <summary>Represents a driver that changes over time.</summary>
    public unsafe abstract partial class IDriver : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vfptr_IDriver;

            [FieldOffset(8)]
            internal float m_length;

            [FieldOffset(12)]
            internal float m_actualTime;

            [FieldOffset(16)]
            internal float m_currentTime;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0IDriver@fl@@QEAA@AEBM@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, float* length);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0IDriver@fl@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1IDriver@fl@@UEAA@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Update@IDriver@fl@@QEAAMAEBN@Z")]
            internal static extern float Update(global::System.IntPtr instance, double* delta);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetActualTime@IDriver@fl@@IEBAMXZ")]
            internal static extern float GetActualTime(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.IDriver> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.IDriver>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.IDriver __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.IDriverInternal(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.IDriver __CreateInstance(global::FlounderSharp.IDriver.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.IDriverInternal(native, skipVTables);
        }

        protected IDriver(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        /// <summary>
        /// <para>Creates a new driver with a length.</para>
        /// <para></para>
        /// <para>name=&quot;length&quot;&gt; The drivers length.</para>
        /// </summary>
        protected IDriver(ref float length)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.IDriver.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            fixed (float* __refParamPtr0 = &length)
            {
                var __arg0 = __refParamPtr0;
                __Internal.ctor((__Instance + __PointerAdjustment), __arg0);
            }
            SetupVTables(GetType().FullName == "FlounderSharp.IDriver");
        }

        protected IDriver(global::FlounderSharp.IDriver _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.IDriver.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
            SetupVTables(GetType().FullName == "FlounderSharp.IDriver");
        }

        ~IDriver()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.IDriver __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::FlounderSharp.IDriver.__Internal*) __Instance)->vfptr_IDriver = new global::System.IntPtr(__OriginalVTables[0]);
            if (disposing)
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 1 * 8);
                if (__slot != null)
                {
                    var ___dtorDelegate = (global::FlounderSharp.Delegates.Action_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Action_IntPtr_int));
                    ___dtorDelegate((__Instance + __PointerAdjustment), 0);
                }
                else
                    __Internal.dtor((__Instance + __PointerAdjustment), 0);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>
        /// <para>Updates the driver with the passed time.</para>
        /// <para></para>
        /// <para>name=&quot;delta&quot;&gt; The time between the last update.</para>
        /// <para>The calculated value.</para>
        /// </summary>
        public float Update(ref double delta)
        {
            fixed (double* __refParamPtr0 = &delta)
            {
                var __arg0 = __refParamPtr0;
                var __ret = __Internal.Update((__Instance + __PointerAdjustment), __arg0);
                return __ret;
            }
        }

        /// <summary>
        /// <para>Calculates the new value.</para>
        /// <para></para>
        /// <para>name=&quot;time&quot;&gt; The time into the drivers life.</para>
        /// <para></para>
        /// <para>The calculated value.</para>
        /// </summary>
        protected abstract float Calculate(ref float time);

        protected float ActualTime
        {
            get
            {
                var __ret = __Internal.GetActualTime((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        #region Virtual table interop

        // virtual ~IDriver() { }
        private static global::FlounderSharp.Delegates.Action_IntPtr_int _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr instance, int delete)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.IDriver) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // float Calculate(const float &time) = 0
        private static global::FlounderSharp.Delegates.Func_float_IntPtr_floatPtr _CalculateDelegateInstance;

        private static float _CalculateDelegateHook(global::System.IntPtr instance, float* time)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.IDriver) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Calculate(ref *time);
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[2];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CalculateDelegateInstance += _CalculateDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CalculateDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(3 * 8);
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(3 * 8);
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = _Thunks[1];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class IDriverInternal : global::FlounderSharp.IDriver, IDisposable
    {
        private static void* __CopyValue(global::FlounderSharp.IDriver.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.IDriver.__Internal));
            *(global::FlounderSharp.IDriver.__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IDriverInternal(global::FlounderSharp.IDriver.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal IDriverInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
        }

        ~IDriverInternal()
        {
            Dispose(false);
        }

        /// <summary>
        /// <para>Calculates the new value.</para>
        /// <para></para>
        /// <para>name=&quot;time&quot;&gt; The time into the drivers life.</para>
        /// <para></para>
        /// <para>The calculated value.</para>
        /// </summary>
        protected override float Calculate(ref float time)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 8);
            var ___CalculateDelegate = (global::FlounderSharp.Delegates.Func_float_IntPtr_floatPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Func_float_IntPtr_floatPtr));
            fixed (float* __refParamPtr0 = &time)
            {
                var __arg0 = __refParamPtr0;
                var __ret = ___CalculateDelegate((__Instance + __PointerAdjustment), __arg0);
                return __ret;
            }
        }
    }
}
