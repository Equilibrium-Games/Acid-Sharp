// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    /// <summary>A driver that fades from start to end.</summary>
    public unsafe partial class DriverFade : global::FlounderSharp.IDriver, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vfptr_IDriver;

            [FieldOffset(8)]
            internal float m_length;

            [FieldOffset(12)]
            internal float m_actualTime;

            [FieldOffset(16)]
            internal float m_currentTime;

            [FieldOffset(24)]
            internal float m_start;

            [FieldOffset(28)]
            internal float m_end;

            [FieldOffset(32)]
            internal float m_peak;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0DriverFade@fl@@QEAA@AEBM000@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, float* start, float* end, float* peak, float* length);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0DriverFade@fl@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetStart@DriverFade@fl@@QEBAMXZ")]
            internal static extern float GetStart(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetStart@DriverFade@fl@@QEAAXAEBM@Z")]
            internal static extern void SetStart(global::System.IntPtr instance, float* start);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetEnd@DriverFade@fl@@QEBAMXZ")]
            internal static extern float GetEnd(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetEnd@DriverFade@fl@@QEAAXAEBM@Z")]
            internal static extern void SetEnd(global::System.IntPtr instance, float* end);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetPeak@DriverFade@fl@@QEBAMXZ")]
            internal static extern float GetPeak(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetPeak@DriverFade@fl@@QEAAXAEBM@Z")]
            internal static extern void SetPeak(global::System.IntPtr instance, float* peak);
        }

        internal static new global::FlounderSharp.DriverFade __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.DriverFade(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.DriverFade __CreateInstance(global::FlounderSharp.DriverFade.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.DriverFade(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.DriverFade.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.DriverFade.__Internal));
            global::FlounderSharp.DriverFade.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private DriverFade(global::FlounderSharp.DriverFade.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DriverFade(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        /// <summary>
        /// <para>Creates a new fade driver.</para>
        /// <para></para>
        /// <para>name=&quot;start&quot;&gt; The start time.</para>
        /// <para>name=&quot;end&quot;&gt; The end time.</para>
        /// <para>name=&quot;peak&quot;&gt; The peak value.</para>
        /// <para>name=&quot;length&quot;&gt; The time taken to get to the end.</para>
        /// </summary>
        public DriverFade(ref float start, ref float end, ref float peak, ref float length)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.DriverFade.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            fixed (float* __refParamPtr0 = &start)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &end)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &peak)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (float* __refParamPtr3 = &length)
                        {
                            var __arg3 = __refParamPtr3;
                            __Internal.ctor((__Instance + __PointerAdjustment), __arg0, __arg1, __arg2, __arg3);
                        }
                    }
                }
            }
            SetupVTables(GetType().FullName == "FlounderSharp.DriverFade");
        }

        public DriverFade(global::FlounderSharp.DriverFade _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.DriverFade.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
            SetupVTables(GetType().FullName == "FlounderSharp.DriverFade");
        }

        ~DriverFade()
        {
            Dispose(false);
        }

        protected override float Calculate(ref float time)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 8);
            var ___CalculateDelegate = (global::FlounderSharp.Delegates.Func_float_IntPtr_floatPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Func_float_IntPtr_floatPtr));
            fixed (float* __refParamPtr0 = &time)
            {
                var __arg0 = __refParamPtr0;
                var __ret = ___CalculateDelegate((__Instance + __PointerAdjustment), __arg0);
                return __ret;
            }
        }

        /// <summary>
        /// <para>Gets the start time.</para>
        /// <para></para>
        /// <para>The start time.</para>
        /// </summary>
        /// <remarks>
        /// <para>Sets the start time.</para>
        /// <para></para>
        /// <para>name=&quot;start&quot;&gt; The new start time.</para>
        /// </remarks>
        public float Start
        {
            get
            {
                var __ret = __Internal.GetStart((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetStart((__Instance + __PointerAdjustment), __arg0);
            }
        }

        /// <summary>
        /// <para>Gets the end time.</para>
        /// <para></para>
        /// <para>The ebd time.</para>
        /// </summary>
        /// <remarks>
        /// <para>Sets the end time.</para>
        /// <para></para>
        /// <para>name=&quot;end&quot;&gt; The new end time.</para>
        /// </remarks>
        public float End
        {
            get
            {
                var __ret = __Internal.GetEnd((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetEnd((__Instance + __PointerAdjustment), __arg0);
            }
        }

        /// <summary>
        /// <para>Gets the peak value.</para>
        /// <para></para>
        /// <para>The peak value.</para>
        /// </summary>
        /// <remarks>
        /// <para>Sets the peak value.</para>
        /// <para></para>
        /// <para>name=&quot;peak&quot;&gt; The new peak value.</para>
        /// </remarks>
        public float Peak
        {
            get
            {
                var __ret = __Internal.GetPeak((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetPeak((__Instance + __PointerAdjustment), __arg0);
            }
        }

        #region Virtual table interop

        // ~DriverFade()
        private static global::FlounderSharp.Delegates.Action_IntPtr_int _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr instance, int delete)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.DriverFade) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // float Calculate(const float &time) override
        private static global::FlounderSharp.Delegates.Func_float_IntPtr_floatPtr _CalculateDelegateInstance;

        private static float _CalculateDelegateHook(global::System.IntPtr instance, float* time)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.DriverFade) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Calculate(ref *time);
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[2];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CalculateDelegateInstance += _CalculateDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CalculateDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(3 * 8);
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(3 * 8);
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = _Thunks[1];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }
}
