// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    /// <summary>Represents a sphere in a 3d space.</summary>
    public unsafe partial class ColliderSphere : global::FlounderSharp.Collider, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 72)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vfptr_Component;

            [FieldOffset(8)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C m_name;

            [FieldOffset(40)]
            internal global::System.IntPtr m_gameObject;

            [FieldOffset(48)]
            internal byte m_enabled;

            [FieldOffset(56)]
            internal float m_radius;

            [FieldOffset(64)]
            internal global::System.IntPtr m_position;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ColliderSphere@fl@@QEAA@XZ")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ColliderSphere@fl@@QEAA@AEBMAEBVVector3@1@@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, float* radius, global::System.IntPtr position);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ColliderSphere@fl@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr source);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetRadius@ColliderSphere@fl@@QEBAMXZ")]
            internal static extern float GetRadius(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetRadius@ColliderSphere@fl@@QEAAXAEBM@Z")]
            internal static extern void SetRadius(global::System.IntPtr instance, float* radius);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetPosition@ColliderSphere@fl@@QEBAPEAVVector3@2@XZ")]
            internal static extern global::System.IntPtr GetPosition(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetPosition@ColliderSphere@fl@@QEBAXAEBVVector3@2@@Z")]
            internal static extern void SetPosition(global::System.IntPtr instance, global::System.IntPtr position);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetName@Component@fl@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
            internal static extern void SetName(global::System.IntPtr instance, global::System.IntPtr name);
        }

        internal static new global::FlounderSharp.ColliderSphere __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.ColliderSphere(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.ColliderSphere __CreateInstance(global::FlounderSharp.ColliderSphere.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.ColliderSphere(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.ColliderSphere.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.ColliderSphere.__Internal));
            global::FlounderSharp.ColliderSphere.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private ColliderSphere(global::FlounderSharp.ColliderSphere.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ColliderSphere(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        /// <summary>Creates a new unit sphere</summary>
        public ColliderSphere()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.ColliderSphere.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "FlounderSharp.ColliderSphere");
        }

        /// <summary>Creates a new sphere</summary>
        /// <param name="radius">The spheres radius.</param>
        /// <param name="position">The spheres initial position.</param>
        public ColliderSphere(ref float radius, global::FlounderSharp.Vector3 position)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.ColliderSphere.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            fixed (float* __refParamPtr0 = &radius)
            {
                var __arg0 = __refParamPtr0;
                if (ReferenceEquals(position, null))
                    throw new global::System.ArgumentNullException("position", "Cannot be null because it is a C++ reference (&).");
                var __arg1 = position.__Instance;
                __Internal.ctor((__Instance + __PointerAdjustment), __arg0, __arg1);
            }
            SetupVTables(GetType().FullName == "FlounderSharp.ColliderSphere");
        }

        /// <summary>Creates a new sphere from another sphere source.</summary>
        /// <param name="source">The source to create off of.</param>
        public ColliderSphere(global::FlounderSharp.ColliderSphere source)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.ColliderSphere.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(source, null))
                throw new global::System.ArgumentNullException("source", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = source.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
            SetupVTables(GetType().FullName == "FlounderSharp.ColliderSphere");
        }

        ~ColliderSphere()
        {
            Dispose(false);
        }

        public override global::FlounderSharp.Collider Update(global::FlounderSharp.Transform transform, global::FlounderSharp.Collider destination)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 8);
            var ___UpdateDelegate = (global::FlounderSharp.Delegates.Func_IntPtr_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Func_IntPtr_IntPtr_IntPtr_IntPtr));
            if (ReferenceEquals(transform, null))
                throw new global::System.ArgumentNullException("transform", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = transform.__Instance;
            var __arg1 = ReferenceEquals(destination, null) ? global::System.IntPtr.Zero : destination.__Instance;
            var __ret = ___UpdateDelegate((__Instance + __PointerAdjustment), __arg0, __arg1);
            global::FlounderSharp.Collider __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::FlounderSharp.Collider.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::FlounderSharp.Collider) global::FlounderSharp.Collider.NativeToManagedMap[__ret];
            else global::FlounderSharp.Collider.NativeToManagedMap[__ret] = __result0 = (global::FlounderSharp.Collider) global::FlounderSharp.Collider.__CreateInstance(__ret);
            return __result0;
        }

        public override void Load(global::FlounderSharp.LoadedValue value)
        {
            base.Load(value);
        }

        public override void Write(global::FlounderSharp.LoadedValue value)
        {
            base.Write(value);
        }

        public override global::FlounderSharp.Vector3 ResolveCollision(global::FlounderSharp.Collider other, global::FlounderSharp.Vector3 positionDelta, global::FlounderSharp.Vector3 destination)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 8);
            var ___ResolveCollisionDelegate = (global::FlounderSharp.Delegates.Func_IntPtr_IntPtr_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Func_IntPtr_IntPtr_IntPtr_IntPtr_IntPtr));
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            if (ReferenceEquals(positionDelta, null))
                throw new global::System.ArgumentNullException("positionDelta", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = positionDelta.__Instance;
            var __arg2 = ReferenceEquals(destination, null) ? global::System.IntPtr.Zero : destination.__Instance;
            var __ret = ___ResolveCollisionDelegate((__Instance + __PointerAdjustment), __arg0, __arg1, __arg2);
            global::FlounderSharp.Vector3 __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::FlounderSharp.Vector3.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::FlounderSharp.Vector3) global::FlounderSharp.Vector3.NativeToManagedMap[__ret];
            else __result0 = global::FlounderSharp.Vector3.__CreateInstance(__ret);
            return __result0;
        }

        public override global::FlounderSharp.Intersect Intersects(global::FlounderSharp.Collider other)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 9 * 8);
            var ___IntersectsDelegate = (global::FlounderSharp.Delegates.Action_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Action_IntPtr_IntPtr_IntPtr));
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::FlounderSharp.Intersect.__Internal();
            ___IntersectsDelegate((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::FlounderSharp.Intersect.__CreateInstance(__ret);
        }

        public override global::FlounderSharp.Intersect Intersects(global::FlounderSharp.Ray ray)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 8);
            var ___Intersects_1Delegate = (global::FlounderSharp.Delegates.Action_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Action_IntPtr_IntPtr_IntPtr));
            if (ReferenceEquals(ray, null))
                throw new global::System.ArgumentNullException("ray", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = ray.__Instance;
            var __ret = new global::FlounderSharp.Intersect.__Internal();
            ___Intersects_1Delegate((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::FlounderSharp.Intersect.__CreateInstance(__ret);
        }

        public override bool InFrustum(global::FlounderSharp.Frustum frustum)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 10 * 8);
            var ___InFrustumDelegate = (global::FlounderSharp.Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Func_bool_IntPtr_IntPtr));
            if (ReferenceEquals(frustum, null))
                throw new global::System.ArgumentNullException("frustum", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = frustum.__Instance;
            var __ret = ___InFrustumDelegate((__Instance + __PointerAdjustment), __arg0);
            return __ret;
        }

        public override bool Contains(global::FlounderSharp.Collider other)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 12 * 8);
            var ___ContainsDelegate = (global::FlounderSharp.Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Func_bool_IntPtr_IntPtr));
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = ___ContainsDelegate((__Instance + __PointerAdjustment), __arg0);
            return __ret;
        }

        public override bool Contains(global::FlounderSharp.Vector3 point)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 11 * 8);
            var ___Contains_1Delegate = (global::FlounderSharp.Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Func_bool_IntPtr_IntPtr));
            if (ReferenceEquals(point, null))
                throw new global::System.ArgumentNullException("point", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = point.__Instance;
            var __ret = ___Contains_1Delegate((__Instance + __PointerAdjustment), __arg0);
            return __ret;
        }

        public float MRadius
        {
            get
            {
                return ((global::FlounderSharp.ColliderSphere.__Internal*) __Instance)->m_radius;
            }

            set
            {
                ((global::FlounderSharp.ColliderSphere.__Internal*)__Instance)->m_radius = value;
            }
        }

        public global::FlounderSharp.Vector3 MPosition
        {
            get
            {
                global::FlounderSharp.Vector3 __result0;
                if (((global::FlounderSharp.ColliderSphere.__Internal*) __Instance)->m_position == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Vector3.NativeToManagedMap.ContainsKey(((global::FlounderSharp.ColliderSphere.__Internal*) __Instance)->m_position))
                    __result0 = (global::FlounderSharp.Vector3) global::FlounderSharp.Vector3.NativeToManagedMap[((global::FlounderSharp.ColliderSphere.__Internal*) __Instance)->m_position];
                else __result0 = global::FlounderSharp.Vector3.__CreateInstance(((global::FlounderSharp.ColliderSphere.__Internal*) __Instance)->m_position);
                return __result0;
            }

            set
            {
                ((global::FlounderSharp.ColliderSphere.__Internal*)__Instance)->m_position = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public float Radius
        {
            get
            {
                var __ret = __Internal.GetRadius((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetRadius((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public global::FlounderSharp.Vector3 Position
        {
            get
            {
                var __ret = __Internal.GetPosition((__Instance + __PointerAdjustment));
                global::FlounderSharp.Vector3 __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Vector3.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Vector3) global::FlounderSharp.Vector3.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.Vector3.__CreateInstance(__ret);
                return __result0;
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = value.__Instance;
                __Internal.SetPosition((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public override string Name
        {
            get
            {
                return base.Name;
            }

            set
            {
                var __allocator0 = new global::Std.Allocator<char>();
                var __basicString0 = global::Std.BasicStringExtensions.BasicString(value, __allocator0);
                var __arg0 = __basicString0.__Instance;
                __Internal.SetName((__Instance + __PointerAdjustment), __arg0);
                __basicString0.Dispose(false);
                __allocator0.Dispose();
            }
        }

        #region Virtual table interop

        // ~ColliderSphere()
        private static global::FlounderSharp.Delegates.Action_IntPtr_int _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr instance, int delete)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.ColliderSphere) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // void Update() override
        private static global::FlounderSharp.Delegates.Action_IntPtr _UpdateDelegateInstance;

        private static void _UpdateDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.ColliderSphere) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Update();
        }

        // void Load(LoadedValue *value) override
        private static global::FlounderSharp.Delegates.Action_IntPtr_IntPtr _LoadDelegateInstance;

        private static void _LoadDelegateHook(global::System.IntPtr instance, global::System.IntPtr value)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.ColliderSphere) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::FlounderSharp.LoadedValue __result0;
            if (value == IntPtr.Zero) __result0 = null;
            else if (global::FlounderSharp.LoadedValue.NativeToManagedMap.ContainsKey(value))
                __result0 = (global::FlounderSharp.LoadedValue) global::FlounderSharp.LoadedValue.NativeToManagedMap[value];
            else __result0 = global::FlounderSharp.LoadedValue.__CreateInstance(value);
            __target.Load(__result0);
        }

        // void Write(LoadedValue *value) override
        private static global::FlounderSharp.Delegates.Action_IntPtr_IntPtr _WriteDelegateInstance;

        private static void _WriteDelegateHook(global::System.IntPtr instance, global::System.IntPtr value)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.ColliderSphere) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::FlounderSharp.LoadedValue __result0;
            if (value == IntPtr.Zero) __result0 = null;
            else if (global::FlounderSharp.LoadedValue.NativeToManagedMap.ContainsKey(value))
                __result0 = (global::FlounderSharp.LoadedValue) global::FlounderSharp.LoadedValue.NativeToManagedMap[value];
            else __result0 = global::FlounderSharp.LoadedValue.__CreateInstance(value);
            __target.Write(__result0);
        }

        // std::string GetName() const override { return "ColliderSphere"; }
        private static global::FlounderSharp.Delegates.Action_IntPtr_IntPtr _GetNameDelegateInstance;

        private static void _GetNameDelegateHook(global::System.IntPtr instance, global::System.IntPtr @return)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.ColliderSphere) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Name;
            var __allocator0 = new global::Std.Allocator<char>();
            var __basicString0 = global::Std.BasicStringExtensions.BasicString(__ret, __allocator0);
            *(global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C*) @return = *(global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C*) __basicString0.__Instance;
        }

        // Collider *Update(const Transform &transform, Collider *destination) override
        private static global::FlounderSharp.Delegates.Func_IntPtr_IntPtr_IntPtr_IntPtr _UpdateDelegateInstance;

        private static global::System.IntPtr _UpdateDelegateHook(global::System.IntPtr instance, global::System.IntPtr transform, global::System.IntPtr destination)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.ColliderSphere) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::FlounderSharp.Transform __result0;
            if (transform == IntPtr.Zero) __result0 = null;
            else if (global::FlounderSharp.Transform.NativeToManagedMap.ContainsKey(transform))
                __result0 = (global::FlounderSharp.Transform) global::FlounderSharp.Transform.NativeToManagedMap[transform];
            else __result0 = global::FlounderSharp.Transform.__CreateInstance(transform);
            global::FlounderSharp.Collider __result1;
            if (destination == IntPtr.Zero) __result1 = null;
            else if (global::FlounderSharp.Collider.NativeToManagedMap.ContainsKey(destination))
                __result1 = (global::FlounderSharp.Collider) global::FlounderSharp.Collider.NativeToManagedMap[destination];
            else __result1 = (global::FlounderSharp.Collider) global::FlounderSharp.Collider.__CreateInstance(destination, skipVTables: true);
            var __ret = __target.Update(__result0, __result1);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // Vector3 *ResolveCollision(const Collider &other, const Vector3 &positionDelta, Vector3 *destination) override
        private static global::FlounderSharp.Delegates.Func_IntPtr_IntPtr_IntPtr_IntPtr_IntPtr _ResolveCollisionDelegateInstance;

        private static global::System.IntPtr _ResolveCollisionDelegateHook(global::System.IntPtr instance, global::System.IntPtr other, global::System.IntPtr positionDelta, global::System.IntPtr destination)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.ColliderSphere) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::FlounderSharp.Collider __result0;
            if (other == IntPtr.Zero) __result0 = null;
            else if (global::FlounderSharp.Collider.NativeToManagedMap.ContainsKey(other))
                __result0 = (global::FlounderSharp.Collider) global::FlounderSharp.Collider.NativeToManagedMap[other];
            else __result0 = (global::FlounderSharp.Collider) global::FlounderSharp.Collider.__CreateInstance(other, skipVTables: true);
            global::FlounderSharp.Vector3 __result1;
            if (positionDelta == IntPtr.Zero) __result1 = null;
            else if (global::FlounderSharp.Vector3.NativeToManagedMap.ContainsKey(positionDelta))
                __result1 = (global::FlounderSharp.Vector3) global::FlounderSharp.Vector3.NativeToManagedMap[positionDelta];
            else __result1 = global::FlounderSharp.Vector3.__CreateInstance(positionDelta);
            global::FlounderSharp.Vector3 __result2;
            if (destination == IntPtr.Zero) __result2 = null;
            else if (global::FlounderSharp.Vector3.NativeToManagedMap.ContainsKey(destination))
                __result2 = (global::FlounderSharp.Vector3) global::FlounderSharp.Vector3.NativeToManagedMap[destination];
            else __result2 = global::FlounderSharp.Vector3.__CreateInstance(destination);
            var __ret = __target.ResolveCollision(__result0, __result1, __result2);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // Intersect Intersects(const Ray &ray) override
        private static global::FlounderSharp.Delegates.Action_IntPtr_IntPtr_IntPtr _Intersects_1DelegateInstance;

        private static void _Intersects_1DelegateHook(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr ray)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.ColliderSphere) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::FlounderSharp.Ray __result1;
            if (ray == IntPtr.Zero) __result1 = null;
            else if (global::FlounderSharp.Ray.NativeToManagedMap.ContainsKey(ray))
                __result1 = (global::FlounderSharp.Ray) global::FlounderSharp.Ray.NativeToManagedMap[ray];
            else __result1 = global::FlounderSharp.Ray.__CreateInstance(ray);
            var __ret = __target.Intersects(__result1);
            *(global::FlounderSharp.Intersect.__Internal*) @return = ReferenceEquals(__ret, null) ? new global::FlounderSharp.Intersect.__Internal() : *(global::FlounderSharp.Intersect.__Internal*) __ret.__Instance;
        }

        // Intersect Intersects(const Collider &other) override
        private static global::FlounderSharp.Delegates.Action_IntPtr_IntPtr_IntPtr _IntersectsDelegateInstance;

        private static void _IntersectsDelegateHook(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.ColliderSphere) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::FlounderSharp.Collider __result1;
            if (other == IntPtr.Zero) __result1 = null;
            else if (global::FlounderSharp.Collider.NativeToManagedMap.ContainsKey(other))
                __result1 = (global::FlounderSharp.Collider) global::FlounderSharp.Collider.NativeToManagedMap[other];
            else __result1 = (global::FlounderSharp.Collider) global::FlounderSharp.Collider.__CreateInstance(other, skipVTables: true);
            var __ret = __target.Intersects(__result1);
            *(global::FlounderSharp.Intersect.__Internal*) @return = ReferenceEquals(__ret, null) ? new global::FlounderSharp.Intersect.__Internal() : *(global::FlounderSharp.Intersect.__Internal*) __ret.__Instance;
        }

        // bool InFrustum(const Frustum &frustum) override
        private static global::FlounderSharp.Delegates.Func_bool_IntPtr_IntPtr _InFrustumDelegateInstance;

        private static bool _InFrustumDelegateHook(global::System.IntPtr instance, global::System.IntPtr frustum)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.ColliderSphere) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::FlounderSharp.Frustum __result0;
            if (frustum == IntPtr.Zero) __result0 = null;
            else if (global::FlounderSharp.Frustum.NativeToManagedMap.ContainsKey(frustum))
                __result0 = (global::FlounderSharp.Frustum) global::FlounderSharp.Frustum.NativeToManagedMap[frustum];
            else __result0 = global::FlounderSharp.Frustum.__CreateInstance(frustum);
            var __ret = __target.InFrustum(__result0);
            return __ret;
        }

        // bool Contains(const Vector3 &point) override
        private static global::FlounderSharp.Delegates.Func_bool_IntPtr_IntPtr _Contains_1DelegateInstance;

        private static bool _Contains_1DelegateHook(global::System.IntPtr instance, global::System.IntPtr point)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.ColliderSphere) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::FlounderSharp.Vector3 __result0;
            if (point == IntPtr.Zero) __result0 = null;
            else if (global::FlounderSharp.Vector3.NativeToManagedMap.ContainsKey(point))
                __result0 = (global::FlounderSharp.Vector3) global::FlounderSharp.Vector3.NativeToManagedMap[point];
            else __result0 = global::FlounderSharp.Vector3.__CreateInstance(point);
            var __ret = __target.Contains(__result0);
            return __ret;
        }

        // bool Contains(const Collider &other) override
        private static global::FlounderSharp.Delegates.Func_bool_IntPtr_IntPtr _ContainsDelegateInstance;

        private static bool _ContainsDelegateHook(global::System.IntPtr instance, global::System.IntPtr other)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.ColliderSphere) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::FlounderSharp.Collider __result0;
            if (other == IntPtr.Zero) __result0 = null;
            else if (global::FlounderSharp.Collider.NativeToManagedMap.ContainsKey(other))
                __result0 = (global::FlounderSharp.Collider) global::FlounderSharp.Collider.NativeToManagedMap[other];
            else __result0 = (global::FlounderSharp.Collider) global::FlounderSharp.Collider.__CreateInstance(other, skipVTables: true);
            var __ret = __target.Contains(__result0);
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[12];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _UpdateDelegateInstance += _UpdateDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_UpdateDelegateInstance).ToPointer();
                _LoadDelegateInstance += _LoadDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_LoadDelegateInstance).ToPointer();
                _WriteDelegateInstance += _WriteDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_WriteDelegateInstance).ToPointer();
                _GetNameDelegateInstance += _GetNameDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetNameDelegateInstance).ToPointer();
                _UpdateDelegateInstance += _UpdateDelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_UpdateDelegateInstance).ToPointer();
                _ResolveCollisionDelegateInstance += _ResolveCollisionDelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_ResolveCollisionDelegateInstance).ToPointer();
                _Intersects_1DelegateInstance += _Intersects_1DelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_Intersects_1DelegateInstance).ToPointer();
                _IntersectsDelegateInstance += _IntersectsDelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_IntersectsDelegateInstance).ToPointer();
                _InFrustumDelegateInstance += _InFrustumDelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_InFrustumDelegateInstance).ToPointer();
                _Contains_1DelegateInstance += _Contains_1DelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_Contains_1DelegateInstance).ToPointer();
                _ContainsDelegateInstance += _ContainsDelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_ContainsDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(13 * 8);
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 32) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 32);
                    *(void**) (vfptr0 + 40) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 40);
                    *(void**) (vfptr0 + 48) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 48);
                    *(void**) (vfptr0 + 56) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 56);
                    *(void**) (vfptr0 + 64) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 64);
                    *(void**) (vfptr0 + 72) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 72);
                    *(void**) (vfptr0 + 80) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 80);
                    *(void**) (vfptr0 + 88) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 88);
                    *(void**) (vfptr0 + 96) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 96);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(13 * 8);
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = _Thunks[1];
                    *(void**) (vfptr0 + 24) = _Thunks[2];
                    *(void**) (vfptr0 + 32) = _Thunks[3];
                    *(void**) (vfptr0 + 40) = _Thunks[4];
                    *(void**) (vfptr0 + 48) = _Thunks[5];
                    *(void**) (vfptr0 + 56) = _Thunks[6];
                    *(void**) (vfptr0 + 64) = _Thunks[7];
                    *(void**) (vfptr0 + 72) = _Thunks[8];
                    *(void**) (vfptr0 + 80) = _Thunks[9];
                    *(void**) (vfptr0 + 88) = _Thunks[10];
                    *(void**) (vfptr0 + 96) = _Thunks[11];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
