// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    public unsafe partial class JsonSection : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 96)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr m_parent;

            [FieldOffset(8)]
            internal global::Std.Vector.__Internalc__N_std_S_vector_____N_fl_S_JsonSection___N_std_S_allocator__S0_ m_children;

            [FieldOffset(32)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C m_name;

            [FieldOffset(64)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C m_content;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0JsonSection@fl@@QEAA@PEAV01@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@1@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, global::System.IntPtr parent, global::System.IntPtr name, global::System.IntPtr content);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0JsonSection@fl@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1JsonSection@fl@@QEAA@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?AppendData@JsonSection@fl@@SAXPEAVLoadedValue@2@PEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBHAEB_N@Z")]
            internal static extern void AppendData(global::System.IntPtr loadedValue, global::System.IntPtr data, int* indentation, bool* end);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Convert@JsonSection@fl@@SAPEAVLoadedValue@2@PEAV12@PEAV32@AEB_N@Z")]
            internal static extern global::System.IntPtr Convert(global::System.IntPtr source, global::System.IntPtr parent, bool* isTopSection);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.JsonSection> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.JsonSection>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.JsonSection __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.JsonSection(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.JsonSection __CreateInstance(global::FlounderSharp.JsonSection.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.JsonSection(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.JsonSection.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.JsonSection.__Internal));
            global::FlounderSharp.JsonSection.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private JsonSection(global::FlounderSharp.JsonSection.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected JsonSection(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public JsonSection(global::FlounderSharp.JsonSection parent, string name, string content)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.JsonSection.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg0 = ReferenceEquals(parent, null) ? global::System.IntPtr.Zero : parent.__Instance;
            var __allocator1 = new global::Std.Allocator<char>();
            var __basicString1 = global::Std.BasicStringExtensions.BasicString(name, __allocator1);
            var __arg1 = __basicString1.__Instance;
            var __allocator2 = new global::Std.Allocator<char>();
            var __basicString2 = global::Std.BasicStringExtensions.BasicString(content, __allocator2);
            var __arg2 = __basicString2.__Instance;
            __Internal.ctor((__Instance + __PointerAdjustment), __arg0, __arg1, __arg2);
            __basicString1.Dispose(false);
            __allocator1.Dispose();
            __basicString2.Dispose(false);
            __allocator2.Dispose();
        }

        public JsonSection(global::FlounderSharp.JsonSection _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.JsonSection.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
        }

        ~JsonSection()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.JsonSection __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public static void AppendData(global::FlounderSharp.LoadedValue loadedValue, string data, ref int indentation, ref bool end)
        {
            var __arg0 = ReferenceEquals(loadedValue, null) ? global::System.IntPtr.Zero : loadedValue.__Instance;
            var __arg1 = global::Std.BasicStringExtensions.BasicString(data, new global::Std.Allocator<char>()).__Instance;
            fixed (int* __refParamPtr2 = &indentation)
            {
                var __arg2 = __refParamPtr2;
                fixed (bool* __refParamPtr3 = &end)
                {
                    var __arg3 = __refParamPtr3;
                    __Internal.AppendData(__arg0, __arg1, __arg2, __arg3);
                }
            }
        }

        public static global::FlounderSharp.LoadedValue Convert(global::FlounderSharp.JsonSection source, global::FlounderSharp.LoadedValue parent, ref bool isTopSection)
        {
            var __arg0 = ReferenceEquals(source, null) ? global::System.IntPtr.Zero : source.__Instance;
            var __arg1 = ReferenceEquals(parent, null) ? global::System.IntPtr.Zero : parent.__Instance;
            fixed (bool* __refParamPtr2 = &isTopSection)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.Convert(__arg0, __arg1, __arg2);
                global::FlounderSharp.LoadedValue __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.LoadedValue.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.LoadedValue) global::FlounderSharp.LoadedValue.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.LoadedValue.__CreateInstance(__ret);
                return __result0;
            }
        }

        public global::FlounderSharp.JsonSection MParent
        {
            get
            {
                global::FlounderSharp.JsonSection __result0;
                if (((global::FlounderSharp.JsonSection.__Internal*) __Instance)->m_parent == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.JsonSection.NativeToManagedMap.ContainsKey(((global::FlounderSharp.JsonSection.__Internal*) __Instance)->m_parent))
                    __result0 = (global::FlounderSharp.JsonSection) global::FlounderSharp.JsonSection.NativeToManagedMap[((global::FlounderSharp.JsonSection.__Internal*) __Instance)->m_parent];
                else __result0 = global::FlounderSharp.JsonSection.__CreateInstance(((global::FlounderSharp.JsonSection.__Internal*) __Instance)->m_parent);
                return __result0;
            }

            set
            {
                ((global::FlounderSharp.JsonSection.__Internal*)__Instance)->m_parent = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public string MName
        {
            get
            {
                var __basicStringRet = global::Std.BasicString<char, global::Std.CharTraits<char>, global::Std.Allocator<char>>.__CreateInstance(new global::System.IntPtr(&((global::FlounderSharp.JsonSection.__Internal*) __Instance)->m_name));
                var __stringRet = global::Std.BasicStringExtensions.CStr(__basicStringRet);
                __basicStringRet.Dispose(false);
                return __stringRet;
            }

            set
            {
                var __allocator0 = new global::Std.Allocator<char>();
                var __basicString0 = global::Std.BasicStringExtensions.BasicString(value, __allocator0);
                ((global::FlounderSharp.JsonSection.__Internal*)__Instance)->m_name = *(global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C*) __basicString0.__Instance;
            }
        }

        public string MContent
        {
            get
            {
                var __basicStringRet = global::Std.BasicString<char, global::Std.CharTraits<char>, global::Std.Allocator<char>>.__CreateInstance(new global::System.IntPtr(&((global::FlounderSharp.JsonSection.__Internal*) __Instance)->m_content));
                var __stringRet = global::Std.BasicStringExtensions.CStr(__basicStringRet);
                __basicStringRet.Dispose(false);
                return __stringRet;
            }

            set
            {
                var __allocator0 = new global::Std.Allocator<char>();
                var __basicString0 = global::Std.BasicStringExtensions.BasicString(value, __allocator0);
                ((global::FlounderSharp.JsonSection.__Internal*)__Instance)->m_content = *(global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C*) __basicString0.__Instance;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
