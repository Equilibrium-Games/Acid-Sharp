// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    public enum AttachmentType
    {
        TypeImage = 0,
        TypeDepth = 1,
        TypeSwapchain = 2
    }

    public unsafe partial class Attachment : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 36)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint m_binding;

            [FieldOffset(4)]
            internal global::FlounderSharp.AttachmentType m_type;

            [FieldOffset(8)]
            internal global::VkFormat m_format;

            [FieldOffset(12)]
            internal global::FlounderSharp.Colour.__Internal m_clearColour;

            [FieldOffset(28)]
            internal global::VkImageLayout m_layout;

            [FieldOffset(32)]
            internal uint m_usage;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Attachment@fl@@QEAA@AEBIAEBW4AttachmentType@1@AEBW4VkFormat@@AEBVColour@1@AEBW4VkImageLayout@@0@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, uint* binding, global::FlounderSharp.AttachmentType* type, global::VkFormat* format, global::System.IntPtr clearColour, global::VkImageLayout* layout, uint* usage);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Attachment@fl@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1Attachment@fl@@QEAA@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.Attachment> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.Attachment>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.Attachment __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Attachment(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.Attachment __CreateInstance(global::FlounderSharp.Attachment.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Attachment(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.Attachment.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Attachment.__Internal));
            global::FlounderSharp.Attachment.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private Attachment(global::FlounderSharp.Attachment.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Attachment(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Attachment(ref uint binding, global::FlounderSharp.AttachmentType* type, global::VkFormat* format, global::FlounderSharp.Colour clearColour, global::VkImageLayout* layout, ref uint usage)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Attachment.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            fixed (uint* __refParamPtr0 = &binding)
            {
                var __arg0 = __refParamPtr0;
                if (ReferenceEquals(clearColour, null))
                    throw new global::System.ArgumentNullException("clearColour", "Cannot be null because it is a C++ reference (&).");
                var __arg3 = clearColour.__Instance;
                fixed (uint* __refParamPtr5 = &usage)
                {
                    var __arg5 = __refParamPtr5;
                    __Internal.ctor((__Instance + __PointerAdjustment), __arg0, type, format, __arg3, layout, __arg5);
                }
            }
        }

        public Attachment(global::FlounderSharp.Attachment _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Attachment.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
        }

        ~Attachment()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.Attachment __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MBinding
        {
            get
            {
                return ((global::FlounderSharp.Attachment.__Internal*) __Instance)->m_binding;
            }

            set
            {
                ((global::FlounderSharp.Attachment.__Internal*)__Instance)->m_binding = value;
            }
        }

        public global::FlounderSharp.AttachmentType MType
        {
            get
            {
                return ((global::FlounderSharp.Attachment.__Internal*) __Instance)->m_type;
            }

            set
            {
                ((global::FlounderSharp.Attachment.__Internal*)__Instance)->m_type = value;
            }
        }

        public global::VkFormat MFormat
        {
            get
            {
                return ((global::FlounderSharp.Attachment.__Internal*) __Instance)->m_format;
            }

            set
            {
                ((global::FlounderSharp.Attachment.__Internal*)__Instance)->m_format = value;
            }
        }

        public global::FlounderSharp.Colour MClearColour
        {
            get
            {
                return global::FlounderSharp.Colour.__CreateInstance(new global::System.IntPtr(&((global::FlounderSharp.Attachment.__Internal*) __Instance)->m_clearColour));
            }

            set
            {
                ((global::FlounderSharp.Attachment.__Internal*)__Instance)->m_clearColour = ReferenceEquals(value, null) ? new global::FlounderSharp.Colour.__Internal() : *(global::FlounderSharp.Colour.__Internal*) value.__Instance;
            }
        }

        public global::VkImageLayout MLayout
        {
            get
            {
                return ((global::FlounderSharp.Attachment.__Internal*) __Instance)->m_layout;
            }

            set
            {
                ((global::FlounderSharp.Attachment.__Internal*)__Instance)->m_layout = value;
            }
        }

        public uint MUsage
        {
            get
            {
                return ((global::FlounderSharp.Attachment.__Internal*) __Instance)->m_usage;
            }

            set
            {
                ((global::FlounderSharp.Attachment.__Internal*)__Instance)->m_usage = value;
            }
        }
    }

    public unsafe partial class SubpassType : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 32)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint m_binding;

            [FieldOffset(8)]
            internal global::Std.Vector.__Internalc__N_std_S_vector__i___N_std_S_allocator__i m_attachments;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SubpassType@fl@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1SubpassType@fl@@QEAA@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.SubpassType> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.SubpassType>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.SubpassType __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.SubpassType(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.SubpassType __CreateInstance(global::FlounderSharp.SubpassType.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.SubpassType(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.SubpassType.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.SubpassType.__Internal));
            global::FlounderSharp.SubpassType.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private SubpassType(global::FlounderSharp.SubpassType.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SubpassType(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public SubpassType(global::FlounderSharp.SubpassType _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.SubpassType.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
        }

        ~SubpassType()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.SubpassType __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MBinding
        {
            get
            {
                return ((global::FlounderSharp.SubpassType.__Internal*) __Instance)->m_binding;
            }

            set
            {
                ((global::FlounderSharp.SubpassType.__Internal*)__Instance)->m_binding = value;
            }
        }
    }

    public unsafe partial class RenderpassCreate : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint m_width;

            [FieldOffset(4)]
            internal uint m_height;

            [FieldOffset(8)]
            internal global::Std.Vector.__Internalc__N_std_S_vector____N_fl_S_Attachment___N_std_S_allocator__S0_ m_images;

            [FieldOffset(32)]
            internal global::Std.Vector.__Internalc__N_std_S_vector____N_fl_S_SubpassType___N_std_S_allocator__S0_ m_subpasses;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0RenderpassCreate@fl@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1RenderpassCreate@fl@@QEAA@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.RenderpassCreate> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.RenderpassCreate>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.RenderpassCreate __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.RenderpassCreate(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.RenderpassCreate __CreateInstance(global::FlounderSharp.RenderpassCreate.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.RenderpassCreate(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.RenderpassCreate.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.RenderpassCreate.__Internal));
            global::FlounderSharp.RenderpassCreate.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private RenderpassCreate(global::FlounderSharp.RenderpassCreate.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RenderpassCreate(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public RenderpassCreate(global::FlounderSharp.RenderpassCreate _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.RenderpassCreate.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
        }

        ~RenderpassCreate()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.RenderpassCreate __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MWidth
        {
            get
            {
                return ((global::FlounderSharp.RenderpassCreate.__Internal*) __Instance)->m_width;
            }

            set
            {
                ((global::FlounderSharp.RenderpassCreate.__Internal*)__Instance)->m_width = value;
            }
        }

        public uint MHeight
        {
            get
            {
                return ((global::FlounderSharp.RenderpassCreate.__Internal*) __Instance)->m_height;
            }

            set
            {
                ((global::FlounderSharp.RenderpassCreate.__Internal*)__Instance)->m_height = value;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
