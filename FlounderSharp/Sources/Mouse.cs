// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    public enum MouseButton
    {
        MOUSE_BUTTON_1 = 0,
        MOUSE_BUTTON_2 = 1,
        MOUSE_BUTTON_3 = 2,
        MOUSE_BUTTON_4 = 3,
        MOUSE_BUTTON_5 = 4,
        MOUSE_BUTTON_6 = 5,
        MOUSE_BUTTON_7 = 6,
        MOUSE_BUTTON_8 = 7,
        MOUSE_BUTTON_LAST = 7,
        MOUSE_BUTTON_LEFT = 0,
        MOUSE_BUTTON_RIGHT = 1,
        MOUSE_BUTTON_MIDDLE = 2
    }

    /// <summary>A module used for the creation, updating and destruction of the mouse.</summary>
    public unsafe partial class Mouse : global::FlounderSharp.IModule, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vfptr_IModule;

            [FieldOffset(8)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C m_customMouse;

            [FieldOffset(40)]
            internal global::System.IntPtr m_mouseButtons;

            [FieldOffset(48)]
            internal float m_lastMousePositionX;

            [FieldOffset(52)]
            internal float m_lastMousePositionY;

            [FieldOffset(56)]
            internal float m_mousePositionX;

            [FieldOffset(60)]
            internal float m_mousePositionY;

            [FieldOffset(64)]
            internal float m_mouseDeltaX;

            [FieldOffset(68)]
            internal float m_mouseDeltaY;

            [FieldOffset(72)]
            internal float m_mouseDeltaWheel;

            [FieldOffset(76)]
            internal byte m_displaySelected;

            [FieldOffset(77)]
            internal byte m_cursorDisabled;

            [FieldOffset(78)]
            internal byte m_lastCursorDisabled;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Mouse@fl@@QEAA@XZ")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Mouse@fl@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Get@Mouse@fl@@SAPEAV12@XZ")]
            internal static extern global::System.IntPtr Get();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetCursorHidden@Mouse@fl@@QEAAXAEB_N@Z")]
            internal static extern void SetCursorHidden(global::System.IntPtr instance, bool* disabled);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetButton@Mouse@fl@@QEBA_NAEBW4MouseButton@2@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetButton(global::System.IntPtr instance, global::FlounderSharp.MouseButton* button);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetPosition@Mouse@fl@@QEAAXAEBM0@Z")]
            internal static extern void SetPosition(global::System.IntPtr instance, float* cursorX, float* cursorY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetCustomMouse@Mouse@fl@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ")]
            internal static extern void GetCustomMouse(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetCustomMouse@Mouse@fl@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
            internal static extern void SetCustomMouse(global::System.IntPtr instance, global::System.IntPtr customMouse);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetPositionX@Mouse@fl@@QEBAMXZ")]
            internal static extern float GetPositionX(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetPositionY@Mouse@fl@@QEBAMXZ")]
            internal static extern float GetPositionY(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetDeltaX@Mouse@fl@@QEBAMXZ")]
            internal static extern float GetDeltaX(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetDeltaY@Mouse@fl@@QEBAMXZ")]
            internal static extern float GetDeltaY(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetDeltaWheel@Mouse@fl@@QEBAMXZ")]
            internal static extern float GetDeltaWheel(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?IsDisplaySelected@Mouse@fl@@QEBA_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsDisplaySelected(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?IsCursorDisabled@Mouse@fl@@QEBA_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsCursorDisabled(global::System.IntPtr instance);
        }

        internal static new global::FlounderSharp.Mouse __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Mouse(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.Mouse __CreateInstance(global::FlounderSharp.Mouse.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Mouse(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.Mouse.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Mouse.__Internal));
            global::FlounderSharp.Mouse.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private Mouse(global::FlounderSharp.Mouse.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Mouse(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        /// <summary>Creates a new mouse module.</summary>
        public Mouse()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Mouse.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "FlounderSharp.Mouse");
        }

        public Mouse(global::FlounderSharp.Mouse _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Mouse.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
            SetupVTables(GetType().FullName == "FlounderSharp.Mouse");
        }

        ~Mouse()
        {
            Dispose(false);
        }

        public override void Update()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 8);
            var ___UpdateDelegate = (global::FlounderSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Action_IntPtr));
            ___UpdateDelegate((__Instance + __PointerAdjustment));
        }

        /// <summary>Sets if the operating systems cursor is hidden whilst in the display.</summary>
        /// <param name="disabled">If the system cursor should be disabled or hidden when not shown.</param>
        public void SetCursorHidden(ref bool disabled)
        {
            fixed (bool* __refParamPtr0 = &disabled)
            {
                var __arg0 = __refParamPtr0;
                __Internal.SetCursorHidden((__Instance + __PointerAdjustment), __arg0);
            }
        }

        /// <summary>Gets whether or not a particular mouse button is currently pressed. GLFW Actions: GLFW_PRESS, GLFW_RELEASE, GLFW_REPEAT</summary>
        /// <param name="button">The mouse button to test.</param>
        public bool GetButton(global::FlounderSharp.MouseButton* button)
        {
            var __ret = __Internal.GetButton((__Instance + __PointerAdjustment), button);
            return __ret;
        }

        /// <summary>Sets the mouse position by calling glfwSetCursorPos.</summary>
        /// <param name="cursorX">The x position in screenspace.</param>
        /// <param name="cursorY">The y position in screenspace.</param>
        public void SetPosition(ref float cursorX, ref float cursorY)
        {
            fixed (float* __refParamPtr0 = &cursorX)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &cursorY)
                {
                    var __arg1 = __refParamPtr1;
                    __Internal.SetPosition((__Instance + __PointerAdjustment), __arg0, __arg1);
                }
            }
        }

        /// <summary>Gets this engine instance.</summary>
        public static global::FlounderSharp.Mouse Get()
        {
            var __ret = __Internal.Get();
            global::FlounderSharp.Mouse __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::FlounderSharp.Mouse.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::FlounderSharp.Mouse) global::FlounderSharp.Mouse.NativeToManagedMap[__ret];
            else global::FlounderSharp.Mouse.NativeToManagedMap[__ret] = __result0 = (global::FlounderSharp.Mouse) global::FlounderSharp.Mouse.__CreateInstance(__ret);
            return __result0;
        }

        /// <summary>Gets the mouses custom mouse file.</summary>
        /// <param name="title">The new custom mouse file.</param>
        /// <remarks>Sets the custom mouse file.</remarks>
        public string CustomMouse
        {
            get
            {
                var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.GetCustomMouse((__Instance + __PointerAdjustment), new IntPtr(&__ret));
                var __basicStringRet = global::Std.BasicString<char, global::Std.CharTraits<char>, global::Std.Allocator<char>>.__CreateInstance(__ret);
                var __stringRet = global::Std.BasicStringExtensions.CStr(__basicStringRet);
                __basicStringRet.Dispose(false);
                return __stringRet;
            }

            set
            {
                var __allocator0 = new global::Std.Allocator<char>();
                var __basicString0 = global::Std.BasicStringExtensions.BasicString(value, __allocator0);
                var __arg0 = __basicString0.__Instance;
                __Internal.SetCustomMouse((__Instance + __PointerAdjustment), __arg0);
                __basicString0.Dispose(false);
                __allocator0.Dispose();
            }
        }

        /// <summary>Gets the mouses screen x position.</summary>
        public float PositionX
        {
            get
            {
                var __ret = __Internal.GetPositionX((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        /// <summary>Gets the mouses screen y position.</summary>
        public float PositionY
        {
            get
            {
                var __ret = __Internal.GetPositionY((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        /// <summary>Gets the mouses delta x.</summary>
        public float DeltaX
        {
            get
            {
                var __ret = __Internal.GetDeltaX((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        /// <summary>Gets the mouses delta y.</summary>
        public float DeltaY
        {
            get
            {
                var __ret = __Internal.GetDeltaY((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        /// <summary>Gets the mouses wheel delta.</summary>
        public float DeltaWheel
        {
            get
            {
                var __ret = __Internal.GetDeltaWheel((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        /// <summary>Gets if the display is selected.</summary>
        public bool IsDisplaySelected
        {
            get
            {
                var __ret = __Internal.IsDisplaySelected((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        /// <summary>If the cursor is hidden, the mouse is the display locked if true.</summary>
        public bool IsCursorDisabled
        {
            get
            {
                var __ret = __Internal.IsCursorDisabled((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        #region Virtual table interop

        // ~Mouse()
        private static global::FlounderSharp.Delegates.Action_IntPtr_int _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr instance, int delete)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.Mouse) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // void Update() override
        private static global::FlounderSharp.Delegates.Action_IntPtr _UpdateDelegateInstance;

        private static void _UpdateDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.Mouse) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Update();
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[2];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _UpdateDelegateInstance += _UpdateDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_UpdateDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(3 * 8);
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(3 * 8);
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = _Thunks[1];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class Mouse
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CallbackScroll@fl@@YAXPEAVGLFWwindow@@NN@Z")]
            internal static extern void CallbackScroll(global::System.IntPtr window, double xoffset, double yoffset);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CallbackMouseButton@fl@@YAXPEAVGLFWwindow@@HHH@Z")]
            internal static extern void CallbackMouseButton(global::System.IntPtr window, int button, int action, int mods);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CallbackCursorPos@fl@@YAXPEAVGLFWwindow@@NN@Z")]
            internal static extern void CallbackCursorPos(global::System.IntPtr window, double xpos, double ypos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CallbackCursorEnter@fl@@YAXPEAVGLFWwindow@@H@Z")]
            internal static extern void CallbackCursorEnter(global::System.IntPtr window, int entered);
        }

        public static void CallbackScroll(global::GLFWwindow window, double xoffset, double yoffset)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.CallbackScroll(__arg0, xoffset, yoffset);
        }

        public static void CallbackMouseButton(global::GLFWwindow window, int button, int action, int mods)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.CallbackMouseButton(__arg0, button, action, mods);
        }

        public static void CallbackCursorPos(global::GLFWwindow window, double xpos, double ypos)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.CallbackCursorPos(__arg0, xpos, ypos);
        }

        public static void CallbackCursorEnter(global::GLFWwindow window, int entered)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.CallbackCursorEnter(__arg0, entered);
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
