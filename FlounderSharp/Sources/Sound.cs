// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    /// <summary>Class that represents a loaded sound.</summary>
    public unsafe partial class Sound : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint m_source;

            [FieldOffset(4)]
            internal byte m_playing;

            [FieldOffset(8)]
            internal float m_gain;

            [FieldOffset(12)]
            internal float m_pitch;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Sound@fl@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBM1@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, global::System.IntPtr filename, float* gain, float* pitch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1Sound@fl@@QEAA@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Play@Sound@fl@@QEAAXXZ")]
            internal static extern void Play(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Loop@Sound@fl@@QEAAXXZ")]
            internal static extern void Loop(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Pause@Sound@fl@@QEAAXXZ")]
            internal static extern void Pause(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Resume@Sound@fl@@QEAAXXZ")]
            internal static extern void Resume(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Stop@Sound@fl@@QEAAXXZ")]
            internal static extern void Stop(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetPosition@Sound@fl@@QEAAXAEBVVector3@2@@Z")]
            internal static extern void SetPosition(global::System.IntPtr instance, global::System.IntPtr position);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetDirection@Sound@fl@@QEAAXAEBVVector3@2@@Z")]
            internal static extern void SetDirection(global::System.IntPtr instance, global::System.IntPtr direction);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetVelocity@Sound@fl@@QEAAXAEBVVector3@2@@Z")]
            internal static extern void SetVelocity(global::System.IntPtr instance, global::System.IntPtr velocity);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetGain@Sound@fl@@QEBAMXZ")]
            internal static extern float GetGain(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetGain@Sound@fl@@QEAAXAEBM@Z")]
            internal static extern void SetGain(global::System.IntPtr instance, float* gain);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetPitch@Sound@fl@@QEBAMXZ")]
            internal static extern float GetPitch(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetPitch@Sound@fl@@QEAAXAEBM@Z")]
            internal static extern void SetPitch(global::System.IntPtr instance, float* pitch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?IsPlaying@Sound@fl@@QEBA_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsPlaying(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.Sound> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.Sound>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.Sound __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Sound(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.Sound __CreateInstance(global::FlounderSharp.Sound.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Sound(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.Sound.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Sound.__Internal));
            *(global::FlounderSharp.Sound.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Sound(global::FlounderSharp.Sound.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Sound(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Sound(string filename, ref float gain, ref float pitch)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Sound.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __allocator0 = new global::Std.Allocator<char>();
            var __basicString0 = global::Std.BasicStringExtensions.BasicString(filename, __allocator0);
            var __arg0 = __basicString0.__Instance;
            fixed (float* __refParamPtr1 = &gain)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &pitch)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.ctor((__Instance + __PointerAdjustment), __arg0, __arg1, __arg2);
                    __basicString0.Dispose(false);
                    __allocator0.Dispose();
                }
            }
        }

        ~Sound()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.Sound __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void Play()
        {
            __Internal.Play((__Instance + __PointerAdjustment));
        }

        public void Loop()
        {
            __Internal.Loop((__Instance + __PointerAdjustment));
        }

        public void Pause()
        {
            __Internal.Pause((__Instance + __PointerAdjustment));
        }

        public void Resume()
        {
            __Internal.Resume((__Instance + __PointerAdjustment));
        }

        public void Stop()
        {
            __Internal.Stop((__Instance + __PointerAdjustment));
        }

        public void SetPosition(global::FlounderSharp.Vector3 position)
        {
            if (ReferenceEquals(position, null))
                throw new global::System.ArgumentNullException("position", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = position.__Instance;
            __Internal.SetPosition((__Instance + __PointerAdjustment), __arg0);
        }

        public void SetDirection(global::FlounderSharp.Vector3 direction)
        {
            if (ReferenceEquals(direction, null))
                throw new global::System.ArgumentNullException("direction", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = direction.__Instance;
            __Internal.SetDirection((__Instance + __PointerAdjustment), __arg0);
        }

        public void SetVelocity(global::FlounderSharp.Vector3 velocity)
        {
            if (ReferenceEquals(velocity, null))
                throw new global::System.ArgumentNullException("velocity", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = velocity.__Instance;
            __Internal.SetVelocity((__Instance + __PointerAdjustment), __arg0);
        }

        public float Gain
        {
            get
            {
                var __ret = __Internal.GetGain((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetGain((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public float Pitch
        {
            get
            {
                var __ret = __Internal.GetPitch((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetPitch((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public bool IsPlaying
        {
            get
            {
                var __ret = __Internal.IsPlaying((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
