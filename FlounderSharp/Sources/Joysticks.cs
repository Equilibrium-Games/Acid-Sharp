// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    public enum JoystickPort
    {
        JOYSTICK_1 = 0,
        JOYSTICK_2 = 1,
        JOYSTICK_3 = 2,
        JOYSTICK_4 = 3,
        JOYSTICK_5 = 4,
        JOYSTICK_6 = 5,
        JOYSTICK_7 = 6,
        JOYSTICK_8 = 7,
        JOYSTICK_9 = 8,
        JOYSTICK_10 = 9,
        JOYSTICK_11 = 10,
        JOYSTICK_12 = 11,
        JOYSTICK_13 = 12,
        JOYSTICK_14 = 13,
        JOYSTICK_15 = 14,
        JOYSTICK_16 = 15,
        JOYSTICK_LAST = 15
    }

    /// <summary>A definition for a connected joystick.</summary>
    public unsafe partial class Joystick : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal byte m_connected;

            [FieldOffset(4)]
            internal int m_id;

            [FieldOffset(8)]
            internal global::System.IntPtr m_name;

            [FieldOffset(16)]
            internal global::System.IntPtr m_axes;

            [FieldOffset(24)]
            internal global::System.IntPtr m_buttons;

            [FieldOffset(32)]
            internal int m_axeCount;

            [FieldOffset(36)]
            internal int m_buttonCount;
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.Joystick> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.Joystick>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.Joystick __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Joystick(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.Joystick __CreateInstance(global::FlounderSharp.Joystick.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Joystick(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.Joystick.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Joystick.__Internal));
            *(global::FlounderSharp.Joystick.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Joystick(global::FlounderSharp.Joystick.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Joystick(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        ~Joystick()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.Joystick __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public bool MConnected
        {
            get
            {
                return ((global::FlounderSharp.Joystick.__Internal*) __Instance)->m_connected != 0;
            }

            set
            {
                ((global::FlounderSharp.Joystick.__Internal*)__Instance)->m_connected = (byte) (value ? 1 : 0);
            }
        }

        public int MId
        {
            get
            {
                return ((global::FlounderSharp.Joystick.__Internal*) __Instance)->m_id;
            }

            set
            {
                ((global::FlounderSharp.Joystick.__Internal*)__Instance)->m_id = value;
            }
        }

        public string MName
        {
            get
            {
                return Marshal.PtrToStringAnsi(((global::FlounderSharp.Joystick.__Internal*) __Instance)->m_name);
            }

            set
            {
                ((global::FlounderSharp.Joystick.__Internal*)__Instance)->m_name = Marshal.StringToHGlobalAnsi(value);
            }
        }

        public float* MAxes
        {
            get
            {
                return (float*) ((global::FlounderSharp.Joystick.__Internal*) __Instance)->m_axes;
            }

            set
            {
                ((global::FlounderSharp.Joystick.__Internal*)__Instance)->m_axes = (global::System.IntPtr) value;
            }
        }

        public byte* MButtons
        {
            get
            {
                return (byte*) ((global::FlounderSharp.Joystick.__Internal*) __Instance)->m_buttons;
            }

            set
            {
                ((global::FlounderSharp.Joystick.__Internal*)__Instance)->m_buttons = (global::System.IntPtr) value;
            }
        }

        public int MAxeCount
        {
            get
            {
                return ((global::FlounderSharp.Joystick.__Internal*) __Instance)->m_axeCount;
            }

            set
            {
                ((global::FlounderSharp.Joystick.__Internal*)__Instance)->m_axeCount = value;
            }
        }

        public int MButtonCount
        {
            get
            {
                return ((global::FlounderSharp.Joystick.__Internal*) __Instance)->m_buttonCount;
            }

            set
            {
                ((global::FlounderSharp.Joystick.__Internal*)__Instance)->m_buttonCount = value;
            }
        }
    }

    /// <summary>A module used for the creation, updating and destruction of the joysticks.</summary>
    public unsafe partial class Joysticks : global::FlounderSharp.IModule, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vfptr_IModule;

            [FieldOffset(8)]
            internal global::System.IntPtr m_connected;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Joysticks@fl@@QEAA@XZ")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Joysticks@fl@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Get@Joysticks@fl@@SAPEAV12@XZ")]
            internal static extern global::System.IntPtr Get();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?IsConnected@Joysticks@fl@@QEBA_NAEBW4JoystickPort@2@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsConnected(global::System.IntPtr instance, global::FlounderSharp.JoystickPort* port);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetName@Joysticks@fl@@QEBAPEBDAEBW4JoystickPort@2@@Z")]
            internal static extern global::System.IntPtr GetName(global::System.IntPtr instance, global::FlounderSharp.JoystickPort* port);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetAxis@Joysticks@fl@@QEBAMAEBW4JoystickPort@2@AEBH@Z")]
            internal static extern float GetAxis(global::System.IntPtr instance, global::FlounderSharp.JoystickPort* port, int* axis);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetButton@Joysticks@fl@@QEBA_NAEBW4JoystickPort@2@AEBH@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetButton(global::System.IntPtr instance, global::FlounderSharp.JoystickPort* port, int* button);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetCountAxes@Joysticks@fl@@QEBAHAEBW4JoystickPort@2@@Z")]
            internal static extern int GetCountAxes(global::System.IntPtr instance, global::FlounderSharp.JoystickPort* port);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetCountButtons@Joysticks@fl@@QEBAHAEBW4JoystickPort@2@@Z")]
            internal static extern int GetCountButtons(global::System.IntPtr instance, global::FlounderSharp.JoystickPort* port);
        }

        internal static new global::FlounderSharp.Joysticks __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Joysticks(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.Joysticks __CreateInstance(global::FlounderSharp.Joysticks.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Joysticks(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.Joysticks.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Joysticks.__Internal));
            global::FlounderSharp.Joysticks.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private Joysticks(global::FlounderSharp.Joysticks.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Joysticks(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        /// <summary>Creates a new joysticks module.</summary>
        public Joysticks()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Joysticks.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "FlounderSharp.Joysticks");
        }

        public Joysticks(global::FlounderSharp.Joysticks _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Joysticks.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
            SetupVTables(GetType().FullName == "FlounderSharp.Joysticks");
        }

        ~Joysticks()
        {
            Dispose(false);
        }

        public override void Update()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 8);
            var ___UpdateDelegate = (global::FlounderSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Action_IntPtr));
            ___UpdateDelegate((__Instance + __PointerAdjustment));
        }

        /// <summary>Determines if the GLFW joystick is connected</summary>
        /// <param name="port">The joystick to check connection with.</param>
        public bool IsConnected(global::FlounderSharp.JoystickPort* port)
        {
            var __ret = __Internal.IsConnected((__Instance + __PointerAdjustment), port);
            return __ret;
        }

        /// <summary>Gets the name of the joystick.</summary>
        /// <param name="port">The joystick to get the name of.</param>
        public string GetName(global::FlounderSharp.JoystickPort* port)
        {
            var __ret = __Internal.GetName((__Instance + __PointerAdjustment), port);
            return Marshal.PtrToStringAnsi(__ret);
        }

        /// <summary>Gets the value of a joysticks axis.</summary>
        /// <param name="port">The joystick to get the axis from.</param>
        /// <param name="axis">The axis of interest.</param>
        public float GetAxis(global::FlounderSharp.JoystickPort* port, ref int axis)
        {
            fixed (int* __refParamPtr1 = &axis)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.GetAxis((__Instance + __PointerAdjustment), port, __arg1);
                return __ret;
            }
        }

        /// <summary>Gets the whether a button on a joystick is pressed.</summary>
        /// <param name="port">The joystick to get the button from.</param>
        /// <param name="button">The button of interest.</param>
        public bool GetButton(global::FlounderSharp.JoystickPort* port, ref int button)
        {
            fixed (int* __refParamPtr1 = &button)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.GetButton((__Instance + __PointerAdjustment), port, __arg1);
                return __ret;
            }
        }

        /// <summary>Gets the number of axes the joystick offers.</summary>
        /// <param name="port">The joystick to the the axis count from.</param>
        public int GetCountAxes(global::FlounderSharp.JoystickPort* port)
        {
            var __ret = __Internal.GetCountAxes((__Instance + __PointerAdjustment), port);
            return __ret;
        }

        /// <summary>Gets the number of buttons the joystick offers.</summary>
        /// <param name="port">The joystick to the the button count from.</param>
        public int GetCountButtons(global::FlounderSharp.JoystickPort* port)
        {
            var __ret = __Internal.GetCountButtons((__Instance + __PointerAdjustment), port);
            return __ret;
        }

        /// <summary>Gets this engine instance.</summary>
        public static global::FlounderSharp.Joysticks Get()
        {
            var __ret = __Internal.Get();
            global::FlounderSharp.Joysticks __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::FlounderSharp.Joysticks.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::FlounderSharp.Joysticks) global::FlounderSharp.Joysticks.NativeToManagedMap[__ret];
            else global::FlounderSharp.Joysticks.NativeToManagedMap[__ret] = __result0 = (global::FlounderSharp.Joysticks) global::FlounderSharp.Joysticks.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // ~Joysticks()
        private static global::FlounderSharp.Delegates.Action_IntPtr_int _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr instance, int delete)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.Joysticks) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // void Update() override
        private static global::FlounderSharp.Delegates.Action_IntPtr _UpdateDelegateInstance;

        private static void _UpdateDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.Joysticks) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Update();
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[2];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _UpdateDelegateInstance += _UpdateDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_UpdateDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(3 * 8);
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(3 * 8);
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = _Thunks[1];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
