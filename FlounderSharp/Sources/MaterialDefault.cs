// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    /// <summary>Class that represents the default material shader.</summary>
    public unsafe partial class MaterialDefault : global::FlounderSharp.IMaterial, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 112)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vfptr_Component;

            [FieldOffset(8)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C m_name;

            [FieldOffset(40)]
            internal global::System.IntPtr m_gameObject;

            [FieldOffset(48)]
            internal byte m_enabled;

            [FieldOffset(56)]
            internal global::System.IntPtr m_baseColor;

            [FieldOffset(64)]
            internal global::System.IntPtr m_diffuseTexture;

            [FieldOffset(72)]
            internal float m_metallic;

            [FieldOffset(76)]
            internal float m_roughness;

            [FieldOffset(80)]
            internal global::System.IntPtr m_materialTexture;

            [FieldOffset(88)]
            internal global::System.IntPtr m_normalTexture;

            [FieldOffset(96)]
            internal byte m_castsShadows;

            [FieldOffset(97)]
            internal byte m_ignoreLighting;

            [FieldOffset(98)]
            internal byte m_ignoreFog;

            [FieldOffset(104)]
            internal global::System.IntPtr m_material;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0MaterialDefault@fl@@QEAA@AEBVColour@1@PEAVTexture@1@AEBM211AEB_N33@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, global::System.IntPtr baseColor, global::System.IntPtr diffuseTexture, float* metallic, float* roughness, global::System.IntPtr materialTexture, global::System.IntPtr normalTexture, bool* castsShadows, bool* ignoreLighting, bool* ignoreFog);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0MaterialDefault@fl@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?TrySetDiffuseTexture@MaterialDefault@fl@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
            internal static extern void TrySetDiffuseTexture(global::System.IntPtr instance, global::System.IntPtr filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?TrySetMaterialTexture@MaterialDefault@fl@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
            internal static extern void TrySetMaterialTexture(global::System.IntPtr instance, global::System.IntPtr filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?TrySetNormalTexture@MaterialDefault@fl@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
            internal static extern void TrySetNormalTexture(global::System.IntPtr instance, global::System.IntPtr filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetIgnoreLighting@MaterialDefault@fl@@QEAAXAEB_N@Z")]
            internal static extern void SetIgnoreLighting(global::System.IntPtr instance, bool* ignoreLighting);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetIgnoreFog@MaterialDefault@fl@@QEAAXAEB_N@Z")]
            internal static extern void SetIgnoreFog(global::System.IntPtr instance, bool* ignoreFog);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetBaseColor@MaterialDefault@fl@@QEBAPEAVColour@2@XZ")]
            internal static extern global::System.IntPtr GetBaseColor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetBaseColor@MaterialDefault@fl@@QEAAXAEBVColour@2@@Z")]
            internal static extern void SetBaseColor(global::System.IntPtr instance, global::System.IntPtr baseColor);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetDiffuseTexture@MaterialDefault@fl@@QEBAPEAVTexture@2@XZ")]
            internal static extern global::System.IntPtr GetDiffuseTexture(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetDiffuseTexture@MaterialDefault@fl@@QEAAXPEAVTexture@2@@Z")]
            internal static extern void SetDiffuseTexture(global::System.IntPtr instance, global::System.IntPtr diffuseTexture);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetMetallic@MaterialDefault@fl@@QEBAMXZ")]
            internal static extern float GetMetallic(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetMetallic@MaterialDefault@fl@@QEAAXAEBM@Z")]
            internal static extern void SetMetallic(global::System.IntPtr instance, float* metallic);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetRoughness@MaterialDefault@fl@@QEBAMXZ")]
            internal static extern float GetRoughness(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetRoughness@MaterialDefault@fl@@QEAAXAEBM@Z")]
            internal static extern void SetRoughness(global::System.IntPtr instance, float* roughness);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetMaterialTexture@MaterialDefault@fl@@QEBAPEAVTexture@2@XZ")]
            internal static extern global::System.IntPtr GetMaterialTexture(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetMaterialTexture@MaterialDefault@fl@@QEAAXPEAVTexture@2@@Z")]
            internal static extern void SetMaterialTexture(global::System.IntPtr instance, global::System.IntPtr materialTexture);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetNormalTexture@MaterialDefault@fl@@QEBAPEAVTexture@2@XZ")]
            internal static extern global::System.IntPtr GetNormalTexture(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetNormalTexture@MaterialDefault@fl@@QEAAXPEAVTexture@2@@Z")]
            internal static extern void SetNormalTexture(global::System.IntPtr instance, global::System.IntPtr normalTexture);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CastsShadows@MaterialDefault@fl@@QEBA_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CastsShadows(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetCastsShadows@MaterialDefault@fl@@QEAAXAEB_N@Z")]
            internal static extern void SetCastsShadows(global::System.IntPtr instance, bool* castsShadows);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetName@Component@fl@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
            internal static extern void SetName(global::System.IntPtr instance, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?IsIgnoringLighting@MaterialDefault@fl@@QEBA_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsIgnoringLighting(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?IsIgnoringFog@MaterialDefault@fl@@QEBA_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsIgnoringFog(global::System.IntPtr instance);
        }

        internal static new global::FlounderSharp.MaterialDefault __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.MaterialDefault(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.MaterialDefault __CreateInstance(global::FlounderSharp.MaterialDefault.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.MaterialDefault(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.MaterialDefault.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.MaterialDefault.__Internal));
            global::FlounderSharp.MaterialDefault.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private MaterialDefault(global::FlounderSharp.MaterialDefault.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MaterialDefault(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public MaterialDefault(global::FlounderSharp.Colour baseColor, global::FlounderSharp.Texture diffuseTexture, ref float metallic, ref float roughness, global::FlounderSharp.Texture materialTexture, global::FlounderSharp.Texture normalTexture, ref bool castsShadows, ref bool ignoreLighting, ref bool ignoreFog)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.MaterialDefault.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(baseColor, null))
                throw new global::System.ArgumentNullException("baseColor", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = baseColor.__Instance;
            var __arg1 = ReferenceEquals(diffuseTexture, null) ? global::System.IntPtr.Zero : diffuseTexture.__Instance;
            fixed (float* __refParamPtr2 = &metallic)
            {
                var __arg2 = __refParamPtr2;
                fixed (float* __refParamPtr3 = &roughness)
                {
                    var __arg3 = __refParamPtr3;
                    var __arg4 = ReferenceEquals(materialTexture, null) ? global::System.IntPtr.Zero : materialTexture.__Instance;
                    var __arg5 = ReferenceEquals(normalTexture, null) ? global::System.IntPtr.Zero : normalTexture.__Instance;
                    fixed (bool* __refParamPtr6 = &castsShadows)
                    {
                        var __arg6 = __refParamPtr6;
                        fixed (bool* __refParamPtr7 = &ignoreLighting)
                        {
                            var __arg7 = __refParamPtr7;
                            fixed (bool* __refParamPtr8 = &ignoreFog)
                            {
                                var __arg8 = __refParamPtr8;
                                __Internal.ctor((__Instance + __PointerAdjustment), __arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8);
                            }
                        }
                    }
                }
            }
            SetupVTables(GetType().FullName == "FlounderSharp.MaterialDefault");
        }

        public MaterialDefault(global::FlounderSharp.MaterialDefault _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.MaterialDefault.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
            SetupVTables(GetType().FullName == "FlounderSharp.MaterialDefault");
        }

        ~MaterialDefault()
        {
            Dispose(false);
        }

        public override void Update()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 8);
            var ___UpdateDelegate = (global::FlounderSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Action_IntPtr));
            ___UpdateDelegate((__Instance + __PointerAdjustment));
        }

        public override void Load(global::FlounderSharp.LoadedValue value)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 3 * 8);
            var ___LoadDelegate = (global::FlounderSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Action_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            ___LoadDelegate((__Instance + __PointerAdjustment), __arg0);
        }

        public override void Write(global::FlounderSharp.LoadedValue destination)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 4 * 8);
            var ___WriteDelegate = (global::FlounderSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Action_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(destination, null) ? global::System.IntPtr.Zero : destination.__Instance;
            ___WriteDelegate((__Instance + __PointerAdjustment), __arg0);
        }

        public override void PushUniforms(global::FlounderSharp.UniformHandler uniformObject)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 8);
            var ___PushUniformsDelegate = (global::FlounderSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Action_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(uniformObject, null) ? global::System.IntPtr.Zero : uniformObject.__Instance;
            ___PushUniformsDelegate((__Instance + __PointerAdjustment), __arg0);
        }

        public override void PushDescriptors(global::FlounderSharp.DescriptorsHandler descriptorSet)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 8);
            var ___PushDescriptorsDelegate = (global::FlounderSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Action_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(descriptorSet, null) ? global::System.IntPtr.Zero : descriptorSet.__Instance;
            ___PushDescriptorsDelegate((__Instance + __PointerAdjustment), __arg0);
        }

        public void TrySetDiffuseTexture(string filename)
        {
            var __allocator0 = new global::Std.Allocator<char>();
            var __basicString0 = global::Std.BasicStringExtensions.BasicString(filename, __allocator0);
            var __arg0 = __basicString0.__Instance;
            __Internal.TrySetDiffuseTexture((__Instance + __PointerAdjustment), __arg0);
            __basicString0.Dispose(false);
            __allocator0.Dispose();
        }

        public void TrySetMaterialTexture(string filename)
        {
            var __allocator0 = new global::Std.Allocator<char>();
            var __basicString0 = global::Std.BasicStringExtensions.BasicString(filename, __allocator0);
            var __arg0 = __basicString0.__Instance;
            __Internal.TrySetMaterialTexture((__Instance + __PointerAdjustment), __arg0);
            __basicString0.Dispose(false);
            __allocator0.Dispose();
        }

        public void TrySetNormalTexture(string filename)
        {
            var __allocator0 = new global::Std.Allocator<char>();
            var __basicString0 = global::Std.BasicStringExtensions.BasicString(filename, __allocator0);
            var __arg0 = __basicString0.__Instance;
            __Internal.TrySetNormalTexture((__Instance + __PointerAdjustment), __arg0);
            __basicString0.Dispose(false);
            __allocator0.Dispose();
        }

        public void SetIgnoreLighting(ref bool ignoreLighting)
        {
            fixed (bool* __refParamPtr0 = &ignoreLighting)
            {
                var __arg0 = __refParamPtr0;
                __Internal.SetIgnoreLighting((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public void SetIgnoreFog(ref bool ignoreFog)
        {
            fixed (bool* __refParamPtr0 = &ignoreFog)
            {
                var __arg0 = __refParamPtr0;
                __Internal.SetIgnoreFog((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public global::FlounderSharp.Colour BaseColor
        {
            get
            {
                var __ret = __Internal.GetBaseColor((__Instance + __PointerAdjustment));
                global::FlounderSharp.Colour __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Colour.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Colour) global::FlounderSharp.Colour.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.Colour.__CreateInstance(__ret);
                return __result0;
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = value.__Instance;
                __Internal.SetBaseColor((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public global::FlounderSharp.Texture DiffuseTexture
        {
            get
            {
                var __ret = __Internal.GetDiffuseTexture((__Instance + __PointerAdjustment));
                global::FlounderSharp.Texture __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Texture.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Texture) global::FlounderSharp.Texture.NativeToManagedMap[__ret];
                else global::FlounderSharp.Texture.NativeToManagedMap[__ret] = __result0 = (global::FlounderSharp.Texture) global::FlounderSharp.Texture.__CreateInstance(__ret);
                return __result0;
            }

            set
            {
                var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                __Internal.SetDiffuseTexture((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public float Metallic
        {
            get
            {
                var __ret = __Internal.GetMetallic((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetMetallic((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public float Roughness
        {
            get
            {
                var __ret = __Internal.GetRoughness((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetRoughness((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public global::FlounderSharp.Texture MaterialTexture
        {
            get
            {
                var __ret = __Internal.GetMaterialTexture((__Instance + __PointerAdjustment));
                global::FlounderSharp.Texture __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Texture.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Texture) global::FlounderSharp.Texture.NativeToManagedMap[__ret];
                else global::FlounderSharp.Texture.NativeToManagedMap[__ret] = __result0 = (global::FlounderSharp.Texture) global::FlounderSharp.Texture.__CreateInstance(__ret);
                return __result0;
            }

            set
            {
                var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                __Internal.SetMaterialTexture((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public global::FlounderSharp.Texture NormalTexture
        {
            get
            {
                var __ret = __Internal.GetNormalTexture((__Instance + __PointerAdjustment));
                global::FlounderSharp.Texture __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Texture.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Texture) global::FlounderSharp.Texture.NativeToManagedMap[__ret];
                else global::FlounderSharp.Texture.NativeToManagedMap[__ret] = __result0 = (global::FlounderSharp.Texture) global::FlounderSharp.Texture.__CreateInstance(__ret);
                return __result0;
            }

            set
            {
                var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                __Internal.SetNormalTexture((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public bool CastsShadows
        {
            get
            {
                var __ret = __Internal.CastsShadows((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetCastsShadows((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public override string Name
        {
            get
            {
                return base.Name;
            }

            set
            {
                var __allocator0 = new global::Std.Allocator<char>();
                var __basicString0 = global::Std.BasicStringExtensions.BasicString(value, __allocator0);
                var __arg0 = __basicString0.__Instance;
                __Internal.SetName((__Instance + __PointerAdjustment), __arg0);
                __basicString0.Dispose(false);
                __allocator0.Dispose();
            }
        }

        public override global::FlounderSharp.PipelineMaterial Material
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 8);
                var ___GetMaterialDelegate = (global::FlounderSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Func_IntPtr_IntPtr));
                var __ret = ___GetMaterialDelegate((__Instance + __PointerAdjustment));
                global::FlounderSharp.PipelineMaterial __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.PipelineMaterial.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.PipelineMaterial) global::FlounderSharp.PipelineMaterial.NativeToManagedMap[__ret];
                else global::FlounderSharp.PipelineMaterial.NativeToManagedMap[__ret] = __result0 = (global::FlounderSharp.PipelineMaterial) global::FlounderSharp.PipelineMaterial.__CreateInstance(__ret);
                return __result0;
            }
        }

        public bool IsIgnoringLighting
        {
            get
            {
                var __ret = __Internal.IsIgnoringLighting((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public bool IsIgnoringFog
        {
            get
            {
                var __ret = __Internal.IsIgnoringFog((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        #region Virtual table interop

        // ~MaterialDefault()
        private static global::FlounderSharp.Delegates.Action_IntPtr_int _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr instance, int delete)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.MaterialDefault) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // void Update() override
        private static global::FlounderSharp.Delegates.Action_IntPtr _UpdateDelegateInstance;

        private static void _UpdateDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.MaterialDefault) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Update();
        }

        // void Load(LoadedValue *value) override
        private static global::FlounderSharp.Delegates.Action_IntPtr_IntPtr _LoadDelegateInstance;

        private static void _LoadDelegateHook(global::System.IntPtr instance, global::System.IntPtr value)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.MaterialDefault) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::FlounderSharp.LoadedValue __result0;
            if (value == IntPtr.Zero) __result0 = null;
            else if (global::FlounderSharp.LoadedValue.NativeToManagedMap.ContainsKey(value))
                __result0 = (global::FlounderSharp.LoadedValue) global::FlounderSharp.LoadedValue.NativeToManagedMap[value];
            else __result0 = global::FlounderSharp.LoadedValue.__CreateInstance(value);
            __target.Load(__result0);
        }

        // void Write(LoadedValue *destination) override
        private static global::FlounderSharp.Delegates.Action_IntPtr_IntPtr _WriteDelegateInstance;

        private static void _WriteDelegateHook(global::System.IntPtr instance, global::System.IntPtr destination)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.MaterialDefault) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::FlounderSharp.LoadedValue __result0;
            if (destination == IntPtr.Zero) __result0 = null;
            else if (global::FlounderSharp.LoadedValue.NativeToManagedMap.ContainsKey(destination))
                __result0 = (global::FlounderSharp.LoadedValue) global::FlounderSharp.LoadedValue.NativeToManagedMap[destination];
            else __result0 = global::FlounderSharp.LoadedValue.__CreateInstance(destination);
            __target.Write(__result0);
        }

        // std::string GetName() const override { return "MaterialDefault"; }
        private static global::FlounderSharp.Delegates.Action_IntPtr_IntPtr _GetNameDelegateInstance;

        private static void _GetNameDelegateHook(global::System.IntPtr instance, global::System.IntPtr @return)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.MaterialDefault) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Name;
            var __allocator0 = new global::Std.Allocator<char>();
            var __basicString0 = global::Std.BasicStringExtensions.BasicString(__ret, __allocator0);
            *(global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C*) @return = *(global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C*) __basicString0.__Instance;
        }

        // void PushUniforms(UniformHandler *uniformObject) override
        private static global::FlounderSharp.Delegates.Action_IntPtr_IntPtr _PushUniformsDelegateInstance;

        private static void _PushUniformsDelegateHook(global::System.IntPtr instance, global::System.IntPtr uniformObject)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.MaterialDefault) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::FlounderSharp.UniformHandler __result0;
            if (uniformObject == IntPtr.Zero) __result0 = null;
            else if (global::FlounderSharp.UniformHandler.NativeToManagedMap.ContainsKey(uniformObject))
                __result0 = (global::FlounderSharp.UniformHandler) global::FlounderSharp.UniformHandler.NativeToManagedMap[uniformObject];
            else __result0 = global::FlounderSharp.UniformHandler.__CreateInstance(uniformObject);
            __target.PushUniforms(__result0);
        }

        // void PushDescriptors(DescriptorsHandler *descriptorSet) override
        private static global::FlounderSharp.Delegates.Action_IntPtr_IntPtr _PushDescriptorsDelegateInstance;

        private static void _PushDescriptorsDelegateHook(global::System.IntPtr instance, global::System.IntPtr descriptorSet)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.MaterialDefault) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::FlounderSharp.DescriptorsHandler __result0;
            if (descriptorSet == IntPtr.Zero) __result0 = null;
            else if (global::FlounderSharp.DescriptorsHandler.NativeToManagedMap.ContainsKey(descriptorSet))
                __result0 = (global::FlounderSharp.DescriptorsHandler) global::FlounderSharp.DescriptorsHandler.NativeToManagedMap[descriptorSet];
            else __result0 = global::FlounderSharp.DescriptorsHandler.__CreateInstance(descriptorSet);
            __target.PushDescriptors(__result0);
        }

        // PipelineMaterial *GetMaterial() const override { return m_material; }
        private static global::FlounderSharp.Delegates.Func_IntPtr_IntPtr _GetMaterialDelegateInstance;

        private static global::System.IntPtr _GetMaterialDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.MaterialDefault) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Material;
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[8];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _UpdateDelegateInstance += _UpdateDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_UpdateDelegateInstance).ToPointer();
                _LoadDelegateInstance += _LoadDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_LoadDelegateInstance).ToPointer();
                _WriteDelegateInstance += _WriteDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_WriteDelegateInstance).ToPointer();
                _GetNameDelegateInstance += _GetNameDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetNameDelegateInstance).ToPointer();
                _PushUniformsDelegateInstance += _PushUniformsDelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_PushUniformsDelegateInstance).ToPointer();
                _PushDescriptorsDelegateInstance += _PushDescriptorsDelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_PushDescriptorsDelegateInstance).ToPointer();
                _GetMaterialDelegateInstance += _GetMaterialDelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_GetMaterialDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(9 * 8);
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 32) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 32);
                    *(void**) (vfptr0 + 40) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 40);
                    *(void**) (vfptr0 + 48) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 48);
                    *(void**) (vfptr0 + 56) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 56);
                    *(void**) (vfptr0 + 64) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 64);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(9 * 8);
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = _Thunks[1];
                    *(void**) (vfptr0 + 24) = _Thunks[2];
                    *(void**) (vfptr0 + 32) = _Thunks[3];
                    *(void**) (vfptr0 + 40) = _Thunks[4];
                    *(void**) (vfptr0 + 48) = _Thunks[5];
                    *(void**) (vfptr0 + 56) = _Thunks[6];
                    *(void**) (vfptr0 + 64) = _Thunks[7];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
