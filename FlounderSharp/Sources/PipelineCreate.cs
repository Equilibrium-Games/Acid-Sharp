// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    public enum PipelineModeFlags
    {
        PIPELINE_POLYGON = 0,
        PIPELINE_POLYGON_NO_DEPTH = 1,
        PIPELINE_MRT = 2,
        PIPELINE_MRT_NO_DEPTH = 3
    }

    public unsafe partial class VertexInput : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 48)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Std.Vector.__Internalc__N_std_S_vector____S_VkVertexInputBindingDescription___N_std_S_allocator__S0_ m_bindingDescriptions;

            [FieldOffset(24)]
            internal global::Std.Vector.__Internalc__N_std_S_vector____S_VkVertexInputAttributeDescription___N_std_S_allocator__S0_ m_attributeDescriptions;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0VertexInput@fl@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1VertexInput@fl@@QEAA@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.VertexInput> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.VertexInput>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.VertexInput __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.VertexInput(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.VertexInput __CreateInstance(global::FlounderSharp.VertexInput.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.VertexInput(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.VertexInput.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.VertexInput.__Internal));
            global::FlounderSharp.VertexInput.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private VertexInput(global::FlounderSharp.VertexInput.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VertexInput(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VertexInput(global::FlounderSharp.VertexInput _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.VertexInput.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
        }

        ~VertexInput()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.VertexInput __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    public unsafe partial class GraphicsStage : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint m_renderpass;

            [FieldOffset(4)]
            internal uint m_subpass;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0GraphicsStage@fl@@QEAA@AEBI0@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, uint* renderpass, uint* subpass);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetRenderpass@GraphicsStage@fl@@QEBAIXZ")]
            internal static extern uint GetRenderpass(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetSubpass@GraphicsStage@fl@@QEBAIXZ")]
            internal static extern uint GetSubpass(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.GraphicsStage> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.GraphicsStage>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.GraphicsStage __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.GraphicsStage(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.GraphicsStage __CreateInstance(global::FlounderSharp.GraphicsStage.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.GraphicsStage(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.GraphicsStage.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.GraphicsStage.__Internal));
            *(global::FlounderSharp.GraphicsStage.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GraphicsStage(global::FlounderSharp.GraphicsStage.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GraphicsStage(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public GraphicsStage(ref uint renderpass, ref uint subpass)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.GraphicsStage.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            fixed (uint* __refParamPtr0 = &renderpass)
            {
                var __arg0 = __refParamPtr0;
                fixed (uint* __refParamPtr1 = &subpass)
                {
                    var __arg1 = __refParamPtr1;
                    __Internal.ctor((__Instance + __PointerAdjustment), __arg0, __arg1);
                }
            }
        }

        ~GraphicsStage()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.GraphicsStage __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Renderpass
        {
            get
            {
                var __ret = __Internal.GetRenderpass((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public uint Subpass
        {
            get
            {
                var __ret = __Internal.GetSubpass((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }

    public unsafe partial class DescriptorType : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint m_binding;

            [FieldOffset(4)]
            internal uint m_stage;

            [FieldOffset(8)]
            internal global::VkDescriptorSetLayoutBinding.__Internal m_descriptorSetLayoutBinding;

            [FieldOffset(32)]
            internal global::VkDescriptorPoolSize.__Internal m_descriptorPoolSize;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0DescriptorType@fl@@QEAA@AEBI0AEBUVkDescriptorSetLayoutBinding@@AEBUVkDescriptorPoolSize@@@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, uint* binding, uint* stage, global::System.IntPtr descriptorSetLayoutBinding, global::System.IntPtr descriptorPoolSize);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetBinding@DescriptorType@fl@@QEBAIXZ")]
            internal static extern uint GetBinding(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetStage@DescriptorType@fl@@QEBAIXZ")]
            internal static extern uint GetStage(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetLayoutBinding@DescriptorType@fl@@QEBA?AUVkDescriptorSetLayoutBinding@@XZ")]
            internal static extern void GetLayoutBinding(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetPoolSize@DescriptorType@fl@@QEBA?AUVkDescriptorPoolSize@@XZ")]
            internal static extern void GetPoolSize(global::System.IntPtr instance, global::System.IntPtr @return);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.DescriptorType> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.DescriptorType>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.DescriptorType __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.DescriptorType(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.DescriptorType __CreateInstance(global::FlounderSharp.DescriptorType.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.DescriptorType(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.DescriptorType.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.DescriptorType.__Internal));
            *(global::FlounderSharp.DescriptorType.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DescriptorType(global::FlounderSharp.DescriptorType.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DescriptorType(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public DescriptorType(ref uint binding, ref uint stage, global::VkDescriptorSetLayoutBinding descriptorSetLayoutBinding, global::VkDescriptorPoolSize descriptorPoolSize)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.DescriptorType.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            fixed (uint* __refParamPtr0 = &binding)
            {
                var __arg0 = __refParamPtr0;
                fixed (uint* __refParamPtr1 = &stage)
                {
                    var __arg1 = __refParamPtr1;
                    if (ReferenceEquals(descriptorSetLayoutBinding, null))
                        throw new global::System.ArgumentNullException("descriptorSetLayoutBinding", "Cannot be null because it is a C++ reference (&).");
                    var __arg2 = descriptorSetLayoutBinding.__Instance;
                    if (ReferenceEquals(descriptorPoolSize, null))
                        throw new global::System.ArgumentNullException("descriptorPoolSize", "Cannot be null because it is a C++ reference (&).");
                    var __arg3 = descriptorPoolSize.__Instance;
                    __Internal.ctor((__Instance + __PointerAdjustment), __arg0, __arg1, __arg2, __arg3);
                }
            }
        }

        ~DescriptorType()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.DescriptorType __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Binding
        {
            get
            {
                var __ret = __Internal.GetBinding((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public uint Stage
        {
            get
            {
                var __ret = __Internal.GetStage((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public global::VkDescriptorSetLayoutBinding LayoutBinding
        {
            get
            {
                var __ret = new global::VkDescriptorSetLayoutBinding.__Internal();
                __Internal.GetLayoutBinding((__Instance + __PointerAdjustment), new IntPtr(&__ret));
                return global::VkDescriptorSetLayoutBinding.__CreateInstance(__ret);
            }
        }

        public global::VkDescriptorPoolSize PoolSize
        {
            get
            {
                var __ret = new global::VkDescriptorPoolSize.__Internal();
                __Internal.GetPoolSize((__Instance + __PointerAdjustment), new IntPtr(&__ret));
                return global::VkDescriptorPoolSize.__CreateInstance(__ret);
            }
        }
    }

    public unsafe partial class PipelineCreate : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 88)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Std.Vector.__Internalc__N_std_S_vector____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_std_S_allocator__S0_ m_shaderStages;

            [FieldOffset(24)]
            internal global::FlounderSharp.VertexInput.__Internal m_vertexInput;

            [FieldOffset(72)]
            internal global::FlounderSharp.PipelineModeFlags m_pipelineModeFlags;

            [FieldOffset(76)]
            internal global::VkPolygonMode m_polygonMode;

            [FieldOffset(80)]
            internal uint m_cullModeFlags;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0PipelineCreate@fl@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1PipelineCreate@fl@@QEAA@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetVertexInput@PipelineCreate@fl@@QEBA?AVVertexInput@2@XZ")]
            internal static extern void GetVertexInput(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetModeFlags@PipelineCreate@fl@@QEBA?AW4PipelineModeFlags@2@XZ")]
            internal static extern global::FlounderSharp.PipelineModeFlags GetModeFlags(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetPolygonMode@PipelineCreate@fl@@QEBA?AW4VkPolygonMode@@XZ")]
            internal static extern global::VkPolygonMode GetPolygonMode(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetCullModeFlags@PipelineCreate@fl@@QEBAIXZ")]
            internal static extern uint GetCullModeFlags(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.PipelineCreate> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.PipelineCreate>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.PipelineCreate __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.PipelineCreate(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.PipelineCreate __CreateInstance(global::FlounderSharp.PipelineCreate.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.PipelineCreate(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.PipelineCreate.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.PipelineCreate.__Internal));
            global::FlounderSharp.PipelineCreate.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private PipelineCreate(global::FlounderSharp.PipelineCreate.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PipelineCreate(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public PipelineCreate(global::FlounderSharp.PipelineCreate _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.PipelineCreate.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
        }

        ~PipelineCreate()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.PipelineCreate __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::FlounderSharp.VertexInput VertexInput
        {
            get
            {
                var __ret = new global::FlounderSharp.VertexInput.__Internal();
                __Internal.GetVertexInput((__Instance + __PointerAdjustment), new IntPtr(&__ret));
                return global::FlounderSharp.VertexInput.__CreateInstance(__ret);
            }
        }

        public global::FlounderSharp.PipelineModeFlags ModeFlags
        {
            get
            {
                var __ret = __Internal.GetModeFlags((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public global::VkPolygonMode PolygonMode
        {
            get
            {
                var __ret = __Internal.GetPolygonMode((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public uint CullModeFlags
        {
            get
            {
                var __ret = __Internal.GetCullModeFlags((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
