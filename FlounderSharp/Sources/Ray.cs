// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    /// <summary>Holds a 3 dimensional ray.</summary>
    public unsafe partial class Ray : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 96)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal byte m_useMouse;

            [FieldOffset(8)]
            internal global::System.IntPtr m_screenStart;

            [FieldOffset(16)]
            internal global::System.IntPtr m_viewMatrix;

            [FieldOffset(24)]
            internal global::System.IntPtr m_projectionMatrix;

            [FieldOffset(32)]
            internal global::System.IntPtr m_normalizedCoords;

            [FieldOffset(40)]
            internal global::System.IntPtr m_clipCoords;

            [FieldOffset(48)]
            internal global::System.IntPtr m_eyeCoords;

            [FieldOffset(56)]
            internal global::System.IntPtr m_invertedProjection;

            [FieldOffset(64)]
            internal global::System.IntPtr m_invertedView;

            [FieldOffset(72)]
            internal global::System.IntPtr m_rayWorld;

            [FieldOffset(80)]
            internal global::System.IntPtr m_origin;

            [FieldOffset(88)]
            internal global::System.IntPtr m_currentRay;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Ray@fl@@QEAA@AEB_NAEBVVector2@1@@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, bool* useMouse, global::System.IntPtr screenStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1Ray@fl@@QEAA@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Update@Ray@fl@@QEAAXAEBVVector3@2@AEBVVector2@2@AEBVMatrix4@2@2@Z")]
            internal static extern void Update(global::System.IntPtr instance, global::System.IntPtr currentPosition, global::System.IntPtr mousePosition, global::System.IntPtr viewMatrix, global::System.IntPtr projectionMatrix);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetPointOnRay@Ray@fl@@QEBA?AVVector3@2@AEBM@Z")]
            internal static extern void GetPointOnRay(global::System.IntPtr instance, global::System.IntPtr @return, float* distance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?ConvertToScreenSpace@Ray@fl@@QEBA?AVVector3@2@AEBV32@@Z")]
            internal static extern void ConvertToScreenSpace(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr position);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.Ray> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.Ray>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.Ray __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Ray(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.Ray __CreateInstance(global::FlounderSharp.Ray.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Ray(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.Ray.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Ray.__Internal));
            *(global::FlounderSharp.Ray.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Ray(global::FlounderSharp.Ray.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Ray(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        /// <summary>Creates a new 3D ray.</summary>
        /// <param name="useMouse">If the ray will use the mouse coords or to start from screenStart.</param>
        /// <param name="screenStart">If useMouse is false then this will be used as the rays start.</param>
        public Ray(ref bool useMouse, global::FlounderSharp.Vector2 screenStart)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Ray.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            fixed (bool* __refParamPtr0 = &useMouse)
            {
                var __arg0 = __refParamPtr0;
                if (ReferenceEquals(screenStart, null))
                    throw new global::System.ArgumentNullException("screenStart", "Cannot be null because it is a C++ reference (&).");
                var __arg1 = screenStart.__Instance;
                __Internal.ctor((__Instance + __PointerAdjustment), __arg0, __arg1);
            }
        }

        ~Ray()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.Ray __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Updates the ray to a new position.</summary>
        /// <param name="currentPosition">The new position.</param>
        /// <param name="currentPosition">The mouses xy screen space position.</param>
        /// <param name="viewMatrix">The cameras view matrix.</param>
        /// <param name="projectionMatrix">The projection view matrix.</param>
        public void Update(global::FlounderSharp.Vector3 currentPosition, global::FlounderSharp.Vector2 mousePosition, global::FlounderSharp.Matrix4 viewMatrix, global::FlounderSharp.Matrix4 projectionMatrix)
        {
            if (ReferenceEquals(currentPosition, null))
                throw new global::System.ArgumentNullException("currentPosition", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = currentPosition.__Instance;
            if (ReferenceEquals(mousePosition, null))
                throw new global::System.ArgumentNullException("mousePosition", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = mousePosition.__Instance;
            if (ReferenceEquals(viewMatrix, null))
                throw new global::System.ArgumentNullException("viewMatrix", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = viewMatrix.__Instance;
            if (ReferenceEquals(projectionMatrix, null))
                throw new global::System.ArgumentNullException("projectionMatrix", "Cannot be null because it is a C++ reference (&).");
            var __arg3 = projectionMatrix.__Instance;
            __Internal.Update((__Instance + __PointerAdjustment), __arg0, __arg1, __arg2, __arg3);
        }

        /// <summary>Gets a point on the ray.</summary>
        /// <param name="distance">Distance down the ray to sample.</param>
        public global::FlounderSharp.Vector3 GetPointOnRay(ref float distance)
        {
            fixed (float* __refParamPtr0 = &distance)
            {
                var __arg0 = __refParamPtr0;
                var __ret = new global::FlounderSharp.Vector3.__Internal();
                __Internal.GetPointOnRay((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
                return global::FlounderSharp.Vector3.__CreateInstance(__ret);
            }
        }

        /// <summary>Converts a position from world space to screen space.</summary>
        /// <param name="position">The position to convert.</param>
        public global::FlounderSharp.Vector3 ConvertToScreenSpace(global::FlounderSharp.Vector3 position)
        {
            if (ReferenceEquals(position, null))
                throw new global::System.ArgumentNullException("position", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = position.__Instance;
            var __ret = new global::FlounderSharp.Vector3.__Internal();
            __Internal.ConvertToScreenSpace((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::FlounderSharp.Vector3.__CreateInstance(__ret);
        }

        public global::FlounderSharp.Vector3 MOrigin
        {
            get
            {
                global::FlounderSharp.Vector3 __result0;
                if (((global::FlounderSharp.Ray.__Internal*) __Instance)->m_origin == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Vector3.NativeToManagedMap.ContainsKey(((global::FlounderSharp.Ray.__Internal*) __Instance)->m_origin))
                    __result0 = (global::FlounderSharp.Vector3) global::FlounderSharp.Vector3.NativeToManagedMap[((global::FlounderSharp.Ray.__Internal*) __Instance)->m_origin];
                else __result0 = global::FlounderSharp.Vector3.__CreateInstance(((global::FlounderSharp.Ray.__Internal*) __Instance)->m_origin);
                return __result0;
            }

            set
            {
                ((global::FlounderSharp.Ray.__Internal*)__Instance)->m_origin = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::FlounderSharp.Vector3 MCurrentRay
        {
            get
            {
                global::FlounderSharp.Vector3 __result0;
                if (((global::FlounderSharp.Ray.__Internal*) __Instance)->m_currentRay == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Vector3.NativeToManagedMap.ContainsKey(((global::FlounderSharp.Ray.__Internal*) __Instance)->m_currentRay))
                    __result0 = (global::FlounderSharp.Vector3) global::FlounderSharp.Vector3.NativeToManagedMap[((global::FlounderSharp.Ray.__Internal*) __Instance)->m_currentRay];
                else __result0 = global::FlounderSharp.Vector3.__CreateInstance(((global::FlounderSharp.Ray.__Internal*) __Instance)->m_currentRay);
                return __result0;
            }

            set
            {
                ((global::FlounderSharp.Ray.__Internal*)__Instance)->m_currentRay = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
