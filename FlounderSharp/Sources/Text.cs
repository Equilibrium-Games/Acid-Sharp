// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    /// <summary>A enum that represents how a font will be justified.</summary>
    public enum FontJustify
    {
        JustifyLeft = 0,
        JustifyCentre = 1,
        JustifyRight = 2,
        JustifyFully = 3
    }

    /// <summary>A object the represents a text in a GUI.</summary>
    public unsafe partial class Text : global::FlounderSharp.UiObject, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 400)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vfptr_UiObject;

            [FieldOffset(8)]
            internal global::System.IntPtr m_parent;

            [FieldOffset(16)]
            internal global::System.IntPtr m_children;

            [FieldOffset(24)]
            internal byte m_visible;

            [FieldOffset(32)]
            internal global::System.IntPtr m_rectangle;

            [FieldOffset(40)]
            internal global::System.IntPtr m_scissor;

            [FieldOffset(48)]
            internal global::System.IntPtr m_positionOffset;

            [FieldOffset(56)]
            internal global::System.IntPtr m_screenTransform;

            [FieldOffset(64)]
            internal global::System.IntPtr m_alphaDriver;

            [FieldOffset(72)]
            internal float m_alpha;

            [FieldOffset(80)]
            internal global::System.IntPtr m_scaleDriver;

            [FieldOffset(88)]
            internal float m_scale;

            [FieldOffset(96)]
            internal global::Std.Function.__Internal m_actionLeft;

            [FieldOffset(160)]
            internal global::Std.Function.__Internal m_actionRight;

            [FieldOffset(224)]
            internal global::System.IntPtr m_descriptorSet;

            [FieldOffset(232)]
            internal global::System.IntPtr m_uniformObject;

            [FieldOffset(240)]
            internal global::System.IntPtr m_model;

            [FieldOffset(248)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C m_string;

            [FieldOffset(280)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C m_newString;

            [FieldOffset(312)]
            internal global::FlounderSharp.FontJustify m_justify;

            [FieldOffset(320)]
            internal global::System.IntPtr m_fontType;

            [FieldOffset(328)]
            internal float m_maxWidth;

            [FieldOffset(332)]
            internal float m_kerning;

            [FieldOffset(336)]
            internal float m_leading;

            [FieldOffset(344)]
            internal global::System.IntPtr m_textColour;

            [FieldOffset(352)]
            internal global::System.IntPtr m_borderColour;

            [FieldOffset(360)]
            internal byte m_solidBorder;

            [FieldOffset(361)]
            internal byte m_glowBorder;

            [FieldOffset(368)]
            internal global::System.IntPtr m_glowDriver;

            [FieldOffset(376)]
            internal float m_glowSize;

            [FieldOffset(384)]
            internal global::System.IntPtr m_borderDriver;

            [FieldOffset(392)]
            internal float m_borderSize;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Text@fl@@QEAA@PEAVUiObject@1@AEBVUiBound@1@AEBMAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEAVFontType@1@AEBW4FontJustify@1@222@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, global::System.IntPtr parent, global::System.IntPtr rectangle, float* fontSize, global::System.IntPtr text, global::System.IntPtr fontType, global::FlounderSharp.FontJustify* justify, float* maxWidth, float* kerning, float* leading);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Text@fl@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CmdRender@Text@fl@@QEAAXAEBQEAUVkCommandBuffer_T@@AEBVPipeline@2@@Z")]
            internal static extern void CmdRender(global::System.IntPtr instance, global::System.IntPtr commandBuffer, global::System.IntPtr pipeline);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetBorder@Text@fl@@QEAAXPEAVIDriver@2@@Z")]
            internal static extern void SetBorder(global::System.IntPtr instance, global::System.IntPtr driver);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetGlowing@Text@fl@@QEAAXPEAVIDriver@2@@Z")]
            internal static extern void SetGlowing(global::System.IntPtr instance, global::System.IntPtr driver);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?RemoveBorder@Text@fl@@QEAAXXZ")]
            internal static extern void RemoveBorder(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CalculateEdgeStart@Text@fl@@QEAAMXZ")]
            internal static extern float CalculateEdgeStart(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CalculateAntialiasSize@Text@fl@@QEAAMXZ")]
            internal static extern float CalculateAntialiasSize(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetText@Text@fl@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ")]
            internal static extern void GetText(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetText@Text@fl@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
            internal static extern void SetText(global::System.IntPtr instance, global::System.IntPtr newText);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetMaxWidth@Text@fl@@QEBAMXZ")]
            internal static extern float GetMaxWidth(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetMaxWidth@Text@fl@@QEAAXAEBM@Z")]
            internal static extern void SetMaxWidth(global::System.IntPtr instance, float* maxWidth);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetKerning@Text@fl@@QEBAMXZ")]
            internal static extern float GetKerning(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetKerning@Text@fl@@QEAAXAEBM@Z")]
            internal static extern void SetKerning(global::System.IntPtr instance, float* kerning);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetLeading@Text@fl@@QEBAMXZ")]
            internal static extern float GetLeading(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetLeading@Text@fl@@QEAAXAEBM@Z")]
            internal static extern void SetLeading(global::System.IntPtr instance, float* leading);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetTextColour@Text@fl@@QEBAPEAVColour@2@XZ")]
            internal static extern global::System.IntPtr GetTextColour(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetTextColour@Text@fl@@QEAAXAEBVColour@2@@Z")]
            internal static extern void SetTextColour(global::System.IntPtr instance, global::System.IntPtr textColour);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetBorderColour@Text@fl@@QEBAPEAVColour@2@XZ")]
            internal static extern global::System.IntPtr GetBorderColour(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetBorderColour@Text@fl@@QEAAXAEBVColour@2@@Z")]
            internal static extern void SetBorderColour(global::System.IntPtr instance, global::System.IntPtr borderColour);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetModel@Text@fl@@QEBAPEAVModel@2@XZ")]
            internal static extern global::System.IntPtr GetModel(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetTextJustify@Text@fl@@QEBA?AW4FontJustify@2@XZ")]
            internal static extern global::FlounderSharp.FontJustify GetTextJustify(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetFontType@Text@fl@@QEBAPEAVFontType@2@XZ")]
            internal static extern global::System.IntPtr GetFontType(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetTexture@Text@fl@@QEBAPEAVTexture@2@XZ")]
            internal static extern global::System.IntPtr GetTexture(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetTotalBorderSize@Text@fl@@QEAAMXZ")]
            internal static extern float GetTotalBorderSize(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetGlowSize@Text@fl@@QEAAMXZ")]
            internal static extern float GetGlowSize(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?IsLoaded@Text@fl@@QEAA_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsLoaded(global::System.IntPtr instance);
        }

        internal static new global::FlounderSharp.Text __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Text(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.Text __CreateInstance(global::FlounderSharp.Text.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Text(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.Text.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Text.__Internal));
            global::FlounderSharp.Text.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private Text(global::FlounderSharp.Text.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Text(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        /// <summary>Creates a new text object.</summary>
        /// <param name="parent">The parent screen object.</param>
        /// <param name="kerning">The kerning (type character spacing multiplier) of this text.</param>
        /// <param name="rectangle">The rectangle that will represent the bounds of the ui object.</param>
        /// <param name="fontSize">The font size to be used in this text.</param>
        /// <param name="maxWidth">The maximum length of a line of this text.</param>
        /// <param name="text">The string text the object will be created with.</param>
        /// <param name="leading">The leading (vertical line spacing multiplier) of this text.</param>
        /// <param name="fontType">The font type to be used in this text.</param>
        /// <param name="justify">How the text will justify.</param>
        public Text(global::FlounderSharp.UiObject parent, global::FlounderSharp.UiBound rectangle, ref float fontSize, string text, global::FlounderSharp.FontType fontType, global::FlounderSharp.FontJustify* justify, ref float maxWidth, ref float kerning, ref float leading)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Text.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg0 = ReferenceEquals(parent, null) ? global::System.IntPtr.Zero : parent.__Instance;
            if (ReferenceEquals(rectangle, null))
                throw new global::System.ArgumentNullException("rectangle", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = rectangle.__Instance;
            fixed (float* __refParamPtr2 = &fontSize)
            {
                var __arg2 = __refParamPtr2;
                var __allocator3 = new global::Std.Allocator<char>();
                var __basicString3 = global::Std.BasicStringExtensions.BasicString(text, __allocator3);
                var __arg3 = __basicString3.__Instance;
                var __arg4 = ReferenceEquals(fontType, null) ? global::System.IntPtr.Zero : fontType.__Instance;
                fixed (float* __refParamPtr6 = &maxWidth)
                {
                    var __arg6 = __refParamPtr6;
                    fixed (float* __refParamPtr7 = &kerning)
                    {
                        var __arg7 = __refParamPtr7;
                        fixed (float* __refParamPtr8 = &leading)
                        {
                            var __arg8 = __refParamPtr8;
                            __Internal.ctor((__Instance + __PointerAdjustment), __arg0, __arg1, __arg2, __arg3, __arg4, justify, __arg6, __arg7, __arg8);
                            __basicString3.Dispose(false);
                            __allocator3.Dispose();
                        }
                    }
                }
            }
            SetupVTables(GetType().FullName == "FlounderSharp.Text");
        }

        public Text(global::FlounderSharp.Text _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Text.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
            SetupVTables(GetType().FullName == "FlounderSharp.Text");
        }

        ~Text()
        {
            Dispose(false);
        }

        public override void UpdateObject()
        {
            base.UpdateObject();
        }

        public void CmdRender(global::VkCommandBufferT commandBuffer, global::FlounderSharp.Pipeline pipeline)
        {
            if (ReferenceEquals(commandBuffer, null))
                throw new global::System.ArgumentNullException("commandBuffer", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = commandBuffer.__Instance;
            if (ReferenceEquals(pipeline, null))
                throw new global::System.ArgumentNullException("pipeline", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = pipeline.__Instance;
            __Internal.CmdRender((__Instance + __PointerAdjustment), __arg0, __arg1);
        }

        /// <summary>Sets a new border driver, will disable glowing.</summary>
        /// <param name="driver">The new border driver.</param>
        public void SetBorder(global::FlounderSharp.IDriver driver)
        {
            var __arg0 = ReferenceEquals(driver, null) ? global::System.IntPtr.Zero : driver.__Instance;
            __Internal.SetBorder((__Instance + __PointerAdjustment), __arg0);
        }

        /// <summary>Sets a new glow driver, will disable solid borders.</summary>
        /// <param name="driver">The new glow driver.</param>
        public void SetGlowing(global::FlounderSharp.IDriver driver)
        {
            var __arg0 = ReferenceEquals(driver, null) ? global::System.IntPtr.Zero : driver.__Instance;
            __Internal.SetGlowing((__Instance + __PointerAdjustment), __arg0);
        }

        /// <summary>Disables both solid borders and glow borders.</summary>
        public void RemoveBorder()
        {
            __Internal.RemoveBorder((__Instance + __PointerAdjustment));
        }

        /// <summary>Gets the distance field edge before antialias.</summary>
        public float CalculateEdgeStart()
        {
            var __ret = __Internal.CalculateEdgeStart((__Instance + __PointerAdjustment));
            return __ret;
        }

        /// <summary>Gets the distance field antialias distance.</summary>
        public float CalculateAntialiasSize()
        {
            var __ret = __Internal.CalculateAntialiasSize((__Instance + __PointerAdjustment));
            return __ret;
        }

        /// <summary>Gets the string of text represented.</summary>
        /// <param name="newText">The new text,</param>
        /// <remarks>Changed the current string in this text.</remarks>
        public string Text
        {
            get
            {
                var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.GetText((__Instance + __PointerAdjustment), new IntPtr(&__ret));
                var __basicStringRet = global::Std.BasicString<char, global::Std.CharTraits<char>, global::Std.Allocator<char>>.__CreateInstance(__ret);
                var __stringRet = global::Std.BasicStringExtensions.CStr(__basicStringRet);
                __basicStringRet.Dispose(false);
                return __stringRet;
            }

            set
            {
                var __allocator0 = new global::Std.Allocator<char>();
                var __basicString0 = global::Std.BasicStringExtensions.BasicString(value, __allocator0);
                var __arg0 = __basicString0.__Instance;
                __Internal.SetText((__Instance + __PointerAdjustment), __arg0);
                __basicString0.Dispose(false);
                __allocator0.Dispose();
            }
        }

        /// <summary>Gets the maximum length of a line of this text.</summary>
        /// <param name="maxWidth">The new maximum length.</param>
        /// <remarks>Sets the maximum length of a line of this text.</remarks>
        public float MaxWidth
        {
            get
            {
                var __ret = __Internal.GetMaxWidth((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetMaxWidth((__Instance + __PointerAdjustment), __arg0);
            }
        }

        /// <summary>Gets the kerning (type character spacing multiplier) of this text.</summary>
        /// <param name="leading">The new kerning.</param>
        /// <remarks>Sets the kerning (type character spacing multiplier) of this text.</remarks>
        public float Kerning
        {
            get
            {
                var __ret = __Internal.GetKerning((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetKerning((__Instance + __PointerAdjustment), __arg0);
            }
        }

        /// <summary>Gets the leading (vertical line spacing multiplier) of this text.</summary>
        /// <param name="leading">The new leading.</param>
        /// <remarks>Sets the leading (vertical line spacing multiplier) of this text.</remarks>
        public float Leading
        {
            get
            {
                var __ret = __Internal.GetLeading((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetLeading((__Instance + __PointerAdjustment), __arg0);
            }
        }

        /// <summary>Gets the colour of the text.</summary>
        /// <param name="textColour">The new colour of the text.</param>
        /// <remarks>Sets the colour of the text.</remarks>
        public global::FlounderSharp.Colour TextColour
        {
            get
            {
                var __ret = __Internal.GetTextColour((__Instance + __PointerAdjustment));
                global::FlounderSharp.Colour __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Colour.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Colour) global::FlounderSharp.Colour.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.Colour.__CreateInstance(__ret);
                return __result0;
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = value.__Instance;
                __Internal.SetTextColour((__Instance + __PointerAdjustment), __arg0);
            }
        }

        /// <summary>Gets the border colour of the text. This is used with border and glow drivers.</summary>
        /// <param name="borderColour">The new border colour of the text.</param>
        /// <remarks>Sets the border colour of the text. This is used with border and glow drivers.</remarks>
        public global::FlounderSharp.Colour BorderColour
        {
            get
            {
                var __ret = __Internal.GetBorderColour((__Instance + __PointerAdjustment));
                global::FlounderSharp.Colour __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Colour.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Colour) global::FlounderSharp.Colour.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.Colour.__CreateInstance(__ret);
                return __result0;
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = value.__Instance;
                __Internal.SetBorderColour((__Instance + __PointerAdjustment), __arg0);
            }
        }

        /// <summary>Gets the text model, which contains all the vertex data for the quads on which the text will be rendered.</summary>
        public global::FlounderSharp.Model Model
        {
            get
            {
                var __ret = __Internal.GetModel((__Instance + __PointerAdjustment));
                global::FlounderSharp.Model __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Model.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Model) global::FlounderSharp.Model.NativeToManagedMap[__ret];
                else global::FlounderSharp.Model.NativeToManagedMap[__ret] = __result0 = (global::FlounderSharp.Model) global::FlounderSharp.Model.__CreateInstance(__ret);
                return __result0;
            }
        }

        /// <summary>Gets how the text should justify.</summary>
        public global::FlounderSharp.FontJustify TextJustify
        {
            get
            {
                var __ret = __Internal.GetTextJustify((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        /// <summary>Gets the font used by this text.</summary>
        public global::FlounderSharp.FontType FontType
        {
            get
            {
                var __ret = __Internal.GetFontType((__Instance + __PointerAdjustment));
                global::FlounderSharp.FontType __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.FontType.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.FontType) global::FlounderSharp.FontType.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.FontType.__CreateInstance(__ret);
                return __result0;
            }
        }

        /// <summary>Gets font type texture for this text.</summary>
        public global::FlounderSharp.Texture Texture
        {
            get
            {
                var __ret = __Internal.GetTexture((__Instance + __PointerAdjustment));
                global::FlounderSharp.Texture __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Texture.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Texture) global::FlounderSharp.Texture.NativeToManagedMap[__ret];
                else global::FlounderSharp.Texture.NativeToManagedMap[__ret] = __result0 = (global::FlounderSharp.Texture) global::FlounderSharp.Texture.__CreateInstance(__ret);
                return __result0;
            }
        }

        /// <summary>Gets the calculated border size.</summary>
        public float TotalBorderSize
        {
            get
            {
                var __ret = __Internal.GetTotalBorderSize((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        /// <summary>Gets the size of the glow.</summary>
        public float GlowSize
        {
            get
            {
                var __ret = __Internal.GetGlowSize((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        /// <summary>Gets if the text has been loaded to OpenGL.</summary>
        public bool IsLoaded
        {
            get
            {
                var __ret = __Internal.IsLoaded((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        #region Virtual table interop

        // ~Text()
        private static global::FlounderSharp.Delegates.Action_IntPtr_int _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr instance, int delete)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.Text) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // void UpdateObject() override
        private static global::FlounderSharp.Delegates.Action_IntPtr _UpdateObjectDelegateInstance;

        private static void _UpdateObjectDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.Text) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.UpdateObject();
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[2];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _UpdateObjectDelegateInstance += _UpdateObjectDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_UpdateObjectDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(3 * 8);
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(3 * 8);
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = _Thunks[1];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
