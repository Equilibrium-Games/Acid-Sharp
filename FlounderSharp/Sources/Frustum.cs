// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    public enum FrustumPlanes
    {
        FrustumRight = 0,
        FrustumLeft = 1,
        FrustumBottom = 2,
        FrustumTop = 3,
        FrustumBack = 4,
        FrustumFront = 5
    }

    public enum FrustumFace
    {
        FrustumA = 0,
        FrustumB = 1,
        FrustumC = 2,
        FrustumD = 3
    }

    /// <summary>Represents the region of flounder.space in the modeled world that may appear on the screen.</summary>
    public unsafe partial class Frustum : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr m_frustum;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Frustum@fl@@QEAA@XZ")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1Frustum@fl@@QEAA@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Update@Frustum@fl@@QEBAXAEBVMatrix4@2@0@Z")]
            internal static extern void Update(global::System.IntPtr instance, global::System.IntPtr viewMatrix, global::System.IntPtr projectionMatrix);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?PointInFrustum@Frustum@fl@@QEBA_NAEBVVector3@2@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool PointInFrustum(global::System.IntPtr instance, global::System.IntPtr position);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SphereInFrustum@Frustum@fl@@QEBA_NAEBVVector3@2@AEBM@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SphereInFrustum(global::System.IntPtr instance, global::System.IntPtr position, float* radius);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CubeInFrustum@Frustum@fl@@QEBA_NAEBVVector3@2@0@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CubeInFrustum(global::System.IntPtr instance, global::System.IntPtr min, global::System.IntPtr max);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetFrustum@Frustum@fl@@QEBAPEAPEAMXZ")]
            internal static extern float** GetFrustum(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.Frustum> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.Frustum>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.Frustum __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Frustum(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.Frustum __CreateInstance(global::FlounderSharp.Frustum.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Frustum(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.Frustum.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Frustum.__Internal));
            *(global::FlounderSharp.Frustum.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Frustum(global::FlounderSharp.Frustum.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Frustum(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        /// <summary>Creates a new frustum.</summary>
        public Frustum()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Frustum.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor((__Instance + __PointerAdjustment));
        }

        ~Frustum()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.Frustum __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Updates a frustum from the view and projection matrix.</summary>
        /// <param name="viewMatrix">The view matrix.</param>
        /// <param name="projectionMatrix">The projection matrix.</param>
        public void Update(global::FlounderSharp.Matrix4 viewMatrix, global::FlounderSharp.Matrix4 projectionMatrix)
        {
            if (ReferenceEquals(viewMatrix, null))
                throw new global::System.ArgumentNullException("viewMatrix", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = viewMatrix.__Instance;
            if (ReferenceEquals(projectionMatrix, null))
                throw new global::System.ArgumentNullException("projectionMatrix", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = projectionMatrix.__Instance;
            __Internal.Update((__Instance + __PointerAdjustment), __arg0, __arg1);
        }

        /// <summary>Is the point contained in the frustum?</summary>
        /// <param name="position">The points position.</param>
        public bool PointInFrustum(global::FlounderSharp.Vector3 position)
        {
            if (ReferenceEquals(position, null))
                throw new global::System.ArgumentNullException("position", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = position.__Instance;
            var __ret = __Internal.PointInFrustum((__Instance + __PointerAdjustment), __arg0);
            return __ret;
        }

        /// <summary>Is the sphere contained in the frustum?</summary>
        /// <param name="position">The points position.</param>
        /// <param name="radius">The spheres radius.</param>
        public bool SphereInFrustum(global::FlounderSharp.Vector3 position, ref float radius)
        {
            if (ReferenceEquals(position, null))
                throw new global::System.ArgumentNullException("position", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = position.__Instance;
            fixed (float* __refParamPtr1 = &radius)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.SphereInFrustum((__Instance + __PointerAdjustment), __arg0, __arg1);
                return __ret;
            }
        }

        /// <summary>Is the cube contained partially in the frustum?</summary>
        /// <param name="min">The point 1st position.</param>
        /// <param name="max">The point 2nd position.</param>
        public bool CubeInFrustum(global::FlounderSharp.Vector3 min, global::FlounderSharp.Vector3 max)
        {
            if (ReferenceEquals(min, null))
                throw new global::System.ArgumentNullException("min", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = min.__Instance;
            if (ReferenceEquals(max, null))
                throw new global::System.ArgumentNullException("max", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = max.__Instance;
            var __ret = __Internal.CubeInFrustum((__Instance + __PointerAdjustment), __arg0, __arg1);
            return __ret;
        }


        public float** Frustum
        {
            get
            {
                var __ret = __Internal.GetFrustum((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
