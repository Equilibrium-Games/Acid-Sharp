// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    /// <summary>A helper for C++ arrays.</summary>
    public unsafe partial class SquareArray : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?FloatArray@SquareArray@fl@@SAPEAPEAMAEBH0@Z")]
            internal static extern float** FloatArray(int* size1, int* size2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Vector3Array@SquareArray@fl@@SAPEAPEAVVector3@2@AEBH0@Z")]
            internal static extern global::System.IntPtr Vector3Array(int* size1, int* size2);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.SquareArray> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.SquareArray>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.SquareArray __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.SquareArray(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.SquareArray __CreateInstance(global::FlounderSharp.SquareArray.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.SquareArray(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.SquareArray.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.SquareArray.__Internal));
            *(global::FlounderSharp.SquareArray.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SquareArray(global::FlounderSharp.SquareArray.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SquareArray(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        ~SquareArray()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.SquareArray __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Creates a new rectangular float array.</summary>
        /// <param name="size1">The first size.</param>
        /// <param name="size2">The seconds size.</param>
        public static float** FloatArray(ref int size1, ref int size2)
        {
            fixed (int* __refParamPtr0 = &size1)
            {
                var __arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &size2)
                {
                    var __arg1 = __refParamPtr1;
                    var __ret = __Internal.FloatArray(__arg0, __arg1);
                    return __ret;
                }
            }
        }

        /// <summary>Creates a new rectangular Vector3 array.</summary>
        /// <param name="size1">The first size.</param>
        /// <param name="size2">The seconds size.</param>
        public static global::FlounderSharp.Vector3 Vector3Array(ref int size1, ref int size2)
        {
            fixed (int* __refParamPtr0 = &size1)
            {
                var __arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &size2)
                {
                    var __arg1 = __refParamPtr1;
                    var __ret = __Internal.Vector3Array(__arg0, __arg1);
                    global::FlounderSharp.Vector3 __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::FlounderSharp.Vector3.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::FlounderSharp.Vector3) global::FlounderSharp.Vector3.NativeToManagedMap[__ret];
                    else __result0 = global::FlounderSharp.Vector3.__CreateInstance(__ret);
                    return __result0;
                }
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
