// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    /// <summary>Holds a RGBA colour.</summary>
    public unsafe partial class Colour : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::FlounderSharp.Colour._.__Internal _;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Colour@fl@@QEAA@XZ")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Colour@fl@@QEAA@AEBM000@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, float* r, float* g, float* b, float* a);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Colour@fl@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBM@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, global::System.IntPtr hex, float* a);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Colour@fl@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr source);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Colour@fl@@QEAA@AEBVVector3@1@@Z")]
            internal static extern global::System.IntPtr ctor_1(global::System.IntPtr instance, global::System.IntPtr source);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Colour@fl@@QEAA@AEBVVector4@1@@Z")]
            internal static extern global::System.IntPtr ctor_2(global::System.IntPtr instance, global::System.IntPtr source);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1Colour@fl@@QEAA@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Add@Colour@fl@@QEBA?AV12@AEBV12@@Z")]
            internal static extern void Add(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Subtract@Colour@fl@@QEBA?AV12@AEBV12@@Z")]
            internal static extern void Subtract(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Multiply@Colour@fl@@QEBA?AV12@AEBV12@@Z")]
            internal static extern void Multiply(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Divide@Colour@fl@@QEBA?AV12@AEBV12@@Z")]
            internal static extern void Divide(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Scale@Colour@fl@@QEBA?AV12@AEBM@Z")]
            internal static extern void Scale(global::System.IntPtr instance, global::System.IntPtr @return, float* scalar);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Normalize@Colour@fl@@QEBA?AV12@XZ")]
            internal static extern void Normalize(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Interpolate@Colour@fl@@QEBA?AV12@AEBV12@M@Z")]
            internal static extern void Interpolate(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other, float blend);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SmoothDamp@Colour@fl@@QEBA?AV12@AEBV12@0@Z")]
            internal static extern void SmoothDamp(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr target, global::System.IntPtr rate);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Write@Colour@fl@@QEAAXPEAVLoadedValue@2@@Z")]
            internal static extern void Write(global::System.IntPtr instance, global::System.IntPtr destination);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??8Colour@fl@@QEBA_NAEBV01@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??9Colour@fl@@QEBA_NAEBV01@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??MColour@fl@@QEBA_NAEBV01@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorLess(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??NColour@fl@@QEBA_NAEBV01@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorLessEqual(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??OColour@fl@@QEBA_NAEBV01@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorGreater(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??PColour@fl@@QEBA_NAEBV01@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorGreaterEqual(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??8Colour@fl@@QEBA_NAEBM@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual(global::System.IntPtr instance, float* value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??9Colour@fl@@QEBA_NAEBM@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual(global::System.IntPtr instance, float* value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?ToString@Colour@fl@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ")]
            internal static extern void ToString(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Hfl@@YA?AVColour@0@V10@AEBV10@@Z")]
            internal static extern void OperatorPlus(global::System.IntPtr @return, global::FlounderSharp.Colour.__Internal left, global::System.IntPtr right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Gfl@@YA?AVColour@0@V10@AEBV10@@Z")]
            internal static extern void OperatorMinus(global::System.IntPtr @return, global::FlounderSharp.Colour.__Internal left, global::System.IntPtr right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Dfl@@YA?AVColour@0@V10@AEBV10@@Z")]
            internal static extern void OperatorStar(global::System.IntPtr @return, global::FlounderSharp.Colour.__Internal left, global::System.IntPtr right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Kfl@@YA?AVColour@0@V10@AEBV10@@Z")]
            internal static extern void OperatorSlash(global::System.IntPtr @return, global::FlounderSharp.Colour.__Internal left, global::System.IntPtr right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Hfl@@YA?AVColour@0@V10@M@Z")]
            internal static extern void OperatorPlus(global::System.IntPtr @return, global::FlounderSharp.Colour.__Internal left, float value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Gfl@@YA?AVColour@0@V10@M@Z")]
            internal static extern void OperatorMinus(global::System.IntPtr @return, global::FlounderSharp.Colour.__Internal left, float value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Dfl@@YA?AVColour@0@V10@M@Z")]
            internal static extern void OperatorStar(global::System.IntPtr @return, global::FlounderSharp.Colour.__Internal left, float value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Kfl@@YA?AVColour@0@V10@M@Z")]
            internal static extern void OperatorSlash(global::System.IntPtr @return, global::FlounderSharp.Colour.__Internal left, float value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Hfl@@YA?AVColour@0@MV10@@Z")]
            internal static extern void OperatorPlus_1(global::System.IntPtr @return, float value, global::FlounderSharp.Colour.__Internal left);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Gfl@@YA?AVColour@0@MV10@@Z")]
            internal static extern void OperatorMinus_1(global::System.IntPtr @return, float value, global::FlounderSharp.Colour.__Internal left);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Dfl@@YA?AVColour@0@MV10@@Z")]
            internal static extern void OperatorStar_1(global::System.IntPtr @return, float value, global::FlounderSharp.Colour.__Internal left);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Kfl@@YA?AVColour@0@MV10@@Z")]
            internal static extern void OperatorSlash_1(global::System.IntPtr @return, float value, global::FlounderSharp.Colour.__Internal left);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetR@Colour@fl@@QEBAMXZ")]
            internal static extern float GetR(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetR@Colour@fl@@QEAAXAEBM@Z")]
            internal static extern void SetR(global::System.IntPtr instance, float* r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetG@Colour@fl@@QEBAMXZ")]
            internal static extern float GetG(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetG@Colour@fl@@QEAAXAEBM@Z")]
            internal static extern void SetG(global::System.IntPtr instance, float* g);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetB@Colour@fl@@QEBAMXZ")]
            internal static extern float GetB(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetB@Colour@fl@@QEAAXAEBM@Z")]
            internal static extern void SetB(global::System.IntPtr instance, float* b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetA@Colour@fl@@QEBAMXZ")]
            internal static extern float GetA(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetA@Colour@fl@@QEAAXAEBM@Z")]
            internal static extern void SetA(global::System.IntPtr instance, float* a);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?LengthSquared@Colour@fl@@QEBAMXZ")]
            internal static extern float LengthSquared(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Length@Colour@fl@@QEBAMXZ")]
            internal static extern float Length(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetUnit@Colour@fl@@QEAA?AV12@XZ")]
            internal static extern void GetUnit(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetHex@Colour@fl@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ")]
            internal static extern void GetHex(global::System.IntPtr instance, global::System.IntPtr @return);
        }

        public unsafe partial struct _
        {
            [StructLayout(LayoutKind.Explicit, Size = 16)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::FlounderSharp.Colour._.__.__Internal __;

                [FieldOffset(0)]
                internal global::FlounderSharp.Colour._.__.__Internal __1;
            }

            public unsafe partial class __
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal float m_r;

                    [FieldOffset(4)]
                    internal float m_g;

                    [FieldOffset(8)]
                    internal float m_b;

                    [FieldOffset(12)]
                    internal float m_a;
                }
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.Colour> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.Colour>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.Colour __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Colour(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.Colour __CreateInstance(global::FlounderSharp.Colour.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Colour(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.Colour.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Colour.__Internal));
            global::FlounderSharp.Colour.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private Colour(global::FlounderSharp.Colour.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Colour(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        /// <summary>Constructor for colour.</summary>
        public Colour()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Colour.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor((__Instance + __PointerAdjustment));
        }

        /// <summary>Constructor for colour.</summary>
        /// <param name="r">The new R value.</param>
        /// <param name="g">The new G value.</param>
        /// <param name="b">The new B value.</param>
        /// <param name="a">The new A value.</param>
        public Colour(ref float r, ref float g, ref float b, ref float a)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Colour.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            fixed (float* __refParamPtr0 = &r)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &g)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &b)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (float* __refParamPtr3 = &a)
                        {
                            var __arg3 = __refParamPtr3;
                            __Internal.ctor((__Instance + __PointerAdjustment), __arg0, __arg1, __arg2, __arg3);
                        }
                    }
                }
            }
        }

        /// <summary>Constructor for colour.</summary>
        /// <param name="hex">The new values from HEX.</param>
        /// <param name="a">The new A value.</param>
        public Colour(string hex, ref float a)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Colour.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __allocator0 = new global::Std.Allocator<char>();
            var __basicString0 = global::Std.BasicStringExtensions.BasicString(hex, __allocator0);
            var __arg0 = __basicString0.__Instance;
            fixed (float* __refParamPtr1 = &a)
            {
                var __arg1 = __refParamPtr1;
                __Internal.ctor((__Instance + __PointerAdjustment), __arg0, __arg1);
                __basicString0.Dispose(false);
                __allocator0.Dispose();
            }
        }

        /// <summary>Constructor for colour.</summary>
        /// <param name="source">Creates this colour out of a existing one.</param>
        public Colour(global::FlounderSharp.Colour source)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Colour.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(source, null))
                throw new global::System.ArgumentNullException("source", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = source.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
        }

        /// <summary>Constructor for colour.</summary>
        /// <param name="source">Creates this colour out of a existing vector.</param>
        public Colour(global::FlounderSharp.Vector3 source)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Colour.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(source, null))
                throw new global::System.ArgumentNullException("source", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = source.__Instance;
            __Internal.ctor_1((__Instance + __PointerAdjustment), __arg0);
        }

        /// <summary>Constructor for colour.</summary>
        /// <param name="source">Creates this colour out of a existing vector.</param>
        public Colour(global::FlounderSharp.Vector4 source)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Colour.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(source, null))
                throw new global::System.ArgumentNullException("source", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = source.__Instance;
            __Internal.ctor_2((__Instance + __PointerAdjustment), __arg0);
        }

        ~Colour()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.Colour __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Adds this vector to another vector.</summary>
        /// <param name="other">The other vector.</param>
        public global::FlounderSharp.Colour Add(global::FlounderSharp.Colour other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::FlounderSharp.Colour.__Internal();
            __Internal.Add((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::FlounderSharp.Colour.__CreateInstance(__ret);
        }

        /// <summary>Subtracts this vector to another vector.</summary>
        /// <param name="other">The other vector.</param>
        public global::FlounderSharp.Colour Subtract(global::FlounderSharp.Colour other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::FlounderSharp.Colour.__Internal();
            __Internal.Subtract((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::FlounderSharp.Colour.__CreateInstance(__ret);
        }

        /// <summary>Multiplies this vector with another vector.</summary>
        /// <param name="other">The other vector.</param>
        public global::FlounderSharp.Colour Multiply(global::FlounderSharp.Colour other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::FlounderSharp.Colour.__Internal();
            __Internal.Multiply((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::FlounderSharp.Colour.__CreateInstance(__ret);
        }

        /// <summary>Divides this vector by another vector.</summary>
        /// <param name="other">The other vector.</param>
        public global::FlounderSharp.Colour Divide(global::FlounderSharp.Colour other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::FlounderSharp.Colour.__Internal();
            __Internal.Divide((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::FlounderSharp.Colour.__CreateInstance(__ret);
        }

        /// <summary>Scales this vector by a scalar.</summary>
        /// <param name="scalar">The scalar value.</param>
        public global::FlounderSharp.Colour Scale(ref float scalar)
        {
            fixed (float* __refParamPtr0 = &scalar)
            {
                var __arg0 = __refParamPtr0;
                var __ret = new global::FlounderSharp.Colour.__Internal();
                __Internal.Scale((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
                return global::FlounderSharp.Colour.__CreateInstance(__ret);
            }
        }

        /// <summary>Normalizes this vector.</summary>
        public global::FlounderSharp.Colour Normalize()
        {
            var __ret = new global::FlounderSharp.Colour.__Internal();
            __Internal.Normalize((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return global::FlounderSharp.Colour.__CreateInstance(__ret);
        }

        /// <summary>Interpolates between this and another colour.</summary>
        /// <param name="other">The other colour.</param>
        /// <param name="blend">The blend factor.</param>
        public global::FlounderSharp.Colour Interpolate(global::FlounderSharp.Colour other, float blend)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::FlounderSharp.Colour.__Internal();
            __Internal.Interpolate((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0, blend);
            return global::FlounderSharp.Colour.__CreateInstance(__ret);
        }

        /// <summary>Gradually changes this vector to a target.</summary>
        /// <param name="target">The target vector.</param>
        /// <param name="rate">The rate to go from current to the target.</param>
        public global::FlounderSharp.Colour SmoothDamp(global::FlounderSharp.Colour target, global::FlounderSharp.Colour rate)
        {
            if (ReferenceEquals(target, null))
                throw new global::System.ArgumentNullException("target", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = target.__Instance;
            if (ReferenceEquals(rate, null))
                throw new global::System.ArgumentNullException("rate", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = rate.__Instance;
            var __ret = new global::FlounderSharp.Colour.__Internal();
            __Internal.SmoothDamp((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0, __arg1);
            return global::FlounderSharp.Colour.__CreateInstance(__ret);
        }

        /// <summary>Saves this vector into a loaded value.</summary>
        /// <param name="destination">The destination loaded value.</param>
        public void Write(global::FlounderSharp.LoadedValue destination)
        {
            var __arg0 = ReferenceEquals(destination, null) ? global::System.IntPtr.Zero : destination.__Instance;
            __Internal.Write((__Instance + __PointerAdjustment), __arg0);
        }

        public static bool operator ==(global::FlounderSharp.Colour __op, global::FlounderSharp.Colour other)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool otherNull = ReferenceEquals(other, null);
            if (__opNull || otherNull)
                return __opNull && otherNull;
            var __arg0 = __op.__Instance;
            var __arg1 = other.__Instance;
            var __ret = __Internal.OperatorEqualEqual(__arg0, __arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as global::FlounderSharp.Colour;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(global::FlounderSharp.Colour.__Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(global::FlounderSharp.Colour __op, global::FlounderSharp.Colour other)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool otherNull = ReferenceEquals(other, null);
            if (__opNull || otherNull)
                return !(__opNull && otherNull);
            var __arg0 = __op.__Instance;
            var __arg1 = other.__Instance;
            var __ret = __Internal.OperatorExclaimEqual(__arg0, __arg1);
            return __ret;
        }

        public static bool operator <(global::FlounderSharp.Colour __op, global::FlounderSharp.Colour other)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = __op.__Instance;
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = other.__Instance;
            var __ret = __Internal.OperatorLess(__arg0, __arg1);
            return __ret;
        }

        public static bool operator <=(global::FlounderSharp.Colour __op, global::FlounderSharp.Colour other)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = __op.__Instance;
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = other.__Instance;
            var __ret = __Internal.OperatorLessEqual(__arg0, __arg1);
            return __ret;
        }

        public static bool operator >(global::FlounderSharp.Colour __op, global::FlounderSharp.Colour other)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = __op.__Instance;
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = other.__Instance;
            var __ret = __Internal.OperatorGreater(__arg0, __arg1);
            return __ret;
        }

        public static bool operator >=(global::FlounderSharp.Colour __op, global::FlounderSharp.Colour other)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = __op.__Instance;
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = other.__Instance;
            var __ret = __Internal.OperatorGreaterEqual(__arg0, __arg1);
            return __ret;
        }

        public static bool operator ==(global::FlounderSharp.Colour __op, ref float value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return __opNull && valueNull;
            var __arg0 = __op.__Instance;
            fixed (float* __refParamPtr1 = &value)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.OperatorEqualEqual(__arg0, __arg1);
                return __ret;
            }
        }

        public static bool operator !=(global::FlounderSharp.Colour __op, ref float value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return !(__opNull && valueNull);
            var __arg0 = __op.__Instance;
            fixed (float* __refParamPtr1 = &value)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.OperatorExclaimEqual(__arg0, __arg1);
                return __ret;
            }
        }

        public string ToString()
        {
            var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
            __Internal.ToString((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            var __basicStringRet = global::Std.BasicString<char, global::Std.CharTraits<char>, global::Std.Allocator<char>>.__CreateInstance(__ret);
            var __stringRet = global::Std.BasicStringExtensions.CStr(__basicStringRet);
            __basicStringRet.Dispose(false);
            return __stringRet;
        }

        public static implicit operator global::FlounderSharp.Colour(global::FlounderSharp.Vector3 source)
        {
            return new global::FlounderSharp.Colour(source);
        }

        public static implicit operator global::FlounderSharp.Colour(global::FlounderSharp.Vector4 source)
        {
            return new global::FlounderSharp.Colour(source);
        }

        public static global::FlounderSharp.Colour operator +(global::FlounderSharp.Colour left, global::FlounderSharp.Colour right)
        {
            var __arg0 = ReferenceEquals(left, null) ? new global::FlounderSharp.Colour.__Internal() : *(global::FlounderSharp.Colour.__Internal*) left.__Instance;
            if (ReferenceEquals(right, null))
                throw new global::System.ArgumentNullException("right", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = right.__Instance;
            var __ret = new global::FlounderSharp.Colour.__Internal();
            __Internal.OperatorPlus(new IntPtr(&__ret), __arg0, __arg1);
            return global::FlounderSharp.Colour.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Colour operator -(global::FlounderSharp.Colour left, global::FlounderSharp.Colour right)
        {
            var __arg0 = ReferenceEquals(left, null) ? new global::FlounderSharp.Colour.__Internal() : *(global::FlounderSharp.Colour.__Internal*) left.__Instance;
            if (ReferenceEquals(right, null))
                throw new global::System.ArgumentNullException("right", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = right.__Instance;
            var __ret = new global::FlounderSharp.Colour.__Internal();
            __Internal.OperatorMinus(new IntPtr(&__ret), __arg0, __arg1);
            return global::FlounderSharp.Colour.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Colour operator *(global::FlounderSharp.Colour left, global::FlounderSharp.Colour right)
        {
            var __arg0 = ReferenceEquals(left, null) ? new global::FlounderSharp.Colour.__Internal() : *(global::FlounderSharp.Colour.__Internal*) left.__Instance;
            if (ReferenceEquals(right, null))
                throw new global::System.ArgumentNullException("right", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = right.__Instance;
            var __ret = new global::FlounderSharp.Colour.__Internal();
            __Internal.OperatorStar(new IntPtr(&__ret), __arg0, __arg1);
            return global::FlounderSharp.Colour.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Colour operator /(global::FlounderSharp.Colour left, global::FlounderSharp.Colour right)
        {
            var __arg0 = ReferenceEquals(left, null) ? new global::FlounderSharp.Colour.__Internal() : *(global::FlounderSharp.Colour.__Internal*) left.__Instance;
            if (ReferenceEquals(right, null))
                throw new global::System.ArgumentNullException("right", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = right.__Instance;
            var __ret = new global::FlounderSharp.Colour.__Internal();
            __Internal.OperatorSlash(new IntPtr(&__ret), __arg0, __arg1);
            return global::FlounderSharp.Colour.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Colour operator +(global::FlounderSharp.Colour left, float value)
        {
            var __arg0 = ReferenceEquals(left, null) ? new global::FlounderSharp.Colour.__Internal() : *(global::FlounderSharp.Colour.__Internal*) left.__Instance;
            var __ret = new global::FlounderSharp.Colour.__Internal();
            __Internal.OperatorPlus(new IntPtr(&__ret), __arg0, value);
            return global::FlounderSharp.Colour.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Colour operator -(global::FlounderSharp.Colour left, float value)
        {
            var __arg0 = ReferenceEquals(left, null) ? new global::FlounderSharp.Colour.__Internal() : *(global::FlounderSharp.Colour.__Internal*) left.__Instance;
            var __ret = new global::FlounderSharp.Colour.__Internal();
            __Internal.OperatorMinus(new IntPtr(&__ret), __arg0, value);
            return global::FlounderSharp.Colour.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Colour operator *(global::FlounderSharp.Colour left, float value)
        {
            var __arg0 = ReferenceEquals(left, null) ? new global::FlounderSharp.Colour.__Internal() : *(global::FlounderSharp.Colour.__Internal*) left.__Instance;
            var __ret = new global::FlounderSharp.Colour.__Internal();
            __Internal.OperatorStar(new IntPtr(&__ret), __arg0, value);
            return global::FlounderSharp.Colour.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Colour operator /(global::FlounderSharp.Colour left, float value)
        {
            var __arg0 = ReferenceEquals(left, null) ? new global::FlounderSharp.Colour.__Internal() : *(global::FlounderSharp.Colour.__Internal*) left.__Instance;
            var __ret = new global::FlounderSharp.Colour.__Internal();
            __Internal.OperatorSlash(new IntPtr(&__ret), __arg0, value);
            return global::FlounderSharp.Colour.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Colour operator +(float value, global::FlounderSharp.Colour left)
        {
            var __arg1 = ReferenceEquals(left, null) ? new global::FlounderSharp.Colour.__Internal() : *(global::FlounderSharp.Colour.__Internal*) left.__Instance;
            var __ret = new global::FlounderSharp.Colour.__Internal();
            __Internal.OperatorPlus_1(new IntPtr(&__ret), value, __arg1);
            return global::FlounderSharp.Colour.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Colour operator -(float value, global::FlounderSharp.Colour left)
        {
            var __arg1 = ReferenceEquals(left, null) ? new global::FlounderSharp.Colour.__Internal() : *(global::FlounderSharp.Colour.__Internal*) left.__Instance;
            var __ret = new global::FlounderSharp.Colour.__Internal();
            __Internal.OperatorMinus_1(new IntPtr(&__ret), value, __arg1);
            return global::FlounderSharp.Colour.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Colour operator *(float value, global::FlounderSharp.Colour left)
        {
            var __arg1 = ReferenceEquals(left, null) ? new global::FlounderSharp.Colour.__Internal() : *(global::FlounderSharp.Colour.__Internal*) left.__Instance;
            var __ret = new global::FlounderSharp.Colour.__Internal();
            __Internal.OperatorStar_1(new IntPtr(&__ret), value, __arg1);
            return global::FlounderSharp.Colour.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Colour operator /(float value, global::FlounderSharp.Colour left)
        {
            var __arg1 = ReferenceEquals(left, null) ? new global::FlounderSharp.Colour.__Internal() : *(global::FlounderSharp.Colour.__Internal*) left.__Instance;
            var __ret = new global::FlounderSharp.Colour.__Internal();
            __Internal.OperatorSlash_1(new IntPtr(&__ret), value, __arg1);
            return global::FlounderSharp.Colour.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Colour CLEAR
        {
            get
            {
                var __ptr = (global::FlounderSharp.Colour.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Flounder", "_imp_?CLEAR@Colour@fl@@2V12@B");
                return global::FlounderSharp.Colour.__CreateInstance(*__ptr);
            }
        }

        public static global::FlounderSharp.Colour WHITE
        {
            get
            {
                var __ptr = (global::FlounderSharp.Colour.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Flounder", "_imp_?WHITE@Colour@fl@@2V12@B");
                return global::FlounderSharp.Colour.__CreateInstance(*__ptr);
            }
        }

        public static global::FlounderSharp.Colour BLACK
        {
            get
            {
                var __ptr = (global::FlounderSharp.Colour.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Flounder", "_imp_?BLACK@Colour@fl@@2V12@B");
                return global::FlounderSharp.Colour.__CreateInstance(*__ptr);
            }
        }

        public float R
        {
            get
            {
                var __ret = __Internal.GetR((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetR((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public float G
        {
            get
            {
                var __ret = __Internal.GetG((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetG((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public float B
        {
            get
            {
                var __ret = __Internal.GetB((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetB((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public float A
        {
            get
            {
                var __ret = __Internal.GetA((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetA((__Instance + __PointerAdjustment), __arg0);
            }
        }

        /// <summary>Gets the length squared of this vector.</summary>
        public float LengthSquared
        {
            get
            {
                var __ret = __Internal.LengthSquared((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        /// <summary>Gets the length of this vector.</summary>
        public float Length
        {
            get
            {
                var __ret = __Internal.Length((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        /// <summary>Gets a colour representing the unit value of this colour.</summary>
        public global::FlounderSharp.Colour Unit
        {
            get
            {
                var __ret = new global::FlounderSharp.Colour.__Internal();
                __Internal.GetUnit((__Instance + __PointerAdjustment), new IntPtr(&__ret));
                return global::FlounderSharp.Colour.__CreateInstance(__ret);
            }
        }

        /// <summary>Gets the hex code from this colour.</summary>
        public string Hex
        {
            get
            {
                var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.GetHex((__Instance + __PointerAdjustment), new IntPtr(&__ret));
                var __basicStringRet = global::Std.BasicString<char, global::Std.CharTraits<char>, global::Std.Allocator<char>>.__CreateInstance(__ret);
                var __stringRet = global::Std.BasicStringExtensions.CStr(__basicStringRet);
                __basicStringRet.Dispose(false);
                return __stringRet;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
