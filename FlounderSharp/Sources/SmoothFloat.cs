// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    /// <summary>A class that smoothly increases its value.</summary>
    public unsafe partial class SmoothFloat : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal float m_agility;

            [FieldOffset(4)]
            internal float m_target;

            [FieldOffset(8)]
            internal float m_actual;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SmoothFloat@fl@@QEAA@AEBM0@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, float* initialValue, float* agility);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1SmoothFloat@fl@@QEAA@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Update@SmoothFloat@fl@@QEAAXAEBM@Z")]
            internal static extern void Update(global::System.IntPtr instance, float* delta);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?IncreaseTarget@SmoothFloat@fl@@QEAAXAEBM@Z")]
            internal static extern void IncreaseTarget(global::System.IntPtr instance, float* increase);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Get@SmoothFloat@fl@@QEBAMXZ")]
            internal static extern float Get(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetTarget@SmoothFloat@fl@@QEBAMXZ")]
            internal static extern float GetTarget(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetTarget@SmoothFloat@fl@@QEAAXAEBM@Z")]
            internal static extern void SetTarget(global::System.IntPtr instance, float* target);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.SmoothFloat> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.SmoothFloat>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.SmoothFloat __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.SmoothFloat(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.SmoothFloat __CreateInstance(global::FlounderSharp.SmoothFloat.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.SmoothFloat(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.SmoothFloat.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.SmoothFloat.__Internal));
            *(global::FlounderSharp.SmoothFloat.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SmoothFloat(global::FlounderSharp.SmoothFloat.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SmoothFloat(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        /// <summary>Creates a new smooth float.</summary>
        /// <param name="initialValue">The initial value.</param>
        /// <param name="agility">The agility for increasing actual.</param>
        public SmoothFloat(ref float initialValue, ref float agility)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.SmoothFloat.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            fixed (float* __refParamPtr0 = &initialValue)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &agility)
                {
                    var __arg1 = __refParamPtr1;
                    __Internal.ctor((__Instance + __PointerAdjustment), __arg0, __arg1);
                }
            }
        }

        ~SmoothFloat()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.SmoothFloat __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Updates the driver with the passed time.</summary>
        /// <param name="delta">The time between the last update.</param>
        public void Update(ref float delta)
        {
            fixed (float* __refParamPtr0 = &delta)
            {
                var __arg0 = __refParamPtr0;
                __Internal.Update((__Instance + __PointerAdjustment), __arg0);
            }
        }

        /// <summary>Increases the smooth floats target.</summary>
        /// <param name="increase">How much to increase the target by.</param>
        public void IncreaseTarget(ref float increase)
        {
            fixed (float* __refParamPtr0 = &increase)
            {
                var __arg0 = __refParamPtr0;
                __Internal.IncreaseTarget((__Instance + __PointerAdjustment), __arg0);
            }
        }

        /// <summary>Gets the currently calculated value.</summary>
        public float Get()
        {
            var __ret = __Internal.Get((__Instance + __PointerAdjustment));
            return __ret;
        }

        /// <summary>Gets the smooth floats current target.</summary>
        /// <param name="target">The new target.</param>
        /// <remarks>Sets the target for the smooth float.</remarks>
        public float Target
        {
            get
            {
                var __ret = __Internal.GetTarget((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetTarget((__Instance + __PointerAdjustment), __arg0);
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
