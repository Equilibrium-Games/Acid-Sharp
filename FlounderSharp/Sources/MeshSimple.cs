// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    public unsafe partial class MeshSimple : global::FlounderSharp.Model, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vfptr_IResource;

            [FieldOffset(8)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C m_filename;

            [FieldOffset(40)]
            internal global::System.IntPtr m_vertexBuffer;

            [FieldOffset(48)]
            internal global::System.IntPtr m_indexBuffer;

            [FieldOffset(56)]
            internal global::System.IntPtr m_aabb;

            [FieldOffset(64)]
            internal float m_sideLength;

            [FieldOffset(68)]
            internal float m_squareSize;

            [FieldOffset(72)]
            internal int m_vertexCount;

            [FieldOffset(76)]
            internal float m_textureScale;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0MeshSimple@fl@@QEAA@AEBM0AEBH0@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, float* sideLength, float* squareSize, int* vertexCount, float* textureScale);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0MeshSimple@fl@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GenerateMesh@MeshSimple@fl@@IEAAXXZ")]
            internal static extern void GenerateMesh(global::System.IntPtr instance);
        }

        internal static new global::FlounderSharp.MeshSimple __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.MeshSimple(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.MeshSimple __CreateInstance(global::FlounderSharp.MeshSimple.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.MeshSimple(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.MeshSimple.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.MeshSimple.__Internal));
            global::FlounderSharp.MeshSimple.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private MeshSimple(global::FlounderSharp.MeshSimple.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MeshSimple(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public MeshSimple(ref float sideLength, ref float squareSize, ref int vertexCount, ref float textureScale)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.MeshSimple.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            fixed (float* __refParamPtr0 = &sideLength)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &squareSize)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &vertexCount)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (float* __refParamPtr3 = &textureScale)
                        {
                            var __arg3 = __refParamPtr3;
                            __Internal.ctor((__Instance + __PointerAdjustment), __arg0, __arg1, __arg2, __arg3);
                        }
                    }
                }
            }
            SetupVTables(GetType().FullName == "FlounderSharp.MeshSimple");
        }

        public MeshSimple(global::FlounderSharp.MeshSimple _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.MeshSimple.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
            SetupVTables(GetType().FullName == "FlounderSharp.MeshSimple");
        }

        ~MeshSimple()
        {
            Dispose(false);
        }

        protected void GenerateMesh()
        {
            __Internal.GenerateMesh((__Instance + __PointerAdjustment));
        }

        public virtual global::FlounderSharp.Vector3 GetPosition(ref float x, ref float z)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 3 * 8);
            var ___GetPositionDelegate = (global::FlounderSharp.Delegates.Action_IntPtr_IntPtr_floatPtr_floatPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Action_IntPtr_IntPtr_floatPtr_floatPtr));
            fixed (float* __refParamPtr0 = &x)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &z)
                {
                    var __arg1 = __refParamPtr1;
                    var __ret = new global::FlounderSharp.Vector3.__Internal();
                    ___GetPositionDelegate((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0, __arg1);
                    return global::FlounderSharp.Vector3.__CreateInstance(__ret);
                }
            }
        }

        public virtual global::FlounderSharp.Vector3 GetNormal(global::FlounderSharp.Vector3 position)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 4 * 8);
            var ___GetNormalDelegate = (global::FlounderSharp.Delegates.Action_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Action_IntPtr_IntPtr_IntPtr));
            if (ReferenceEquals(position, null))
                throw new global::System.ArgumentNullException("position", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = position.__Instance;
            var __ret = new global::FlounderSharp.Vector3.__Internal();
            ___GetNormalDelegate((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::FlounderSharp.Vector3.__CreateInstance(__ret);
        }

        public virtual global::FlounderSharp.Vector3 GetColour(global::FlounderSharp.Vector3 position, global::FlounderSharp.Vector3 normal)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 8);
            var ___GetColourDelegate = (global::FlounderSharp.Delegates.Action_IntPtr_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Action_IntPtr_IntPtr_IntPtr_IntPtr));
            if (ReferenceEquals(position, null))
                throw new global::System.ArgumentNullException("position", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = position.__Instance;
            if (ReferenceEquals(normal, null))
                throw new global::System.ArgumentNullException("normal", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = normal.__Instance;
            var __ret = new global::FlounderSharp.Vector3.__Internal();
            ___GetColourDelegate((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0, __arg1);
            return global::FlounderSharp.Vector3.__CreateInstance(__ret);
        }

        #region Virtual table interop

        // MeshSimple
        private static global::FlounderSharp.Delegates.Action_IntPtr_int _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr instance, int delete)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.MeshSimple) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // std::string GetFilename() override { return m_filename; }
        private static global::FlounderSharp.Delegates.Action_IntPtr_IntPtr _GetFilenameDelegateInstance;

        private static void _GetFilenameDelegateHook(global::System.IntPtr instance, global::System.IntPtr @return)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.MeshSimple) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Filename;
            var __allocator0 = new global::Std.Allocator<char>();
            var __basicString0 = global::Std.BasicStringExtensions.BasicString(__ret, __allocator0);
            *(global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C*) @return = *(global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C*) __basicString0.__Instance;
        }

        // Vector3 GetPosition(const float &x, const float &z)
        private static global::FlounderSharp.Delegates.Action_IntPtr_IntPtr_floatPtr_floatPtr _GetPositionDelegateInstance;

        private static void _GetPositionDelegateHook(global::System.IntPtr instance, global::System.IntPtr @return, float* x, float* z)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.MeshSimple) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetPosition(ref *x, ref *z);
            *(global::FlounderSharp.Vector3.__Internal*) @return = ReferenceEquals(__ret, null) ? new global::FlounderSharp.Vector3.__Internal() : *(global::FlounderSharp.Vector3.__Internal*) __ret.__Instance;
        }

        // Vector3 GetNormal(const Vector3 &position)
        private static global::FlounderSharp.Delegates.Action_IntPtr_IntPtr_IntPtr _GetNormalDelegateInstance;

        private static void _GetNormalDelegateHook(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr position)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.MeshSimple) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::FlounderSharp.Vector3 __result1;
            if (position == IntPtr.Zero) __result1 = null;
            else if (global::FlounderSharp.Vector3.NativeToManagedMap.ContainsKey(position))
                __result1 = (global::FlounderSharp.Vector3) global::FlounderSharp.Vector3.NativeToManagedMap[position];
            else __result1 = global::FlounderSharp.Vector3.__CreateInstance(position);
            var __ret = __target.GetNormal(__result1);
            *(global::FlounderSharp.Vector3.__Internal*) @return = ReferenceEquals(__ret, null) ? new global::FlounderSharp.Vector3.__Internal() : *(global::FlounderSharp.Vector3.__Internal*) __ret.__Instance;
        }

        // Vector3 GetColour(const Vector3 &position, const Vector3 &normal)
        private static global::FlounderSharp.Delegates.Action_IntPtr_IntPtr_IntPtr_IntPtr _GetColourDelegateInstance;

        private static void _GetColourDelegateHook(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr position, global::System.IntPtr normal)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.MeshSimple) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::FlounderSharp.Vector3 __result1;
            if (position == IntPtr.Zero) __result1 = null;
            else if (global::FlounderSharp.Vector3.NativeToManagedMap.ContainsKey(position))
                __result1 = (global::FlounderSharp.Vector3) global::FlounderSharp.Vector3.NativeToManagedMap[position];
            else __result1 = global::FlounderSharp.Vector3.__CreateInstance(position);
            global::FlounderSharp.Vector3 __result2;
            if (normal == IntPtr.Zero) __result2 = null;
            else if (global::FlounderSharp.Vector3.NativeToManagedMap.ContainsKey(normal))
                __result2 = (global::FlounderSharp.Vector3) global::FlounderSharp.Vector3.NativeToManagedMap[normal];
            else __result2 = global::FlounderSharp.Vector3.__CreateInstance(normal);
            var __ret = __target.GetColour(__result1, __result2);
            *(global::FlounderSharp.Vector3.__Internal*) @return = ReferenceEquals(__ret, null) ? new global::FlounderSharp.Vector3.__Internal() : *(global::FlounderSharp.Vector3.__Internal*) __ret.__Instance;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _GetFilenameDelegateInstance += _GetFilenameDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_GetFilenameDelegateInstance).ToPointer();
                _GetPositionDelegateInstance += _GetPositionDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_GetPositionDelegateInstance).ToPointer();
                _GetNormalDelegateInstance += _GetNormalDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_GetNormalDelegateInstance).ToPointer();
                _GetColourDelegateInstance += _GetColourDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetColourDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(6 * 8);
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 32) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 32);
                    *(void**) (vfptr0 + 40) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 40);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(6 * 8);
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = _Thunks[1];
                    *(void**) (vfptr0 + 24) = _Thunks[2];
                    *(void**) (vfptr0 + 32) = _Thunks[3];
                    *(void**) (vfptr0 + 40) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
