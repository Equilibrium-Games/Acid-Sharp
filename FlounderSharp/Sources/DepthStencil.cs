// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    public unsafe partial class DepthStencil : global::FlounderSharp.IDescriptor, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 72)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vfptr_IDescriptor;

            [FieldOffset(8)]
            internal global::System.IntPtr m_image;

            [FieldOffset(16)]
            internal global::System.IntPtr m_imageMemory;

            [FieldOffset(24)]
            internal global::System.IntPtr m_imageView;

            [FieldOffset(32)]
            internal global::System.IntPtr m_sampler;

            [FieldOffset(40)]
            internal global::VkFormat m_format;

            [FieldOffset(48)]
            internal global::VkDescriptorImageInfo.__Internal m_imageInfo;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0DepthStencil@fl@@QEAA@AEBUVkExtent3D@@@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, global::System.IntPtr extent);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0DepthStencil@fl@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CreateDescriptor@DepthStencil@fl@@SA?AVDescriptorType@2@AEBI0@Z")]
            internal static extern void CreateDescriptor(global::System.IntPtr @return, uint* binding, uint* stage);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetImage@DepthStencil@fl@@QEBAPEAUVkImage_T@@XZ")]
            internal static extern global::System.IntPtr GetImage(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetImageMemory@DepthStencil@fl@@QEBAPEAUVkDeviceMemory_T@@XZ")]
            internal static extern global::System.IntPtr GetImageMemory(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetImageView@DepthStencil@fl@@QEBAPEAUVkImageView_T@@XZ")]
            internal static extern global::System.IntPtr GetImageView(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetFormat@DepthStencil@fl@@QEBA?AW4VkFormat@@XZ")]
            internal static extern global::VkFormat GetFormat(global::System.IntPtr instance);
        }

        internal static new global::FlounderSharp.DepthStencil __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.DepthStencil(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.DepthStencil __CreateInstance(global::FlounderSharp.DepthStencil.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.DepthStencil(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.DepthStencil.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.DepthStencil.__Internal));
            global::FlounderSharp.DepthStencil.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private DepthStencil(global::FlounderSharp.DepthStencil.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DepthStencil(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public DepthStencil(global::VkExtent3D extent)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.DepthStencil.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(extent, null))
                throw new global::System.ArgumentNullException("extent", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = extent.__Instance;
            __Internal.ctor((__Instance + __PointerAdjustment), __arg0);
            SetupVTables(GetType().FullName == "FlounderSharp.DepthStencil");
        }

        public DepthStencil(global::FlounderSharp.DepthStencil _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.DepthStencil.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
            SetupVTables(GetType().FullName == "FlounderSharp.DepthStencil");
        }

        ~DepthStencil()
        {
            Dispose(false);
        }

        public override global::VkWriteDescriptorSet GetWriteDescriptor(ref uint binding, global::FlounderSharp.DescriptorSet descriptorSet)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 8);
            var ___GetWriteDescriptorDelegate = (global::FlounderSharp.Delegates.Action_IntPtr_IntPtr_uintPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Action_IntPtr_IntPtr_uintPtr_IntPtr));
            fixed (uint* __refParamPtr0 = &binding)
            {
                var __arg0 = __refParamPtr0;
                if (ReferenceEquals(descriptorSet, null))
                    throw new global::System.ArgumentNullException("descriptorSet", "Cannot be null because it is a C++ reference (&).");
                var __arg1 = descriptorSet.__Instance;
                var __ret = new global::VkWriteDescriptorSet.__Internal();
                ___GetWriteDescriptorDelegate((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0, __arg1);
                return global::VkWriteDescriptorSet.__CreateInstance(__ret);
            }
        }

        public static implicit operator global::FlounderSharp.DepthStencil(global::VkExtent3D extent)
        {
            return new global::FlounderSharp.DepthStencil(extent);
        }

        public static global::FlounderSharp.DescriptorType CreateDescriptor(ref uint binding, ref uint stage)
        {
            fixed (uint* __refParamPtr0 = &binding)
            {
                var __arg0 = __refParamPtr0;
                fixed (uint* __refParamPtr1 = &stage)
                {
                    var __arg1 = __refParamPtr1;
                    var __ret = new global::FlounderSharp.DescriptorType.__Internal();
                    __Internal.CreateDescriptor(new IntPtr(&__ret), __arg0, __arg1);
                    return global::FlounderSharp.DescriptorType.__CreateInstance(__ret);
                }
            }
        }

        public global::VkImageT Image
        {
            get
            {
                var __ret = __Internal.GetImage((__Instance + __PointerAdjustment));
                global::VkImageT __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::VkImageT.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::VkImageT) global::VkImageT.NativeToManagedMap[__ret];
                else __result0 = global::VkImageT.__CreateInstance(__ret);
                return __result0;
            }
        }

        public global::VkDeviceMemoryT ImageMemory
        {
            get
            {
                var __ret = __Internal.GetImageMemory((__Instance + __PointerAdjustment));
                global::VkDeviceMemoryT __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::VkDeviceMemoryT.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::VkDeviceMemoryT) global::VkDeviceMemoryT.NativeToManagedMap[__ret];
                else __result0 = global::VkDeviceMemoryT.__CreateInstance(__ret);
                return __result0;
            }
        }

        public global::VkImageViewT ImageView
        {
            get
            {
                var __ret = __Internal.GetImageView((__Instance + __PointerAdjustment));
                global::VkImageViewT __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::VkImageViewT.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::VkImageViewT) global::VkImageViewT.NativeToManagedMap[__ret];
                else __result0 = global::VkImageViewT.__CreateInstance(__ret);
                return __result0;
            }
        }

        public global::VkFormat Format
        {
            get
            {
                var __ret = __Internal.GetFormat((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        #region Virtual table interop

        // ~DepthStencil()
        private static global::FlounderSharp.Delegates.Action_IntPtr_int _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr instance, int delete)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.DepthStencil) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // VkWriteDescriptorSet GetWriteDescriptor(const uint32_t &binding, const DescriptorSet &descriptorSet) const override
        private static global::FlounderSharp.Delegates.Action_IntPtr_IntPtr_uintPtr_IntPtr _GetWriteDescriptorDelegateInstance;

        private static void _GetWriteDescriptorDelegateHook(global::System.IntPtr instance, global::System.IntPtr @return, uint* binding, global::System.IntPtr descriptorSet)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.DepthStencil) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::FlounderSharp.DescriptorSet __result2;
            if (descriptorSet == IntPtr.Zero) __result2 = null;
            else if (global::FlounderSharp.DescriptorSet.NativeToManagedMap.ContainsKey(descriptorSet))
                __result2 = (global::FlounderSharp.DescriptorSet) global::FlounderSharp.DescriptorSet.NativeToManagedMap[descriptorSet];
            else __result2 = global::FlounderSharp.DescriptorSet.__CreateInstance(descriptorSet);
            var __ret = __target.GetWriteDescriptor(ref *binding, __result2);
            *(global::VkWriteDescriptorSet.__Internal*) @return = ReferenceEquals(__ret, null) ? new global::VkWriteDescriptorSet.__Internal() : *(global::VkWriteDescriptorSet.__Internal*) __ret.__Instance;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[2];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _GetWriteDescriptorDelegateInstance += _GetWriteDescriptorDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_GetWriteDescriptorDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(3 * 8);
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(3 * 8);
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = _Thunks[1];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
