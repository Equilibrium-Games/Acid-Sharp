// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    /// <summary>Holds a 4x4 matrix.</summary>
    public unsafe partial class Matrix4 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 64)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::FlounderSharp.Matrix4._.__Internal _;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Matrix4@fl@@QEAA@XZ")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Matrix4@fl@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr source);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Matrix4@fl@@QEAA@QEBM@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, float[] source);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1Matrix4@fl@@QEAA@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Add@Matrix4@fl@@QEBA?AV12@AEBV12@@Z")]
            internal static extern void Add(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Subtract@Matrix4@fl@@QEBA?AV12@AEBV12@@Z")]
            internal static extern void Subtract(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Multiply@Matrix4@fl@@QEBA?AV12@AEBV12@@Z")]
            internal static extern void Multiply(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Multiply@Matrix4@fl@@QEBA?AVVector4@2@AEBV32@@Z")]
            internal static extern void Multiply_1(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Divide@Matrix4@fl@@QEBA?AV12@AEBV12@@Z")]
            internal static extern void Divide(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Transform@Matrix4@fl@@QEBA?AVVector4@2@AEBV32@@Z")]
            internal static extern void Transform(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Translate@Matrix4@fl@@QEBA?AV12@AEBVVector2@2@@Z")]
            internal static extern void Translate(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Translate@Matrix4@fl@@QEBA?AV12@AEBVVector3@2@@Z")]
            internal static extern void Translate_1(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Scale@Matrix4@fl@@QEBA?AV12@AEBVVector3@2@@Z")]
            internal static extern void Scale(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Scale@Matrix4@fl@@QEBA?AV12@AEBVVector4@2@@Z")]
            internal static extern void Scale_1(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Rotate@Matrix4@fl@@QEBA?AV12@AEBMAEBVVector3@2@@Z")]
            internal static extern void Rotate(global::System.IntPtr instance, global::System.IntPtr @return, float* angle, global::System.IntPtr axis);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Negate@Matrix4@fl@@QEBA?AV12@XZ")]
            internal static extern void Negate(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?TransformationMatrix@Matrix4@fl@@SA?AV12@AEBVVector3@2@00@Z")]
            internal static extern void TransformationMatrix(global::System.IntPtr @return, global::System.IntPtr translation, global::System.IntPtr rotation, global::System.IntPtr scale);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?TransformationMatrix@Matrix4@fl@@SA?AV12@AEBVVector2@2@AEBM@Z")]
            internal static extern void TransformationMatrix(global::System.IntPtr @return, global::System.IntPtr translation, float* scale);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?TransformationMatrix@Matrix4@fl@@SA?AV12@AEBVVector2@2@AEBVVector3@2@@Z")]
            internal static extern void TransformationMatrix(global::System.IntPtr @return, global::System.IntPtr translation, global::System.IntPtr scale);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?TransformationMatrix@Matrix4@fl@@SA?AV12@AEBVVector3@2@0AEBM@Z")]
            internal static extern void TransformationMatrix(global::System.IntPtr @return, global::System.IntPtr translation, global::System.IntPtr rotation, float* scale);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?PerspectiveMatrix@Matrix4@fl@@SA?AV12@AEBM000@Z")]
            internal static extern void PerspectiveMatrix(global::System.IntPtr @return, float* fov, float* aspectRatio, float* zNear, float* zFar);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?OrthographicMatrix@Matrix4@fl@@SA?AV12@AEBM00000@Z")]
            internal static extern void OrthographicMatrix(global::System.IntPtr @return, float* left, float* right, float* bottom, float* top, float* near, float* far);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?ViewMatrix@Matrix4@fl@@SA?AV12@AEBVVector3@2@0@Z")]
            internal static extern void ViewMatrix(global::System.IntPtr @return, global::System.IntPtr position, global::System.IntPtr rotation);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?WorldToScreenSpace@Matrix4@fl@@SA?AVVector3@2@AEBV32@AEBV12@1@Z")]
            internal static extern void WorldToScreenSpace(global::System.IntPtr @return, global::System.IntPtr worldSpace, global::System.IntPtr viewMatrix, global::System.IntPtr projectionMatrix);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetZero@Matrix4@fl@@QEAA?AV12@XZ")]
            internal static extern void SetZero(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetIdentity@Matrix4@fl@@QEAA?AV12@XZ")]
            internal static extern void SetIdentity(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?ToArray@Matrix4@fl@@QEBAPEAMXZ")]
            internal static extern float* ToArray(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Write@Matrix4@fl@@QEAAXPEAVLoadedValue@2@@Z")]
            internal static extern void Write(global::System.IntPtr instance, global::System.IntPtr destination);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??8Matrix4@fl@@QEBA_NAEBV01@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??9Matrix4@fl@@QEBA_NAEBV01@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??GMatrix4@fl@@QEAA?AV01@XZ")]
            internal static extern void OperatorMinus(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?ToString@Matrix4@fl@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ")]
            internal static extern void ToString(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Hfl@@YA?AVMatrix4@0@V10@AEBV10@@Z")]
            internal static extern void OperatorPlus(global::System.IntPtr @return, global::FlounderSharp.Matrix4.__Internal left, global::System.IntPtr right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Gfl@@YA?AVMatrix4@0@V10@AEBV10@@Z")]
            internal static extern void OperatorMinus(global::System.IntPtr @return, global::FlounderSharp.Matrix4.__Internal left, global::System.IntPtr right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Dfl@@YA?AVMatrix4@0@V10@AEBV10@@Z")]
            internal static extern void OperatorStar(global::System.IntPtr @return, global::FlounderSharp.Matrix4.__Internal left, global::System.IntPtr right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Kfl@@YA?AVMatrix4@0@V10@AEBV10@@Z")]
            internal static extern void OperatorSlash(global::System.IntPtr @return, global::FlounderSharp.Matrix4.__Internal left, global::System.IntPtr right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Dfl@@YA?AVMatrix4@0@V10@VVector4@0@@Z")]
            internal static extern void OperatorStar(global::System.IntPtr @return, global::FlounderSharp.Matrix4.__Internal left, global::FlounderSharp.Vector4.__Internal value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Kfl@@YA?AVMatrix4@0@V10@VVector4@0@@Z")]
            internal static extern void OperatorSlash(global::System.IntPtr @return, global::FlounderSharp.Matrix4.__Internal left, global::FlounderSharp.Vector4.__Internal value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Dfl@@YA?AVMatrix4@0@V10@M@Z")]
            internal static extern void OperatorStar_1(global::System.IntPtr @return, global::FlounderSharp.Matrix4.__Internal left, float value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Kfl@@YA?AVMatrix4@0@V10@M@Z")]
            internal static extern void OperatorSlash_1(global::System.IntPtr @return, global::FlounderSharp.Matrix4.__Internal left, float value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Dfl@@YA?AVMatrix4@0@MV10@@Z")]
            internal static extern void OperatorStar_2(global::System.IntPtr @return, float value, global::FlounderSharp.Matrix4.__Internal left);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Kfl@@YA?AVMatrix4@0@MV10@@Z")]
            internal static extern void OperatorSlash_2(global::System.IntPtr @return, float value, global::FlounderSharp.Matrix4.__Internal left);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Invert@Matrix4@fl@@QEBA?AV12@XZ")]
            internal static extern void Invert(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Transpose@Matrix4@fl@@QEBA?AV12@XZ")]
            internal static extern void Transpose(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Determinant@Matrix4@fl@@QEBAMXZ")]
            internal static extern float Determinant(global::System.IntPtr instance);
        }

        public unsafe partial struct _
        {
            [StructLayout(LayoutKind.Explicit, Size = 64)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::FlounderSharp.Matrix4._.__.__Internal __;

                [FieldOffset(0)]
                internal global::FlounderSharp.Matrix4._.__.__Internal __1;

                [FieldOffset(0)]
                internal global::FlounderSharp.Matrix4._.__.__Internal __2;
            }

            public unsafe partial class __
            {
                [StructLayout(LayoutKind.Explicit, Size = 32)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal global::System.IntPtr m_0;

                    [FieldOffset(8)]
                    internal global::System.IntPtr m_1;

                    [FieldOffset(16)]
                    internal global::System.IntPtr m_2;

                    [FieldOffset(24)]
                    internal global::System.IntPtr m_3;
                }
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.Matrix4> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.Matrix4>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.Matrix4 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Matrix4(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.Matrix4 __CreateInstance(global::FlounderSharp.Matrix4.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Matrix4(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.Matrix4.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Matrix4.__Internal));
            global::FlounderSharp.Matrix4.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private Matrix4(global::FlounderSharp.Matrix4.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Matrix4(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        /// <summary>Constructor for Matrix4. The matrix is initialised to the identity.</summary>
        public Matrix4()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Matrix4.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor((__Instance + __PointerAdjustment));
        }

        /// <summary>Constructor for Matrix4.</summary>
        /// <param name="source">Creates this matrix out of a existing one.</param>
        public Matrix4(global::FlounderSharp.Matrix4 source)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Matrix4.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(source, null))
                throw new global::System.ArgumentNullException("source", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = source.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
        }

        /// <summary>Constructor for Matrix4.</summary>
        /// <param name="source">Creates this matrix out of a 16 element array.</param>
        public Matrix4(float[] source)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Matrix4.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (source == null || source.Length != 16)
                throw new ArgumentOutOfRangeException("source", "The dimensions of the provided array don't match the required size.");
            __Internal.ctor((__Instance + __PointerAdjustment), source);
        }

        ~Matrix4()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.Matrix4 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Adds this matrix to another matrix.</summary>
        /// <param name="other">The other matrix.</param>
        public global::FlounderSharp.Matrix4 Add(global::FlounderSharp.Matrix4 other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::FlounderSharp.Matrix4.__Internal();
            __Internal.Add((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
        }

        /// <summary>Subtracts this matrix to another matrix.</summary>
        /// <param name="other">The other matrix.</param>
        public global::FlounderSharp.Matrix4 Subtract(global::FlounderSharp.Matrix4 other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::FlounderSharp.Matrix4.__Internal();
            __Internal.Subtract((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
        }

        /// <summary>Multiplies this matrix by another matrix.</summary>
        /// <param name="other">The other matrix.</param>
        public global::FlounderSharp.Matrix4 Multiply(global::FlounderSharp.Matrix4 other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::FlounderSharp.Matrix4.__Internal();
            __Internal.Multiply((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
        }

        /// <summary>Multiplies this matrix by a vector.</summary>
        /// <param name="other">The other vector.</param>
        public global::FlounderSharp.Vector4 Multiply(global::FlounderSharp.Vector4 other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::FlounderSharp.Vector4.__Internal();
            __Internal.Multiply_1((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::FlounderSharp.Vector4.__CreateInstance(__ret);
        }

        /// <summary>Divides this matrix by another matrix.</summary>
        /// <param name="other">The other matrix.</param>
        public global::FlounderSharp.Matrix4 Divide(global::FlounderSharp.Matrix4 other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::FlounderSharp.Matrix4.__Internal();
            __Internal.Divide((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
        }

        /// <summary>Transforms this matrix by a vector.</summary>
        /// <param name="other">The other vector.</param>
        public global::FlounderSharp.Vector4 Transform(global::FlounderSharp.Vector4 other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::FlounderSharp.Vector4.__Internal();
            __Internal.Transform((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::FlounderSharp.Vector4.__CreateInstance(__ret);
        }

        /// <summary>Translates this matrix by a vector.</summary>
        /// <param name="other">The vector.</param>
        public global::FlounderSharp.Matrix4 Translate(global::FlounderSharp.Vector2 other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::FlounderSharp.Matrix4.__Internal();
            __Internal.Translate((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
        }

        /// <summary>Translates this matrix by a vector.</summary>
        /// <param name="other">The vector.</param>
        public global::FlounderSharp.Matrix4 Translate(global::FlounderSharp.Vector3 other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::FlounderSharp.Matrix4.__Internal();
            __Internal.Translate_1((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
        }

        /// <summary>Scales this matrix by a vector.</summary>
        /// <param name="other">The other vector.</param>
        public global::FlounderSharp.Matrix4 Scale(global::FlounderSharp.Vector3 other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::FlounderSharp.Matrix4.__Internal();
            __Internal.Scale((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
        }

        /// <summary>Scales this matrix by a vector.</summary>
        /// <param name="other">The other vector.</param>
        public global::FlounderSharp.Matrix4 Scale(global::FlounderSharp.Vector4 other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::FlounderSharp.Matrix4.__Internal();
            __Internal.Scale_1((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
        }

        /// <summary>Rotates this matrix around the given axis the specified angle.</summary>
        /// <param name="angle">the angle, in radians.</param>
        /// <param name="axis">The vector representing the rotation axis.</param>
        public global::FlounderSharp.Matrix4 Rotate(ref float angle, global::FlounderSharp.Vector3 axis)
        {
            fixed (float* __refParamPtr0 = &angle)
            {
                var __arg0 = __refParamPtr0;
                if (ReferenceEquals(axis, null))
                    throw new global::System.ArgumentNullException("axis", "Cannot be null because it is a C++ reference (&).");
                var __arg1 = axis.__Instance;
                var __ret = new global::FlounderSharp.Matrix4.__Internal();
                __Internal.Rotate((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0, __arg1);
                return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
            }
        }

        /// <summary>Inverts this matrix.</summary>
        public global::FlounderSharp.Matrix4 Negate()
        {
            var __ret = new global::FlounderSharp.Matrix4.__Internal();
            __Internal.Negate((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
        }

        /// <summary>Sets this matrix to 0.</summary>
        public global::FlounderSharp.Matrix4 SetZero()
        {
            var __ret = new global::FlounderSharp.Matrix4.__Internal();
            __Internal.SetZero((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
        }

        /// <summary>Sets this matrix to be the identity matrix.</summary>
        public global::FlounderSharp.Matrix4 SetIdentity()
        {
            var __ret = new global::FlounderSharp.Matrix4.__Internal();
            __Internal.SetIdentity((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
        }

        /// <summary>Turns this 4x4 matrix into an array.</summary>
        public float* ToArray()
        {
            var __ret = __Internal.ToArray((__Instance + __PointerAdjustment));
            return __ret;
        }

        /// <summary>Saves this matrix into a loaded value.</summary>
        /// <param name="destination">The destination loaded value.</param>
        public void Write(global::FlounderSharp.LoadedValue destination)
        {
            var __arg0 = ReferenceEquals(destination, null) ? global::System.IntPtr.Zero : destination.__Instance;
            __Internal.Write((__Instance + __PointerAdjustment), __arg0);
        }

        public static bool operator ==(global::FlounderSharp.Matrix4 __op, global::FlounderSharp.Matrix4 other)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool otherNull = ReferenceEquals(other, null);
            if (__opNull || otherNull)
                return __opNull && otherNull;
            var __arg0 = __op.__Instance;
            var __arg1 = other.__Instance;
            var __ret = __Internal.OperatorEqualEqual(__arg0, __arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as global::FlounderSharp.Matrix4;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(global::FlounderSharp.Matrix4.__Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(global::FlounderSharp.Matrix4 __op, global::FlounderSharp.Matrix4 other)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool otherNull = ReferenceEquals(other, null);
            if (__opNull || otherNull)
                return !(__opNull && otherNull);
            var __arg0 = __op.__Instance;
            var __arg1 = other.__Instance;
            var __ret = __Internal.OperatorExclaimEqual(__arg0, __arg1);
            return __ret;
        }

        public static global::FlounderSharp.Matrix4 operator -(global::FlounderSharp.Matrix4 __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = __op.__Instance;
            var __ret = new global::FlounderSharp.Matrix4.__Internal();
            __Internal.OperatorMinus(__arg0, new IntPtr(&__ret));
            return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
        }

        public string ToString()
        {
            var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
            __Internal.ToString((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            var __basicStringRet = global::Std.BasicString<char, global::Std.CharTraits<char>, global::Std.Allocator<char>>.__CreateInstance(__ret);
            var __stringRet = global::Std.BasicStringExtensions.CStr(__basicStringRet);
            __basicStringRet.Dispose(false);
            return __stringRet;
        }

        public static implicit operator global::FlounderSharp.Matrix4(float[] source)
        {
            return new global::FlounderSharp.Matrix4(source);
        }

        /// <summary>Creates a new transformation matrix for a object in 3d space.</summary>
        /// <param name="translation">Translation amount the XYZ.</param>
        /// <param name="rotation">Rotation amount the XYZ.</param>
        /// <param name="scale">How much to scale the matrix.</param>
        public static global::FlounderSharp.Matrix4 TransformationMatrix(global::FlounderSharp.Vector3 translation, global::FlounderSharp.Vector3 rotation, global::FlounderSharp.Vector3 scale)
        {
            if (ReferenceEquals(translation, null))
                throw new global::System.ArgumentNullException("translation", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = translation.__Instance;
            if (ReferenceEquals(rotation, null))
                throw new global::System.ArgumentNullException("rotation", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = rotation.__Instance;
            if (ReferenceEquals(scale, null))
                throw new global::System.ArgumentNullException("scale", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = scale.__Instance;
            var __ret = new global::FlounderSharp.Matrix4.__Internal();
            __Internal.TransformationMatrix(new IntPtr(&__ret), __arg0, __arg1, __arg2);
            return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
        }

        /// <summary>Creates a new transformation matrix for a object in 2d space.</summary>
        /// <param name="translation">Translation amount the XY.</param>
        /// <param name="scale">How much to scale the matrix.</param>
        public static global::FlounderSharp.Matrix4 TransformationMatrix(global::FlounderSharp.Vector2 translation, ref float scale)
        {
            if (ReferenceEquals(translation, null))
                throw new global::System.ArgumentNullException("translation", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = translation.__Instance;
            fixed (float* __refParamPtr1 = &scale)
            {
                var __arg1 = __refParamPtr1;
                var __ret = new global::FlounderSharp.Matrix4.__Internal();
                __Internal.TransformationMatrix(new IntPtr(&__ret), __arg0, __arg1);
                return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
            }
        }

        /// <summary>Creates a new transformation matrix for a object in 2d space.</summary>
        /// <param name="translation">Translation amount the XY.</param>
        /// <param name="scale">How much to scale the matrix.</param>
        public static global::FlounderSharp.Matrix4 TransformationMatrix(global::FlounderSharp.Vector2 translation, global::FlounderSharp.Vector3 scale)
        {
            if (ReferenceEquals(translation, null))
                throw new global::System.ArgumentNullException("translation", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = translation.__Instance;
            if (ReferenceEquals(scale, null))
                throw new global::System.ArgumentNullException("scale", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = scale.__Instance;
            var __ret = new global::FlounderSharp.Matrix4.__Internal();
            __Internal.TransformationMatrix(new IntPtr(&__ret), __arg0, __arg1);
            return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
        }

        /// <summary>Creates a new transformation matrix for a object in 3d space.</summary>
        /// <param name="translation">Translation amount the XYZ.</param>
        /// <param name="rotation">Rotation amount the XYZ.</param>
        /// <param name="scale">How much to scale the matrix.</param>
        public static global::FlounderSharp.Matrix4 TransformationMatrix(global::FlounderSharp.Vector3 translation, global::FlounderSharp.Vector3 rotation, ref float scale)
        {
            if (ReferenceEquals(translation, null))
                throw new global::System.ArgumentNullException("translation", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = translation.__Instance;
            if (ReferenceEquals(rotation, null))
                throw new global::System.ArgumentNullException("rotation", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = rotation.__Instance;
            fixed (float* __refParamPtr2 = &scale)
            {
                var __arg2 = __refParamPtr2;
                var __ret = new global::FlounderSharp.Matrix4.__Internal();
                __Internal.TransformationMatrix(new IntPtr(&__ret), __arg0, __arg1, __arg2);
                return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
            }
        }

        /// <summary>Creates a new perspective matrix.</summary>
        /// <param name="fov">The cameras FOV.</param>
        /// <param name="aspectRatio">The cameras aspect ratio.</param>
        /// <param name="zNear">The cameras near plane.</param>
        /// <param name="zFar">The cameras far plane.</param>
        public static global::FlounderSharp.Matrix4 PerspectiveMatrix(ref float fov, ref float aspectRatio, ref float zNear, ref float zFar)
        {
            fixed (float* __refParamPtr0 = &fov)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &aspectRatio)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &zNear)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (float* __refParamPtr3 = &zFar)
                        {
                            var __arg3 = __refParamPtr3;
                            var __ret = new global::FlounderSharp.Matrix4.__Internal();
                            __Internal.PerspectiveMatrix(new IntPtr(&__ret), __arg0, __arg1, __arg2, __arg3);
                            return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
                        }
                    }
                }
            }
        }

        /// <summary>Creates a new orthographic matrix.</summary>
        /// <param name="left">The left plane.</param>
        /// <param name="right">The right plane.</param>
        /// <param name="bottom">The bottom plane.</param>
        /// <param name="top">The top plane.</param>
        /// <param name="near">The near plane.</param>
        /// <param name="far">The far plane.</param>
        /// <param name="destination">The destination matrix or nullptr if a new matrix is to be created.</param>
        public static global::FlounderSharp.Matrix4 OrthographicMatrix(ref float left, ref float right, ref float bottom, ref float top, ref float near, ref float far)
        {
            fixed (float* __refParamPtr0 = &left)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &right)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &bottom)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (float* __refParamPtr3 = &top)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (float* __refParamPtr4 = &near)
                            {
                                var __arg4 = __refParamPtr4;
                                fixed (float* __refParamPtr5 = &far)
                                {
                                    var __arg5 = __refParamPtr5;
                                    var __ret = new global::FlounderSharp.Matrix4.__Internal();
                                    __Internal.OrthographicMatrix(new IntPtr(&__ret), __arg0, __arg1, __arg2, __arg3, __arg4, __arg5);
                                    return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>Creates a new view matrix.</summary>
        /// <param name="position">The cameras position.</param>
        /// <param name="rotation">The cameras rotation.</param>
        public static global::FlounderSharp.Matrix4 ViewMatrix(global::FlounderSharp.Vector3 position, global::FlounderSharp.Vector3 rotation)
        {
            if (ReferenceEquals(position, null))
                throw new global::System.ArgumentNullException("position", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = position.__Instance;
            if (ReferenceEquals(rotation, null))
                throw new global::System.ArgumentNullException("rotation", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = rotation.__Instance;
            var __ret = new global::FlounderSharp.Matrix4.__Internal();
            __Internal.ViewMatrix(new IntPtr(&__ret), __arg0, __arg1);
            return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
        }

        /// <summary>Transforms a 3D world point into screen space.</summary>
        /// <param name="worldSpace">The point to get into screen space.</param>
        /// <param name="viewMatrix">The cameras view matrix.</param>
        /// <param name="projectionMatrix">The cameras projection matrix.</param>
        public static global::FlounderSharp.Vector3 WorldToScreenSpace(global::FlounderSharp.Vector3 worldSpace, global::FlounderSharp.Matrix4 viewMatrix, global::FlounderSharp.Matrix4 projectionMatrix)
        {
            if (ReferenceEquals(worldSpace, null))
                throw new global::System.ArgumentNullException("worldSpace", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = worldSpace.__Instance;
            if (ReferenceEquals(viewMatrix, null))
                throw new global::System.ArgumentNullException("viewMatrix", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = viewMatrix.__Instance;
            if (ReferenceEquals(projectionMatrix, null))
                throw new global::System.ArgumentNullException("projectionMatrix", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = projectionMatrix.__Instance;
            var __ret = new global::FlounderSharp.Vector3.__Internal();
            __Internal.WorldToScreenSpace(new IntPtr(&__ret), __arg0, __arg1, __arg2);
            return global::FlounderSharp.Vector3.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Matrix4 operator +(global::FlounderSharp.Matrix4 left, global::FlounderSharp.Matrix4 right)
        {
            var __arg0 = ReferenceEquals(left, null) ? new global::FlounderSharp.Matrix4.__Internal() : *(global::FlounderSharp.Matrix4.__Internal*) left.__Instance;
            if (ReferenceEquals(right, null))
                throw new global::System.ArgumentNullException("right", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = right.__Instance;
            var __ret = new global::FlounderSharp.Matrix4.__Internal();
            __Internal.OperatorPlus(new IntPtr(&__ret), __arg0, __arg1);
            return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Matrix4 operator -(global::FlounderSharp.Matrix4 left, global::FlounderSharp.Matrix4 right)
        {
            var __arg0 = ReferenceEquals(left, null) ? new global::FlounderSharp.Matrix4.__Internal() : *(global::FlounderSharp.Matrix4.__Internal*) left.__Instance;
            if (ReferenceEquals(right, null))
                throw new global::System.ArgumentNullException("right", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = right.__Instance;
            var __ret = new global::FlounderSharp.Matrix4.__Internal();
            __Internal.OperatorMinus(new IntPtr(&__ret), __arg0, __arg1);
            return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Matrix4 operator *(global::FlounderSharp.Matrix4 left, global::FlounderSharp.Matrix4 right)
        {
            var __arg0 = ReferenceEquals(left, null) ? new global::FlounderSharp.Matrix4.__Internal() : *(global::FlounderSharp.Matrix4.__Internal*) left.__Instance;
            if (ReferenceEquals(right, null))
                throw new global::System.ArgumentNullException("right", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = right.__Instance;
            var __ret = new global::FlounderSharp.Matrix4.__Internal();
            __Internal.OperatorStar(new IntPtr(&__ret), __arg0, __arg1);
            return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Matrix4 operator /(global::FlounderSharp.Matrix4 left, global::FlounderSharp.Matrix4 right)
        {
            var __arg0 = ReferenceEquals(left, null) ? new global::FlounderSharp.Matrix4.__Internal() : *(global::FlounderSharp.Matrix4.__Internal*) left.__Instance;
            if (ReferenceEquals(right, null))
                throw new global::System.ArgumentNullException("right", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = right.__Instance;
            var __ret = new global::FlounderSharp.Matrix4.__Internal();
            __Internal.OperatorSlash(new IntPtr(&__ret), __arg0, __arg1);
            return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Matrix4 operator *(global::FlounderSharp.Matrix4 left, global::FlounderSharp.Vector4 value)
        {
            var __arg0 = ReferenceEquals(left, null) ? new global::FlounderSharp.Matrix4.__Internal() : *(global::FlounderSharp.Matrix4.__Internal*) left.__Instance;
            var __arg1 = ReferenceEquals(value, null) ? new global::FlounderSharp.Vector4.__Internal() : *(global::FlounderSharp.Vector4.__Internal*) value.__Instance;
            var __ret = new global::FlounderSharp.Matrix4.__Internal();
            __Internal.OperatorStar(new IntPtr(&__ret), __arg0, __arg1);
            return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Matrix4 operator /(global::FlounderSharp.Matrix4 left, global::FlounderSharp.Vector4 value)
        {
            var __arg0 = ReferenceEquals(left, null) ? new global::FlounderSharp.Matrix4.__Internal() : *(global::FlounderSharp.Matrix4.__Internal*) left.__Instance;
            var __arg1 = ReferenceEquals(value, null) ? new global::FlounderSharp.Vector4.__Internal() : *(global::FlounderSharp.Vector4.__Internal*) value.__Instance;
            var __ret = new global::FlounderSharp.Matrix4.__Internal();
            __Internal.OperatorSlash(new IntPtr(&__ret), __arg0, __arg1);
            return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Matrix4 operator *(global::FlounderSharp.Matrix4 left, float value)
        {
            var __arg0 = ReferenceEquals(left, null) ? new global::FlounderSharp.Matrix4.__Internal() : *(global::FlounderSharp.Matrix4.__Internal*) left.__Instance;
            var __ret = new global::FlounderSharp.Matrix4.__Internal();
            __Internal.OperatorStar_1(new IntPtr(&__ret), __arg0, value);
            return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Matrix4 operator /(global::FlounderSharp.Matrix4 left, float value)
        {
            var __arg0 = ReferenceEquals(left, null) ? new global::FlounderSharp.Matrix4.__Internal() : *(global::FlounderSharp.Matrix4.__Internal*) left.__Instance;
            var __ret = new global::FlounderSharp.Matrix4.__Internal();
            __Internal.OperatorSlash_1(new IntPtr(&__ret), __arg0, value);
            return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Matrix4 operator *(float value, global::FlounderSharp.Matrix4 left)
        {
            var __arg1 = ReferenceEquals(left, null) ? new global::FlounderSharp.Matrix4.__Internal() : *(global::FlounderSharp.Matrix4.__Internal*) left.__Instance;
            var __ret = new global::FlounderSharp.Matrix4.__Internal();
            __Internal.OperatorStar_2(new IntPtr(&__ret), value, __arg1);
            return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Matrix4 operator /(float value, global::FlounderSharp.Matrix4 left)
        {
            var __arg1 = ReferenceEquals(left, null) ? new global::FlounderSharp.Matrix4.__Internal() : *(global::FlounderSharp.Matrix4.__Internal*) left.__Instance;
            var __ret = new global::FlounderSharp.Matrix4.__Internal();
            __Internal.OperatorSlash_2(new IntPtr(&__ret), value, __arg1);
            return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Matrix4 IDENTITY
        {
            get
            {
                var __ptr = (global::FlounderSharp.Matrix4.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Flounder", "_imp_?IDENTITY@Matrix4@fl@@2V12@B");
                return global::FlounderSharp.Matrix4.__CreateInstance(*__ptr);
            }
        }

        public static global::FlounderSharp.Matrix4 ZERO
        {
            get
            {
                var __ptr = (global::FlounderSharp.Matrix4.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Flounder", "_imp_?ZERO@Matrix4@fl@@2V12@B");
                return global::FlounderSharp.Matrix4.__CreateInstance(*__ptr);
            }
        }

        /// <summary>Negates this matrix.</summary>
        public global::FlounderSharp.Matrix4 Invert
        {
            get
            {
                var __ret = new global::FlounderSharp.Matrix4.__Internal();
                __Internal.Invert((__Instance + __PointerAdjustment), new IntPtr(&__ret));
                return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
            }
        }

        /// <summary>Transposes this matrix.</summary>
        public global::FlounderSharp.Matrix4 Transpose
        {
            get
            {
                var __ret = new global::FlounderSharp.Matrix4.__Internal();
                __Internal.Transpose((__Instance + __PointerAdjustment), new IntPtr(&__ret));
                return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
            }
        }

        /// <summary>Takes the determinant of this matrix.</summary>
        public float Determinant
        {
            get
            {
                var __ret = __Internal.Determinant((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
