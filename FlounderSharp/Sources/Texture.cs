// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    /// <summary>Class that represents a loaded texture.</summary>
    public unsafe partial class Texture : global::FlounderSharp.IResource, global::FlounderSharp.IBuffer, global::FlounderSharp.IIDescriptor, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 168)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vfptr_IResource;

            [FieldOffset(8)]
            internal global::System.IntPtr vfptr_Buffer;

            [FieldOffset(16)]
            internal ulong m_size;

            [FieldOffset(24)]
            internal global::System.IntPtr m_buffer;

            [FieldOffset(32)]
            internal global::System.IntPtr m_bufferMemory;

            [FieldOffset(40)]
            internal global::System.IntPtr vfptr_IDescriptor;

            [FieldOffset(48)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C m_filename;

            [FieldOffset(80)]
            internal byte m_hasAlpha;

            [FieldOffset(81)]
            internal byte m_repeatEdges;

            [FieldOffset(84)]
            internal uint m_mipLevels;

            [FieldOffset(88)]
            internal byte m_anisotropic;

            [FieldOffset(89)]
            internal byte m_nearest;

            [FieldOffset(92)]
            internal uint m_numberOfRows;

            [FieldOffset(96)]
            internal int m_components;

            [FieldOffset(100)]
            internal int m_width;

            [FieldOffset(104)]
            internal int m_height;

            [FieldOffset(112)]
            internal global::System.IntPtr m_image;

            [FieldOffset(120)]
            internal global::System.IntPtr m_imageView;

            [FieldOffset(128)]
            internal global::System.IntPtr m_sampler;

            [FieldOffset(136)]
            internal global::VkFormat m_format;

            [FieldOffset(144)]
            internal global::VkDescriptorImageInfo.__Internal m_imageInfo;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Texture@fl@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEB_N1111AEBI@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, global::System.IntPtr filename, bool* hasAlpha, bool* repeatEdges, bool* mipmap, bool* anisotropic, bool* nearest, uint* numberOfRows);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Texture@fl@@QEAA@AEBI0AEBW4VkFormat@@AEBW4VkImageLayout@@0PEAM@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, uint* width, uint* height, global::VkFormat* format, global::VkImageLayout* imageLayout, uint* usage, float* pixels);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Texture@fl@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Resource@Texture@fl@@SAPEAV12@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
            internal static extern global::System.IntPtr Resource(global::System.IntPtr filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CreateDescriptor@Texture@fl@@SA?AVDescriptorType@2@AEBI0@Z")]
            internal static extern void CreateDescriptor(global::System.IntPtr @return, uint* binding, uint* stage);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?LoadSize@Texture@fl@@SA_KAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
            internal static extern ulong LoadSize(global::System.IntPtr filepath);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?LoadPixels@Texture@fl@@SAPEAEAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEAH11@Z")]
            internal static extern byte* LoadPixels(global::System.IntPtr filepath, int* width, int* height, int* components);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?DeletePixels@Texture@fl@@SAXPEAE@Z")]
            internal static extern void DeletePixels(byte* pixels);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetMipLevels@Texture@fl@@SAIAEBH00@Z")]
            internal static extern uint GetMipLevels(int* width, int* height, int* depth);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CreateImage@Texture@fl@@SAXAEBH00AEBIAEBW4VkFormat@@AEBW4VkImageTiling@@11AEAPEAUVkImage_T@@AEAPEAUVkDeviceMemory_T@@1@Z")]
            internal static extern void CreateImage(int* width, int* height, int* depth, uint* mipLevels, global::VkFormat* format, global::VkImageTiling* tiling, uint* usage, uint* properties, global::System.IntPtr image, global::System.IntPtr imageMemory, uint* arrayLayers);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?TransitionImageLayout@Texture@fl@@SAXAEBQEAUVkImage_T@@AEBW4VkImageLayout@@1AEBI2@Z")]
            internal static extern void TransitionImageLayout(global::System.IntPtr image, global::VkImageLayout* oldLayout, global::VkImageLayout* newLayout, uint* mipLevels, uint* layerCount);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CopyBufferToImage@Texture@fl@@SAXAEBH00AEBQEAUVkBuffer_T@@AEBQEAUVkImage_T@@AEBI@Z")]
            internal static extern void CopyBufferToImage(int* width, int* height, int* depth, global::System.IntPtr buffer, global::System.IntPtr image, uint* layerCount);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CreateMipmaps@Texture@fl@@SAXAEBQEAUVkImage_T@@AEBH11AEBI2@Z")]
            internal static extern void CreateMipmaps(global::System.IntPtr image, int* width, int* height, int* depth, uint* mipLevels, uint* layerCount);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CreateImageSampler@Texture@fl@@SAXAEB_N0AEBIAEAPEAUVkSampler_T@@@Z")]
            internal static extern void CreateImageSampler(bool* anisotropic, bool* nearest, uint* mipLevels, global::System.IntPtr sampler);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CreateImageView@Texture@fl@@SAXAEBQEAUVkImage_T@@AEBW4VkImageViewType@@AEBW4VkFormat@@AEBIAEAPEAUVkImageView_T@@3@Z")]
            internal static extern void CreateImageView(global::System.IntPtr image, global::VkImageViewType* type, global::VkFormat* format, uint* mipLevels, global::System.IntPtr imageView, uint* layerCount);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?HasAlpha@Texture@fl@@QEBA_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool HasAlpha(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetHasAlpha@Texture@fl@@QEAAXAEB_N@Z")]
            internal static extern void SetHasAlpha(global::System.IntPtr instance, bool* hasAlpha);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetNumberOfRows@Texture@fl@@QEBAIXZ")]
            internal static extern uint GetNumberOfRows(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetNumberOfRows@Texture@fl@@QEAAXAEBI@Z")]
            internal static extern void SetNumberOfRows(global::System.IntPtr instance, uint* numberOfRows);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetImage@Texture@fl@@QEBAPEAUVkImage_T@@XZ")]
            internal static extern global::System.IntPtr GetImage(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetImageView@Texture@fl@@QEBAPEAUVkImageView_T@@XZ")]
            internal static extern global::System.IntPtr GetImageView(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetSampler@Texture@fl@@QEBAPEAUVkSampler_T@@XZ")]
            internal static extern global::System.IntPtr GetSampler(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetSize@Buffer@fl@@QEBA_KXZ")]
            internal static extern ulong GetSize(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetBuffer@Buffer@fl@@QEBAPEAUVkBuffer_T@@XZ")]
            internal static extern global::System.IntPtr GetBuffer(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetBufferMemory@Buffer@fl@@QEBAPEAUVkDeviceMemory_T@@XZ")]
            internal static extern global::System.IntPtr GetBufferMemory(global::System.IntPtr instance);
        }

        internal static new global::FlounderSharp.Texture __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Texture(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.Texture __CreateInstance(global::FlounderSharp.Texture.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Texture(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.Texture.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Texture.__Internal));
            global::FlounderSharp.Texture.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private Texture(global::FlounderSharp.Texture.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Texture(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0), *(void**) (__Instance + 8), *(void**) (__Instance + 40) };
            else
                SetupVTables(true);
        }

        /// <summary>A new texture object.</summary>
        public Texture(string filename, ref bool hasAlpha, ref bool repeatEdges, ref bool mipmap, ref bool anisotropic, ref bool nearest, ref uint numberOfRows)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Texture.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __allocator0 = new global::Std.Allocator<char>();
            var __basicString0 = global::Std.BasicStringExtensions.BasicString(filename, __allocator0);
            var __arg0 = __basicString0.__Instance;
            fixed (bool* __refParamPtr1 = &hasAlpha)
            {
                var __arg1 = __refParamPtr1;
                fixed (bool* __refParamPtr2 = &repeatEdges)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (bool* __refParamPtr3 = &mipmap)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (bool* __refParamPtr4 = &anisotropic)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (bool* __refParamPtr5 = &nearest)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (uint* __refParamPtr6 = &numberOfRows)
                                {
                                    var __arg6 = __refParamPtr6;
                                    __Internal.ctor((__Instance + __PointerAdjustment), __arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6);
                                    __basicString0.Dispose(false);
                                    __allocator0.Dispose();
                                }
                            }
                        }
                    }
                }
            }
            SetupVTables(GetType().FullName == "FlounderSharp.Texture");
        }

        /// <summary>A new empty texture object.</summary>
        public Texture(ref uint width, ref uint height, global::VkFormat* format, global::VkImageLayout* imageLayout, ref uint usage, ref float pixels)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Texture.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            fixed (uint* __refParamPtr0 = &width)
            {
                var __arg0 = __refParamPtr0;
                fixed (uint* __refParamPtr1 = &height)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (uint* __refParamPtr4 = &usage)
                    {
                        var __arg4 = __refParamPtr4;
                        fixed (float* __refParamPtr5 = &pixels)
                        {
                            var __arg5 = __refParamPtr5;
                            __Internal.ctor((__Instance + __PointerAdjustment), __arg0, __arg1, format, imageLayout, __arg4, __arg5);
                        }
                    }
                }
            }
            SetupVTables(GetType().FullName == "FlounderSharp.Texture");
        }

        public Texture(global::FlounderSharp.Texture _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Texture.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
            SetupVTables(GetType().FullName == "FlounderSharp.Texture");
        }

        ~Texture()
        {
            Dispose(false);
        }

        public virtual global::VkWriteDescriptorSet GetWriteDescriptor(ref uint binding, global::FlounderSharp.DescriptorSet descriptorSet)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[2] + 2 * 8);
            var ___GetWriteDescriptorDelegate = (global::FlounderSharp.Delegates.Action_IntPtr_IntPtr_uintPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Action_IntPtr_IntPtr_uintPtr_IntPtr));
            fixed (uint* __refParamPtr0 = &binding)
            {
                var __arg0 = __refParamPtr0;
                if (ReferenceEquals(descriptorSet, null))
                    throw new global::System.ArgumentNullException("descriptorSet", "Cannot be null because it is a C++ reference (&).");
                var __arg1 = descriptorSet.__Instance;
                var __ret = new global::VkWriteDescriptorSet.__Internal();
                ___GetWriteDescriptorDelegate((__Instance + 40), new IntPtr(&__ret), __arg0, __arg1);
                return global::VkWriteDescriptorSet.__CreateInstance(__ret);
            }
        }

        public static global::FlounderSharp.Texture Resource(string filename)
        {
            var __allocator0 = new global::Std.Allocator<char>();
            var __basicString0 = global::Std.BasicStringExtensions.BasicString(filename, __allocator0);
            var __arg0 = __basicString0.__Instance;
            var __ret = __Internal.Resource(__arg0);
            __basicString0.Dispose(false);
            __allocator0.Dispose();
            global::FlounderSharp.Texture __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::FlounderSharp.Texture.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::FlounderSharp.Texture) global::FlounderSharp.Texture.NativeToManagedMap[__ret];
            else global::FlounderSharp.Texture.NativeToManagedMap[__ret] = __result0 = (global::FlounderSharp.Texture) global::FlounderSharp.Texture.__CreateInstance(__ret);
            return __result0;
        }

        public static global::FlounderSharp.DescriptorType CreateDescriptor(ref uint binding, ref uint stage)
        {
            fixed (uint* __refParamPtr0 = &binding)
            {
                var __arg0 = __refParamPtr0;
                fixed (uint* __refParamPtr1 = &stage)
                {
                    var __arg1 = __refParamPtr1;
                    var __ret = new global::FlounderSharp.DescriptorType.__Internal();
                    __Internal.CreateDescriptor(new IntPtr(&__ret), __arg0, __arg1);
                    return global::FlounderSharp.DescriptorType.__CreateInstance(__ret);
                }
            }
        }

        public static ulong LoadSize(string filepath)
        {
            var __allocator0 = new global::Std.Allocator<char>();
            var __basicString0 = global::Std.BasicStringExtensions.BasicString(filepath, __allocator0);
            var __arg0 = __basicString0.__Instance;
            var __ret = __Internal.LoadSize(__arg0);
            __basicString0.Dispose(false);
            __allocator0.Dispose();
            return __ret;
        }

        public static byte* LoadPixels(string filepath, ref int width, ref int height, ref int components)
        {
            var __allocator0 = new global::Std.Allocator<char>();
            var __basicString0 = global::Std.BasicStringExtensions.BasicString(filepath, __allocator0);
            var __arg0 = __basicString0.__Instance;
            fixed (int* __refParamPtr1 = &width)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &height)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &components)
                    {
                        var __arg3 = __refParamPtr3;
                        var __ret = __Internal.LoadPixels(__arg0, __arg1, __arg2, __arg3);
                        __basicString0.Dispose(false);
                        __allocator0.Dispose();
                        return __ret;
                    }
                }
            }
        }

        public static void DeletePixels(byte* pixels)
        {
            __Internal.DeletePixels(pixels);
        }

        public static uint GetMipLevels(ref int width, ref int height, ref int depth)
        {
            fixed (int* __refParamPtr0 = &width)
            {
                var __arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &height)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &depth)
                    {
                        var __arg2 = __refParamPtr2;
                        var __ret = __Internal.GetMipLevels(__arg0, __arg1, __arg2);
                        return __ret;
                    }
                }
            }
        }

        public static void CreateImage(ref int width, ref int height, ref int depth, ref uint mipLevels, global::VkFormat* format, global::VkImageTiling* tiling, ref uint usage, ref uint properties, global::VkImageT image, global::VkDeviceMemoryT imageMemory, ref uint arrayLayers)
        {
            fixed (int* __refParamPtr0 = &width)
            {
                var __arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &height)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &depth)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (uint* __refParamPtr3 = &mipLevels)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (uint* __refParamPtr6 = &usage)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (uint* __refParamPtr7 = &properties)
                                {
                                    var __arg7 = __refParamPtr7;
                                    if (ReferenceEquals(image, null))
                                        throw new global::System.ArgumentNullException("image", "Cannot be null because it is a C++ reference (&).");
                                    var __arg8 = image.__Instance;
                                    if (ReferenceEquals(imageMemory, null))
                                        throw new global::System.ArgumentNullException("imageMemory", "Cannot be null because it is a C++ reference (&).");
                                    var __arg9 = imageMemory.__Instance;
                                    fixed (uint* __refParamPtr10 = &arrayLayers)
                                    {
                                        var __arg10 = __refParamPtr10;
                                        __Internal.CreateImage(__arg0, __arg1, __arg2, __arg3, format, tiling, __arg6, __arg7, __arg8, __arg9, __arg10);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void TransitionImageLayout(global::VkImageT image, global::VkImageLayout* oldLayout, global::VkImageLayout* newLayout, ref uint mipLevels, ref uint layerCount)
        {
            if (ReferenceEquals(image, null))
                throw new global::System.ArgumentNullException("image", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = image.__Instance;
            fixed (uint* __refParamPtr3 = &mipLevels)
            {
                var __arg3 = __refParamPtr3;
                fixed (uint* __refParamPtr4 = &layerCount)
                {
                    var __arg4 = __refParamPtr4;
                    __Internal.TransitionImageLayout(__arg0, oldLayout, newLayout, __arg3, __arg4);
                }
            }
        }

        public static void CopyBufferToImage(ref int width, ref int height, ref int depth, global::VkBufferT buffer, global::VkImageT image, ref uint layerCount)
        {
            fixed (int* __refParamPtr0 = &width)
            {
                var __arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &height)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &depth)
                    {
                        var __arg2 = __refParamPtr2;
                        if (ReferenceEquals(buffer, null))
                            throw new global::System.ArgumentNullException("buffer", "Cannot be null because it is a C++ reference (&).");
                        var __arg3 = buffer.__Instance;
                        if (ReferenceEquals(image, null))
                            throw new global::System.ArgumentNullException("image", "Cannot be null because it is a C++ reference (&).");
                        var __arg4 = image.__Instance;
                        fixed (uint* __refParamPtr5 = &layerCount)
                        {
                            var __arg5 = __refParamPtr5;
                            __Internal.CopyBufferToImage(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5);
                        }
                    }
                }
            }
        }

        public static void CreateMipmaps(global::VkImageT image, ref int width, ref int height, ref int depth, ref uint mipLevels, ref uint layerCount)
        {
            if (ReferenceEquals(image, null))
                throw new global::System.ArgumentNullException("image", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = image.__Instance;
            fixed (int* __refParamPtr1 = &width)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &height)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &depth)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (uint* __refParamPtr4 = &mipLevels)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (uint* __refParamPtr5 = &layerCount)
                            {
                                var __arg5 = __refParamPtr5;
                                __Internal.CreateMipmaps(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5);
                            }
                        }
                    }
                }
            }
        }

        public static void CreateImageSampler(ref bool anisotropic, ref bool nearest, ref uint mipLevels, global::VkSamplerT sampler)
        {
            fixed (bool* __refParamPtr0 = &anisotropic)
            {
                var __arg0 = __refParamPtr0;
                fixed (bool* __refParamPtr1 = &nearest)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (uint* __refParamPtr2 = &mipLevels)
                    {
                        var __arg2 = __refParamPtr2;
                        if (ReferenceEquals(sampler, null))
                            throw new global::System.ArgumentNullException("sampler", "Cannot be null because it is a C++ reference (&).");
                        var __arg3 = sampler.__Instance;
                        __Internal.CreateImageSampler(__arg0, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void CreateImageView(global::VkImageT image, global::VkImageViewType* type, global::VkFormat* format, ref uint mipLevels, global::VkImageViewT imageView, ref uint layerCount)
        {
            if (ReferenceEquals(image, null))
                throw new global::System.ArgumentNullException("image", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = image.__Instance;
            fixed (uint* __refParamPtr3 = &mipLevels)
            {
                var __arg3 = __refParamPtr3;
                if (ReferenceEquals(imageView, null))
                    throw new global::System.ArgumentNullException("imageView", "Cannot be null because it is a C++ reference (&).");
                var __arg4 = imageView.__Instance;
                fixed (uint* __refParamPtr5 = &layerCount)
                {
                    var __arg5 = __refParamPtr5;
                    __Internal.CreateImageView(__arg0, type, format, __arg3, __arg4, __arg5);
                }
            }
        }

        protected ulong MSize
        {
            get
            {
                return ((global::FlounderSharp.Texture.__Internal*) __Instance)->m_size;
            }

            set
            {
                ((global::FlounderSharp.Texture.__Internal*)__Instance)->m_size = value;
            }
        }

        protected global::VkBufferT MBuffer
        {
            get
            {
                global::VkBufferT __result0;
                if (((global::FlounderSharp.Texture.__Internal*) __Instance)->m_buffer == IntPtr.Zero) __result0 = null;
                else if (global::VkBufferT.NativeToManagedMap.ContainsKey(((global::FlounderSharp.Texture.__Internal*) __Instance)->m_buffer))
                    __result0 = (global::VkBufferT) global::VkBufferT.NativeToManagedMap[((global::FlounderSharp.Texture.__Internal*) __Instance)->m_buffer];
                else __result0 = global::VkBufferT.__CreateInstance(((global::FlounderSharp.Texture.__Internal*) __Instance)->m_buffer);
                return __result0;
            }

            set
            {
                ((global::FlounderSharp.Texture.__Internal*)__Instance)->m_buffer = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected global::VkDeviceMemoryT MBufferMemory
        {
            get
            {
                global::VkDeviceMemoryT __result0;
                if (((global::FlounderSharp.Texture.__Internal*) __Instance)->m_bufferMemory == IntPtr.Zero) __result0 = null;
                else if (global::VkDeviceMemoryT.NativeToManagedMap.ContainsKey(((global::FlounderSharp.Texture.__Internal*) __Instance)->m_bufferMemory))
                    __result0 = (global::VkDeviceMemoryT) global::VkDeviceMemoryT.NativeToManagedMap[((global::FlounderSharp.Texture.__Internal*) __Instance)->m_bufferMemory];
                else __result0 = global::VkDeviceMemoryT.__CreateInstance(((global::FlounderSharp.Texture.__Internal*) __Instance)->m_bufferMemory);
                return __result0;
            }

            set
            {
                ((global::FlounderSharp.Texture.__Internal*)__Instance)->m_bufferMemory = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::System.IntPtr __PointerToBuffer
        {
            get
            {
                return __Instance + 8;
            }
        }

        public global::System.IntPtr __PointerToIDescriptor
        {
            get
            {
                return __Instance + 40;
            }
        }

        /// <summary>Gets if the texture has alpha.</summary>
        /// <param name="hasAlpha">If the texture has alpha.</param>
        /// <remarks>Sets if the texture has alpha.</remarks>
        public bool HasAlpha
        {
            get
            {
                var __ret = __Internal.HasAlpha((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetHasAlpha((__Instance + __PointerAdjustment), __arg0);
            }
        }

        /// <summary>Gets the number of texture rows.</summary>
        /// <param name="numberOfRows">The number of texture rows.</param>
        /// <remarks>Sets the number of texture rows.</remarks>
        public uint NumberOfRows
        {
            get
            {
                var __ret = __Internal.GetNumberOfRows((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetNumberOfRows((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public override string Filename
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 8);
                var ___GetFilenameDelegate = (global::FlounderSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Action_IntPtr_IntPtr));
                var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                ___GetFilenameDelegate((__Instance + __PointerAdjustment), new IntPtr(&__ret));
                var __basicStringRet = global::Std.BasicString<char, global::Std.CharTraits<char>, global::Std.Allocator<char>>.__CreateInstance(__ret);
                var __stringRet = global::Std.BasicStringExtensions.CStr(__basicStringRet);
                __basicStringRet.Dispose(false);
                return __stringRet;
            }
        }

        public global::VkImageT Image
        {
            get
            {
                var __ret = __Internal.GetImage((__Instance + __PointerAdjustment));
                global::VkImageT __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::VkImageT.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::VkImageT) global::VkImageT.NativeToManagedMap[__ret];
                else __result0 = global::VkImageT.__CreateInstance(__ret);
                return __result0;
            }
        }

        public global::VkImageViewT ImageView
        {
            get
            {
                var __ret = __Internal.GetImageView((__Instance + __PointerAdjustment));
                global::VkImageViewT __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::VkImageViewT.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::VkImageViewT) global::VkImageViewT.NativeToManagedMap[__ret];
                else __result0 = global::VkImageViewT.__CreateInstance(__ret);
                return __result0;
            }
        }

        public global::VkSamplerT Sampler
        {
            get
            {
                var __ret = __Internal.GetSampler((__Instance + __PointerAdjustment));
                global::VkSamplerT __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::VkSamplerT.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::VkSamplerT) global::VkSamplerT.NativeToManagedMap[__ret];
                else __result0 = global::VkSamplerT.__CreateInstance(__ret);
                return __result0;
            }
        }

        public ulong Size
        {
            get
            {
                var __ret = __Internal.GetSize((__Instance + 8));
                return __ret;
            }
        }

        public global::VkBufferT Buffer
        {
            get
            {
                var __ret = __Internal.GetBuffer((__Instance + 8));
                global::VkBufferT __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::VkBufferT.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::VkBufferT) global::VkBufferT.NativeToManagedMap[__ret];
                else __result0 = global::VkBufferT.__CreateInstance(__ret);
                return __result0;
            }
        }

        public global::VkDeviceMemoryT BufferMemory
        {
            get
            {
                var __ret = __Internal.GetBufferMemory((__Instance + 8));
                global::VkDeviceMemoryT __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::VkDeviceMemoryT.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::VkDeviceMemoryT) global::VkDeviceMemoryT.NativeToManagedMap[__ret];
                else __result0 = global::VkDeviceMemoryT.__CreateInstance(__ret);
                return __result0;
            }
        }

        #region Virtual table interop

        // ~Texture()
        private static global::FlounderSharp.Delegates.Action_IntPtr_int _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr instance, int delete)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.Texture) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // std::string GetFilename() override { return m_filename; }
        private static global::FlounderSharp.Delegates.Action_IntPtr_IntPtr _GetFilenameDelegateInstance;

        private static void _GetFilenameDelegateHook(global::System.IntPtr instance, global::System.IntPtr @return)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.Texture) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Filename;
            var __allocator0 = new global::Std.Allocator<char>();
            var __basicString0 = global::Std.BasicStringExtensions.BasicString(__ret, __allocator0);
            *(global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C*) @return = *(global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C*) __basicString0.__Instance;
        }

        // VkWriteDescriptorSet GetWriteDescriptor(const uint32_t &binding, const DescriptorSet &descriptorSet) const override
        private static global::FlounderSharp.Delegates.Action_IntPtr_IntPtr_uintPtr_IntPtr _GetWriteDescriptorDelegateInstance;

        private static void _GetWriteDescriptorDelegateHook(global::System.IntPtr instance, global::System.IntPtr @return, uint* binding, global::System.IntPtr descriptorSet)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.Texture) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::FlounderSharp.DescriptorSet __result2;
            if (descriptorSet == IntPtr.Zero) __result2 = null;
            else if (global::FlounderSharp.DescriptorSet.NativeToManagedMap.ContainsKey(descriptorSet))
                __result2 = (global::FlounderSharp.DescriptorSet) global::FlounderSharp.DescriptorSet.NativeToManagedMap[descriptorSet];
            else __result2 = global::FlounderSharp.DescriptorSet.__CreateInstance(descriptorSet);
            var __ret = __target.GetWriteDescriptor(ref *binding, __result2);
            *(global::VkWriteDescriptorSet.__Internal*) @return = ReferenceEquals(__ret, null) ? new global::VkWriteDescriptorSet.__Internal() : *(global::VkWriteDescriptorSet.__Internal*) __ret.__Instance;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0), *(void**) (__Instance + 8), *(void**) (__Instance + 40) };

            if (_Thunks == null)
            {
                _Thunks = new void*[3];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _GetFilenameDelegateInstance += _GetFilenameDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_GetFilenameDelegateInstance).ToPointer();
                _GetWriteDescriptorDelegateInstance += _GetWriteDescriptorDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_GetWriteDescriptorDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[3];
                    var vfptr0 = Marshal.AllocHGlobal(3 * 8);
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    var vfptr1 = Marshal.AllocHGlobal(2 * 8);
                    __ManagedVTablesDtorOnly[1] = vfptr1.ToPointer();
                    *(void**) (vfptr1 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 8 + 0);
                    *(void**) (vfptr1 + 8) = _Thunks[0];
                    var vfptr2 = Marshal.AllocHGlobal(3 * 8);
                    __ManagedVTablesDtorOnly[2] = vfptr2.ToPointer();
                    *(void**) (vfptr2 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 40 + 0);
                    *(void**) (vfptr2 + 8) = _Thunks[0];
                    *(void**) (vfptr2 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 40 + 16);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
                *(void**) (__Instance + 8) = __ManagedVTablesDtorOnly[1];
                *(void**) (__Instance + 40) = __ManagedVTablesDtorOnly[2];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[3];
                    var vfptr0 = Marshal.AllocHGlobal(3 * 8);
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = _Thunks[1];
                    var vfptr1 = Marshal.AllocHGlobal(2 * 8);
                    __ManagedVTables[1] = vfptr1.ToPointer();
                    *(void**) (vfptr1 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 8 + 0);
                    *(void**) (vfptr1 + 8) = _Thunks[0];
                    var vfptr2 = Marshal.AllocHGlobal(3 * 8);
                    __ManagedVTables[2] = vfptr2.ToPointer();
                    *(void**) (vfptr2 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 40 + 0);
                    *(void**) (vfptr2 + 8) = _Thunks[0];
                    *(void**) (vfptr2 + 16) = _Thunks[2];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
                *(void**) (__Instance + 8) = __ManagedVTables[1];
                *(void**) (__Instance + 40) = __ManagedVTables[2];
            }
        }

        #endregion
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
