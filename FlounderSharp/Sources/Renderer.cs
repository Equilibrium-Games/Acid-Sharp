// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    public unsafe partial class Renderer : global::FlounderSharp.IModule, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 96)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vfptr_IModule;

            [FieldOffset(8)]
            internal global::System.IntPtr m_managerRender;

            [FieldOffset(16)]
            internal global::Std.Vector.__Internalc__N_std_S_vector_____N_fl_S_RenderStage___N_std_S_allocator__S0_ m_renderStages;

            [FieldOffset(40)]
            internal global::System.IntPtr m_swapchain;

            [FieldOffset(48)]
            internal global::System.IntPtr m_fenceSwapchainImage;

            [FieldOffset(56)]
            internal uint m_activeSwapchainImage;

            [FieldOffset(64)]
            internal global::System.IntPtr m_pipelineCache;

            [FieldOffset(72)]
            internal global::System.IntPtr m_semaphore;

            [FieldOffset(80)]
            internal global::System.IntPtr m_commandPool;

            [FieldOffset(88)]
            internal global::System.IntPtr m_commandBuffer;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Renderer@fl@@QEAA@XZ")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Renderer@fl@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Get@Renderer@fl@@SAPEAV12@XZ")]
            internal static extern global::System.IntPtr Get();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?StartRenderpass@Renderer@fl@@QEAA?AW4VkResult@@AEBQEAUVkCommandBuffer_T@@AEBI@Z")]
            internal static extern global::VkResult StartRenderpass(global::System.IntPtr instance, global::System.IntPtr commandBuffer, uint* i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?EndRenderpass@Renderer@fl@@QEAAXAEBQEAUVkCommandBuffer_T@@AEBI@Z")]
            internal static extern void EndRenderpass(global::System.IntPtr instance, global::System.IntPtr commandBuffer, uint* i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?NextSubpass@Renderer@fl@@QEAAXAEBQEAUVkCommandBuffer_T@@@Z")]
            internal static extern void NextSubpass(global::System.IntPtr instance, global::System.IntPtr commandBuffer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?BeginSingleTimeCommands@Renderer@fl@@SAPEAUVkCommandBuffer_T@@AEBW4VkCommandBufferLevel@@@Z")]
            internal static extern global::System.IntPtr BeginSingleTimeCommands(global::VkCommandBufferLevel* level);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?EndSingleTimeCommands@Renderer@fl@@SAXAEBQEAUVkCommandBuffer_T@@@Z")]
            internal static extern void EndSingleTimeCommands(global::System.IntPtr commandBuffer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?FindMemoryTypeIndex@Renderer@fl@@SAIPEBUVkPhysicalDeviceMemoryProperties@@PEBUVkMemoryRequirements@@AEBI@Z")]
            internal static extern uint FindMemoryTypeIndex(global::System.IntPtr deviceMemoryProperties, global::System.IntPtr memoryRequirements, uint* requiredProperties);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetRenderStage@Renderer@fl@@QEBAPEAVRenderStage@2@AEBH@Z")]
            internal static extern global::System.IntPtr GetRenderStage(global::System.IntPtr instance, int* i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetManager@Renderer@fl@@QEBAPEAVIManagerRender@2@XZ")]
            internal static extern global::System.IntPtr GetManager(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetManager@Renderer@fl@@QEAAXPEAVIManagerRender@2@@Z")]
            internal static extern void SetManager(global::System.IntPtr instance, global::System.IntPtr managerRender);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetSwapchain@Renderer@fl@@QEBAPEAVSwapchain@2@XZ")]
            internal static extern global::System.IntPtr GetSwapchain(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetCommandPool@Renderer@fl@@QEBAPEAUVkCommandPool_T@@XZ")]
            internal static extern global::System.IntPtr GetCommandPool(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetCommandBuffer@Renderer@fl@@QEBAPEAUVkCommandBuffer_T@@XZ")]
            internal static extern global::System.IntPtr GetCommandBuffer(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetActiveSwapchainImage@Renderer@fl@@QEBAIXZ")]
            internal static extern uint GetActiveSwapchainImage(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetPipelineCache@Renderer@fl@@QEBAPEAUVkPipelineCache_T@@XZ")]
            internal static extern global::System.IntPtr GetPipelineCache(global::System.IntPtr instance);
        }

        internal static new global::FlounderSharp.Renderer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Renderer(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.Renderer __CreateInstance(global::FlounderSharp.Renderer.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Renderer(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.Renderer.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Renderer.__Internal));
            global::FlounderSharp.Renderer.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private Renderer(global::FlounderSharp.Renderer.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Renderer(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        /// <summary>Creates a new renderer module.</summary>
        public Renderer()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Renderer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "FlounderSharp.Renderer");
        }

        public Renderer(global::FlounderSharp.Renderer _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Renderer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
            SetupVTables(GetType().FullName == "FlounderSharp.Renderer");
        }

        ~Renderer()
        {
            Dispose(false);
        }

        public override void Update()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 8);
            var ___UpdateDelegate = (global::FlounderSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Action_IntPtr));
            ___UpdateDelegate((__Instance + __PointerAdjustment));
        }

        /// <summary>Starts a renderpass.</summary>
        /// <param name="commandBuffer">The command buffer to use.</param>
        /// <param name="i">The index of the render pass being rendered.</param>
        public global::VkResult StartRenderpass(global::VkCommandBufferT commandBuffer, ref uint i)
        {
            if (ReferenceEquals(commandBuffer, null))
                throw new global::System.ArgumentNullException("commandBuffer", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = commandBuffer.__Instance;
            fixed (uint* __refParamPtr1 = &i)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.StartRenderpass((__Instance + __PointerAdjustment), __arg0, __arg1);
                return __ret;
            }
        }

        /// <summary>Ends the renderpass.</summary>
        /// <param name="commandBuffer">The command buffer to use.</param>
        public void EndRenderpass(global::VkCommandBufferT commandBuffer, ref uint i)
        {
            if (ReferenceEquals(commandBuffer, null))
                throw new global::System.ArgumentNullException("commandBuffer", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = commandBuffer.__Instance;
            fixed (uint* __refParamPtr1 = &i)
            {
                var __arg1 = __refParamPtr1;
                __Internal.EndRenderpass((__Instance + __PointerAdjustment), __arg0, __arg1);
            }
        }

        /// <summary>Starts the next render subpass.</summary>
        /// <param name="commandBuffer">The command buffer to use.</param>
        public void NextSubpass(global::VkCommandBufferT commandBuffer)
        {
            if (ReferenceEquals(commandBuffer, null))
                throw new global::System.ArgumentNullException("commandBuffer", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = commandBuffer.__Instance;
            __Internal.NextSubpass((__Instance + __PointerAdjustment), __arg0);
        }

        public global::FlounderSharp.RenderStage GetRenderStage(ref int i)
        {
            fixed (int* __refParamPtr0 = &i)
            {
                var __arg0 = __refParamPtr0;
                var __ret = __Internal.GetRenderStage((__Instance + __PointerAdjustment), __arg0);
                global::FlounderSharp.RenderStage __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.RenderStage.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.RenderStage) global::FlounderSharp.RenderStage.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.RenderStage.__CreateInstance(__ret);
                return __result0;
            }
        }

        /// <summary>Gets this engine instance.</summary>
        public static global::FlounderSharp.Renderer Get()
        {
            var __ret = __Internal.Get();
            global::FlounderSharp.Renderer __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::FlounderSharp.Renderer.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::FlounderSharp.Renderer) global::FlounderSharp.Renderer.NativeToManagedMap[__ret];
            else global::FlounderSharp.Renderer.NativeToManagedMap[__ret] = __result0 = (global::FlounderSharp.Renderer) global::FlounderSharp.Renderer.__CreateInstance(__ret);
            return __result0;
        }

        public static global::VkCommandBufferT BeginSingleTimeCommands(global::VkCommandBufferLevel* level)
        {
            var __ret = __Internal.BeginSingleTimeCommands(level);
            global::VkCommandBufferT __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::VkCommandBufferT.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::VkCommandBufferT) global::VkCommandBufferT.NativeToManagedMap[__ret];
            else __result0 = global::VkCommandBufferT.__CreateInstance(__ret);
            return __result0;
        }

        public static void EndSingleTimeCommands(global::VkCommandBufferT commandBuffer)
        {
            if (ReferenceEquals(commandBuffer, null))
                throw new global::System.ArgumentNullException("commandBuffer", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = commandBuffer.__Instance;
            __Internal.EndSingleTimeCommands(__arg0);
        }

        public static uint FindMemoryTypeIndex(global::VkPhysicalDeviceMemoryProperties deviceMemoryProperties, global::VkMemoryRequirements memoryRequirements, ref uint requiredProperties)
        {
            var __arg0 = ReferenceEquals(deviceMemoryProperties, null) ? global::System.IntPtr.Zero : deviceMemoryProperties.__Instance;
            var __arg1 = ReferenceEquals(memoryRequirements, null) ? global::System.IntPtr.Zero : memoryRequirements.__Instance;
            fixed (uint* __refParamPtr2 = &requiredProperties)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.FindMemoryTypeIndex(__arg0, __arg1, __arg2);
                return __ret;
            }
        }

        /// <summary>Gets the renderer manager.</summary>
        /// <param name="rendererMaster">The new renderer manager.</param>
        /// <remarks>Sets the current renderer manager to a new renderer manager.</remarks>
        public global::FlounderSharp.IManagerRender Manager
        {
            get
            {
                var __ret = __Internal.GetManager((__Instance + __PointerAdjustment));
                global::FlounderSharp.IManagerRender __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.IManagerRender.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.IManagerRender) global::FlounderSharp.IManagerRender.NativeToManagedMap[__ret];
                else global::FlounderSharp.IManagerRender.NativeToManagedMap[__ret] = __result0 = (global::FlounderSharp.IManagerRender) global::FlounderSharp.IManagerRender.__CreateInstance(__ret);
                return __result0;
            }

            set
            {
                var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                __Internal.SetManager((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public global::FlounderSharp.Swapchain Swapchain
        {
            get
            {
                var __ret = __Internal.GetSwapchain((__Instance + __PointerAdjustment));
                global::FlounderSharp.Swapchain __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Swapchain.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Swapchain) global::FlounderSharp.Swapchain.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.Swapchain.__CreateInstance(__ret);
                return __result0;
            }
        }

        public global::VkCommandPoolT CommandPool
        {
            get
            {
                var __ret = __Internal.GetCommandPool((__Instance + __PointerAdjustment));
                global::VkCommandPoolT __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::VkCommandPoolT.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::VkCommandPoolT) global::VkCommandPoolT.NativeToManagedMap[__ret];
                else __result0 = global::VkCommandPoolT.__CreateInstance(__ret);
                return __result0;
            }
        }

        public global::VkCommandBufferT CommandBuffer
        {
            get
            {
                var __ret = __Internal.GetCommandBuffer((__Instance + __PointerAdjustment));
                global::VkCommandBufferT __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::VkCommandBufferT.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::VkCommandBufferT) global::VkCommandBufferT.NativeToManagedMap[__ret];
                else __result0 = global::VkCommandBufferT.__CreateInstance(__ret);
                return __result0;
            }
        }

        public uint ActiveSwapchainImage
        {
            get
            {
                var __ret = __Internal.GetActiveSwapchainImage((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public global::VkPipelineCacheT PipelineCache
        {
            get
            {
                var __ret = __Internal.GetPipelineCache((__Instance + __PointerAdjustment));
                global::VkPipelineCacheT __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::VkPipelineCacheT.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::VkPipelineCacheT) global::VkPipelineCacheT.NativeToManagedMap[__ret];
                else __result0 = global::VkPipelineCacheT.__CreateInstance(__ret);
                return __result0;
            }
        }

        #region Virtual table interop

        // ~Renderer()
        private static global::FlounderSharp.Delegates.Action_IntPtr_int _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr instance, int delete)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.Renderer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // void Update() override
        private static global::FlounderSharp.Delegates.Action_IntPtr _UpdateDelegateInstance;

        private static void _UpdateDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.Renderer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Update();
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[2];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _UpdateDelegateInstance += _UpdateDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_UpdateDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(3 * 8);
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(3 * 8);
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = _Thunks[1];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
