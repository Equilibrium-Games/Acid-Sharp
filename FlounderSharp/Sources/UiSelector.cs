// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    public unsafe partial class SelectorJoystick : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::FlounderSharp.JoystickPort joystick;

            [FieldOffset(8)]
            internal global::System.IntPtr clickLeft;

            [FieldOffset(16)]
            internal global::System.IntPtr clickRight;

            [FieldOffset(24)]
            internal global::System.IntPtr axisX;

            [FieldOffset(32)]
            internal global::System.IntPtr axisY;
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.SelectorJoystick> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.SelectorJoystick>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.SelectorJoystick __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.SelectorJoystick(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.SelectorJoystick __CreateInstance(global::FlounderSharp.SelectorJoystick.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.SelectorJoystick(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.SelectorJoystick.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.SelectorJoystick.__Internal));
            *(global::FlounderSharp.SelectorJoystick.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SelectorJoystick(global::FlounderSharp.SelectorJoystick.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SelectorJoystick(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        ~SelectorJoystick()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.SelectorJoystick __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::FlounderSharp.JoystickPort Joystick
        {
            get
            {
                return ((global::FlounderSharp.SelectorJoystick.__Internal*) __Instance)->joystick;
            }

            set
            {
                ((global::FlounderSharp.SelectorJoystick.__Internal*)__Instance)->joystick = value;
            }
        }

        public global::FlounderSharp.ButtonJoystick ClickLeft
        {
            get
            {
                global::FlounderSharp.ButtonJoystick __result0;
                if (((global::FlounderSharp.SelectorJoystick.__Internal*) __Instance)->clickLeft == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.ButtonJoystick.NativeToManagedMap.ContainsKey(((global::FlounderSharp.SelectorJoystick.__Internal*) __Instance)->clickLeft))
                    __result0 = (global::FlounderSharp.ButtonJoystick) global::FlounderSharp.ButtonJoystick.NativeToManagedMap[((global::FlounderSharp.SelectorJoystick.__Internal*) __Instance)->clickLeft];
                else global::FlounderSharp.ButtonJoystick.NativeToManagedMap[((global::FlounderSharp.SelectorJoystick.__Internal*) __Instance)->clickLeft] = __result0 = (global::FlounderSharp.ButtonJoystick) global::FlounderSharp.ButtonJoystick.__CreateInstance(((global::FlounderSharp.SelectorJoystick.__Internal*) __Instance)->clickLeft);
                return __result0;
            }

            set
            {
                ((global::FlounderSharp.SelectorJoystick.__Internal*)__Instance)->clickLeft = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::FlounderSharp.ButtonJoystick ClickRight
        {
            get
            {
                global::FlounderSharp.ButtonJoystick __result0;
                if (((global::FlounderSharp.SelectorJoystick.__Internal*) __Instance)->clickRight == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.ButtonJoystick.NativeToManagedMap.ContainsKey(((global::FlounderSharp.SelectorJoystick.__Internal*) __Instance)->clickRight))
                    __result0 = (global::FlounderSharp.ButtonJoystick) global::FlounderSharp.ButtonJoystick.NativeToManagedMap[((global::FlounderSharp.SelectorJoystick.__Internal*) __Instance)->clickRight];
                else global::FlounderSharp.ButtonJoystick.NativeToManagedMap[((global::FlounderSharp.SelectorJoystick.__Internal*) __Instance)->clickRight] = __result0 = (global::FlounderSharp.ButtonJoystick) global::FlounderSharp.ButtonJoystick.__CreateInstance(((global::FlounderSharp.SelectorJoystick.__Internal*) __Instance)->clickRight);
                return __result0;
            }

            set
            {
                ((global::FlounderSharp.SelectorJoystick.__Internal*)__Instance)->clickRight = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::FlounderSharp.AxisJoystick AxisX
        {
            get
            {
                global::FlounderSharp.AxisJoystick __result0;
                if (((global::FlounderSharp.SelectorJoystick.__Internal*) __Instance)->axisX == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.AxisJoystick.NativeToManagedMap.ContainsKey(((global::FlounderSharp.SelectorJoystick.__Internal*) __Instance)->axisX))
                    __result0 = (global::FlounderSharp.AxisJoystick) global::FlounderSharp.AxisJoystick.NativeToManagedMap[((global::FlounderSharp.SelectorJoystick.__Internal*) __Instance)->axisX];
                else global::FlounderSharp.AxisJoystick.NativeToManagedMap[((global::FlounderSharp.SelectorJoystick.__Internal*) __Instance)->axisX] = __result0 = (global::FlounderSharp.AxisJoystick) global::FlounderSharp.AxisJoystick.__CreateInstance(((global::FlounderSharp.SelectorJoystick.__Internal*) __Instance)->axisX);
                return __result0;
            }

            set
            {
                ((global::FlounderSharp.SelectorJoystick.__Internal*)__Instance)->axisX = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::FlounderSharp.AxisJoystick AxisY
        {
            get
            {
                global::FlounderSharp.AxisJoystick __result0;
                if (((global::FlounderSharp.SelectorJoystick.__Internal*) __Instance)->axisY == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.AxisJoystick.NativeToManagedMap.ContainsKey(((global::FlounderSharp.SelectorJoystick.__Internal*) __Instance)->axisY))
                    __result0 = (global::FlounderSharp.AxisJoystick) global::FlounderSharp.AxisJoystick.NativeToManagedMap[((global::FlounderSharp.SelectorJoystick.__Internal*) __Instance)->axisY];
                else global::FlounderSharp.AxisJoystick.NativeToManagedMap[((global::FlounderSharp.SelectorJoystick.__Internal*) __Instance)->axisY] = __result0 = (global::FlounderSharp.AxisJoystick) global::FlounderSharp.AxisJoystick.__CreateInstance(((global::FlounderSharp.SelectorJoystick.__Internal*) __Instance)->axisY);
                return __result0;
            }

            set
            {
                ((global::FlounderSharp.SelectorJoystick.__Internal*)__Instance)->axisY = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    /// <summary>Represents a virtual cursor that will be used to determine if a ui action was preformed by a device.</summary>
    public unsafe partial class UiSelector : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal float m_cursorX;

            [FieldOffset(4)]
            internal float m_cursorY;

            [FieldOffset(8)]
            internal byte m_leftClick;

            [FieldOffset(9)]
            internal byte m_rightClick;

            [FieldOffset(10)]
            internal byte m_leftWasClick;

            [FieldOffset(11)]
            internal byte m_rightWasClick;

            [FieldOffset(16)]
            internal global::System.IntPtr m_mouseLeft;

            [FieldOffset(24)]
            internal global::System.IntPtr m_mouseRight;

            [FieldOffset(32)]
            internal global::System.IntPtr m_selectorJoystick;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0UiSelector@fl@@QEAA@XZ")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1UiSelector@fl@@QEAA@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Load@UiSelector@fl@@QEAAXAEBW4JoystickPort@2@AEBH111@Z")]
            internal static extern void Load(global::System.IntPtr instance, global::FlounderSharp.JoystickPort* joystick, int* joystickLeftClick, int* joystickRightClick, int* joystickAxisX, int* joystickAxisY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Update@UiSelector@fl@@QEAAXAEB_N@Z")]
            internal static extern void Update(global::System.IntPtr instance, bool* paused);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?IsSelected@UiSelector@fl@@QEBA_NAEBVUiObject@2@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsSelected(global::System.IntPtr instance, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CancelWasEvent@UiSelector@fl@@QEAAXXZ")]
            internal static extern void CancelWasEvent(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?WasLeftClick@UiSelector@fl@@QEBA_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WasLeftClick(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?WasRightClick@UiSelector@fl@@QEBA_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WasRightClick(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetCursorX@UiSelector@fl@@QEBAMXZ")]
            internal static extern float GetCursorX(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetCursorY@UiSelector@fl@@QEBAMXZ")]
            internal static extern float GetCursorY(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetLeftClick@UiSelector@fl@@QEBA_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetLeftClick(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetRightClick@UiSelector@fl@@QEBA_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetRightClick(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.UiSelector> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.UiSelector>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.UiSelector __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.UiSelector(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.UiSelector __CreateInstance(global::FlounderSharp.UiSelector.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.UiSelector(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.UiSelector.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.UiSelector.__Internal));
            *(global::FlounderSharp.UiSelector.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private UiSelector(global::FlounderSharp.UiSelector.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected UiSelector(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public UiSelector()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.UiSelector.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor((__Instance + __PointerAdjustment));
        }

        ~UiSelector()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.UiSelector __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Sets up the joystick settings to be used for controlling the virtual cursor.</summary>
        /// <param name="joystick">The joystick port to attach to.</param>
        /// <param name="joystickLeftClick">The joystick key to be used as the left click.</param>
        /// <param name="joystickRightClick">The joystick key to be used as the right click.</param>
        /// <param name="joystickAxisX">The joystick axis to be used for moving the x axis.</param>
        /// <param name="joystickAxisY">The joystick axis to be used for moving the y axis.</param>
        public void Load(global::FlounderSharp.JoystickPort* joystick, ref int joystickLeftClick, ref int joystickRightClick, ref int joystickAxisX, ref int joystickAxisY)
        {
            fixed (int* __refParamPtr1 = &joystickLeftClick)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &joystickRightClick)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &joystickAxisX)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &joystickAxisY)
                        {
                            var __arg4 = __refParamPtr4;
                            __Internal.Load((__Instance + __PointerAdjustment), joystick, __arg1, __arg2, __arg3, __arg4);
                        }
                    }
                }
            }
        }

        public void Update(ref bool paused)
        {
            fixed (bool* __refParamPtr0 = &paused)
            {
                var __arg0 = __refParamPtr0;
                __Internal.Update((__Instance + __PointerAdjustment), __arg0);
            }
        }

        /// <summary>Gets if the object provided has the cursor hovered above it.</summary>
        /// <param name="object">The object to check with.</param>
        public bool IsSelected(global::FlounderSharp.UiObject @object)
        {
            if (ReferenceEquals(@object, null))
                throw new global::System.ArgumentNullException("@object", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @object.__Instance;
            var __ret = __Internal.IsSelected((__Instance + __PointerAdjustment), __arg0);
            return __ret;
        }

        public void CancelWasEvent()
        {
            __Internal.CancelWasEvent((__Instance + __PointerAdjustment));
        }

        public bool WasLeftClick()
        {
            var __ret = __Internal.WasLeftClick((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool WasRightClick()
        {
            var __ret = __Internal.WasRightClick((__Instance + __PointerAdjustment));
            return __ret;
        }

        public float CursorX
        {
            get
            {
                var __ret = __Internal.GetCursorX((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public float CursorY
        {
            get
            {
                var __ret = __Internal.GetCursorY((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public bool LeftClick
        {
            get
            {
                var __ret = __Internal.GetLeftClick((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public bool RightClick
        {
            get
            {
                var __ret = __Internal.GetRightClick((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
