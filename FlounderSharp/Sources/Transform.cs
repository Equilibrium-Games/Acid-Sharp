// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    /// <summary>Holds position, rotation, and scale components.</summary>
    public unsafe partial class Transform : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr m_position;

            [FieldOffset(8)]
            internal global::System.IntPtr m_rotation;

            [FieldOffset(16)]
            internal global::System.IntPtr m_scaling;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Transform@fl@@QEAA@XZ")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Transform@fl@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr source);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Transform@fl@@QEAA@AEBVVector3@1@00@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, global::System.IntPtr position, global::System.IntPtr rotation, global::System.IntPtr scaling);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Transform@fl@@QEAA@AEBVVector3@1@0AEBM@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, global::System.IntPtr position, global::System.IntPtr rotation, float* scale);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Transform@fl@@QEAA@PEAVLoadedValue@1@@Z")]
            internal static extern global::System.IntPtr ctor_1(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1Transform@fl@@QEAA@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Set@Transform@fl@@QEAAPEAV12@AEBV12@@Z")]
            internal static extern global::System.IntPtr Set(global::System.IntPtr instance, global::System.IntPtr source);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Set@Transform@fl@@QEAAPEAV12@PEAVLoadedValue@2@@Z")]
            internal static extern global::System.IntPtr Set_1(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Write@Transform@fl@@QEAAXPEAVLoadedValue@2@@Z")]
            internal static extern void Write(global::System.IntPtr instance, global::System.IntPtr destination);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??8Transform@fl@@QEBA_NAEBV01@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??9Transform@fl@@QEBA_NAEBV01@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetPosition@Transform@fl@@QEBAPEAVVector3@2@XZ")]
            internal static extern global::System.IntPtr GetPosition(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetPosition@Transform@fl@@QEAAXAEBVVector3@2@@Z")]
            internal static extern void SetPosition(global::System.IntPtr instance, global::System.IntPtr position);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetRotation@Transform@fl@@QEBAPEAVVector3@2@XZ")]
            internal static extern global::System.IntPtr GetRotation(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetRotation@Transform@fl@@QEAAXAEBVVector3@2@@Z")]
            internal static extern void SetRotation(global::System.IntPtr instance, global::System.IntPtr rotation);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetScaling@Transform@fl@@QEBAPEAVVector3@2@XZ")]
            internal static extern global::System.IntPtr GetScaling(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetScaling@Transform@fl@@QEAAXAEBVVector3@2@@Z")]
            internal static extern void SetScaling(global::System.IntPtr instance, global::System.IntPtr scaling);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetWorldMatrix@Transform@fl@@QEBA?AVMatrix4@2@XZ")]
            internal static extern void GetWorldMatrix(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetModelMatrix@Transform@fl@@QEBA?AVMatrix4@2@XZ")]
            internal static extern void GetModelMatrix(global::System.IntPtr instance, global::System.IntPtr @return);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.Transform> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.Transform>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.Transform __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Transform(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.Transform __CreateInstance(global::FlounderSharp.Transform.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Transform(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.Transform.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Transform.__Internal));
            global::FlounderSharp.Transform.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private Transform(global::FlounderSharp.Transform.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Transform(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        /// <summary>Constructor for Transform.</summary>
        public Transform()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Transform.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor((__Instance + __PointerAdjustment));
        }

        /// <summary>Constructor for Transform.</summary>
        /// <param name="source">Creates this vector out of a transform.</param>
        public Transform(global::FlounderSharp.Transform source)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Transform.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(source, null))
                throw new global::System.ArgumentNullException("source", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = source.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
        }

        /// <summary>Constructor for Transform.</summary>
        /// <param name="position">The position.</param>
        /// <param name="rotation">The rotation.</param>
        /// <param name="scaling">The scaling.</param>
        public Transform(global::FlounderSharp.Vector3 position, global::FlounderSharp.Vector3 rotation, global::FlounderSharp.Vector3 scaling)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Transform.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(position, null))
                throw new global::System.ArgumentNullException("position", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = position.__Instance;
            if (ReferenceEquals(rotation, null))
                throw new global::System.ArgumentNullException("rotation", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = rotation.__Instance;
            if (ReferenceEquals(scaling, null))
                throw new global::System.ArgumentNullException("scaling", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = scaling.__Instance;
            __Internal.ctor((__Instance + __PointerAdjustment), __arg0, __arg1, __arg2);
        }

        /// <summary>Constructor for Transform.</summary>
        /// <param name="position">The position.</param>
        /// <param name="rotation">The rotation.</param>
        /// <param name="scale">The scale.</param>
        public Transform(global::FlounderSharp.Vector3 position, global::FlounderSharp.Vector3 rotation, ref float scale)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Transform.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(position, null))
                throw new global::System.ArgumentNullException("position", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = position.__Instance;
            if (ReferenceEquals(rotation, null))
                throw new global::System.ArgumentNullException("rotation", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = rotation.__Instance;
            fixed (float* __refParamPtr2 = &scale)
            {
                var __arg2 = __refParamPtr2;
                __Internal.ctor((__Instance + __PointerAdjustment), __arg0, __arg1, __arg2);
            }
        }

        /// <summary>Constructor for Transform.</summary>
        /// <param name="source">Creates this transform out of a loaded value.</param>
        public Transform(global::FlounderSharp.LoadedValue value)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Transform.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            __Internal.ctor_1((__Instance + __PointerAdjustment), __arg0);
        }

        ~Transform()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.Transform __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::FlounderSharp.Transform Set(global::FlounderSharp.Transform source)
        {
            if (ReferenceEquals(source, null))
                throw new global::System.ArgumentNullException("source", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = source.__Instance;
            var __ret = __Internal.Set((__Instance + __PointerAdjustment), __arg0);
            global::FlounderSharp.Transform __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::FlounderSharp.Transform.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::FlounderSharp.Transform) global::FlounderSharp.Transform.NativeToManagedMap[__ret];
            else __result0 = global::FlounderSharp.Transform.__CreateInstance(__ret);
            return __result0;
        }

        /// <summary>Sets values in the transform.</summary>
        /// <param name="source">The source loaded value.</param>
        public global::FlounderSharp.Transform Set(global::FlounderSharp.LoadedValue value)
        {
            var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            var __ret = __Internal.Set_1((__Instance + __PointerAdjustment), __arg0);
            global::FlounderSharp.Transform __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::FlounderSharp.Transform.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::FlounderSharp.Transform) global::FlounderSharp.Transform.NativeToManagedMap[__ret];
            else __result0 = global::FlounderSharp.Transform.__CreateInstance(__ret);
            return __result0;
        }

        /// <summary>Saves this transform into a loaded value.</summary>
        /// <param name="destination">The destination loaded value.</param>
        public void Write(global::FlounderSharp.LoadedValue destination)
        {
            var __arg0 = ReferenceEquals(destination, null) ? global::System.IntPtr.Zero : destination.__Instance;
            __Internal.Write((__Instance + __PointerAdjustment), __arg0);
        }

        public static bool operator ==(global::FlounderSharp.Transform __op, global::FlounderSharp.Transform other)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool otherNull = ReferenceEquals(other, null);
            if (__opNull || otherNull)
                return __opNull && otherNull;
            var __arg0 = __op.__Instance;
            var __arg1 = other.__Instance;
            var __ret = __Internal.OperatorEqualEqual(__arg0, __arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as global::FlounderSharp.Transform;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(global::FlounderSharp.Transform.__Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(global::FlounderSharp.Transform __op, global::FlounderSharp.Transform other)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool otherNull = ReferenceEquals(other, null);
            if (__opNull || otherNull)
                return !(__opNull && otherNull);
            var __arg0 = __op.__Instance;
            var __arg1 = other.__Instance;
            var __ret = __Internal.OperatorExclaimEqual(__arg0, __arg1);
            return __ret;
        }

        public static implicit operator global::FlounderSharp.Transform(global::FlounderSharp.LoadedValue value)
        {
            return new global::FlounderSharp.Transform(value);
        }

        public global::FlounderSharp.Vector3 MPosition
        {
            get
            {
                global::FlounderSharp.Vector3 __result0;
                if (((global::FlounderSharp.Transform.__Internal*) __Instance)->m_position == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Vector3.NativeToManagedMap.ContainsKey(((global::FlounderSharp.Transform.__Internal*) __Instance)->m_position))
                    __result0 = (global::FlounderSharp.Vector3) global::FlounderSharp.Vector3.NativeToManagedMap[((global::FlounderSharp.Transform.__Internal*) __Instance)->m_position];
                else __result0 = global::FlounderSharp.Vector3.__CreateInstance(((global::FlounderSharp.Transform.__Internal*) __Instance)->m_position);
                return __result0;
            }

            set
            {
                ((global::FlounderSharp.Transform.__Internal*)__Instance)->m_position = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::FlounderSharp.Vector3 MRotation
        {
            get
            {
                global::FlounderSharp.Vector3 __result0;
                if (((global::FlounderSharp.Transform.__Internal*) __Instance)->m_rotation == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Vector3.NativeToManagedMap.ContainsKey(((global::FlounderSharp.Transform.__Internal*) __Instance)->m_rotation))
                    __result0 = (global::FlounderSharp.Vector3) global::FlounderSharp.Vector3.NativeToManagedMap[((global::FlounderSharp.Transform.__Internal*) __Instance)->m_rotation];
                else __result0 = global::FlounderSharp.Vector3.__CreateInstance(((global::FlounderSharp.Transform.__Internal*) __Instance)->m_rotation);
                return __result0;
            }

            set
            {
                ((global::FlounderSharp.Transform.__Internal*)__Instance)->m_rotation = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::FlounderSharp.Vector3 MScaling
        {
            get
            {
                global::FlounderSharp.Vector3 __result0;
                if (((global::FlounderSharp.Transform.__Internal*) __Instance)->m_scaling == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Vector3.NativeToManagedMap.ContainsKey(((global::FlounderSharp.Transform.__Internal*) __Instance)->m_scaling))
                    __result0 = (global::FlounderSharp.Vector3) global::FlounderSharp.Vector3.NativeToManagedMap[((global::FlounderSharp.Transform.__Internal*) __Instance)->m_scaling];
                else __result0 = global::FlounderSharp.Vector3.__CreateInstance(((global::FlounderSharp.Transform.__Internal*) __Instance)->m_scaling);
                return __result0;
            }

            set
            {
                ((global::FlounderSharp.Transform.__Internal*)__Instance)->m_scaling = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::FlounderSharp.Vector3 Position
        {
            get
            {
                var __ret = __Internal.GetPosition((__Instance + __PointerAdjustment));
                global::FlounderSharp.Vector3 __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Vector3.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Vector3) global::FlounderSharp.Vector3.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.Vector3.__CreateInstance(__ret);
                return __result0;
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = value.__Instance;
                __Internal.SetPosition((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public global::FlounderSharp.Vector3 Rotation
        {
            get
            {
                var __ret = __Internal.GetRotation((__Instance + __PointerAdjustment));
                global::FlounderSharp.Vector3 __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Vector3.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Vector3) global::FlounderSharp.Vector3.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.Vector3.__CreateInstance(__ret);
                return __result0;
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = value.__Instance;
                __Internal.SetRotation((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public global::FlounderSharp.Vector3 Scaling
        {
            get
            {
                var __ret = __Internal.GetScaling((__Instance + __PointerAdjustment));
                global::FlounderSharp.Vector3 __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Vector3.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Vector3) global::FlounderSharp.Vector3.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.Vector3.__CreateInstance(__ret);
                return __result0;
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = value.__Instance;
                __Internal.SetScaling((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public global::FlounderSharp.Matrix4 WorldMatrix
        {
            get
            {
                var __ret = new global::FlounderSharp.Matrix4.__Internal();
                __Internal.GetWorldMatrix((__Instance + __PointerAdjustment), new IntPtr(&__ret));
                return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
            }
        }

        public global::FlounderSharp.Matrix4 ModelMatrix
        {
            get
            {
                var __ret = new global::FlounderSharp.Matrix4.__Internal();
                __Internal.GetModelMatrix((__Instance + __PointerAdjustment), new IntPtr(&__ret));
                return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
