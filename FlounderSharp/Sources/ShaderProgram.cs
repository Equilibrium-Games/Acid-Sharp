// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace Glslang
{
    public unsafe partial class TProgram
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Glslang.TProgram> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Glslang.TProgram>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::Glslang.TProgram __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Glslang.TProgram(native.ToPointer(), skipVTables);
        }

        internal static global::Glslang.TProgram __CreateInstance(global::Glslang.TProgram.__Internal native, bool skipVTables = false)
        {
            return new global::Glslang.TProgram(native, skipVTables);
        }

        private static void* __CopyValue(global::Glslang.TProgram.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Glslang.TProgram.__Internal));
            *(global::Glslang.TProgram.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TProgram(global::Glslang.TProgram.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TProgram(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        ~TProgram()
        {
            Dispose(false);
        }
    }
}

namespace FlounderSharp
{
    public unsafe partial class Uniform : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C m_name;

            [FieldOffset(32)]
            internal int m_binding;

            [FieldOffset(36)]
            internal int m_offset;

            [FieldOffset(40)]
            internal int m_size;

            [FieldOffset(44)]
            internal int m_glType;

            [FieldOffset(48)]
            internal global::VkShaderStageFlagBits m_stageFlags;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Uniform@fl@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBH111AEBW4VkShaderStageFlagBits@@@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, global::System.IntPtr name, int* binding, int* offset, int* size, int* glType, global::VkShaderStageFlagBits* stageFlags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1Uniform@fl@@QEAA@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??8Uniform@fl@@QEBA_NAEBV01@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?ToString@Uniform@fl@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ")]
            internal static extern void ToString(global::System.IntPtr instance, global::System.IntPtr @return);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.Uniform> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.Uniform>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.Uniform __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Uniform(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.Uniform __CreateInstance(global::FlounderSharp.Uniform.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Uniform(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.Uniform.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Uniform.__Internal));
            *(global::FlounderSharp.Uniform.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Uniform(global::FlounderSharp.Uniform.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Uniform(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Uniform(string name, ref int binding, ref int offset, ref int size, ref int glType, global::VkShaderStageFlagBits* stageFlags)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Uniform.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __allocator0 = new global::Std.Allocator<char>();
            var __basicString0 = global::Std.BasicStringExtensions.BasicString(name, __allocator0);
            var __arg0 = __basicString0.__Instance;
            fixed (int* __refParamPtr1 = &binding)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &offset)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &size)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &glType)
                        {
                            var __arg4 = __refParamPtr4;
                            __Internal.ctor((__Instance + __PointerAdjustment), __arg0, __arg1, __arg2, __arg3, __arg4, stageFlags);
                            __basicString0.Dispose(false);
                            __allocator0.Dispose();
                        }
                    }
                }
            }
        }

        ~Uniform()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.Uniform __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public static bool operator !=(global::FlounderSharp.Uniform __op, global::FlounderSharp.Uniform other)
        {
            return !(__op == other);
        }

        public static bool operator ==(global::FlounderSharp.Uniform __op, global::FlounderSharp.Uniform other)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool otherNull = ReferenceEquals(other, null);
            if (__opNull || otherNull)
                return __opNull && otherNull;
            var __arg0 = __op.__Instance;
            var __arg1 = other.__Instance;
            var __ret = __Internal.OperatorEqualEqual(__arg0, __arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as global::FlounderSharp.Uniform;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(global::FlounderSharp.Uniform.__Internal*) __Instance).GetHashCode();
        }

        public string ToString()
        {
            var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
            __Internal.ToString((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            var __basicStringRet = global::Std.BasicString<char, global::Std.CharTraits<char>, global::Std.Allocator<char>>.__CreateInstance(__ret);
            var __stringRet = global::Std.BasicStringExtensions.CStr(__basicStringRet);
            __basicStringRet.Dispose(false);
            return __stringRet;
        }

        public string MName
        {
            get
            {
                var __basicStringRet = global::Std.BasicString<char, global::Std.CharTraits<char>, global::Std.Allocator<char>>.__CreateInstance(new global::System.IntPtr(&((global::FlounderSharp.Uniform.__Internal*) __Instance)->m_name));
                var __stringRet = global::Std.BasicStringExtensions.CStr(__basicStringRet);
                __basicStringRet.Dispose(false);
                return __stringRet;
            }

            set
            {
                var __allocator0 = new global::Std.Allocator<char>();
                var __basicString0 = global::Std.BasicStringExtensions.BasicString(value, __allocator0);
                ((global::FlounderSharp.Uniform.__Internal*)__Instance)->m_name = *(global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C*) __basicString0.__Instance;
            }
        }

        public int MBinding
        {
            get
            {
                return ((global::FlounderSharp.Uniform.__Internal*) __Instance)->m_binding;
            }

            set
            {
                ((global::FlounderSharp.Uniform.__Internal*)__Instance)->m_binding = value;
            }
        }

        public int MOffset
        {
            get
            {
                return ((global::FlounderSharp.Uniform.__Internal*) __Instance)->m_offset;
            }

            set
            {
                ((global::FlounderSharp.Uniform.__Internal*)__Instance)->m_offset = value;
            }
        }

        public int MSize
        {
            get
            {
                return ((global::FlounderSharp.Uniform.__Internal*) __Instance)->m_size;
            }

            set
            {
                ((global::FlounderSharp.Uniform.__Internal*)__Instance)->m_size = value;
            }
        }

        public int MGlType
        {
            get
            {
                return ((global::FlounderSharp.Uniform.__Internal*) __Instance)->m_glType;
            }

            set
            {
                ((global::FlounderSharp.Uniform.__Internal*)__Instance)->m_glType = value;
            }
        }

        public global::VkShaderStageFlagBits MStageFlags
        {
            get
            {
                return ((global::FlounderSharp.Uniform.__Internal*) __Instance)->m_stageFlags;
            }

            set
            {
                ((global::FlounderSharp.Uniform.__Internal*)__Instance)->m_stageFlags = value;
            }
        }
    }

    public unsafe partial class UniformBlock : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C m_name;

            [FieldOffset(32)]
            internal int m_binding;

            [FieldOffset(36)]
            internal int m_size;

            [FieldOffset(40)]
            internal global::VkShaderStageFlagBits m_stageFlags;

            [FieldOffset(48)]
            internal global::System.IntPtr m_uniforms;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0UniformBlock@fl@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBH1AEBW4VkShaderStageFlagBits@@@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, global::System.IntPtr name, int* binding, int* size, global::VkShaderStageFlagBits* stageFlags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1UniformBlock@fl@@QEAA@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?AddUniform@UniformBlock@fl@@QEAAXPEAVUniform@2@@Z")]
            internal static extern void AddUniform(global::System.IntPtr instance, global::System.IntPtr uniform);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetUniform@UniformBlock@fl@@QEAAPEAVUniform@2@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
            internal static extern global::System.IntPtr GetUniform(global::System.IntPtr instance, global::System.IntPtr uniformName);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?ToString@UniformBlock@fl@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ")]
            internal static extern void ToString(global::System.IntPtr instance, global::System.IntPtr @return);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.UniformBlock> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.UniformBlock>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.UniformBlock __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.UniformBlock(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.UniformBlock __CreateInstance(global::FlounderSharp.UniformBlock.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.UniformBlock(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.UniformBlock.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.UniformBlock.__Internal));
            *(global::FlounderSharp.UniformBlock.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private UniformBlock(global::FlounderSharp.UniformBlock.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected UniformBlock(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public UniformBlock(string name, ref int binding, ref int size, global::VkShaderStageFlagBits* stageFlags)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.UniformBlock.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __allocator0 = new global::Std.Allocator<char>();
            var __basicString0 = global::Std.BasicStringExtensions.BasicString(name, __allocator0);
            var __arg0 = __basicString0.__Instance;
            fixed (int* __refParamPtr1 = &binding)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &size)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.ctor((__Instance + __PointerAdjustment), __arg0, __arg1, __arg2, stageFlags);
                    __basicString0.Dispose(false);
                    __allocator0.Dispose();
                }
            }
        }

        ~UniformBlock()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.UniformBlock __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void AddUniform(global::FlounderSharp.Uniform uniform)
        {
            var __arg0 = ReferenceEquals(uniform, null) ? global::System.IntPtr.Zero : uniform.__Instance;
            __Internal.AddUniform((__Instance + __PointerAdjustment), __arg0);
        }

        public global::FlounderSharp.Uniform GetUniform(string uniformName)
        {
            var __allocator0 = new global::Std.Allocator<char>();
            var __basicString0 = global::Std.BasicStringExtensions.BasicString(uniformName, __allocator0);
            var __arg0 = __basicString0.__Instance;
            var __ret = __Internal.GetUniform((__Instance + __PointerAdjustment), __arg0);
            __basicString0.Dispose(false);
            __allocator0.Dispose();
            global::FlounderSharp.Uniform __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::FlounderSharp.Uniform.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::FlounderSharp.Uniform) global::FlounderSharp.Uniform.NativeToManagedMap[__ret];
            else __result0 = global::FlounderSharp.Uniform.__CreateInstance(__ret);
            return __result0;
        }

        public string ToString()
        {
            var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
            __Internal.ToString((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            var __basicStringRet = global::Std.BasicString<char, global::Std.CharTraits<char>, global::Std.Allocator<char>>.__CreateInstance(__ret);
            var __stringRet = global::Std.BasicStringExtensions.CStr(__basicStringRet);
            __basicStringRet.Dispose(false);
            return __stringRet;
        }

        public string MName
        {
            get
            {
                var __basicStringRet = global::Std.BasicString<char, global::Std.CharTraits<char>, global::Std.Allocator<char>>.__CreateInstance(new global::System.IntPtr(&((global::FlounderSharp.UniformBlock.__Internal*) __Instance)->m_name));
                var __stringRet = global::Std.BasicStringExtensions.CStr(__basicStringRet);
                __basicStringRet.Dispose(false);
                return __stringRet;
            }

            set
            {
                var __allocator0 = new global::Std.Allocator<char>();
                var __basicString0 = global::Std.BasicStringExtensions.BasicString(value, __allocator0);
                ((global::FlounderSharp.UniformBlock.__Internal*)__Instance)->m_name = *(global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C*) __basicString0.__Instance;
            }
        }

        public int MBinding
        {
            get
            {
                return ((global::FlounderSharp.UniformBlock.__Internal*) __Instance)->m_binding;
            }

            set
            {
                ((global::FlounderSharp.UniformBlock.__Internal*)__Instance)->m_binding = value;
            }
        }

        public int MSize
        {
            get
            {
                return ((global::FlounderSharp.UniformBlock.__Internal*) __Instance)->m_size;
            }

            set
            {
                ((global::FlounderSharp.UniformBlock.__Internal*)__Instance)->m_size = value;
            }
        }

        public global::VkShaderStageFlagBits MStageFlags
        {
            get
            {
                return ((global::FlounderSharp.UniformBlock.__Internal*) __Instance)->m_stageFlags;
            }

            set
            {
                ((global::FlounderSharp.UniformBlock.__Internal*)__Instance)->m_stageFlags = value;
            }
        }
    }

    public unsafe partial class VertexAttribute : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 48)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C m_name;

            [FieldOffset(32)]
            internal int m_location;

            [FieldOffset(36)]
            internal int m_size;

            [FieldOffset(40)]
            internal int m_glType;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0VertexAttribute@fl@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBH11@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, global::System.IntPtr name, int* location, int* size, int* glType);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1VertexAttribute@fl@@QEAA@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?ToString@VertexAttribute@fl@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ")]
            internal static extern void ToString(global::System.IntPtr instance, global::System.IntPtr @return);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.VertexAttribute> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.VertexAttribute>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.VertexAttribute __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.VertexAttribute(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.VertexAttribute __CreateInstance(global::FlounderSharp.VertexAttribute.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.VertexAttribute(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.VertexAttribute.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.VertexAttribute.__Internal));
            *(global::FlounderSharp.VertexAttribute.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VertexAttribute(global::FlounderSharp.VertexAttribute.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VertexAttribute(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VertexAttribute(string name, ref int location, ref int size, ref int glType)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.VertexAttribute.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __allocator0 = new global::Std.Allocator<char>();
            var __basicString0 = global::Std.BasicStringExtensions.BasicString(name, __allocator0);
            var __arg0 = __basicString0.__Instance;
            fixed (int* __refParamPtr1 = &location)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &size)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &glType)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.ctor((__Instance + __PointerAdjustment), __arg0, __arg1, __arg2, __arg3);
                        __basicString0.Dispose(false);
                        __allocator0.Dispose();
                    }
                }
            }
        }

        ~VertexAttribute()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.VertexAttribute __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public string ToString()
        {
            var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
            __Internal.ToString((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            var __basicStringRet = global::Std.BasicString<char, global::Std.CharTraits<char>, global::Std.Allocator<char>>.__CreateInstance(__ret);
            var __stringRet = global::Std.BasicStringExtensions.CStr(__basicStringRet);
            __basicStringRet.Dispose(false);
            return __stringRet;
        }

        public string MName
        {
            get
            {
                var __basicStringRet = global::Std.BasicString<char, global::Std.CharTraits<char>, global::Std.Allocator<char>>.__CreateInstance(new global::System.IntPtr(&((global::FlounderSharp.VertexAttribute.__Internal*) __Instance)->m_name));
                var __stringRet = global::Std.BasicStringExtensions.CStr(__basicStringRet);
                __basicStringRet.Dispose(false);
                return __stringRet;
            }

            set
            {
                var __allocator0 = new global::Std.Allocator<char>();
                var __basicString0 = global::Std.BasicStringExtensions.BasicString(value, __allocator0);
                ((global::FlounderSharp.VertexAttribute.__Internal*)__Instance)->m_name = *(global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C*) __basicString0.__Instance;
            }
        }

        public int MLocation
        {
            get
            {
                return ((global::FlounderSharp.VertexAttribute.__Internal*) __Instance)->m_location;
            }

            set
            {
                ((global::FlounderSharp.VertexAttribute.__Internal*)__Instance)->m_location = value;
            }
        }

        public int MSize
        {
            get
            {
                return ((global::FlounderSharp.VertexAttribute.__Internal*) __Instance)->m_size;
            }

            set
            {
                ((global::FlounderSharp.VertexAttribute.__Internal*)__Instance)->m_size = value;
            }
        }

        public int MGlType
        {
            get
            {
                return ((global::FlounderSharp.VertexAttribute.__Internal*) __Instance)->m_glType;
            }

            set
            {
                ((global::FlounderSharp.VertexAttribute.__Internal*)__Instance)->m_glType = value;
            }
        }
    }

    public unsafe partial class ShaderProgram : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr m_uniforms;

            [FieldOffset(8)]
            internal global::System.IntPtr m_uniformBlocks;

            [FieldOffset(16)]
            internal global::System.IntPtr m_vertexAttributes;

            [FieldOffset(24)]
            internal global::System.IntPtr m_descriptors;

            [FieldOffset(32)]
            internal global::System.IntPtr m_attributeDescriptions;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ShaderProgram@fl@@QEAA@XZ")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1ShaderProgram@fl@@QEAA@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?LoadProgram@ShaderProgram@fl@@QEAAXAEBVTProgram@glslang@@AEBW4VkShaderStageFlagBits@@@Z")]
            internal static extern void LoadProgram(global::System.IntPtr instance, global::System.IntPtr program, global::VkShaderStageFlagBits* stageFlag);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?ProcessShader@ShaderProgram@fl@@QEAAXXZ")]
            internal static extern void ProcessShader(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GlTypeToVk@ShaderProgram@fl@@QEAA?AW4VkFormat@@AEBH@Z")]
            internal static extern global::VkFormat GlTypeToVk(global::System.IntPtr instance, int* type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetDescriptorLocation@ShaderProgram@fl@@QEAAHAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
            internal static extern int GetDescriptorLocation(global::System.IntPtr instance, global::System.IntPtr descriptor);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetUniform@ShaderProgram@fl@@QEAAPEAVUniform@2@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
            internal static extern global::System.IntPtr GetUniform(global::System.IntPtr instance, global::System.IntPtr uniformName);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetUniformBlock@ShaderProgram@fl@@QEAAPEAVUniformBlock@2@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
            internal static extern global::System.IntPtr GetUniformBlock(global::System.IntPtr instance, global::System.IntPtr blockName);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetVertexAttribute@ShaderProgram@fl@@QEAAPEAVVertexAttribute@2@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
            internal static extern global::System.IntPtr GetVertexAttribute(global::System.IntPtr instance, global::System.IntPtr attributeName);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?InsertDefineBlock@ShaderProgram@fl@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBV34@0@Z")]
            internal static extern void InsertDefineBlock(global::System.IntPtr @return, global::System.IntPtr shaderCode, global::System.IntPtr blockCode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetShaderStage@ShaderProgram@fl@@SA?AW4VkShaderStageFlagBits@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
            internal static extern global::VkShaderStageFlagBits GetShaderStage(global::System.IntPtr filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?ToString@ShaderProgram@fl@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ")]
            internal static extern void ToString(global::System.IntPtr instance, global::System.IntPtr @return);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.ShaderProgram> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.ShaderProgram>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.ShaderProgram __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.ShaderProgram(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.ShaderProgram __CreateInstance(global::FlounderSharp.ShaderProgram.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.ShaderProgram(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.ShaderProgram.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.ShaderProgram.__Internal));
            *(global::FlounderSharp.ShaderProgram.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ShaderProgram(global::FlounderSharp.ShaderProgram.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ShaderProgram(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ShaderProgram()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.ShaderProgram.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor((__Instance + __PointerAdjustment));
        }

        ~ShaderProgram()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.ShaderProgram __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void LoadProgram(global::Glslang.TProgram program, global::VkShaderStageFlagBits* stageFlag)
        {
            if (ReferenceEquals(program, null))
                throw new global::System.ArgumentNullException("program", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = program.__Instance;
            __Internal.LoadProgram((__Instance + __PointerAdjustment), __arg0, stageFlag);
        }

        public void ProcessShader()
        {
            __Internal.ProcessShader((__Instance + __PointerAdjustment));
        }

        public global::VkFormat GlTypeToVk(ref int type)
        {
            fixed (int* __refParamPtr0 = &type)
            {
                var __arg0 = __refParamPtr0;
                var __ret = __Internal.GlTypeToVk((__Instance + __PointerAdjustment), __arg0);
                return __ret;
            }
        }

        public int GetDescriptorLocation(string descriptor)
        {
            var __allocator0 = new global::Std.Allocator<char>();
            var __basicString0 = global::Std.BasicStringExtensions.BasicString(descriptor, __allocator0);
            var __arg0 = __basicString0.__Instance;
            var __ret = __Internal.GetDescriptorLocation((__Instance + __PointerAdjustment), __arg0);
            __basicString0.Dispose(false);
            __allocator0.Dispose();
            return __ret;
        }

        public global::FlounderSharp.Uniform GetUniform(string uniformName)
        {
            var __allocator0 = new global::Std.Allocator<char>();
            var __basicString0 = global::Std.BasicStringExtensions.BasicString(uniformName, __allocator0);
            var __arg0 = __basicString0.__Instance;
            var __ret = __Internal.GetUniform((__Instance + __PointerAdjustment), __arg0);
            __basicString0.Dispose(false);
            __allocator0.Dispose();
            global::FlounderSharp.Uniform __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::FlounderSharp.Uniform.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::FlounderSharp.Uniform) global::FlounderSharp.Uniform.NativeToManagedMap[__ret];
            else __result0 = global::FlounderSharp.Uniform.__CreateInstance(__ret);
            return __result0;
        }

        public global::FlounderSharp.UniformBlock GetUniformBlock(string blockName)
        {
            var __allocator0 = new global::Std.Allocator<char>();
            var __basicString0 = global::Std.BasicStringExtensions.BasicString(blockName, __allocator0);
            var __arg0 = __basicString0.__Instance;
            var __ret = __Internal.GetUniformBlock((__Instance + __PointerAdjustment), __arg0);
            __basicString0.Dispose(false);
            __allocator0.Dispose();
            global::FlounderSharp.UniformBlock __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::FlounderSharp.UniformBlock.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::FlounderSharp.UniformBlock) global::FlounderSharp.UniformBlock.NativeToManagedMap[__ret];
            else __result0 = global::FlounderSharp.UniformBlock.__CreateInstance(__ret);
            return __result0;
        }

        public global::FlounderSharp.VertexAttribute GetVertexAttribute(string attributeName)
        {
            var __allocator0 = new global::Std.Allocator<char>();
            var __basicString0 = global::Std.BasicStringExtensions.BasicString(attributeName, __allocator0);
            var __arg0 = __basicString0.__Instance;
            var __ret = __Internal.GetVertexAttribute((__Instance + __PointerAdjustment), __arg0);
            __basicString0.Dispose(false);
            __allocator0.Dispose();
            global::FlounderSharp.VertexAttribute __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::FlounderSharp.VertexAttribute.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::FlounderSharp.VertexAttribute) global::FlounderSharp.VertexAttribute.NativeToManagedMap[__ret];
            else __result0 = global::FlounderSharp.VertexAttribute.__CreateInstance(__ret);
            return __result0;
        }

        public string ToString()
        {
            var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
            __Internal.ToString((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            var __basicStringRet = global::Std.BasicString<char, global::Std.CharTraits<char>, global::Std.Allocator<char>>.__CreateInstance(__ret);
            var __stringRet = global::Std.BasicStringExtensions.CStr(__basicStringRet);
            __basicStringRet.Dispose(false);
            return __stringRet;
        }

        public static string InsertDefineBlock(string shaderCode, string blockCode)
        {
            var __allocator0 = new global::Std.Allocator<char>();
            var __basicString0 = global::Std.BasicStringExtensions.BasicString(shaderCode, __allocator0);
            var __arg0 = __basicString0.__Instance;
            var __allocator1 = new global::Std.Allocator<char>();
            var __basicString1 = global::Std.BasicStringExtensions.BasicString(blockCode, __allocator1);
            var __arg1 = __basicString1.__Instance;
            var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
            __Internal.InsertDefineBlock(new IntPtr(&__ret), __arg0, __arg1);
            __basicString0.Dispose(false);
            __allocator0.Dispose();
            __basicString1.Dispose(false);
            __allocator1.Dispose();
            var __basicStringRet = global::Std.BasicString<char, global::Std.CharTraits<char>, global::Std.Allocator<char>>.__CreateInstance(__ret);
            var __stringRet = global::Std.BasicStringExtensions.CStr(__basicStringRet);
            __basicStringRet.Dispose(false);
            return __stringRet;
        }

        public static global::VkShaderStageFlagBits GetShaderStage(string filename)
        {
            var __allocator0 = new global::Std.Allocator<char>();
            var __basicString0 = global::Std.BasicStringExtensions.BasicString(filename, __allocator0);
            var __arg0 = __basicString0.__Instance;
            var __ret = __Internal.GetShaderStage(__arg0);
            __basicString0.Dispose(false);
            __allocator0.Dispose();
            return __ret;
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
