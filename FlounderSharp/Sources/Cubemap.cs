// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    /// <summary>Class that represents a loaded cubemap texture.</summary>
    public unsafe partial class Cubemap : global::FlounderSharp.IResource, global::FlounderSharp.IBuffer, global::FlounderSharp.IIDescriptor, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 192)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vfptr_IResource;

            [FieldOffset(8)]
            internal global::System.IntPtr vfptr_Buffer;

            [FieldOffset(16)]
            internal ulong m_size;

            [FieldOffset(24)]
            internal global::System.IntPtr m_buffer;

            [FieldOffset(32)]
            internal global::System.IntPtr m_bufferMemory;

            [FieldOffset(40)]
            internal global::System.IntPtr vfptr_IDescriptor;

            [FieldOffset(48)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C m_filename;

            [FieldOffset(80)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C m_fileExt;

            [FieldOffset(112)]
            internal uint m_mipLevels;

            [FieldOffset(116)]
            internal int m_components;

            [FieldOffset(120)]
            internal int m_width;

            [FieldOffset(124)]
            internal int m_height;

            [FieldOffset(128)]
            internal int m_depth;

            [FieldOffset(136)]
            internal global::System.IntPtr m_image;

            [FieldOffset(144)]
            internal global::System.IntPtr m_imageView;

            [FieldOffset(152)]
            internal global::System.IntPtr m_sampler;

            [FieldOffset(160)]
            internal global::VkFormat m_format;

            [FieldOffset(168)]
            internal global::VkDescriptorImageInfo.__Internal m_imageInfo;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Cubemap@fl@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0AEB_N@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, global::System.IntPtr filename, global::System.IntPtr fileExt, bool* mipmap);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Cubemap@fl@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Resource@Cubemap@fl@@SAPEAV12@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z")]
            internal static extern global::System.IntPtr Resource(global::System.IntPtr filename, global::System.IntPtr fileExt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CreateDescriptor@Cubemap@fl@@SA?AVDescriptorType@2@AEBI0@Z")]
            internal static extern void CreateDescriptor(global::System.IntPtr @return, uint* binding, uint* stage);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetSize@Buffer@fl@@QEBA_KXZ")]
            internal static extern ulong GetSize(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetBuffer@Buffer@fl@@QEBAPEAUVkBuffer_T@@XZ")]
            internal static extern global::System.IntPtr GetBuffer(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetBufferMemory@Buffer@fl@@QEBAPEAUVkDeviceMemory_T@@XZ")]
            internal static extern global::System.IntPtr GetBufferMemory(global::System.IntPtr instance);
        }

        internal static new global::FlounderSharp.Cubemap __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Cubemap(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.Cubemap __CreateInstance(global::FlounderSharp.Cubemap.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Cubemap(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.Cubemap.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Cubemap.__Internal));
            global::FlounderSharp.Cubemap.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private Cubemap(global::FlounderSharp.Cubemap.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Cubemap(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0), *(void**) (__Instance + 8), *(void**) (__Instance + 40) };
            else
                SetupVTables(true);
        }

        /// <summary>A new cubemap object.</summary>
        public Cubemap(string filename, string fileExt, ref bool mipmap)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Cubemap.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __allocator0 = new global::Std.Allocator<char>();
            var __basicString0 = global::Std.BasicStringExtensions.BasicString(filename, __allocator0);
            var __arg0 = __basicString0.__Instance;
            var __allocator1 = new global::Std.Allocator<char>();
            var __basicString1 = global::Std.BasicStringExtensions.BasicString(fileExt, __allocator1);
            var __arg1 = __basicString1.__Instance;
            fixed (bool* __refParamPtr2 = &mipmap)
            {
                var __arg2 = __refParamPtr2;
                __Internal.ctor((__Instance + __PointerAdjustment), __arg0, __arg1, __arg2);
                __basicString0.Dispose(false);
                __allocator0.Dispose();
                __basicString1.Dispose(false);
                __allocator1.Dispose();
            }
            SetupVTables(GetType().FullName == "FlounderSharp.Cubemap");
        }

        public Cubemap(global::FlounderSharp.Cubemap _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Cubemap.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
            SetupVTables(GetType().FullName == "FlounderSharp.Cubemap");
        }

        ~Cubemap()
        {
            Dispose(false);
        }

        public virtual global::VkWriteDescriptorSet GetWriteDescriptor(ref uint binding, global::FlounderSharp.DescriptorSet descriptorSet)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[2] + 2 * 8);
            var ___GetWriteDescriptorDelegate = (global::FlounderSharp.Delegates.Action_IntPtr_IntPtr_uintPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Action_IntPtr_IntPtr_uintPtr_IntPtr));
            fixed (uint* __refParamPtr0 = &binding)
            {
                var __arg0 = __refParamPtr0;
                if (ReferenceEquals(descriptorSet, null))
                    throw new global::System.ArgumentNullException("descriptorSet", "Cannot be null because it is a C++ reference (&).");
                var __arg1 = descriptorSet.__Instance;
                var __ret = new global::VkWriteDescriptorSet.__Internal();
                ___GetWriteDescriptorDelegate((__Instance + 40), new IntPtr(&__ret), __arg0, __arg1);
                return global::VkWriteDescriptorSet.__CreateInstance(__ret);
            }
        }

        public static global::FlounderSharp.Cubemap Resource(string filename, string fileExt)
        {
            var __allocator0 = new global::Std.Allocator<char>();
            var __basicString0 = global::Std.BasicStringExtensions.BasicString(filename, __allocator0);
            var __arg0 = __basicString0.__Instance;
            var __allocator1 = new global::Std.Allocator<char>();
            var __basicString1 = global::Std.BasicStringExtensions.BasicString(fileExt, __allocator1);
            var __arg1 = __basicString1.__Instance;
            var __ret = __Internal.Resource(__arg0, __arg1);
            __basicString0.Dispose(false);
            __allocator0.Dispose();
            __basicString1.Dispose(false);
            __allocator1.Dispose();
            global::FlounderSharp.Cubemap __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::FlounderSharp.Cubemap.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::FlounderSharp.Cubemap) global::FlounderSharp.Cubemap.NativeToManagedMap[__ret];
            else global::FlounderSharp.Cubemap.NativeToManagedMap[__ret] = __result0 = (global::FlounderSharp.Cubemap) global::FlounderSharp.Cubemap.__CreateInstance(__ret);
            return __result0;
        }

        public static global::FlounderSharp.DescriptorType CreateDescriptor(ref uint binding, ref uint stage)
        {
            fixed (uint* __refParamPtr0 = &binding)
            {
                var __arg0 = __refParamPtr0;
                fixed (uint* __refParamPtr1 = &stage)
                {
                    var __arg1 = __refParamPtr1;
                    var __ret = new global::FlounderSharp.DescriptorType.__Internal();
                    __Internal.CreateDescriptor(new IntPtr(&__ret), __arg0, __arg1);
                    return global::FlounderSharp.DescriptorType.__CreateInstance(__ret);
                }
            }
        }

        protected ulong MSize
        {
            get
            {
                return ((global::FlounderSharp.Cubemap.__Internal*) __Instance)->m_size;
            }

            set
            {
                ((global::FlounderSharp.Cubemap.__Internal*)__Instance)->m_size = value;
            }
        }

        protected global::VkBufferT MBuffer
        {
            get
            {
                global::VkBufferT __result0;
                if (((global::FlounderSharp.Cubemap.__Internal*) __Instance)->m_buffer == IntPtr.Zero) __result0 = null;
                else if (global::VkBufferT.NativeToManagedMap.ContainsKey(((global::FlounderSharp.Cubemap.__Internal*) __Instance)->m_buffer))
                    __result0 = (global::VkBufferT) global::VkBufferT.NativeToManagedMap[((global::FlounderSharp.Cubemap.__Internal*) __Instance)->m_buffer];
                else __result0 = global::VkBufferT.__CreateInstance(((global::FlounderSharp.Cubemap.__Internal*) __Instance)->m_buffer);
                return __result0;
            }

            set
            {
                ((global::FlounderSharp.Cubemap.__Internal*)__Instance)->m_buffer = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected global::VkDeviceMemoryT MBufferMemory
        {
            get
            {
                global::VkDeviceMemoryT __result0;
                if (((global::FlounderSharp.Cubemap.__Internal*) __Instance)->m_bufferMemory == IntPtr.Zero) __result0 = null;
                else if (global::VkDeviceMemoryT.NativeToManagedMap.ContainsKey(((global::FlounderSharp.Cubemap.__Internal*) __Instance)->m_bufferMemory))
                    __result0 = (global::VkDeviceMemoryT) global::VkDeviceMemoryT.NativeToManagedMap[((global::FlounderSharp.Cubemap.__Internal*) __Instance)->m_bufferMemory];
                else __result0 = global::VkDeviceMemoryT.__CreateInstance(((global::FlounderSharp.Cubemap.__Internal*) __Instance)->m_bufferMemory);
                return __result0;
            }

            set
            {
                ((global::FlounderSharp.Cubemap.__Internal*)__Instance)->m_bufferMemory = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::System.IntPtr __PointerToBuffer
        {
            get
            {
                return __Instance + 8;
            }
        }

        public global::System.IntPtr __PointerToIDescriptor
        {
            get
            {
                return __Instance + 40;
            }
        }

        public override string Filename
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 8);
                var ___GetFilenameDelegate = (global::FlounderSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Action_IntPtr_IntPtr));
                var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                ___GetFilenameDelegate((__Instance + __PointerAdjustment), new IntPtr(&__ret));
                var __basicStringRet = global::Std.BasicString<char, global::Std.CharTraits<char>, global::Std.Allocator<char>>.__CreateInstance(__ret);
                var __stringRet = global::Std.BasicStringExtensions.CStr(__basicStringRet);
                __basicStringRet.Dispose(false);
                return __stringRet;
            }
        }

        public ulong Size
        {
            get
            {
                var __ret = __Internal.GetSize((__Instance + 8));
                return __ret;
            }
        }

        public global::VkBufferT Buffer
        {
            get
            {
                var __ret = __Internal.GetBuffer((__Instance + 8));
                global::VkBufferT __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::VkBufferT.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::VkBufferT) global::VkBufferT.NativeToManagedMap[__ret];
                else __result0 = global::VkBufferT.__CreateInstance(__ret);
                return __result0;
            }
        }

        public global::VkDeviceMemoryT BufferMemory
        {
            get
            {
                var __ret = __Internal.GetBufferMemory((__Instance + 8));
                global::VkDeviceMemoryT __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::VkDeviceMemoryT.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::VkDeviceMemoryT) global::VkDeviceMemoryT.NativeToManagedMap[__ret];
                else __result0 = global::VkDeviceMemoryT.__CreateInstance(__ret);
                return __result0;
            }
        }

        #region Virtual table interop

        // ~Cubemap()
        private static global::FlounderSharp.Delegates.Action_IntPtr_int _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr instance, int delete)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.Cubemap) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // std::string GetFilename() override { return m_filename; }
        private static global::FlounderSharp.Delegates.Action_IntPtr_IntPtr _GetFilenameDelegateInstance;

        private static void _GetFilenameDelegateHook(global::System.IntPtr instance, global::System.IntPtr @return)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.Cubemap) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Filename;
            var __allocator0 = new global::Std.Allocator<char>();
            var __basicString0 = global::Std.BasicStringExtensions.BasicString(__ret, __allocator0);
            *(global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C*) @return = *(global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C*) __basicString0.__Instance;
        }

        // VkWriteDescriptorSet GetWriteDescriptor(const uint32_t &binding, const DescriptorSet &descriptorSet) const override
        private static global::FlounderSharp.Delegates.Action_IntPtr_IntPtr_uintPtr_IntPtr _GetWriteDescriptorDelegateInstance;

        private static void _GetWriteDescriptorDelegateHook(global::System.IntPtr instance, global::System.IntPtr @return, uint* binding, global::System.IntPtr descriptorSet)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.Cubemap) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::FlounderSharp.DescriptorSet __result2;
            if (descriptorSet == IntPtr.Zero) __result2 = null;
            else if (global::FlounderSharp.DescriptorSet.NativeToManagedMap.ContainsKey(descriptorSet))
                __result2 = (global::FlounderSharp.DescriptorSet) global::FlounderSharp.DescriptorSet.NativeToManagedMap[descriptorSet];
            else __result2 = global::FlounderSharp.DescriptorSet.__CreateInstance(descriptorSet);
            var __ret = __target.GetWriteDescriptor(ref *binding, __result2);
            *(global::VkWriteDescriptorSet.__Internal*) @return = ReferenceEquals(__ret, null) ? new global::VkWriteDescriptorSet.__Internal() : *(global::VkWriteDescriptorSet.__Internal*) __ret.__Instance;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0), *(void**) (__Instance + 8), *(void**) (__Instance + 40) };

            if (_Thunks == null)
            {
                _Thunks = new void*[3];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _GetFilenameDelegateInstance += _GetFilenameDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_GetFilenameDelegateInstance).ToPointer();
                _GetWriteDescriptorDelegateInstance += _GetWriteDescriptorDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_GetWriteDescriptorDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[3];
                    var vfptr0 = Marshal.AllocHGlobal(3 * 8);
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    var vfptr1 = Marshal.AllocHGlobal(2 * 8);
                    __ManagedVTablesDtorOnly[1] = vfptr1.ToPointer();
                    *(void**) (vfptr1 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 8 + 0);
                    *(void**) (vfptr1 + 8) = _Thunks[0];
                    var vfptr2 = Marshal.AllocHGlobal(3 * 8);
                    __ManagedVTablesDtorOnly[2] = vfptr2.ToPointer();
                    *(void**) (vfptr2 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 40 + 0);
                    *(void**) (vfptr2 + 8) = _Thunks[0];
                    *(void**) (vfptr2 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 40 + 16);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
                *(void**) (__Instance + 8) = __ManagedVTablesDtorOnly[1];
                *(void**) (__Instance + 40) = __ManagedVTablesDtorOnly[2];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[3];
                    var vfptr0 = Marshal.AllocHGlobal(3 * 8);
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = _Thunks[1];
                    var vfptr1 = Marshal.AllocHGlobal(2 * 8);
                    __ManagedVTables[1] = vfptr1.ToPointer();
                    *(void**) (vfptr1 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 8 + 0);
                    *(void**) (vfptr1 + 8) = _Thunks[0];
                    var vfptr2 = Marshal.AllocHGlobal(3 * 8);
                    __ManagedVTables[2] = vfptr2.ToPointer();
                    *(void**) (vfptr2 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 40 + 0);
                    *(void**) (vfptr2 + 8) = _Thunks[0];
                    *(void**) (vfptr2 + 16) = _Thunks[2];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
                *(void**) (__Instance + 8) = __ManagedVTables[1];
                *(void**) (__Instance + 40) = __ManagedVTables[2];
            }
        }

        #endregion
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
