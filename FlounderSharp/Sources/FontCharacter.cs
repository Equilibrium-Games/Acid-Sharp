// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    /// <summary>Simple data structure class holding information about a certain glyph in the font texture atlas. All sizes are for a font-size of 1.</summary>
    public unsafe partial class FontCharacter : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int m_id;

            [FieldOffset(8)]
            internal double m_textureCoordX;

            [FieldOffset(16)]
            internal double m_textureCoordY;

            [FieldOffset(24)]
            internal double m_maxTextureCoordX;

            [FieldOffset(32)]
            internal double m_maxTextureCoordY;

            [FieldOffset(40)]
            internal double m_offsetX;

            [FieldOffset(48)]
            internal double m_offsetY;

            [FieldOffset(56)]
            internal double m_sizeX;

            [FieldOffset(64)]
            internal double m_sizeY;

            [FieldOffset(72)]
            internal double m_advanceX;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0FontCharacter@fl@@QEAA@AEBHAEBN11111111@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, int* id, double* textureCoordX, double* textureCoordY, double* textureSizeX, double* textureSizeY, double* offsetX, double* offsetY, double* sizeX, double* sizeY, double* advanceX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1FontCharacter@fl@@QEAA@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetId@FontCharacter@fl@@QEBAHXZ")]
            internal static extern int GetId(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetTextureCoordX@FontCharacter@fl@@QEBANXZ")]
            internal static extern double GetTextureCoordX(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetTextureCoordY@FontCharacter@fl@@QEBANXZ")]
            internal static extern double GetTextureCoordY(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetMaxTextureCoordX@FontCharacter@fl@@QEBANXZ")]
            internal static extern double GetMaxTextureCoordX(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetMaxTextureCoordY@FontCharacter@fl@@QEBANXZ")]
            internal static extern double GetMaxTextureCoordY(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetOffsetX@FontCharacter@fl@@QEBANXZ")]
            internal static extern double GetOffsetX(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetOffsetY@FontCharacter@fl@@QEBANXZ")]
            internal static extern double GetOffsetY(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetSizeX@FontCharacter@fl@@QEBANXZ")]
            internal static extern double GetSizeX(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetSizeY@FontCharacter@fl@@QEBANXZ")]
            internal static extern double GetSizeY(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetAdvanceX@FontCharacter@fl@@QEBANXZ")]
            internal static extern double GetAdvanceX(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.FontCharacter> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.FontCharacter>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.FontCharacter __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.FontCharacter(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.FontCharacter __CreateInstance(global::FlounderSharp.FontCharacter.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.FontCharacter(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.FontCharacter.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.FontCharacter.__Internal));
            *(global::FlounderSharp.FontCharacter.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FontCharacter(global::FlounderSharp.FontCharacter.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FontCharacter(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        /// <summary>Creates a new character.</summary>
        /// <param name="sizeY">The height of the character's quad in screen space.</param>
        /// <param name="sizeX">The width of the character's quad in screen space.</param>
        /// <param name="offsetY">The y distance from the cursor to the top edge of the character's quad.</param>
        /// <param name="offsetX">The x distance from the cursor to the left edge of the character's quad.</param>
        /// <param name="advanceX">How far in pixels the cursor should advance after adding this character.</param>
        /// <param name="textureSizeX">The width of the character in the texture atlas.</param>
        /// <param name="textureSizeY">The height of the character in the texture atlas.</param>
        /// <param name="textureCoordY">The y texture coordinate for the top left corner of the character in the texture atlas.</param>
        /// <param name="textureCoordX">The x texture coordinate for the top left corner of the character in the texture atlas.</param>
        /// <param name="id">The ASCII value of the character.</param>
        public FontCharacter(ref int id, ref double textureCoordX, ref double textureCoordY, ref double textureSizeX, ref double textureSizeY, ref double offsetX, ref double offsetY, ref double sizeX, ref double sizeY, ref double advanceX)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.FontCharacter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            fixed (int* __refParamPtr0 = &id)
            {
                var __arg0 = __refParamPtr0;
                fixed (double* __refParamPtr1 = &textureCoordX)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (double* __refParamPtr2 = &textureCoordY)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (double* __refParamPtr3 = &textureSizeX)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (double* __refParamPtr4 = &textureSizeY)
                            {
                                var __arg4 = __refParamPtr4;
                                fixed (double* __refParamPtr5 = &offsetX)
                                {
                                    var __arg5 = __refParamPtr5;
                                    fixed (double* __refParamPtr6 = &offsetY)
                                    {
                                        var __arg6 = __refParamPtr6;
                                        fixed (double* __refParamPtr7 = &sizeX)
                                        {
                                            var __arg7 = __refParamPtr7;
                                            fixed (double* __refParamPtr8 = &sizeY)
                                            {
                                                var __arg8 = __refParamPtr8;
                                                fixed (double* __refParamPtr9 = &advanceX)
                                                {
                                                    var __arg9 = __refParamPtr9;
                                                    __Internal.ctor((__Instance + __PointerAdjustment), __arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        ~FontCharacter()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.FontCharacter __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Id
        {
            get
            {
                var __ret = __Internal.GetId((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public double TextureCoordX
        {
            get
            {
                var __ret = __Internal.GetTextureCoordX((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public double TextureCoordY
        {
            get
            {
                var __ret = __Internal.GetTextureCoordY((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public double MaxTextureCoordX
        {
            get
            {
                var __ret = __Internal.GetMaxTextureCoordX((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public double MaxTextureCoordY
        {
            get
            {
                var __ret = __Internal.GetMaxTextureCoordY((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public double OffsetX
        {
            get
            {
                var __ret = __Internal.GetOffsetX((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public double OffsetY
        {
            get
            {
                var __ret = __Internal.GetOffsetY((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public double SizeX
        {
            get
            {
                var __ret = __Internal.GetSizeX((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public double SizeY
        {
            get
            {
                var __ret = __Internal.GetSizeY((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public double AdvanceX
        {
            get
            {
                var __ret = __Internal.GetAdvanceX((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
