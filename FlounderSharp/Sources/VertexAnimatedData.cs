// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    public unsafe partial class VertexAnimatedData : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 88)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::FlounderSharp.Vector3.__Internal m_position;

            [FieldOffset(12)]
            internal int m_uvIndex;

            [FieldOffset(16)]
            internal int m_normalIndex;

            [FieldOffset(24)]
            internal global::System.IntPtr m_duplicateVertex;

            [FieldOffset(32)]
            internal uint m_index;

            [FieldOffset(36)]
            internal float m_length;

            [FieldOffset(40)]
            internal global::Std.Vector.__Internalc__N_std_S_vector_____N_fl_S_Vector3___N_std_S_allocator__S0_ m_tangents;

            [FieldOffset(64)]
            internal global::FlounderSharp.Vector3.__Internal m_averagedTangent;

            [FieldOffset(80)]
            internal global::System.IntPtr m_skinData;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0VertexAnimatedData@fl@@QEAA@AEBIAEBVVector3@1@@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, uint* index, global::System.IntPtr position);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0VertexAnimatedData@fl@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1VertexAnimatedData@fl@@QEAA@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?AddTangent@VertexAnimatedData@fl@@QEAAXPEAVVector3@2@@Z")]
            internal static extern void AddTangent(global::System.IntPtr instance, global::System.IntPtr tangent);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?AverageTangents@VertexAnimatedData@fl@@QEAAXXZ")]
            internal static extern void AverageTangents(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?HasSameTextureAndNormal@VertexAnimatedData@fl@@QEBA_NAEBH0@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool HasSameTextureAndNormal(global::System.IntPtr instance, int* textureIndexOther, int* normalIndexOther);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetUvIndex@VertexAnimatedData@fl@@QEBAHXZ")]
            internal static extern int GetUvIndex(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetUvIndex@VertexAnimatedData@fl@@QEAAXAEBH@Z")]
            internal static extern void SetUvIndex(global::System.IntPtr instance, int* uvIndex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetNormalIndex@VertexAnimatedData@fl@@QEBAHXZ")]
            internal static extern int GetNormalIndex(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetNormalIndex@VertexAnimatedData@fl@@QEAAXAEBH@Z")]
            internal static extern void SetNormalIndex(global::System.IntPtr instance, int* normalIndex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetDuplicateVertex@VertexAnimatedData@fl@@QEBAPEAV12@XZ")]
            internal static extern global::System.IntPtr GetDuplicateVertex(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetDuplicateVertex@VertexAnimatedData@fl@@QEAAXPEAV12@@Z")]
            internal static extern void SetDuplicateVertex(global::System.IntPtr instance, global::System.IntPtr duplicateVertex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetSkinData@VertexAnimatedData@fl@@QEBAPEAVVertexSkinData@2@XZ")]
            internal static extern global::System.IntPtr GetSkinData(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetSkinData@VertexAnimatedData@fl@@QEAAXPEAVVertexSkinData@2@@Z")]
            internal static extern void SetSkinData(global::System.IntPtr instance, global::System.IntPtr skinData);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetPosition@VertexAnimatedData@fl@@QEBA?AVVector3@2@XZ")]
            internal static extern void GetPosition(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetIndex@VertexAnimatedData@fl@@QEBAIXZ")]
            internal static extern uint GetIndex(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetLength@VertexAnimatedData@fl@@QEBAMXZ")]
            internal static extern float GetLength(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetAverageTangent@VertexAnimatedData@fl@@QEBA?AVVector3@2@XZ")]
            internal static extern void GetAverageTangent(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?IsSet@VertexAnimatedData@fl@@QEBA_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsSet(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.VertexAnimatedData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.VertexAnimatedData>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.VertexAnimatedData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.VertexAnimatedData(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.VertexAnimatedData __CreateInstance(global::FlounderSharp.VertexAnimatedData.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.VertexAnimatedData(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.VertexAnimatedData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.VertexAnimatedData.__Internal));
            global::FlounderSharp.VertexAnimatedData.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private VertexAnimatedData(global::FlounderSharp.VertexAnimatedData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VertexAnimatedData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VertexAnimatedData(ref uint index, global::FlounderSharp.Vector3 position)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.VertexAnimatedData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            fixed (uint* __refParamPtr0 = &index)
            {
                var __arg0 = __refParamPtr0;
                if (ReferenceEquals(position, null))
                    throw new global::System.ArgumentNullException("position", "Cannot be null because it is a C++ reference (&).");
                var __arg1 = position.__Instance;
                __Internal.ctor((__Instance + __PointerAdjustment), __arg0, __arg1);
            }
        }

        public VertexAnimatedData(global::FlounderSharp.VertexAnimatedData _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.VertexAnimatedData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
        }

        ~VertexAnimatedData()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.VertexAnimatedData __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void AddTangent(global::FlounderSharp.Vector3 tangent)
        {
            var __arg0 = ReferenceEquals(tangent, null) ? global::System.IntPtr.Zero : tangent.__Instance;
            __Internal.AddTangent((__Instance + __PointerAdjustment), __arg0);
        }

        public void AverageTangents()
        {
            __Internal.AverageTangents((__Instance + __PointerAdjustment));
        }

        public bool HasSameTextureAndNormal(ref int textureIndexOther, ref int normalIndexOther)
        {
            fixed (int* __refParamPtr0 = &textureIndexOther)
            {
                var __arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &normalIndexOther)
                {
                    var __arg1 = __refParamPtr1;
                    var __ret = __Internal.HasSameTextureAndNormal((__Instance + __PointerAdjustment), __arg0, __arg1);
                    return __ret;
                }
            }
        }

        public int UvIndex
        {
            get
            {
                var __ret = __Internal.GetUvIndex((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetUvIndex((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public int NormalIndex
        {
            get
            {
                var __ret = __Internal.GetNormalIndex((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetNormalIndex((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public global::FlounderSharp.VertexAnimatedData DuplicateVertex
        {
            get
            {
                var __ret = __Internal.GetDuplicateVertex((__Instance + __PointerAdjustment));
                global::FlounderSharp.VertexAnimatedData __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.VertexAnimatedData.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.VertexAnimatedData) global::FlounderSharp.VertexAnimatedData.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.VertexAnimatedData.__CreateInstance(__ret);
                return __result0;
            }

            set
            {
                var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                __Internal.SetDuplicateVertex((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public global::FlounderSharp.VertexSkinData SkinData
        {
            get
            {
                var __ret = __Internal.GetSkinData((__Instance + __PointerAdjustment));
                global::FlounderSharp.VertexSkinData __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.VertexSkinData.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.VertexSkinData) global::FlounderSharp.VertexSkinData.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.VertexSkinData.__CreateInstance(__ret);
                return __result0;
            }

            set
            {
                var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                __Internal.SetSkinData((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public global::FlounderSharp.Vector3 Position
        {
            get
            {
                var __ret = new global::FlounderSharp.Vector3.__Internal();
                __Internal.GetPosition((__Instance + __PointerAdjustment), new IntPtr(&__ret));
                return global::FlounderSharp.Vector3.__CreateInstance(__ret);
            }
        }

        public uint Index
        {
            get
            {
                var __ret = __Internal.GetIndex((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public float Length
        {
            get
            {
                var __ret = __Internal.GetLength((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public global::FlounderSharp.Vector3 AverageTangent
        {
            get
            {
                var __ret = new global::FlounderSharp.Vector3.__Internal();
                __Internal.GetAverageTangent((__Instance + __PointerAdjustment), new IntPtr(&__ret));
                return global::FlounderSharp.Vector3.__CreateInstance(__ret);
            }
        }

        public bool IsSet
        {
            get
            {
                var __ret = __Internal.IsSet((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
