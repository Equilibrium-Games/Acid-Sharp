// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    public unsafe partial class PipelineDefine : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 64)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C m_name;

            [FieldOffset(32)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C m_value;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0PipelineDefine@fl@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, global::System.IntPtr name, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0PipelineDefine@fl@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1PipelineDefine@fl@@QEAA@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetName@PipelineDefine@fl@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ")]
            internal static extern void GetName(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetValue@PipelineDefine@fl@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ")]
            internal static extern void GetValue(global::System.IntPtr instance, global::System.IntPtr @return);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.PipelineDefine> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.PipelineDefine>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.PipelineDefine __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.PipelineDefine(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.PipelineDefine __CreateInstance(global::FlounderSharp.PipelineDefine.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.PipelineDefine(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.PipelineDefine.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.PipelineDefine.__Internal));
            global::FlounderSharp.PipelineDefine.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private PipelineDefine(global::FlounderSharp.PipelineDefine.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PipelineDefine(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public PipelineDefine(string name, string value)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.PipelineDefine.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __allocator0 = new global::Std.Allocator<char>();
            var __basicString0 = global::Std.BasicStringExtensions.BasicString(name, __allocator0);
            var __arg0 = __basicString0.__Instance;
            var __allocator1 = new global::Std.Allocator<char>();
            var __basicString1 = global::Std.BasicStringExtensions.BasicString(value, __allocator1);
            var __arg1 = __basicString1.__Instance;
            __Internal.ctor((__Instance + __PointerAdjustment), __arg0, __arg1);
            __basicString0.Dispose(false);
            __allocator0.Dispose();
            __basicString1.Dispose(false);
            __allocator1.Dispose();
        }

        public PipelineDefine(global::FlounderSharp.PipelineDefine _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.PipelineDefine.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
        }

        ~PipelineDefine()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.PipelineDefine __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public string Name
        {
            get
            {
                var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.GetName((__Instance + __PointerAdjustment), new IntPtr(&__ret));
                var __basicStringRet = global::Std.BasicString<char, global::Std.CharTraits<char>, global::Std.Allocator<char>>.__CreateInstance(__ret);
                var __stringRet = global::Std.BasicStringExtensions.CStr(__basicStringRet);
                __basicStringRet.Dispose(false);
                return __stringRet;
            }
        }

        public string Value
        {
            get
            {
                var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.GetValue((__Instance + __PointerAdjustment), new IntPtr(&__ret));
                var __basicStringRet = global::Std.BasicString<char, global::Std.CharTraits<char>, global::Std.Allocator<char>>.__CreateInstance(__ret);
                var __stringRet = global::Std.BasicStringExtensions.CStr(__basicStringRet);
                __basicStringRet.Dispose(false);
                return __stringRet;
            }
        }
    }

    /// <summary>Class that represents a Vulkan pipeline.</summary>
    public unsafe partial class Pipeline : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 624)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::FlounderSharp.GraphicsStage.__Internal m_graphicsStage;

            [FieldOffset(8)]
            internal global::FlounderSharp.PipelineCreate.__Internal m_pipelineCreateInfo;

            [FieldOffset(96)]
            internal global::Std.Vector.__Internalc__N_std_S_vector____N_fl_S_PipelineDefine___N_std_S_allocator__S0_ m_defines;

            [FieldOffset(120)]
            internal global::System.IntPtr m_shaderProgram;

            [FieldOffset(128)]
            internal global::Std.Vector.__Internalc__N_std_S_vector_____S_VkShaderModule_T___N_std_S_allocator__S0_ m_modules;

            [FieldOffset(152)]
            internal global::Std.Vector.__Internalc__N_std_S_vector____S_VkPipelineShaderStageCreateInfo___N_std_S_allocator__S0_ m_stages;

            [FieldOffset(176)]
            internal global::System.IntPtr m_descriptorSetLayout;

            [FieldOffset(184)]
            internal global::System.IntPtr m_descriptorPool;

            [FieldOffset(192)]
            internal global::System.IntPtr m_pipeline;

            [FieldOffset(200)]
            internal global::System.IntPtr m_pipelineLayout;

            [FieldOffset(208)]
            internal global::VkPipelineInputAssemblyStateCreateInfo.__Internal m_inputAssemblyState;

            [FieldOffset(240)]
            internal global::VkPipelineRasterizationStateCreateInfo.__Internal m_rasterizationState;

            [FieldOffset(304)]
            internal global::Std.Array.__Internalc__N_std_S_array____S_VkPipelineColorBlendAttachmentState_Vk1 m_blendAttachmentStates;

            [FieldOffset(336)]
            internal global::VkPipelineColorBlendStateCreateInfo.__Internal m_colourBlendState;

            [FieldOffset(392)]
            internal global::VkPipelineDepthStencilStateCreateInfo.__Internal m_depthStencilState;

            [FieldOffset(496)]
            internal global::VkPipelineViewportStateCreateInfo.__Internal m_viewportState;

            [FieldOffset(544)]
            internal global::VkPipelineMultisampleStateCreateInfo.__Internal m_multisampleState;

            [FieldOffset(592)]
            internal global::VkPipelineDynamicStateCreateInfo.__Internal m_dynamicState;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Pipeline@fl@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1Pipeline@fl@@QEAA@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?BindPipeline@Pipeline@fl@@QEBAXAEBQEAUVkCommandBuffer_T@@@Z")]
            internal static extern void BindPipeline(global::System.IntPtr instance, global::System.IntPtr commandBuffer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetDepthStencil@Pipeline@fl@@QEBAPEAVDepthStencil@2@AEBH@Z")]
            internal static extern global::System.IntPtr GetDepthStencil(global::System.IntPtr instance, int* stage);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetTexture@Pipeline@fl@@QEBAPEAVTexture@2@AEBIAEBH@Z")]
            internal static extern global::System.IntPtr GetTexture(global::System.IntPtr instance, uint* i, int* stage);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetPipelineCreateInfo@Pipeline@fl@@QEBA?AVPipelineCreate@2@XZ")]
            internal static extern void GetPipelineCreateInfo(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetShaderProgram@Pipeline@fl@@QEBAPEAVShaderProgram@2@XZ")]
            internal static extern global::System.IntPtr GetShaderProgram(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetGraphicsStage@Pipeline@fl@@QEBA?AVGraphicsStage@2@XZ")]
            internal static extern void GetGraphicsStage(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetDescriptorSetLayout@Pipeline@fl@@QEBAPEAUVkDescriptorSetLayout_T@@XZ")]
            internal static extern global::System.IntPtr GetDescriptorSetLayout(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetDescriptorPool@Pipeline@fl@@QEBAPEAUVkDescriptorPool_T@@XZ")]
            internal static extern global::System.IntPtr GetDescriptorPool(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetPipeline@Pipeline@fl@@QEBAPEAUVkPipeline_T@@XZ")]
            internal static extern global::System.IntPtr GetPipeline(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetPipelineLayout@Pipeline@fl@@QEBAPEAUVkPipelineLayout_T@@XZ")]
            internal static extern global::System.IntPtr GetPipelineLayout(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.Pipeline> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.Pipeline>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.Pipeline __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Pipeline(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.Pipeline __CreateInstance(global::FlounderSharp.Pipeline.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Pipeline(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.Pipeline.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Pipeline.__Internal));
            global::FlounderSharp.Pipeline.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private Pipeline(global::FlounderSharp.Pipeline.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Pipeline(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Pipeline(global::FlounderSharp.Pipeline _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Pipeline.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
        }

        ~Pipeline()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.Pipeline __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void BindPipeline(global::VkCommandBufferT commandBuffer)
        {
            if (ReferenceEquals(commandBuffer, null))
                throw new global::System.ArgumentNullException("commandBuffer", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = commandBuffer.__Instance;
            __Internal.BindPipeline((__Instance + __PointerAdjustment), __arg0);
        }

        public global::FlounderSharp.DepthStencil GetDepthStencil(ref int stage)
        {
            fixed (int* __refParamPtr0 = &stage)
            {
                var __arg0 = __refParamPtr0;
                var __ret = __Internal.GetDepthStencil((__Instance + __PointerAdjustment), __arg0);
                global::FlounderSharp.DepthStencil __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.DepthStencil.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.DepthStencil) global::FlounderSharp.DepthStencil.NativeToManagedMap[__ret];
                else global::FlounderSharp.DepthStencil.NativeToManagedMap[__ret] = __result0 = (global::FlounderSharp.DepthStencil) global::FlounderSharp.DepthStencil.__CreateInstance(__ret);
                return __result0;
            }
        }

        public global::FlounderSharp.Texture GetTexture(ref uint i, ref int stage)
        {
            fixed (uint* __refParamPtr0 = &i)
            {
                var __arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &stage)
                {
                    var __arg1 = __refParamPtr1;
                    var __ret = __Internal.GetTexture((__Instance + __PointerAdjustment), __arg0, __arg1);
                    global::FlounderSharp.Texture __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::FlounderSharp.Texture.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::FlounderSharp.Texture) global::FlounderSharp.Texture.NativeToManagedMap[__ret];
                    else global::FlounderSharp.Texture.NativeToManagedMap[__ret] = __result0 = (global::FlounderSharp.Texture) global::FlounderSharp.Texture.__CreateInstance(__ret);
                    return __result0;
                }
            }
        }

        public global::FlounderSharp.PipelineCreate PipelineCreateInfo
        {
            get
            {
                var __ret = new global::FlounderSharp.PipelineCreate.__Internal();
                __Internal.GetPipelineCreateInfo((__Instance + __PointerAdjustment), new IntPtr(&__ret));
                return global::FlounderSharp.PipelineCreate.__CreateInstance(__ret);
            }
        }

        public global::FlounderSharp.ShaderProgram ShaderProgram
        {
            get
            {
                var __ret = __Internal.GetShaderProgram((__Instance + __PointerAdjustment));
                global::FlounderSharp.ShaderProgram __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.ShaderProgram.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.ShaderProgram) global::FlounderSharp.ShaderProgram.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.ShaderProgram.__CreateInstance(__ret);
                return __result0;
            }
        }

        public global::FlounderSharp.GraphicsStage GraphicsStage
        {
            get
            {
                var __ret = new global::FlounderSharp.GraphicsStage.__Internal();
                __Internal.GetGraphicsStage((__Instance + __PointerAdjustment), new IntPtr(&__ret));
                return global::FlounderSharp.GraphicsStage.__CreateInstance(__ret);
            }
        }

        public global::VkDescriptorSetLayoutT DescriptorSetLayout
        {
            get
            {
                var __ret = __Internal.GetDescriptorSetLayout((__Instance + __PointerAdjustment));
                global::VkDescriptorSetLayoutT __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::VkDescriptorSetLayoutT.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::VkDescriptorSetLayoutT) global::VkDescriptorSetLayoutT.NativeToManagedMap[__ret];
                else __result0 = global::VkDescriptorSetLayoutT.__CreateInstance(__ret);
                return __result0;
            }
        }

        public global::VkDescriptorPoolT DescriptorPool
        {
            get
            {
                var __ret = __Internal.GetDescriptorPool((__Instance + __PointerAdjustment));
                global::VkDescriptorPoolT __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::VkDescriptorPoolT.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::VkDescriptorPoolT) global::VkDescriptorPoolT.NativeToManagedMap[__ret];
                else __result0 = global::VkDescriptorPoolT.__CreateInstance(__ret);
                return __result0;
            }
        }

        public global::VkPipelineT Pipeline
        {
            get
            {
                var __ret = __Internal.GetPipeline((__Instance + __PointerAdjustment));
                global::VkPipelineT __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::VkPipelineT.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::VkPipelineT) global::VkPipelineT.NativeToManagedMap[__ret];
                else __result0 = global::VkPipelineT.__CreateInstance(__ret);
                return __result0;
            }
        }

        public global::VkPipelineLayoutT PipelineLayout
        {
            get
            {
                var __ret = __Internal.GetPipelineLayout((__Instance + __PointerAdjustment));
                global::VkPipelineLayoutT __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::VkPipelineLayoutT.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::VkPipelineLayoutT) global::VkPipelineLayoutT.NativeToManagedMap[__ret];
                else __result0 = global::VkPipelineLayoutT.__CreateInstance(__ret);
                return __result0;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
