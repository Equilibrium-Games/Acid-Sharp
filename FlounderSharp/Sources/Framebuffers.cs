// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    public unsafe partial class Framebuffers : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 48)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Std.Vector.__Internalc__N_std_S_vector_____N_fl_S_Texture___N_std_S_allocator__S0_ m_imageAttachments;

            [FieldOffset(24)]
            internal global::Std.Vector.__Internalc__N_std_S_vector_____S_VkFramebuffer_T___N_std_S_allocator__S0_ m_framebuffers;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Framebuffers@fl@@QEAA@AEBVRenderpassCreate@1@AEBVRenderpass@1@AEBVSwapchain@1@AEBVDepthStencil@1@AEBUVkExtent2D@@@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, global::System.IntPtr renderpassCreate, global::System.IntPtr renderPass, global::System.IntPtr swapchain, global::System.IntPtr depthStencil, global::System.IntPtr extent);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Framebuffers@fl@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1Framebuffers@fl@@QEAA@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetTexture@Framebuffers@fl@@QEBAPEAVTexture@2@AEBI@Z")]
            internal static extern global::System.IntPtr GetTexture(global::System.IntPtr instance, uint* i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetFramebuffersCount@Framebuffers@fl@@QEBAIXZ")]
            internal static extern uint GetFramebuffersCount(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.Framebuffers> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.Framebuffers>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.Framebuffers __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Framebuffers(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.Framebuffers __CreateInstance(global::FlounderSharp.Framebuffers.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Framebuffers(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.Framebuffers.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Framebuffers.__Internal));
            global::FlounderSharp.Framebuffers.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private Framebuffers(global::FlounderSharp.Framebuffers.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Framebuffers(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Framebuffers(global::FlounderSharp.RenderpassCreate renderpassCreate, global::FlounderSharp.Renderpass renderPass, global::FlounderSharp.Swapchain swapchain, global::FlounderSharp.DepthStencil depthStencil, global::VkExtent2D extent)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Framebuffers.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(renderpassCreate, null))
                throw new global::System.ArgumentNullException("renderpassCreate", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = renderpassCreate.__Instance;
            if (ReferenceEquals(renderPass, null))
                throw new global::System.ArgumentNullException("renderPass", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = renderPass.__Instance;
            if (ReferenceEquals(swapchain, null))
                throw new global::System.ArgumentNullException("swapchain", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = swapchain.__Instance;
            if (ReferenceEquals(depthStencil, null))
                throw new global::System.ArgumentNullException("depthStencil", "Cannot be null because it is a C++ reference (&).");
            var __arg3 = depthStencil.__Instance;
            if (ReferenceEquals(extent, null))
                throw new global::System.ArgumentNullException("extent", "Cannot be null because it is a C++ reference (&).");
            var __arg4 = extent.__Instance;
            __Internal.ctor((__Instance + __PointerAdjustment), __arg0, __arg1, __arg2, __arg3, __arg4);
        }

        public Framebuffers(global::FlounderSharp.Framebuffers _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Framebuffers.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
        }

        ~Framebuffers()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.Framebuffers __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::FlounderSharp.Texture GetTexture(ref uint i)
        {
            fixed (uint* __refParamPtr0 = &i)
            {
                var __arg0 = __refParamPtr0;
                var __ret = __Internal.GetTexture((__Instance + __PointerAdjustment), __arg0);
                global::FlounderSharp.Texture __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Texture.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Texture) global::FlounderSharp.Texture.NativeToManagedMap[__ret];
                else global::FlounderSharp.Texture.NativeToManagedMap[__ret] = __result0 = (global::FlounderSharp.Texture) global::FlounderSharp.Texture.__CreateInstance(__ret);
                return __result0;
            }
        }

        public uint FramebuffersCount
        {
            get
            {
                var __ret = __Internal.GetFramebuffersCount((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
