// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    public unsafe partial class RenderStage : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint m_lastWidth;

            [FieldOffset(4)]
            internal uint m_lastHeight;

            [FieldOffset(8)]
            internal int m_stageIndex;

            [FieldOffset(16)]
            internal global::System.IntPtr m_renderpassCreate;

            [FieldOffset(24)]
            internal global::System.IntPtr m_depthStencil;

            [FieldOffset(32)]
            internal global::System.IntPtr m_renderpass;

            [FieldOffset(40)]
            internal global::System.IntPtr m_framebuffers;

            [FieldOffset(48)]
            internal global::Std.Vector.__Internalc__N_std_S_vector____U_VkClearValue___N_std_S_allocator__S0_ m_clearValues;

            [FieldOffset(72)]
            internal uint m_imageAttachments;

            [FieldOffset(76)]
            internal byte m_hasDepth;

            [FieldOffset(77)]
            internal byte m_hasSwapchain;

            [FieldOffset(78)]
            internal byte m_fitDisplaySize;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0RenderStage@fl@@QEAA@AEBHPEAVRenderpassCreate@1@@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, int* stageIndex, global::System.IntPtr renderpassCreate);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0RenderStage@fl@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1RenderStage@fl@@QEAA@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Rebuild@RenderStage@fl@@QEAAXPEAVSwapchain@2@@Z")]
            internal static extern void Rebuild(global::System.IntPtr instance, global::System.IntPtr swapchain);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?IsOutOfDate@RenderStage@fl@@QEAA_NAEBUVkExtent2D@@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsOutOfDate(global::System.IntPtr instance, global::System.IntPtr extent2D);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetActiveFramebuffer@RenderStage@fl@@QEBAPEAUVkFramebuffer_T@@AEBI@Z")]
            internal static extern global::System.IntPtr GetActiveFramebuffer(global::System.IntPtr instance, uint* activeSwapchainImage);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetWidth@RenderStage@fl@@QEBAIXZ")]
            internal static extern uint GetWidth(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetHeight@RenderStage@fl@@QEBAIXZ")]
            internal static extern uint GetHeight(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetDepthStencil@RenderStage@fl@@QEBAPEAVDepthStencil@2@XZ")]
            internal static extern global::System.IntPtr GetDepthStencil(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetRenderpass@RenderStage@fl@@QEBAPEAVRenderpass@2@XZ")]
            internal static extern global::System.IntPtr GetRenderpass(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetFramebuffers@RenderStage@fl@@QEBAPEAVFramebuffers@2@XZ")]
            internal static extern global::System.IntPtr GetFramebuffers(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetImageAttachments@RenderStage@fl@@QEBAIXZ")]
            internal static extern uint GetImageAttachments(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?HasDepth@RenderStage@fl@@QEBA_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool HasDepth(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?HasSwapchain@RenderStage@fl@@QEBA_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool HasSwapchain(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?FitDisplaySize@RenderStage@fl@@QEBA_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool FitDisplaySize(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.RenderStage> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.RenderStage>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.RenderStage __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.RenderStage(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.RenderStage __CreateInstance(global::FlounderSharp.RenderStage.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.RenderStage(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.RenderStage.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.RenderStage.__Internal));
            global::FlounderSharp.RenderStage.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private RenderStage(global::FlounderSharp.RenderStage.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RenderStage(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public RenderStage(ref int stageIndex, global::FlounderSharp.RenderpassCreate renderpassCreate)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.RenderStage.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            fixed (int* __refParamPtr0 = &stageIndex)
            {
                var __arg0 = __refParamPtr0;
                var __arg1 = ReferenceEquals(renderpassCreate, null) ? global::System.IntPtr.Zero : renderpassCreate.__Instance;
                __Internal.ctor((__Instance + __PointerAdjustment), __arg0, __arg1);
            }
        }

        public RenderStage(global::FlounderSharp.RenderStage _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.RenderStage.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
        }

        ~RenderStage()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.RenderStage __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void Rebuild(global::FlounderSharp.Swapchain swapchain)
        {
            var __arg0 = ReferenceEquals(swapchain, null) ? global::System.IntPtr.Zero : swapchain.__Instance;
            __Internal.Rebuild((__Instance + __PointerAdjustment), __arg0);
        }

        public bool IsOutOfDate(global::VkExtent2D extent2D)
        {
            if (ReferenceEquals(extent2D, null))
                throw new global::System.ArgumentNullException("extent2D", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = extent2D.__Instance;
            var __ret = __Internal.IsOutOfDate((__Instance + __PointerAdjustment), __arg0);
            return __ret;
        }

        public global::VkFramebufferT GetActiveFramebuffer(ref uint activeSwapchainImage)
        {
            fixed (uint* __refParamPtr0 = &activeSwapchainImage)
            {
                var __arg0 = __refParamPtr0;
                var __ret = __Internal.GetActiveFramebuffer((__Instance + __PointerAdjustment), __arg0);
                global::VkFramebufferT __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::VkFramebufferT.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::VkFramebufferT) global::VkFramebufferT.NativeToManagedMap[__ret];
                else __result0 = global::VkFramebufferT.__CreateInstance(__ret);
                return __result0;
            }
        }

        public uint Width
        {
            get
            {
                var __ret = __Internal.GetWidth((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public uint Height
        {
            get
            {
                var __ret = __Internal.GetHeight((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public global::FlounderSharp.DepthStencil DepthStencil
        {
            get
            {
                var __ret = __Internal.GetDepthStencil((__Instance + __PointerAdjustment));
                global::FlounderSharp.DepthStencil __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.DepthStencil.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.DepthStencil) global::FlounderSharp.DepthStencil.NativeToManagedMap[__ret];
                else global::FlounderSharp.DepthStencil.NativeToManagedMap[__ret] = __result0 = (global::FlounderSharp.DepthStencil) global::FlounderSharp.DepthStencil.__CreateInstance(__ret);
                return __result0;
            }
        }

        public global::FlounderSharp.Renderpass Renderpass
        {
            get
            {
                var __ret = __Internal.GetRenderpass((__Instance + __PointerAdjustment));
                global::FlounderSharp.Renderpass __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Renderpass.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Renderpass) global::FlounderSharp.Renderpass.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.Renderpass.__CreateInstance(__ret);
                return __result0;
            }
        }

        public global::FlounderSharp.Framebuffers Framebuffers
        {
            get
            {
                var __ret = __Internal.GetFramebuffers((__Instance + __PointerAdjustment));
                global::FlounderSharp.Framebuffers __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Framebuffers.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Framebuffers) global::FlounderSharp.Framebuffers.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.Framebuffers.__CreateInstance(__ret);
                return __result0;
            }
        }

        public uint ImageAttachments
        {
            get
            {
                var __ret = __Internal.GetImageAttachments((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public bool HasDepth
        {
            get
            {
                var __ret = __Internal.HasDepth((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public bool HasSwapchain
        {
            get
            {
                var __ret = __Internal.HasSwapchain((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public bool FitDisplaySize
        {
            get
            {
                var __ret = __Internal.FitDisplaySize((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
