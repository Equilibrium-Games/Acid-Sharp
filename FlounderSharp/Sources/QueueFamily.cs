// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    /// <summary>Used to store index of a QueueFamily with particular qualities.</summary>
    public unsafe partial class QueueFamilyIndices : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int m_graphicsFamily;

            [FieldOffset(4)]
            internal int m_presentFamily;

            [FieldOffset(8)]
            internal int m_computeFamily;

            [FieldOffset(12)]
            internal global::Std.Array.__Internalc__N_std_S_array__i_Vk3 m_array;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0QueueFamilyIndices@fl@@QEAA@XZ")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?IsComplete@QueueFamilyIndices@fl@@QEBA_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsComplete(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.QueueFamilyIndices> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.QueueFamilyIndices>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.QueueFamilyIndices __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.QueueFamilyIndices(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.QueueFamilyIndices __CreateInstance(global::FlounderSharp.QueueFamilyIndices.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.QueueFamilyIndices(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.QueueFamilyIndices.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.QueueFamilyIndices.__Internal));
            *(global::FlounderSharp.QueueFamilyIndices.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QueueFamilyIndices(global::FlounderSharp.QueueFamilyIndices.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected QueueFamilyIndices(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public QueueFamilyIndices()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.QueueFamilyIndices.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor((__Instance + __PointerAdjustment));
        }

        ~QueueFamilyIndices()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.QueueFamilyIndices __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int MGraphicsFamily
        {
            get
            {
                return ((global::FlounderSharp.QueueFamilyIndices.__Internal*) __Instance)->m_graphicsFamily;
            }

            set
            {
                ((global::FlounderSharp.QueueFamilyIndices.__Internal*)__Instance)->m_graphicsFamily = value;
            }
        }

        public int MPresentFamily
        {
            get
            {
                return ((global::FlounderSharp.QueueFamilyIndices.__Internal*) __Instance)->m_presentFamily;
            }

            set
            {
                ((global::FlounderSharp.QueueFamilyIndices.__Internal*)__Instance)->m_presentFamily = value;
            }
        }

        public int MComputeFamily
        {
            get
            {
                return ((global::FlounderSharp.QueueFamilyIndices.__Internal*) __Instance)->m_computeFamily;
            }

            set
            {
                ((global::FlounderSharp.QueueFamilyIndices.__Internal*)__Instance)->m_computeFamily = value;
            }
        }

        /// <summary>Gets if an index has been assigned.</summary>
        public bool IsComplete
        {
            get
            {
                var __ret = __Internal.IsComplete((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }

    /// <summary>A Vulkan queue family.</summary>
    public unsafe partial class QueueFamily : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?FindQueueFamilies@QueueFamily@fl@@SA?AVQueueFamilyIndices@2@AEBQEAUVkSurfaceKHR_T@@@Z")]
            internal static extern global::FlounderSharp.QueueFamilyIndices.__Internal FindQueueFamilies(global::System.IntPtr surface);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.QueueFamily> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.QueueFamily>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.QueueFamily __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.QueueFamily(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.QueueFamily __CreateInstance(global::FlounderSharp.QueueFamily.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.QueueFamily(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.QueueFamily.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.QueueFamily.__Internal));
            *(global::FlounderSharp.QueueFamily.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QueueFamily(global::FlounderSharp.QueueFamily.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected QueueFamily(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        ~QueueFamily()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.QueueFamily __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Finds a queue families of a physical device.</summary>
        /// <param name="surface">The surface.</param>
        public static global::FlounderSharp.QueueFamilyIndices FindQueueFamilies(global::VkSurfaceKHR_T surface)
        {
            if (ReferenceEquals(surface, null))
                throw new global::System.ArgumentNullException("surface", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = surface.__Instance;
            var __ret = __Internal.FindQueueFamilies(__arg0);
            return global::FlounderSharp.QueueFamilyIndices.__CreateInstance(__ret);
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
