// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    /// <summary>Class that handles a descriptor set.</summary>
    public unsafe partial class DescriptorsHandler : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 32)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr m_shaderProgram;

            [FieldOffset(8)]
            internal global::System.IntPtr m_descriptorSet;

            [FieldOffset(16)]
            internal global::System.IntPtr m_descriptors;

            [FieldOffset(24)]
            internal byte m_changed;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0DescriptorsHandler@fl@@QEAA@XZ")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1DescriptorsHandler@fl@@QEAA@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Push@DescriptorsHandler@fl@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEAVIDescriptor@2@@Z")]
            internal static extern void Push(global::System.IntPtr instance, global::System.IntPtr descriptorName, global::System.IntPtr descriptor);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Push@DescriptorsHandler@fl@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEAVUniformHandler@2@@Z")]
            internal static extern void Push_1(global::System.IntPtr instance, global::System.IntPtr descriptorName, global::System.IntPtr uniformHandler);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Update@DescriptorsHandler@fl@@QEAA_NAEBVPipeline@2@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Update(global::System.IntPtr instance, global::System.IntPtr pipeline);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetDescriptorSet@DescriptorsHandler@fl@@QEBAPEAVDescriptorSet@2@XZ")]
            internal static extern global::System.IntPtr GetDescriptorSet(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.DescriptorsHandler> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.DescriptorsHandler>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.DescriptorsHandler __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.DescriptorsHandler(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.DescriptorsHandler __CreateInstance(global::FlounderSharp.DescriptorsHandler.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.DescriptorsHandler(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.DescriptorsHandler.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.DescriptorsHandler.__Internal));
            *(global::FlounderSharp.DescriptorsHandler.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DescriptorsHandler(global::FlounderSharp.DescriptorsHandler.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DescriptorsHandler(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public DescriptorsHandler()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.DescriptorsHandler.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor((__Instance + __PointerAdjustment));
        }

        ~DescriptorsHandler()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.DescriptorsHandler __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void Push(string descriptorName, global::FlounderSharp.IIDescriptor descriptor)
        {
            var __allocator0 = new global::Std.Allocator<char>();
            var __basicString0 = global::Std.BasicStringExtensions.BasicString(descriptorName, __allocator0);
            var __arg0 = __basicString0.__Instance;
            var __arg1 = ReferenceEquals(descriptor, null) ? global::System.IntPtr.Zero : descriptor.__PointerToIDescriptor;
            __Internal.Push((__Instance + __PointerAdjustment), __arg0, __arg1);
            __basicString0.Dispose(false);
            __allocator0.Dispose();
        }

        public void Push(string descriptorName, global::FlounderSharp.UniformHandler uniformHandler)
        {
            var __allocator0 = new global::Std.Allocator<char>();
            var __basicString0 = global::Std.BasicStringExtensions.BasicString(descriptorName, __allocator0);
            var __arg0 = __basicString0.__Instance;
            var __arg1 = ReferenceEquals(uniformHandler, null) ? global::System.IntPtr.Zero : uniformHandler.__Instance;
            __Internal.Push_1((__Instance + __PointerAdjustment), __arg0, __arg1);
            __basicString0.Dispose(false);
            __allocator0.Dispose();
        }

        public bool Update(global::FlounderSharp.Pipeline pipeline)
        {
            if (ReferenceEquals(pipeline, null))
                throw new global::System.ArgumentNullException("pipeline", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pipeline.__Instance;
            var __ret = __Internal.Update((__Instance + __PointerAdjustment), __arg0);
            return __ret;
        }

        public global::FlounderSharp.DescriptorSet DescriptorSet
        {
            get
            {
                var __ret = __Internal.GetDescriptorSet((__Instance + __PointerAdjustment));
                global::FlounderSharp.DescriptorSet __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.DescriptorSet.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.DescriptorSet) global::FlounderSharp.DescriptorSet.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.DescriptorSet.__CreateInstance(__ret);
                return __result0;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
