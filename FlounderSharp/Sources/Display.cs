// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

public unsafe partial class GLFWwindow
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::GLFWwindow> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::GLFWwindow>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::GLFWwindow __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::GLFWwindow(native.ToPointer(), skipVTables);
    }

    internal static global::GLFWwindow __CreateInstance(global::GLFWwindow.__Internal native, bool skipVTables = false)
    {
        return new global::GLFWwindow(native, skipVTables);
    }

    private static void* __CopyValue(global::GLFWwindow.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::GLFWwindow.__Internal));
        *(global::GLFWwindow.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private GLFWwindow(global::GLFWwindow.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected GLFWwindow(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~GLFWwindow()
    {
        Dispose(false);
    }
}

namespace FlounderSharp
{
    /// <summary>A module used for the creation, updating and destruction of the display.</summary>
    public unsafe partial class Display : global::FlounderSharp.IModule, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 1888)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vfptr_IModule;

            [FieldOffset(8)]
            internal int m_windowWidth;

            [FieldOffset(12)]
            internal int m_windowHeight;

            [FieldOffset(16)]
            internal int m_fullscreenWidth;

            [FieldOffset(20)]
            internal int m_fullscreenHeight;

            [FieldOffset(24)]
            internal float m_aspectRatio;

            [FieldOffset(32)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C m_title;

            [FieldOffset(64)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C m_icon;

            [FieldOffset(96)]
            internal byte m_antialiasing;

            [FieldOffset(97)]
            internal byte m_fullscreen;

            [FieldOffset(104)]
            internal global::System.IntPtr m_window;

            [FieldOffset(112)]
            internal byte m_closed;

            [FieldOffset(113)]
            internal byte m_focused;

            [FieldOffset(116)]
            internal int m_windowPosX;

            [FieldOffset(120)]
            internal int m_windowPosY;

            [FieldOffset(124)]
            internal byte m_iconified;

            [FieldOffset(125)]
            internal byte m_validationLayers;

            [FieldOffset(128)]
            internal global::Std.Vector.__Internalc__N_std_S_vector___1C___N_std_S_allocator__S0_ m_instanceLayerList;

            [FieldOffset(152)]
            internal global::Std.Vector.__Internalc__N_std_S_vector___1C___N_std_S_allocator__S0_ m_instanceExtensionList;

            [FieldOffset(176)]
            internal global::Std.Vector.__Internalc__N_std_S_vector___1C___N_std_S_allocator__S0_ m_deviceExtensionList;

            [FieldOffset(200)]
            internal global::System.IntPtr m_debugReport;

            [FieldOffset(208)]
            internal global::System.IntPtr m_instance;

            [FieldOffset(216)]
            internal global::System.IntPtr m_surface;

            [FieldOffset(224)]
            internal global::VkSurfaceCapabilitiesKHR.__Internal m_surfaceCapabilities;

            [FieldOffset(276)]
            internal global::VkSurfaceFormatKHR.__Internal m_surfaceFormat;

            [FieldOffset(288)]
            internal global::System.IntPtr m_logicalDevice;

            [FieldOffset(296)]
            internal global::System.IntPtr m_queue;

            [FieldOffset(304)]
            internal global::System.IntPtr m_physicalDevice;

            [FieldOffset(312)]
            internal global::VkPhysicalDeviceProperties.__Internal m_physicalDeviceProperties;

            [FieldOffset(1136)]
            internal global::VkPhysicalDeviceFeatures.__Internal m_physicalDeviceFeatures;

            [FieldOffset(1360)]
            internal global::VkPhysicalDeviceMemoryProperties.__Internal m_physicalDeviceMemoryProperties;

            [FieldOffset(1880)]
            internal uint m_graphicsFamilyIndex;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Display@fl@@QEAA@XZ")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Display@fl@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Get@Display@fl@@SAPEAV12@XZ")]
            internal static extern global::System.IntPtr Get();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetWindowSize@Display@fl@@QEAAXAEBH0@Z")]
            internal static extern void SetWindowSize(global::System.IntPtr instance, int* width, int* height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetAntialiasing@Display@fl@@QEAAXAEB_N@Z")]
            internal static extern void SetAntialiasing(global::System.IntPtr instance, bool* antialiasing);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetFullscreen@Display@fl@@QEAAXAEB_N@Z")]
            internal static extern void SetFullscreen(global::System.IntPtr instance, bool* fullscreen);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?StringifyResultVk@Display@fl@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBW4VkResult@@@Z")]
            internal static extern void StringifyResultVk(global::System.IntPtr @return, global::VkResult* result);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?ErrorVk@Display@fl@@SAXAEBW4VkResult@@@Z")]
            internal static extern void ErrorVk(global::VkResult* result);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?StringifyResultGlfw@Display@fl@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBH@Z")]
            internal static extern void StringifyResultGlfw(global::System.IntPtr @return, int* result);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?ErrorGlfw@Display@fl@@SAXAEBH@Z")]
            internal static extern void ErrorGlfw(int* result);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetTitle@Display@fl@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ")]
            internal static extern void GetTitle(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetTitle@Display@fl@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
            internal static extern void SetTitle(global::System.IntPtr instance, global::System.IntPtr title);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetIcon@Display@fl@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ")]
            internal static extern void GetIcon(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetIcon@Display@fl@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z")]
            internal static extern void SetIcon(global::System.IntPtr instance, global::System.IntPtr icon);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetWidth@Display@fl@@QEAAHXZ")]
            internal static extern int GetWidth(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetWindowWidth@Display@fl@@QEBAHXZ")]
            internal static extern int GetWindowWidth(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetHeight@Display@fl@@QEAAHXZ")]
            internal static extern int GetHeight(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetWindowHeight@Display@fl@@QEBAHXZ")]
            internal static extern int GetWindowHeight(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetAspectRatio@Display@fl@@QEBAMXZ")]
            internal static extern float GetAspectRatio(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?IsAntialiasing@Display@fl@@QEBA_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsAntialiasing(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?IsFullscreen@Display@fl@@QEBA_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFullscreen(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetWindow@Display@fl@@QEBAPEAVGLFWwindow@@XZ")]
            internal static extern global::System.IntPtr GetWindow(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?IsClosed@Display@fl@@QEBA_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsClosed(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?IsFocused@Display@fl@@QEBA_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFocused(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetWindowXPos@Display@fl@@QEBAHXZ")]
            internal static extern int GetWindowXPos(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetWindowYPos@Display@fl@@QEBAHXZ")]
            internal static extern int GetWindowYPos(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?IsIconified@Display@fl@@QEBA_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsIconified(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetInstance@Display@fl@@QEBAPEAUVkInstance_T@@XZ")]
            internal static extern global::System.IntPtr GetInstance(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetSurface@Display@fl@@QEBAPEAUVkSurfaceKHR_T@@XZ")]
            internal static extern global::System.IntPtr GetSurface(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetSurfaceCapabilities@Display@fl@@QEBA?AUVkSurfaceCapabilitiesKHR@@XZ")]
            internal static extern void GetSurfaceCapabilities(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetSurfaceFormat@Display@fl@@QEBA?AUVkSurfaceFormatKHR@@XZ")]
            internal static extern void GetSurfaceFormat(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetLogicalDevice@Display@fl@@QEBAPEAUVkDevice_T@@XZ")]
            internal static extern global::System.IntPtr GetLogicalDevice(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetQueue@Display@fl@@QEBAPEAUVkQueue_T@@XZ")]
            internal static extern global::System.IntPtr GetQueue(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetPhysicalDevice@Display@fl@@QEBAPEAUVkPhysicalDevice_T@@XZ")]
            internal static extern global::System.IntPtr GetPhysicalDevice(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetPhysicalDeviceProperties@Display@fl@@QEBA?AUVkPhysicalDeviceProperties@@XZ")]
            internal static extern void GetPhysicalDeviceProperties(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetPhysicalDeviceFeatures@Display@fl@@QEBA?AUVkPhysicalDeviceFeatures@@XZ")]
            internal static extern void GetPhysicalDeviceFeatures(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetPhysicalDeviceMemoryProperties@Display@fl@@QEBA?AUVkPhysicalDeviceMemoryProperties@@XZ")]
            internal static extern void GetPhysicalDeviceMemoryProperties(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetGraphicsFamilyIndex@Display@fl@@QEBAIXZ")]
            internal static extern uint GetGraphicsFamilyIndex(global::System.IntPtr instance);
        }

        internal static new global::FlounderSharp.Display __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Display(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.Display __CreateInstance(global::FlounderSharp.Display.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Display(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.Display.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Display.__Internal));
            global::FlounderSharp.Display.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private Display(global::FlounderSharp.Display.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Display(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        /// <summary>Creates a new display module.</summary>
        public Display()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Display.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "FlounderSharp.Display");
        }

        public Display(global::FlounderSharp.Display _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Display.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
            SetupVTables(GetType().FullName == "FlounderSharp.Display");
        }

        ~Display()
        {
            Dispose(false);
        }

        public override void Update()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 8);
            var ___UpdateDelegate = (global::FlounderSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Action_IntPtr));
            ___UpdateDelegate((__Instance + __PointerAdjustment));
        }

        /// <summary>Sets window size to a new size.</summary>
        /// <param name="width">The new width in pixels.</param>
        /// <param name="height">The new height in pixels.</param>
        public void SetWindowSize(ref int width, ref int height)
        {
            fixed (int* __refParamPtr0 = &width)
            {
                var __arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &height)
                {
                    var __arg1 = __refParamPtr1;
                    __Internal.SetWindowSize((__Instance + __PointerAdjustment), __arg0, __arg1);
                }
            }
        }

        /// <summary>Requests the display to antialias.</summary>
        /// <param name="antialiasing">If the display should antialias.</param>
        public void SetAntialiasing(ref bool antialiasing)
        {
            fixed (bool* __refParamPtr0 = &antialiasing)
            {
                var __arg0 = __refParamPtr0;
                __Internal.SetAntialiasing((__Instance + __PointerAdjustment), __arg0);
            }
        }

        /// <summary>Sets the display to be fullscreen or windowed.</summary>
        /// <param name="fullscreen">Weather or not to be fullscreen.</param>
        public void SetFullscreen(ref bool fullscreen)
        {
            fixed (bool* __refParamPtr0 = &fullscreen)
            {
                var __arg0 = __refParamPtr0;
                __Internal.SetFullscreen((__Instance + __PointerAdjustment), __arg0);
            }
        }

        /// <summary>Gets this engine instance.</summary>
        public static global::FlounderSharp.Display Get()
        {
            var __ret = __Internal.Get();
            global::FlounderSharp.Display __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::FlounderSharp.Display.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::FlounderSharp.Display) global::FlounderSharp.Display.NativeToManagedMap[__ret];
            else global::FlounderSharp.Display.NativeToManagedMap[__ret] = __result0 = (global::FlounderSharp.Display) global::FlounderSharp.Display.__CreateInstance(__ret);
            return __result0;
        }

        public static string StringifyResultVk(global::VkResult* result)
        {
            var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
            __Internal.StringifyResultVk(new IntPtr(&__ret), result);
            var __basicStringRet = global::Std.BasicString<char, global::Std.CharTraits<char>, global::Std.Allocator<char>>.__CreateInstance(__ret);
            var __stringRet = global::Std.BasicStringExtensions.CStr(__basicStringRet);
            __basicStringRet.Dispose(false);
            return __stringRet;
        }

        public static void ErrorVk(global::VkResult* result)
        {
            __Internal.ErrorVk(result);
        }

        public static string StringifyResultGlfw(ref int result)
        {
            fixed (int* __refParamPtr0 = &result)
            {
                var __arg0 = __refParamPtr0;
                var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.StringifyResultGlfw(new IntPtr(&__ret), __arg0);
                var __basicStringRet = global::Std.BasicString<char, global::Std.CharTraits<char>, global::Std.Allocator<char>>.__CreateInstance(__ret);
                var __stringRet = global::Std.BasicStringExtensions.CStr(__basicStringRet);
                __basicStringRet.Dispose(false);
                return __stringRet;
            }
        }

        public static void ErrorGlfw(ref int result)
        {
            fixed (int* __refParamPtr0 = &result)
            {
                var __arg0 = __refParamPtr0;
                __Internal.ErrorGlfw(__arg0);
            }
        }

        /// <summary>Gets the window's title.</summary>
        /// <param name="title">The new title.</param>
        /// <remarks>Sets window title</remarks>
        public string Title
        {
            get
            {
                var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.GetTitle((__Instance + __PointerAdjustment), new IntPtr(&__ret));
                var __basicStringRet = global::Std.BasicString<char, global::Std.CharTraits<char>, global::Std.Allocator<char>>.__CreateInstance(__ret);
                var __stringRet = global::Std.BasicStringExtensions.CStr(__basicStringRet);
                __basicStringRet.Dispose(false);
                return __stringRet;
            }

            set
            {
                var __allocator0 = new global::Std.Allocator<char>();
                var __basicString0 = global::Std.BasicStringExtensions.BasicString(value, __allocator0);
                var __arg0 = __basicString0.__Instance;
                __Internal.SetTitle((__Instance + __PointerAdjustment), __arg0);
                __basicString0.Dispose(false);
                __allocator0.Dispose();
            }
        }

        /// <summary>Gets the window's icon file.</summary>
        /// <param name="title">The new icon file.</param>
        /// <remarks>Sets window icon image.</remarks>
        public string Icon
        {
            get
            {
                var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.GetIcon((__Instance + __PointerAdjustment), new IntPtr(&__ret));
                var __basicStringRet = global::Std.BasicString<char, global::Std.CharTraits<char>, global::Std.Allocator<char>>.__CreateInstance(__ret);
                var __stringRet = global::Std.BasicStringExtensions.CStr(__basicStringRet);
                __basicStringRet.Dispose(false);
                return __stringRet;
            }

            set
            {
                var __allocator0 = new global::Std.Allocator<char>();
                var __basicString0 = global::Std.BasicStringExtensions.BasicString(value, __allocator0);
                var __arg0 = __basicString0.__Instance;
                __Internal.SetIcon((__Instance + __PointerAdjustment), __arg0);
                __basicString0.Dispose(false);
                __allocator0.Dispose();
            }
        }

        /// <summary>Gets the width of the display in pixels.</summary>
        public int Width
        {
            get
            {
                var __ret = __Internal.GetWidth((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        /// <summary>Gets the non-fullscreen width of the display in pixels.</summary>
        public int WindowWidth
        {
            get
            {
                var __ret = __Internal.GetWindowWidth((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        /// <summary>Gets the height of the display in pixels.</summary>
        public int Height
        {
            get
            {
                var __ret = __Internal.GetHeight((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        /// <summary>Gets the non-fullscreen height of the display in pixels.</summary>
        public int WindowHeight
        {
            get
            {
                var __ret = __Internal.GetWindowHeight((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        /// <summary>Gets the aspect ratio between the displays width and height.</summary>
        public float AspectRatio
        {
            get
            {
                var __ret = __Internal.GetAspectRatio((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        /// <summary>Gets if the display requests antialiased images.</summary>
        public bool IsAntialiasing
        {
            get
            {
                var __ret = __Internal.IsAntialiasing((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        /// <summary>Gets weather the display is fullscreen or not.</summary>
        public bool IsFullscreen
        {
            get
            {
                var __ret = __Internal.IsFullscreen((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        /// <summary>Gets the current GLFW window.</summary>
        public global::GLFWwindow Window
        {
            get
            {
                var __ret = __Internal.GetWindow((__Instance + __PointerAdjustment));
                global::GLFWwindow __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::GLFWwindow.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::GLFWwindow) global::GLFWwindow.NativeToManagedMap[__ret];
                else __result0 = global::GLFWwindow.__CreateInstance(__ret);
                return __result0;
            }
        }

        /// <summary>Gets if the GLFW display is closed.</summary>
        public bool IsClosed
        {
            get
            {
                var __ret = __Internal.IsClosed((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        /// <summary>Gets if the GLFW display is selected.</summary>
        public bool IsFocused
        {
            get
            {
                var __ret = __Internal.IsFocused((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        /// <summary>Gets the windows Y position of the display in pixels.</summary>
        public int WindowXPos
        {
            get
            {
                var __ret = __Internal.GetWindowXPos((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        /// <summary>Gets the windows Y position of the display in pixels.</summary>
        public int WindowYPos
        {
            get
            {
                var __ret = __Internal.GetWindowYPos((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        /// <summary>Gets the windows is minimized.</summary>
        public bool IsIconified
        {
            get
            {
                var __ret = __Internal.IsIconified((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public global::VkInstanceT Instance
        {
            get
            {
                var __ret = __Internal.GetInstance((__Instance + __PointerAdjustment));
                global::VkInstanceT __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::VkInstanceT.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::VkInstanceT) global::VkInstanceT.NativeToManagedMap[__ret];
                else __result0 = global::VkInstanceT.__CreateInstance(__ret);
                return __result0;
            }
        }

        public global::VkSurfaceKHR_T Surface
        {
            get
            {
                var __ret = __Internal.GetSurface((__Instance + __PointerAdjustment));
                global::VkSurfaceKHR_T __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::VkSurfaceKHR_T.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::VkSurfaceKHR_T) global::VkSurfaceKHR_T.NativeToManagedMap[__ret];
                else __result0 = global::VkSurfaceKHR_T.__CreateInstance(__ret);
                return __result0;
            }
        }

        public global::VkSurfaceCapabilitiesKHR SurfaceCapabilities
        {
            get
            {
                var __ret = new global::VkSurfaceCapabilitiesKHR.__Internal();
                __Internal.GetSurfaceCapabilities((__Instance + __PointerAdjustment), new IntPtr(&__ret));
                return global::VkSurfaceCapabilitiesKHR.__CreateInstance(__ret);
            }
        }

        public global::VkSurfaceFormatKHR SurfaceFormat
        {
            get
            {
                var __ret = new global::VkSurfaceFormatKHR.__Internal();
                __Internal.GetSurfaceFormat((__Instance + __PointerAdjustment), new IntPtr(&__ret));
                return global::VkSurfaceFormatKHR.__CreateInstance(__ret);
            }
        }

        public global::VkDeviceT LogicalDevice
        {
            get
            {
                var __ret = __Internal.GetLogicalDevice((__Instance + __PointerAdjustment));
                global::VkDeviceT __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::VkDeviceT.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::VkDeviceT) global::VkDeviceT.NativeToManagedMap[__ret];
                else __result0 = global::VkDeviceT.__CreateInstance(__ret);
                return __result0;
            }
        }

        public global::VkQueueT Queue
        {
            get
            {
                var __ret = __Internal.GetQueue((__Instance + __PointerAdjustment));
                global::VkQueueT __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::VkQueueT.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::VkQueueT) global::VkQueueT.NativeToManagedMap[__ret];
                else __result0 = global::VkQueueT.__CreateInstance(__ret);
                return __result0;
            }
        }

        public global::VkPhysicalDeviceT PhysicalDevice
        {
            get
            {
                var __ret = __Internal.GetPhysicalDevice((__Instance + __PointerAdjustment));
                global::VkPhysicalDeviceT __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::VkPhysicalDeviceT.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::VkPhysicalDeviceT) global::VkPhysicalDeviceT.NativeToManagedMap[__ret];
                else __result0 = global::VkPhysicalDeviceT.__CreateInstance(__ret);
                return __result0;
            }
        }

        public global::VkPhysicalDeviceProperties PhysicalDeviceProperties
        {
            get
            {
                var __ret = new global::VkPhysicalDeviceProperties.__Internal();
                __Internal.GetPhysicalDeviceProperties((__Instance + __PointerAdjustment), new IntPtr(&__ret));
                return global::VkPhysicalDeviceProperties.__CreateInstance(__ret);
            }
        }

        public global::VkPhysicalDeviceFeatures PhysicalDeviceFeatures
        {
            get
            {
                var __ret = new global::VkPhysicalDeviceFeatures.__Internal();
                __Internal.GetPhysicalDeviceFeatures((__Instance + __PointerAdjustment), new IntPtr(&__ret));
                return global::VkPhysicalDeviceFeatures.__CreateInstance(__ret);
            }
        }

        public global::VkPhysicalDeviceMemoryProperties PhysicalDeviceMemoryProperties
        {
            get
            {
                var __ret = new global::VkPhysicalDeviceMemoryProperties.__Internal();
                __Internal.GetPhysicalDeviceMemoryProperties((__Instance + __PointerAdjustment), new IntPtr(&__ret));
                return global::VkPhysicalDeviceMemoryProperties.__CreateInstance(__ret);
            }
        }

        public uint GraphicsFamilyIndex
        {
            get
            {
                var __ret = __Internal.GetGraphicsFamilyIndex((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        #region Virtual table interop

        // ~Display()
        private static global::FlounderSharp.Delegates.Action_IntPtr_int _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr instance, int delete)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.Display) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // void Update() override
        private static global::FlounderSharp.Delegates.Action_IntPtr _UpdateDelegateInstance;

        private static void _UpdateDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.Display) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Update();
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[2];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _UpdateDelegateInstance += _UpdateDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_UpdateDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(3 * 8);
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(3 * 8);
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = _Thunks[1];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class Display
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CallbackError@fl@@YAXHPEBD@Z")]
            internal static extern void CallbackError(int error, [MarshalAs(UnmanagedType.LPStr)] string description);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CallbackClose@fl@@YAXPEAVGLFWwindow@@@Z")]
            internal static extern void CallbackClose(global::System.IntPtr window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CallbackFocus@fl@@YAXPEAVGLFWwindow@@H@Z")]
            internal static extern void CallbackFocus(global::System.IntPtr window, int focused);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CallbackPosition@fl@@YAXPEAVGLFWwindow@@HH@Z")]
            internal static extern void CallbackPosition(global::System.IntPtr window, int xpos, int ypos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CallbackSize@fl@@YAXPEAVGLFWwindow@@HH@Z")]
            internal static extern void CallbackSize(global::System.IntPtr window, int width, int height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CallbackFrame@fl@@YAXPEAVGLFWwindow@@HH@Z")]
            internal static extern void CallbackFrame(global::System.IntPtr window, int width, int height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CallbackIconify@fl@@YAXPEAVGLFWwindow@@H@Z")]
            internal static extern void CallbackIconify(global::System.IntPtr window, int iconified);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?VkCallbackDebug@fl@@YAIIW4VkDebugReportObjectTypeEXT@@_K1HPEBD2PEAX@Z")]
            internal static extern uint VkCallbackDebug(uint flags, global::VkDebugReportObjectTypeEXT objType, ulong obj, ulong location, int code, [MarshalAs(UnmanagedType.LPStr)] string layerPrefix, [MarshalAs(UnmanagedType.LPStr)] string msg, global::System.IntPtr userData);
        }

        public static void CallbackError(int error, string description)
        {
            __Internal.CallbackError(error, description);
        }

        public static void CallbackClose(global::GLFWwindow window)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.CallbackClose(__arg0);
        }

        public static void CallbackFocus(global::GLFWwindow window, int focused)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.CallbackFocus(__arg0, focused);
        }

        public static void CallbackPosition(global::GLFWwindow window, int xpos, int ypos)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.CallbackPosition(__arg0, xpos, ypos);
        }

        public static void CallbackSize(global::GLFWwindow window, int width, int height)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.CallbackSize(__arg0, width, height);
        }

        public static void CallbackFrame(global::GLFWwindow window, int width, int height)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.CallbackFrame(__arg0, width, height);
        }

        public static void CallbackIconify(global::GLFWwindow window, int iconified)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.CallbackIconify(__arg0, iconified);
        }

        public static uint VkCallbackDebug(uint flags, global::VkDebugReportObjectTypeEXT objType, ulong obj, ulong location, int code, string layerPrefix, string msg, global::System.IntPtr userData)
        {
            var __ret = __Internal.VkCallbackDebug(flags, objType, obj, location, code, layerPrefix, msg, userData);
            return __ret;
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
