// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

public enum VkPipelineCacheHeaderVersion
{
    VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1,
    VK_PIPELINE_CACHE_HEADER_VERSION_BEGIN_RANGE = 1,
    VK_PIPELINE_CACHE_HEADER_VERSION_END_RANGE = 1,
    VK_PIPELINE_CACHE_HEADER_VERSION_RANGE_SIZE = 1,
    VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = 2147483647
}

public enum VkResult
{
    VK_SUCCESS = 0,
    VK_NOT_READY = 1,
    VK_TIMEOUT = 2,
    VK_EVENT_SET = 3,
    VK_EVENT_RESET = 4,
    VK_INCOMPLETE = 5,
    VK_ERROR_OUT_OF_HOST_MEMORY = -1,
    VK_ERROR_OUT_OF_DEVICE_MEMORY = -2,
    VK_ERROR_INITIALIZATION_FAILED = -3,
    VK_ERROR_DEVICE_LOST = -4,
    VK_ERROR_MEMORY_MAP_FAILED = -5,
    VK_ERROR_LAYER_NOT_PRESENT = -6,
    VK_ERROR_EXTENSION_NOT_PRESENT = -7,
    VK_ERROR_FEATURE_NOT_PRESENT = -8,
    VK_ERROR_INCOMPATIBLE_DRIVER = -9,
    VK_ERROR_TOO_MANY_OBJECTS = -10,
    VK_ERROR_FORMAT_NOT_SUPPORTED = -11,
    VK_ERROR_FRAGMENTED_POOL = -12,
    VK_ERROR_OUT_OF_POOL_MEMORY = -1000069000,
    VK_ERROR_INVALID_EXTERNAL_HANDLE = -1000072003,
    VK_ERROR_SURFACE_LOST_KHR = -1000000000,
    VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001,
    VK_SUBOPTIMAL_KHR = 1000001003,
    VK_ERROR_OUT_OF_DATE_KHR = -1000001004,
    VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001,
    VK_ERROR_VALIDATION_FAILED_EXT = -1000011001,
    VK_ERROR_INVALID_SHADER_NV = -1000012000,
    VK_ERROR_FRAGMENTATION_EXT = -1000161000,
    VK_ERROR_NOT_PERMITTED_EXT = -1000174001,
    VK_ERROR_OUT_OF_POOL_MEMORY_KHR = -1000069000,
    VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR = -1000072003,
    VK_RESULT_BEGIN_RANGE = -12,
    VK_RESULT_END_RANGE = 5,
    VK_RESULT_RANGE_SIZE = 18,
    VK_RESULT_MAX_ENUM = 2147483647
}

public enum VkStructureType
{
    VK_STRUCTURE_TYPE_APPLICATION_INFO = 0,
    VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2,
    VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3,
    VK_STRUCTURE_TYPE_SUBMIT_INFO = 4,
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5,
    VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6,
    VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7,
    VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8,
    VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9,
    VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10,
    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11,
    VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12,
    VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13,
    VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15,
    VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16,
    VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17,
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18,
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19,
    VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20,
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23,
    VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24,
    VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25,
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26,
    VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27,
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28,
    VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29,
    VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30,
    VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32,
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35,
    VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37,
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38,
    VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42,
    VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45,
    VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46,
    VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47,
    VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001,
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001,
    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002,
    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001,
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000,
    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002,
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003,
    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES = 1000120000,
    VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001,
    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002,
    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005,
    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000,
    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002,
    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000,
    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001,
    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000,
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000,
    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3PROPERTIES = 1000168000,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES = 1000063000,
    VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000,
    VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007,
    VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009,
    VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012,
    VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000,
    VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001,
    VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000,
    VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000,
    VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000,
    VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000,
    VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR = 1000007000,
    VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000,
    VK_STRUCTURE_TYPE_WIN32SURFACE_CREATE_INFO_KHR = 1000009000,
    VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000,
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000,
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001,
    VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002,
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000,
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001,
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002,
    VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32HANDLE_INFO_NV = 1000057000,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32HANDLE_INFO_NV = 1000057001,
    VK_STRUCTURE_TYPE_WIN32KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000,
    VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000,
    VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32HANDLE_INFO_KHR = 1000073000,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32HANDLE_INFO_KHR = 1000073001,
    VK_STRUCTURE_TYPE_MEMORY_WIN32HANDLE_PROPERTIES_KHR = 1000073002,
    VK_STRUCTURE_TYPE_MEMORY_GET_WIN32HANDLE_INFO_KHR = 1000073003,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000,
    VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001,
    VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002,
    VK_STRUCTURE_TYPE_WIN32KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000,
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32HANDLE_INFO_KHR = 1000078000,
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32HANDLE_INFO_KHR = 1000078001,
    VK_STRUCTURE_TYPE_D3D12FENCE_SUBMIT_INFO_KHR = 1000078002,
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32HANDLE_INFO_KHR = 1000078003,
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000,
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000,
    VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000,
    VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX = 1000086000,
    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX = 1000086001,
    VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX = 1000086002,
    VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX = 1000086003,
    VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX = 1000086004,
    VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX = 1000086005,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2EXT = 1000090000,
    VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000,
    VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001,
    VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002,
    VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003,
    VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000,
    VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001,
    VK_STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000,
    VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000,
    VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32HANDLE_INFO_KHR = 1000114000,
    VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32HANDLE_INFO_KHR = 1000114001,
    VK_STRUCTURE_TYPE_FENCE_GET_WIN32HANDLE_INFO_KHR = 1000114002,
    VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000,
    VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2KHR = 1000119000,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2KHR = 1000119001,
    VK_STRUCTURE_TYPE_SURFACE_FORMAT_2KHR = 1000119002,
    VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000,
    VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002,
    VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003,
    VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004,
    VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT = 1000130000,
    VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = 1000130001,
    VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000,
    VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001,
    VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003,
    VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR = 1000147000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001,
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002,
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000,
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000,
    VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000,
    VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT = 1000161000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT = 1000161001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT = 1000161002,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT = 1000161003,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT = 1000161004,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = 1000174000,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000,
    VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000,
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001,
    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR = 1000053000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR = 1000053001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR = 1000053002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2KHR = 1000059000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2KHR = 1000059001,
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2KHR = 1000059002,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2KHR = 1000059003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2KHR = 1000059004,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2KHR = 1000059005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2KHR = 1000059006,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2KHR = 1000059007,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2KHR = 1000059008,
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR = 1000060000,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR = 1000060003,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR = 1000060004,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR = 1000060005,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR = 1000060006,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR = 1000060013,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR = 1000060014,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR = 1000070000,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR = 1000070001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR = 1000071000,
    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR = 1000071001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR = 1000071002,
    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR = 1000071003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR = 1000071004,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR = 1000072000,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR = 1000072001,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR = 1000072002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR = 1000076000,
    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR = 1000076001,
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR = 1000077000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR = 1000083000,
    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR = 1000085000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR = 1000112000,
    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR = 1000112001,
    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR = 1000113000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR = 1000117000,
    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR = 1000117001,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR = 1000117002,
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR = 1000117003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR = 1000120000,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR = 1000127000,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR = 1000127001,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2KHR = 1000146000,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2KHR = 1000146001,
    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2KHR = 1000146002,
    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2KHR = 1000146003,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2KHR = 1000146004,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR = 1000156000,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR = 1000156001,
    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR = 1000156002,
    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR = 1000156003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR = 1000156004,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR = 1000156005,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR = 1000157000,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR = 1000157001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3PROPERTIES_KHR = 1000168000,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR = 1000168001,
    VK_STRUCTURE_TYPE_BEGIN_RANGE = 0,
    VK_STRUCTURE_TYPE_END_RANGE = 48,
    VK_STRUCTURE_TYPE_RANGE_SIZE = 49,
    VK_STRUCTURE_TYPE_MAX_ENUM = 2147483647
}

public enum VkSystemAllocationScope
{
    VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0,
    VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1,
    VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2,
    VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3,
    VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4,
    VK_SYSTEM_ALLOCATION_SCOPE_BEGIN_RANGE = 0,
    VK_SYSTEM_ALLOCATION_SCOPE_END_RANGE = 4,
    VK_SYSTEM_ALLOCATION_SCOPE_RANGE_SIZE = 5,
    VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = 2147483647
}

public enum VkInternalAllocationType
{
    VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0,
    VK_INTERNAL_ALLOCATION_TYPE_BEGIN_RANGE = 0,
    VK_INTERNAL_ALLOCATION_TYPE_END_RANGE = 0,
    VK_INTERNAL_ALLOCATION_TYPE_RANGE_SIZE = 1,
    VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM = 2147483647
}

public enum VkFormat
{
    VK_FORMAT_UNDEFINED = 0,
    VK_FORMAT_R4G4UNORM_PACK8 = 1,
    VK_FORMAT_R4G4B4A4UNORM_PACK16 = 2,
    VK_FORMAT_B4G4R4A4UNORM_PACK16 = 3,
    VK_FORMAT_R5G6B5UNORM_PACK16 = 4,
    VK_FORMAT_B5G6R5UNORM_PACK16 = 5,
    VK_FORMAT_R5G5B5A1UNORM_PACK16 = 6,
    VK_FORMAT_B5G5R5A1UNORM_PACK16 = 7,
    VK_FORMAT_A1R5G5B5UNORM_PACK16 = 8,
    VK_FORMAT_R8UNORM = 9,
    VK_FORMAT_R8SNORM = 10,
    VK_FORMAT_R8USCALED = 11,
    VK_FORMAT_R8SSCALED = 12,
    VK_FORMAT_R8UINT = 13,
    VK_FORMAT_R8SINT = 14,
    VK_FORMAT_R8SRGB = 15,
    VK_FORMAT_R8G8UNORM = 16,
    VK_FORMAT_R8G8SNORM = 17,
    VK_FORMAT_R8G8USCALED = 18,
    VK_FORMAT_R8G8SSCALED = 19,
    VK_FORMAT_R8G8UINT = 20,
    VK_FORMAT_R8G8SINT = 21,
    VK_FORMAT_R8G8SRGB = 22,
    VK_FORMAT_R8G8B8UNORM = 23,
    VK_FORMAT_R8G8B8SNORM = 24,
    VK_FORMAT_R8G8B8USCALED = 25,
    VK_FORMAT_R8G8B8SSCALED = 26,
    VK_FORMAT_R8G8B8UINT = 27,
    VK_FORMAT_R8G8B8SINT = 28,
    VK_FORMAT_R8G8B8SRGB = 29,
    VK_FORMAT_B8G8R8UNORM = 30,
    VK_FORMAT_B8G8R8SNORM = 31,
    VK_FORMAT_B8G8R8USCALED = 32,
    VK_FORMAT_B8G8R8SSCALED = 33,
    VK_FORMAT_B8G8R8UINT = 34,
    VK_FORMAT_B8G8R8SINT = 35,
    VK_FORMAT_B8G8R8SRGB = 36,
    VK_FORMAT_R8G8B8A8UNORM = 37,
    VK_FORMAT_R8G8B8A8SNORM = 38,
    VK_FORMAT_R8G8B8A8USCALED = 39,
    VK_FORMAT_R8G8B8A8SSCALED = 40,
    VK_FORMAT_R8G8B8A8UINT = 41,
    VK_FORMAT_R8G8B8A8SINT = 42,
    VK_FORMAT_R8G8B8A8SRGB = 43,
    VK_FORMAT_B8G8R8A8UNORM = 44,
    VK_FORMAT_B8G8R8A8SNORM = 45,
    VK_FORMAT_B8G8R8A8USCALED = 46,
    VK_FORMAT_B8G8R8A8SSCALED = 47,
    VK_FORMAT_B8G8R8A8UINT = 48,
    VK_FORMAT_B8G8R8A8SINT = 49,
    VK_FORMAT_B8G8R8A8SRGB = 50,
    VK_FORMAT_A8B8G8R8UNORM_PACK32 = 51,
    VK_FORMAT_A8B8G8R8SNORM_PACK32 = 52,
    VK_FORMAT_A8B8G8R8USCALED_PACK32 = 53,
    VK_FORMAT_A8B8G8R8SSCALED_PACK32 = 54,
    VK_FORMAT_A8B8G8R8UINT_PACK32 = 55,
    VK_FORMAT_A8B8G8R8SINT_PACK32 = 56,
    VK_FORMAT_A8B8G8R8SRGB_PACK32 = 57,
    VK_FORMAT_A2R10G10B10UNORM_PACK32 = 58,
    VK_FORMAT_A2R10G10B10SNORM_PACK32 = 59,
    VK_FORMAT_A2R10G10B10USCALED_PACK32 = 60,
    VK_FORMAT_A2R10G10B10SSCALED_PACK32 = 61,
    VK_FORMAT_A2R10G10B10UINT_PACK32 = 62,
    VK_FORMAT_A2R10G10B10SINT_PACK32 = 63,
    VK_FORMAT_A2B10G10R10UNORM_PACK32 = 64,
    VK_FORMAT_A2B10G10R10SNORM_PACK32 = 65,
    VK_FORMAT_A2B10G10R10USCALED_PACK32 = 66,
    VK_FORMAT_A2B10G10R10SSCALED_PACK32 = 67,
    VK_FORMAT_A2B10G10R10UINT_PACK32 = 68,
    VK_FORMAT_A2B10G10R10SINT_PACK32 = 69,
    VK_FORMAT_R16UNORM = 70,
    VK_FORMAT_R16SNORM = 71,
    VK_FORMAT_R16USCALED = 72,
    VK_FORMAT_R16SSCALED = 73,
    VK_FORMAT_R16UINT = 74,
    VK_FORMAT_R16SINT = 75,
    VK_FORMAT_R16SFLOAT = 76,
    VK_FORMAT_R16G16UNORM = 77,
    VK_FORMAT_R16G16SNORM = 78,
    VK_FORMAT_R16G16USCALED = 79,
    VK_FORMAT_R16G16SSCALED = 80,
    VK_FORMAT_R16G16UINT = 81,
    VK_FORMAT_R16G16SINT = 82,
    VK_FORMAT_R16G16SFLOAT = 83,
    VK_FORMAT_R16G16B16UNORM = 84,
    VK_FORMAT_R16G16B16SNORM = 85,
    VK_FORMAT_R16G16B16USCALED = 86,
    VK_FORMAT_R16G16B16SSCALED = 87,
    VK_FORMAT_R16G16B16UINT = 88,
    VK_FORMAT_R16G16B16SINT = 89,
    VK_FORMAT_R16G16B16SFLOAT = 90,
    VK_FORMAT_R16G16B16A16UNORM = 91,
    VK_FORMAT_R16G16B16A16SNORM = 92,
    VK_FORMAT_R16G16B16A16USCALED = 93,
    VK_FORMAT_R16G16B16A16SSCALED = 94,
    VK_FORMAT_R16G16B16A16UINT = 95,
    VK_FORMAT_R16G16B16A16SINT = 96,
    VK_FORMAT_R16G16B16A16SFLOAT = 97,
    VK_FORMAT_R32UINT = 98,
    VK_FORMAT_R32SINT = 99,
    VK_FORMAT_R32SFLOAT = 100,
    VK_FORMAT_R32G32UINT = 101,
    VK_FORMAT_R32G32SINT = 102,
    VK_FORMAT_R32G32SFLOAT = 103,
    VK_FORMAT_R32G32B32UINT = 104,
    VK_FORMAT_R32G32B32SINT = 105,
    VK_FORMAT_R32G32B32SFLOAT = 106,
    VK_FORMAT_R32G32B32A32UINT = 107,
    VK_FORMAT_R32G32B32A32SINT = 108,
    VK_FORMAT_R32G32B32A32SFLOAT = 109,
    VK_FORMAT_R64UINT = 110,
    VK_FORMAT_R64SINT = 111,
    VK_FORMAT_R64SFLOAT = 112,
    VK_FORMAT_R64G64UINT = 113,
    VK_FORMAT_R64G64SINT = 114,
    VK_FORMAT_R64G64SFLOAT = 115,
    VK_FORMAT_R64G64B64UINT = 116,
    VK_FORMAT_R64G64B64SINT = 117,
    VK_FORMAT_R64G64B64SFLOAT = 118,
    VK_FORMAT_R64G64B64A64UINT = 119,
    VK_FORMAT_R64G64B64A64SINT = 120,
    VK_FORMAT_R64G64B64A64SFLOAT = 121,
    VK_FORMAT_B10G11R11UFLOAT_PACK32 = 122,
    VK_FORMAT_E5B9G9R9UFLOAT_PACK32 = 123,
    VK_FORMAT_D16UNORM = 124,
    VK_FORMAT_X8D24UNORM_PACK32 = 125,
    VK_FORMAT_D32SFLOAT = 126,
    VK_FORMAT_S8UINT = 127,
    VK_FORMAT_D16UNORM_S8UINT = 128,
    VK_FORMAT_D24UNORM_S8UINT = 129,
    VK_FORMAT_D32SFLOAT_S8UINT = 130,
    VK_FORMAT_BC1RGB_UNORM_BLOCK = 131,
    VK_FORMAT_BC1RGB_SRGB_BLOCK = 132,
    VK_FORMAT_BC1RGBA_UNORM_BLOCK = 133,
    VK_FORMAT_BC1RGBA_SRGB_BLOCK = 134,
    VK_FORMAT_BC2UNORM_BLOCK = 135,
    VK_FORMAT_BC2SRGB_BLOCK = 136,
    VK_FORMAT_BC3UNORM_BLOCK = 137,
    VK_FORMAT_BC3SRGB_BLOCK = 138,
    VK_FORMAT_BC4UNORM_BLOCK = 139,
    VK_FORMAT_BC4SNORM_BLOCK = 140,
    VK_FORMAT_BC5UNORM_BLOCK = 141,
    VK_FORMAT_BC5SNORM_BLOCK = 142,
    VK_FORMAT_BC6H_UFLOAT_BLOCK = 143,
    VK_FORMAT_BC6H_SFLOAT_BLOCK = 144,
    VK_FORMAT_BC7UNORM_BLOCK = 145,
    VK_FORMAT_BC7SRGB_BLOCK = 146,
    VK_FORMAT_ETC2R8G8B8UNORM_BLOCK = 147,
    VK_FORMAT_ETC2R8G8B8SRGB_BLOCK = 148,
    VK_FORMAT_ETC2R8G8B8A1UNORM_BLOCK = 149,
    VK_FORMAT_ETC2R8G8B8A1SRGB_BLOCK = 150,
    VK_FORMAT_ETC2R8G8B8A8UNORM_BLOCK = 151,
    VK_FORMAT_ETC2R8G8B8A8SRGB_BLOCK = 152,
    VK_FORMAT_EAC_R11UNORM_BLOCK = 153,
    VK_FORMAT_EAC_R11SNORM_BLOCK = 154,
    VK_FORMAT_EAC_R11G11UNORM_BLOCK = 155,
    VK_FORMAT_EAC_R11G11SNORM_BLOCK = 156,
    VK_FORMAT_ASTC_4x4UNORM_BLOCK = 157,
    VK_FORMAT_ASTC_4x4SRGB_BLOCK = 158,
    VK_FORMAT_ASTC_5x4UNORM_BLOCK = 159,
    VK_FORMAT_ASTC_5x4SRGB_BLOCK = 160,
    VK_FORMAT_ASTC_5x5UNORM_BLOCK = 161,
    VK_FORMAT_ASTC_5x5SRGB_BLOCK = 162,
    VK_FORMAT_ASTC_6x5UNORM_BLOCK = 163,
    VK_FORMAT_ASTC_6x5SRGB_BLOCK = 164,
    VK_FORMAT_ASTC_6x6UNORM_BLOCK = 165,
    VK_FORMAT_ASTC_6x6SRGB_BLOCK = 166,
    VK_FORMAT_ASTC_8x5UNORM_BLOCK = 167,
    VK_FORMAT_ASTC_8x5SRGB_BLOCK = 168,
    VK_FORMAT_ASTC_8x6UNORM_BLOCK = 169,
    VK_FORMAT_ASTC_8x6SRGB_BLOCK = 170,
    VK_FORMAT_ASTC_8x8UNORM_BLOCK = 171,
    VK_FORMAT_ASTC_8x8SRGB_BLOCK = 172,
    VK_FORMAT_ASTC_10x5UNORM_BLOCK = 173,
    VK_FORMAT_ASTC_10x5SRGB_BLOCK = 174,
    VK_FORMAT_ASTC_10x6UNORM_BLOCK = 175,
    VK_FORMAT_ASTC_10x6SRGB_BLOCK = 176,
    VK_FORMAT_ASTC_10x8UNORM_BLOCK = 177,
    VK_FORMAT_ASTC_10x8SRGB_BLOCK = 178,
    VK_FORMAT_ASTC_10x10UNORM_BLOCK = 179,
    VK_FORMAT_ASTC_10x10SRGB_BLOCK = 180,
    VK_FORMAT_ASTC_12x10UNORM_BLOCK = 181,
    VK_FORMAT_ASTC_12x10SRGB_BLOCK = 182,
    VK_FORMAT_ASTC_12x12UNORM_BLOCK = 183,
    VK_FORMAT_ASTC_12x12SRGB_BLOCK = 184,
    VK_FORMAT_G8B8G8R8_422UNORM = 1000156000,
    VK_FORMAT_B8G8R8G8_422UNORM = 1000156001,
    VK_FORMAT_G8B8R8_3PLANE_420UNORM = 1000156002,
    VK_FORMAT_G8B8R8_2PLANE_420UNORM = 1000156003,
    VK_FORMAT_G8B8R8_3PLANE_422UNORM = 1000156004,
    VK_FORMAT_G8B8R8_2PLANE_422UNORM = 1000156005,
    VK_FORMAT_G8B8R8_3PLANE_444UNORM = 1000156006,
    VK_FORMAT_R10X6UNORM_PACK16 = 1000156007,
    VK_FORMAT_R10X6G10X6UNORM_2PACK16 = 1000156008,
    VK_FORMAT_R10X6G10X6B10X6A10X6UNORM_4PACK16 = 1000156009,
    VK_FORMAT_G10X6B10X6G10X6R10X6_422UNORM_4PACK16 = 1000156010,
    VK_FORMAT_B10X6G10X6R10X6G10X6_422UNORM_4PACK16 = 1000156011,
    VK_FORMAT_G10X6B10X6R10X6_3PLANE_420UNORM_3PACK16 = 1000156012,
    VK_FORMAT_G10X6B10X6R10X6_2PLANE_420UNORM_3PACK16 = 1000156013,
    VK_FORMAT_G10X6B10X6R10X6_3PLANE_422UNORM_3PACK16 = 1000156014,
    VK_FORMAT_G10X6B10X6R10X6_2PLANE_422UNORM_3PACK16 = 1000156015,
    VK_FORMAT_G10X6B10X6R10X6_3PLANE_444UNORM_3PACK16 = 1000156016,
    VK_FORMAT_R12X4UNORM_PACK16 = 1000156017,
    VK_FORMAT_R12X4G12X4UNORM_2PACK16 = 1000156018,
    VK_FORMAT_R12X4G12X4B12X4A12X4UNORM_4PACK16 = 1000156019,
    VK_FORMAT_G12X4B12X4G12X4R12X4_422UNORM_4PACK16 = 1000156020,
    VK_FORMAT_B12X4G12X4R12X4G12X4_422UNORM_4PACK16 = 1000156021,
    VK_FORMAT_G12X4B12X4R12X4_3PLANE_420UNORM_3PACK16 = 1000156022,
    VK_FORMAT_G12X4B12X4R12X4_2PLANE_420UNORM_3PACK16 = 1000156023,
    VK_FORMAT_G12X4B12X4R12X4_3PLANE_422UNORM_3PACK16 = 1000156024,
    VK_FORMAT_G12X4B12X4R12X4_2PLANE_422UNORM_3PACK16 = 1000156025,
    VK_FORMAT_G12X4B12X4R12X4_3PLANE_444UNORM_3PACK16 = 1000156026,
    VK_FORMAT_G16B16G16R16_422UNORM = 1000156027,
    VK_FORMAT_B16G16R16G16_422UNORM = 1000156028,
    VK_FORMAT_G16B16R16_3PLANE_420UNORM = 1000156029,
    VK_FORMAT_G16B16R16_2PLANE_420UNORM = 1000156030,
    VK_FORMAT_G16B16R16_3PLANE_422UNORM = 1000156031,
    VK_FORMAT_G16B16R16_2PLANE_422UNORM = 1000156032,
    VK_FORMAT_G16B16R16_3PLANE_444UNORM = 1000156033,
    VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000,
    VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001,
    VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002,
    VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003,
    VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004,
    VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005,
    VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006,
    VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007,
    VK_FORMAT_G8B8G8R8_422UNORM_KHR = 1000156000,
    VK_FORMAT_B8G8R8G8_422UNORM_KHR = 1000156001,
    VK_FORMAT_G8B8R8_3PLANE_420UNORM_KHR = 1000156002,
    VK_FORMAT_G8B8R8_2PLANE_420UNORM_KHR = 1000156003,
    VK_FORMAT_G8B8R8_3PLANE_422UNORM_KHR = 1000156004,
    VK_FORMAT_G8B8R8_2PLANE_422UNORM_KHR = 1000156005,
    VK_FORMAT_G8B8R8_3PLANE_444UNORM_KHR = 1000156006,
    VK_FORMAT_R10X6UNORM_PACK16KHR = 1000156007,
    VK_FORMAT_R10X6G10X6UNORM_2PACK16KHR = 1000156008,
    VK_FORMAT_R10X6G10X6B10X6A10X6UNORM_4PACK16KHR = 1000156009,
    VK_FORMAT_G10X6B10X6G10X6R10X6_422UNORM_4PACK16KHR = 1000156010,
    VK_FORMAT_B10X6G10X6R10X6G10X6_422UNORM_4PACK16KHR = 1000156011,
    VK_FORMAT_G10X6B10X6R10X6_3PLANE_420UNORM_3PACK16KHR = 1000156012,
    VK_FORMAT_G10X6B10X6R10X6_2PLANE_420UNORM_3PACK16KHR = 1000156013,
    VK_FORMAT_G10X6B10X6R10X6_3PLANE_422UNORM_3PACK16KHR = 1000156014,
    VK_FORMAT_G10X6B10X6R10X6_2PLANE_422UNORM_3PACK16KHR = 1000156015,
    VK_FORMAT_G10X6B10X6R10X6_3PLANE_444UNORM_3PACK16KHR = 1000156016,
    VK_FORMAT_R12X4UNORM_PACK16KHR = 1000156017,
    VK_FORMAT_R12X4G12X4UNORM_2PACK16KHR = 1000156018,
    VK_FORMAT_R12X4G12X4B12X4A12X4UNORM_4PACK16KHR = 1000156019,
    VK_FORMAT_G12X4B12X4G12X4R12X4_422UNORM_4PACK16KHR = 1000156020,
    VK_FORMAT_B12X4G12X4R12X4G12X4_422UNORM_4PACK16KHR = 1000156021,
    VK_FORMAT_G12X4B12X4R12X4_3PLANE_420UNORM_3PACK16KHR = 1000156022,
    VK_FORMAT_G12X4B12X4R12X4_2PLANE_420UNORM_3PACK16KHR = 1000156023,
    VK_FORMAT_G12X4B12X4R12X4_3PLANE_422UNORM_3PACK16KHR = 1000156024,
    VK_FORMAT_G12X4B12X4R12X4_2PLANE_422UNORM_3PACK16KHR = 1000156025,
    VK_FORMAT_G12X4B12X4R12X4_3PLANE_444UNORM_3PACK16KHR = 1000156026,
    VK_FORMAT_G16B16G16R16_422UNORM_KHR = 1000156027,
    VK_FORMAT_B16G16R16G16_422UNORM_KHR = 1000156028,
    VK_FORMAT_G16B16R16_3PLANE_420UNORM_KHR = 1000156029,
    VK_FORMAT_G16B16R16_2PLANE_420UNORM_KHR = 1000156030,
    VK_FORMAT_G16B16R16_3PLANE_422UNORM_KHR = 1000156031,
    VK_FORMAT_G16B16R16_2PLANE_422UNORM_KHR = 1000156032,
    VK_FORMAT_G16B16R16_3PLANE_444UNORM_KHR = 1000156033,
    VK_FORMAT_BEGIN_RANGE = 0,
    VK_FORMAT_END_RANGE = 184,
    VK_FORMAT_RANGE_SIZE = 185,
    VK_FORMAT_MAX_ENUM = 2147483647
}

public enum VkImageType
{
    VK_IMAGE_TYPE_1D = 0,
    VK_IMAGE_TYPE_2D = 1,
    VK_IMAGE_TYPE_3D = 2,
    VK_IMAGE_TYPE_BEGIN_RANGE = 0,
    VK_IMAGE_TYPE_END_RANGE = 2,
    VK_IMAGE_TYPE_RANGE_SIZE = 3,
    VK_IMAGE_TYPE_MAX_ENUM = 2147483647
}

public enum VkImageTiling
{
    VK_IMAGE_TILING_OPTIMAL = 0,
    VK_IMAGE_TILING_LINEAR = 1,
    VK_IMAGE_TILING_BEGIN_RANGE = 0,
    VK_IMAGE_TILING_END_RANGE = 1,
    VK_IMAGE_TILING_RANGE_SIZE = 2,
    VK_IMAGE_TILING_MAX_ENUM = 2147483647
}

public enum VkPhysicalDeviceType
{
    VK_PHYSICAL_DEVICE_TYPE_OTHER = 0,
    VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1,
    VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2,
    VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3,
    VK_PHYSICAL_DEVICE_TYPE_CPU = 4,
    VK_PHYSICAL_DEVICE_TYPE_BEGIN_RANGE = 0,
    VK_PHYSICAL_DEVICE_TYPE_END_RANGE = 4,
    VK_PHYSICAL_DEVICE_TYPE_RANGE_SIZE = 5,
    VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM = 2147483647
}

public enum VkQueryType
{
    VK_QUERY_TYPE_OCCLUSION = 0,
    VK_QUERY_TYPE_PIPELINE_STATISTICS = 1,
    VK_QUERY_TYPE_TIMESTAMP = 2,
    VK_QUERY_TYPE_BEGIN_RANGE = 0,
    VK_QUERY_TYPE_END_RANGE = 2,
    VK_QUERY_TYPE_RANGE_SIZE = 3,
    VK_QUERY_TYPE_MAX_ENUM = 2147483647
}

public enum VkSharingMode
{
    VK_SHARING_MODE_EXCLUSIVE = 0,
    VK_SHARING_MODE_CONCURRENT = 1,
    VK_SHARING_MODE_BEGIN_RANGE = 0,
    VK_SHARING_MODE_END_RANGE = 1,
    VK_SHARING_MODE_RANGE_SIZE = 2,
    VK_SHARING_MODE_MAX_ENUM = 2147483647
}

public enum VkImageLayout
{
    VK_IMAGE_LAYOUT_UNDEFINED = 0,
    VK_IMAGE_LAYOUT_GENERAL = 1,
    VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2,
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,
    VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5,
    VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6,
    VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7,
    VK_IMAGE_LAYOUT_PREINITIALIZED = 8,
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000,
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001,
    VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002,
    VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000,
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR = 1000117000,
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR = 1000117001,
    VK_IMAGE_LAYOUT_BEGIN_RANGE = 0,
    VK_IMAGE_LAYOUT_END_RANGE = 8,
    VK_IMAGE_LAYOUT_RANGE_SIZE = 9,
    VK_IMAGE_LAYOUT_MAX_ENUM = 2147483647
}

public enum VkImageViewType
{
    VK_IMAGE_VIEW_TYPE_1D = 0,
    VK_IMAGE_VIEW_TYPE_2D = 1,
    VK_IMAGE_VIEW_TYPE_3D = 2,
    VK_IMAGE_VIEW_TYPE_CUBE = 3,
    VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4,
    VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5,
    VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6,
    VK_IMAGE_VIEW_TYPE_BEGIN_RANGE = 0,
    VK_IMAGE_VIEW_TYPE_END_RANGE = 6,
    VK_IMAGE_VIEW_TYPE_RANGE_SIZE = 7,
    VK_IMAGE_VIEW_TYPE_MAX_ENUM = 2147483647
}

public enum VkComponentSwizzle
{
    VK_COMPONENT_SWIZZLE_IDENTITY = 0,
    VK_COMPONENT_SWIZZLE_ZERO = 1,
    VK_COMPONENT_SWIZZLE_ONE = 2,
    VK_COMPONENT_SWIZZLE_R = 3,
    VK_COMPONENT_SWIZZLE_G = 4,
    VK_COMPONENT_SWIZZLE_B = 5,
    VK_COMPONENT_SWIZZLE_A = 6,
    VK_COMPONENT_SWIZZLE_BEGIN_RANGE = 0,
    VK_COMPONENT_SWIZZLE_END_RANGE = 6,
    VK_COMPONENT_SWIZZLE_RANGE_SIZE = 7,
    VK_COMPONENT_SWIZZLE_MAX_ENUM = 2147483647
}

public enum VkVertexInputRate
{
    VK_VERTEX_INPUT_RATE_VERTEX = 0,
    VK_VERTEX_INPUT_RATE_INSTANCE = 1,
    VK_VERTEX_INPUT_RATE_BEGIN_RANGE = 0,
    VK_VERTEX_INPUT_RATE_END_RANGE = 1,
    VK_VERTEX_INPUT_RATE_RANGE_SIZE = 2,
    VK_VERTEX_INPUT_RATE_MAX_ENUM = 2147483647
}

public enum VkPrimitiveTopology
{
    VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0,
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1,
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5,
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6,
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9,
    VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10,
    VK_PRIMITIVE_TOPOLOGY_BEGIN_RANGE = 0,
    VK_PRIMITIVE_TOPOLOGY_END_RANGE = 10,
    VK_PRIMITIVE_TOPOLOGY_RANGE_SIZE = 11,
    VK_PRIMITIVE_TOPOLOGY_MAX_ENUM = 2147483647
}

public enum VkPolygonMode
{
    VK_POLYGON_MODE_FILL = 0,
    VK_POLYGON_MODE_LINE = 1,
    VK_POLYGON_MODE_POINT = 2,
    VK_POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000,
    VK_POLYGON_MODE_BEGIN_RANGE = 0,
    VK_POLYGON_MODE_END_RANGE = 2,
    VK_POLYGON_MODE_RANGE_SIZE = 3,
    VK_POLYGON_MODE_MAX_ENUM = 2147483647
}

public enum VkFrontFace
{
    VK_FRONT_FACE_COUNTER_CLOCKWISE = 0,
    VK_FRONT_FACE_CLOCKWISE = 1,
    VK_FRONT_FACE_BEGIN_RANGE = 0,
    VK_FRONT_FACE_END_RANGE = 1,
    VK_FRONT_FACE_RANGE_SIZE = 2,
    VK_FRONT_FACE_MAX_ENUM = 2147483647
}

public enum VkCompareOp
{
    VK_COMPARE_OP_NEVER = 0,
    VK_COMPARE_OP_LESS = 1,
    VK_COMPARE_OP_EQUAL = 2,
    VK_COMPARE_OP_LESS_OR_EQUAL = 3,
    VK_COMPARE_OP_GREATER = 4,
    VK_COMPARE_OP_NOT_EQUAL = 5,
    VK_COMPARE_OP_GREATER_OR_EQUAL = 6,
    VK_COMPARE_OP_ALWAYS = 7,
    VK_COMPARE_OP_BEGIN_RANGE = 0,
    VK_COMPARE_OP_END_RANGE = 7,
    VK_COMPARE_OP_RANGE_SIZE = 8,
    VK_COMPARE_OP_MAX_ENUM = 2147483647
}

public enum VkStencilOp
{
    VK_STENCIL_OP_KEEP = 0,
    VK_STENCIL_OP_ZERO = 1,
    VK_STENCIL_OP_REPLACE = 2,
    VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3,
    VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4,
    VK_STENCIL_OP_INVERT = 5,
    VK_STENCIL_OP_INCREMENT_AND_WRAP = 6,
    VK_STENCIL_OP_DECREMENT_AND_WRAP = 7,
    VK_STENCIL_OP_BEGIN_RANGE = 0,
    VK_STENCIL_OP_END_RANGE = 7,
    VK_STENCIL_OP_RANGE_SIZE = 8,
    VK_STENCIL_OP_MAX_ENUM = 2147483647
}

public enum VkLogicOp
{
    VK_LOGIC_OP_CLEAR = 0,
    VK_LOGIC_OP_AND = 1,
    VK_LOGIC_OP_AND_REVERSE = 2,
    VK_LOGIC_OP_COPY = 3,
    VK_LOGIC_OP_AND_INVERTED = 4,
    VK_LOGIC_OP_NO_OP = 5,
    VK_LOGIC_OP_XOR = 6,
    VK_LOGIC_OP_OR = 7,
    VK_LOGIC_OP_NOR = 8,
    VK_LOGIC_OP_EQUIVALENT = 9,
    VK_LOGIC_OP_INVERT = 10,
    VK_LOGIC_OP_OR_REVERSE = 11,
    VK_LOGIC_OP_COPY_INVERTED = 12,
    VK_LOGIC_OP_OR_INVERTED = 13,
    VK_LOGIC_OP_NAND = 14,
    VK_LOGIC_OP_SET = 15,
    VK_LOGIC_OP_BEGIN_RANGE = 0,
    VK_LOGIC_OP_END_RANGE = 15,
    VK_LOGIC_OP_RANGE_SIZE = 16,
    VK_LOGIC_OP_MAX_ENUM = 2147483647
}

public enum VkBlendFactor
{
    VK_BLEND_FACTOR_ZERO = 0,
    VK_BLEND_FACTOR_ONE = 1,
    VK_BLEND_FACTOR_SRC_COLOR = 2,
    VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3,
    VK_BLEND_FACTOR_DST_COLOR = 4,
    VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5,
    VK_BLEND_FACTOR_SRC_ALPHA = 6,
    VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7,
    VK_BLEND_FACTOR_DST_ALPHA = 8,
    VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9,
    VK_BLEND_FACTOR_CONSTANT_COLOR = 10,
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11,
    VK_BLEND_FACTOR_CONSTANT_ALPHA = 12,
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13,
    VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14,
    VK_BLEND_FACTOR_SRC1COLOR = 15,
    VK_BLEND_FACTOR_ONE_MINUS_SRC1COLOR = 16,
    VK_BLEND_FACTOR_SRC1ALPHA = 17,
    VK_BLEND_FACTOR_ONE_MINUS_SRC1ALPHA = 18,
    VK_BLEND_FACTOR_BEGIN_RANGE = 0,
    VK_BLEND_FACTOR_END_RANGE = 18,
    VK_BLEND_FACTOR_RANGE_SIZE = 19,
    VK_BLEND_FACTOR_MAX_ENUM = 2147483647
}

public enum VkBlendOp
{
    VK_BLEND_OP_ADD = 0,
    VK_BLEND_OP_SUBTRACT = 1,
    VK_BLEND_OP_REVERSE_SUBTRACT = 2,
    VK_BLEND_OP_MIN = 3,
    VK_BLEND_OP_MAX = 4,
    VK_BLEND_OP_ZERO_EXT = 1000148000,
    VK_BLEND_OP_SRC_EXT = 1000148001,
    VK_BLEND_OP_DST_EXT = 1000148002,
    VK_BLEND_OP_SRC_OVER_EXT = 1000148003,
    VK_BLEND_OP_DST_OVER_EXT = 1000148004,
    VK_BLEND_OP_SRC_IN_EXT = 1000148005,
    VK_BLEND_OP_DST_IN_EXT = 1000148006,
    VK_BLEND_OP_SRC_OUT_EXT = 1000148007,
    VK_BLEND_OP_DST_OUT_EXT = 1000148008,
    VK_BLEND_OP_SRC_ATOP_EXT = 1000148009,
    VK_BLEND_OP_DST_ATOP_EXT = 1000148010,
    VK_BLEND_OP_XOR_EXT = 1000148011,
    VK_BLEND_OP_MULTIPLY_EXT = 1000148012,
    VK_BLEND_OP_SCREEN_EXT = 1000148013,
    VK_BLEND_OP_OVERLAY_EXT = 1000148014,
    VK_BLEND_OP_DARKEN_EXT = 1000148015,
    VK_BLEND_OP_LIGHTEN_EXT = 1000148016,
    VK_BLEND_OP_COLORDODGE_EXT = 1000148017,
    VK_BLEND_OP_COLORBURN_EXT = 1000148018,
    VK_BLEND_OP_HARDLIGHT_EXT = 1000148019,
    VK_BLEND_OP_SOFTLIGHT_EXT = 1000148020,
    VK_BLEND_OP_DIFFERENCE_EXT = 1000148021,
    VK_BLEND_OP_EXCLUSION_EXT = 1000148022,
    VK_BLEND_OP_INVERT_EXT = 1000148023,
    VK_BLEND_OP_INVERT_RGB_EXT = 1000148024,
    VK_BLEND_OP_LINEARDODGE_EXT = 1000148025,
    VK_BLEND_OP_LINEARBURN_EXT = 1000148026,
    VK_BLEND_OP_VIVIDLIGHT_EXT = 1000148027,
    VK_BLEND_OP_LINEARLIGHT_EXT = 1000148028,
    VK_BLEND_OP_PINLIGHT_EXT = 1000148029,
    VK_BLEND_OP_HARDMIX_EXT = 1000148030,
    VK_BLEND_OP_HSL_HUE_EXT = 1000148031,
    VK_BLEND_OP_HSL_SATURATION_EXT = 1000148032,
    VK_BLEND_OP_HSL_COLOR_EXT = 1000148033,
    VK_BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034,
    VK_BLEND_OP_PLUS_EXT = 1000148035,
    VK_BLEND_OP_PLUS_CLAMPED_EXT = 1000148036,
    VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037,
    VK_BLEND_OP_PLUS_DARKER_EXT = 1000148038,
    VK_BLEND_OP_MINUS_EXT = 1000148039,
    VK_BLEND_OP_MINUS_CLAMPED_EXT = 1000148040,
    VK_BLEND_OP_CONTRAST_EXT = 1000148041,
    VK_BLEND_OP_INVERT_OVG_EXT = 1000148042,
    VK_BLEND_OP_RED_EXT = 1000148043,
    VK_BLEND_OP_GREEN_EXT = 1000148044,
    VK_BLEND_OP_BLUE_EXT = 1000148045,
    VK_BLEND_OP_BEGIN_RANGE = 0,
    VK_BLEND_OP_END_RANGE = 4,
    VK_BLEND_OP_RANGE_SIZE = 5,
    VK_BLEND_OP_MAX_ENUM = 2147483647
}

public enum VkDynamicState
{
    VK_DYNAMIC_STATE_VIEWPORT = 0,
    VK_DYNAMIC_STATE_SCISSOR = 1,
    VK_DYNAMIC_STATE_LINE_WIDTH = 2,
    VK_DYNAMIC_STATE_DEPTH_BIAS = 3,
    VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4,
    VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5,
    VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6,
    VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7,
    VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8,
    VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000,
    VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000,
    VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000,
    VK_DYNAMIC_STATE_BEGIN_RANGE = 0,
    VK_DYNAMIC_STATE_END_RANGE = 8,
    VK_DYNAMIC_STATE_RANGE_SIZE = 9,
    VK_DYNAMIC_STATE_MAX_ENUM = 2147483647
}

public enum VkFilter
{
    VK_FILTER_NEAREST = 0,
    VK_FILTER_LINEAR = 1,
    VK_FILTER_CUBIC_IMG = 1000015000,
    VK_FILTER_BEGIN_RANGE = 0,
    VK_FILTER_END_RANGE = 1,
    VK_FILTER_RANGE_SIZE = 2,
    VK_FILTER_MAX_ENUM = 2147483647
}

public enum VkSamplerMipmapMode
{
    VK_SAMPLER_MIPMAP_MODE_NEAREST = 0,
    VK_SAMPLER_MIPMAP_MODE_LINEAR = 1,
    VK_SAMPLER_MIPMAP_MODE_BEGIN_RANGE = 0,
    VK_SAMPLER_MIPMAP_MODE_END_RANGE = 1,
    VK_SAMPLER_MIPMAP_MODE_RANGE_SIZE = 2,
    VK_SAMPLER_MIPMAP_MODE_MAX_ENUM = 2147483647
}

public enum VkSamplerAddressMode
{
    VK_SAMPLER_ADDRESS_MODE_REPEAT = 0,
    VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1,
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2,
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3,
    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4,
    VK_SAMPLER_ADDRESS_MODE_BEGIN_RANGE = 0,
    VK_SAMPLER_ADDRESS_MODE_END_RANGE = 3,
    VK_SAMPLER_ADDRESS_MODE_RANGE_SIZE = 4,
    VK_SAMPLER_ADDRESS_MODE_MAX_ENUM = 2147483647
}

public enum VkBorderColor
{
    VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0,
    VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1,
    VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2,
    VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3,
    VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4,
    VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5,
    VK_BORDER_COLOR_BEGIN_RANGE = 0,
    VK_BORDER_COLOR_END_RANGE = 5,
    VK_BORDER_COLOR_RANGE_SIZE = 6,
    VK_BORDER_COLOR_MAX_ENUM = 2147483647
}

public enum VkDescriptorType
{
    VK_DESCRIPTOR_TYPE_SAMPLER = 0,
    VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,
    VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,
    VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,
    VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,
    VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6,
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,
    VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10,
    VK_DESCRIPTOR_TYPE_BEGIN_RANGE = 0,
    VK_DESCRIPTOR_TYPE_END_RANGE = 10,
    VK_DESCRIPTOR_TYPE_RANGE_SIZE = 11,
    VK_DESCRIPTOR_TYPE_MAX_ENUM = 2147483647
}

public enum VkAttachmentLoadOp
{
    VK_ATTACHMENT_LOAD_OP_LOAD = 0,
    VK_ATTACHMENT_LOAD_OP_CLEAR = 1,
    VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2,
    VK_ATTACHMENT_LOAD_OP_BEGIN_RANGE = 0,
    VK_ATTACHMENT_LOAD_OP_END_RANGE = 2,
    VK_ATTACHMENT_LOAD_OP_RANGE_SIZE = 3,
    VK_ATTACHMENT_LOAD_OP_MAX_ENUM = 2147483647
}

public enum VkAttachmentStoreOp
{
    VK_ATTACHMENT_STORE_OP_STORE = 0,
    VK_ATTACHMENT_STORE_OP_DONT_CARE = 1,
    VK_ATTACHMENT_STORE_OP_BEGIN_RANGE = 0,
    VK_ATTACHMENT_STORE_OP_END_RANGE = 1,
    VK_ATTACHMENT_STORE_OP_RANGE_SIZE = 2,
    VK_ATTACHMENT_STORE_OP_MAX_ENUM = 2147483647
}

public enum VkPipelineBindPoint
{
    VK_PIPELINE_BIND_POINT_GRAPHICS = 0,
    VK_PIPELINE_BIND_POINT_COMPUTE = 1,
    VK_PIPELINE_BIND_POINT_BEGIN_RANGE = 0,
    VK_PIPELINE_BIND_POINT_END_RANGE = 1,
    VK_PIPELINE_BIND_POINT_RANGE_SIZE = 2,
    VK_PIPELINE_BIND_POINT_MAX_ENUM = 2147483647
}

public enum VkCommandBufferLevel
{
    VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0,
    VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1,
    VK_COMMAND_BUFFER_LEVEL_BEGIN_RANGE = 0,
    VK_COMMAND_BUFFER_LEVEL_END_RANGE = 1,
    VK_COMMAND_BUFFER_LEVEL_RANGE_SIZE = 2,
    VK_COMMAND_BUFFER_LEVEL_MAX_ENUM = 2147483647
}

public enum VkIndexType
{
    VK_INDEX_TYPE_UINT16 = 0,
    VK_INDEX_TYPE_UINT32 = 1,
    VK_INDEX_TYPE_BEGIN_RANGE = 0,
    VK_INDEX_TYPE_END_RANGE = 1,
    VK_INDEX_TYPE_RANGE_SIZE = 2,
    VK_INDEX_TYPE_MAX_ENUM = 2147483647
}

public enum VkSubpassContents
{
    VK_SUBPASS_CONTENTS_INLINE = 0,
    VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1,
    VK_SUBPASS_CONTENTS_BEGIN_RANGE = 0,
    VK_SUBPASS_CONTENTS_END_RANGE = 1,
    VK_SUBPASS_CONTENTS_RANGE_SIZE = 2,
    VK_SUBPASS_CONTENTS_MAX_ENUM = 2147483647
}

public enum VkObjectType
{
    VK_OBJECT_TYPE_UNKNOWN = 0,
    VK_OBJECT_TYPE_INSTANCE = 1,
    VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2,
    VK_OBJECT_TYPE_DEVICE = 3,
    VK_OBJECT_TYPE_QUEUE = 4,
    VK_OBJECT_TYPE_SEMAPHORE = 5,
    VK_OBJECT_TYPE_COMMAND_BUFFER = 6,
    VK_OBJECT_TYPE_FENCE = 7,
    VK_OBJECT_TYPE_DEVICE_MEMORY = 8,
    VK_OBJECT_TYPE_BUFFER = 9,
    VK_OBJECT_TYPE_IMAGE = 10,
    VK_OBJECT_TYPE_EVENT = 11,
    VK_OBJECT_TYPE_QUERY_POOL = 12,
    VK_OBJECT_TYPE_BUFFER_VIEW = 13,
    VK_OBJECT_TYPE_IMAGE_VIEW = 14,
    VK_OBJECT_TYPE_SHADER_MODULE = 15,
    VK_OBJECT_TYPE_PIPELINE_CACHE = 16,
    VK_OBJECT_TYPE_PIPELINE_LAYOUT = 17,
    VK_OBJECT_TYPE_RENDER_PASS = 18,
    VK_OBJECT_TYPE_PIPELINE = 19,
    VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20,
    VK_OBJECT_TYPE_SAMPLER = 21,
    VK_OBJECT_TYPE_DESCRIPTOR_POOL = 22,
    VK_OBJECT_TYPE_DESCRIPTOR_SET = 23,
    VK_OBJECT_TYPE_FRAMEBUFFER = 24,
    VK_OBJECT_TYPE_COMMAND_POOL = 25,
    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000,
    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000,
    VK_OBJECT_TYPE_SURFACE_KHR = 1000000000,
    VK_OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000,
    VK_OBJECT_TYPE_DISPLAY_KHR = 1000002000,
    VK_OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001,
    VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000,
    VK_OBJECT_TYPE_OBJECT_TABLE_NVX = 1000086000,
    VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX = 1000086001,
    VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000,
    VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000,
    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = 1000085000,
    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR = 1000156000,
    VK_OBJECT_TYPE_BEGIN_RANGE = 0,
    VK_OBJECT_TYPE_END_RANGE = 25,
    VK_OBJECT_TYPE_RANGE_SIZE = 26,
    VK_OBJECT_TYPE_MAX_ENUM = 2147483647
}

public enum VkFormatFeatureFlagBits
{
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 1,
    VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 2,
    VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 4,
    VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 8,
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 16,
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 32,
    VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 64,
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 128,
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 256,
    VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 512,
    VK_FORMAT_FEATURE_BLIT_SRC_BIT = 1024,
    VK_FORMAT_FEATURE_BLIT_DST_BIT = 2048,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 4096,
    VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = 16384,
    VK_FORMAT_FEATURE_TRANSFER_DST_BIT = 32768,
    VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 131072,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 262144,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 524288,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 1048576,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 2097152,
    VK_FORMAT_FEATURE_DISJOINT_BIT = 4194304,
    VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 8388608,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 8192,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = 65536,
    VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR = 16384,
    VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR = 32768,
    VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = 131072,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = 262144,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = 524288,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = 1048576,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = 2097152,
    VK_FORMAT_FEATURE_DISJOINT_BIT_KHR = 4194304,
    VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR = 8388608,
    VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkImageUsageFlagBits
{
    VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 1,
    VK_IMAGE_USAGE_TRANSFER_DST_BIT = 2,
    VK_IMAGE_USAGE_SAMPLED_BIT = 4,
    VK_IMAGE_USAGE_STORAGE_BIT = 8,
    VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 16,
    VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 32,
    VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 64,
    VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 128,
    VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkImageCreateFlagBits
{
    VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 1,
    VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 2,
    VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 4,
    VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 8,
    VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 16,
    VK_IMAGE_CREATE_ALIAS_BIT = 1024,
    VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 64,
    VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 32,
    VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 128,
    VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = 256,
    VK_IMAGE_CREATE_PROTECTED_BIT = 2048,
    VK_IMAGE_CREATE_DISJOINT_BIT = 512,
    VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 4096,
    VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 64,
    VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR = 32,
    VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR = 128,
    VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR = 256,
    VK_IMAGE_CREATE_DISJOINT_BIT_KHR = 512,
    VK_IMAGE_CREATE_ALIAS_BIT_KHR = 1024,
    VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkSampleCountFlagBits
{
    VK_SAMPLE_COUNT_1BIT = 1,
    VK_SAMPLE_COUNT_2BIT = 2,
    VK_SAMPLE_COUNT_4BIT = 4,
    VK_SAMPLE_COUNT_8BIT = 8,
    VK_SAMPLE_COUNT_16BIT = 16,
    VK_SAMPLE_COUNT_32BIT = 32,
    VK_SAMPLE_COUNT_64BIT = 64,
    VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkQueueFlagBits
{
    VK_QUEUE_GRAPHICS_BIT = 1,
    VK_QUEUE_COMPUTE_BIT = 2,
    VK_QUEUE_TRANSFER_BIT = 4,
    VK_QUEUE_SPARSE_BINDING_BIT = 8,
    VK_QUEUE_PROTECTED_BIT = 16,
    VK_QUEUE_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkMemoryPropertyFlagBits
{
    VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 1,
    VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 2,
    VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 4,
    VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 8,
    VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 16,
    VK_MEMORY_PROPERTY_PROTECTED_BIT = 32,
    VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkMemoryHeapFlagBits
{
    VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 1,
    VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = 2,
    VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR = 2,
    VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkDeviceQueueCreateFlagBits
{
    VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = 1,
    VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkPipelineStageFlagBits
{
    VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 1,
    VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 2,
    VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 4,
    VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 8,
    VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 16,
    VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 32,
    VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 64,
    VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 128,
    VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 256,
    VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 512,
    VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 1024,
    VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 2048,
    VK_PIPELINE_STAGE_TRANSFER_BIT = 4096,
    VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 8192,
    VK_PIPELINE_STAGE_HOST_BIT = 16384,
    VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 32768,
    VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 65536,
    VK_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX = 131072,
    VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkImageAspectFlagBits
{
    VK_IMAGE_ASPECT_COLOR_BIT = 1,
    VK_IMAGE_ASPECT_DEPTH_BIT = 2,
    VK_IMAGE_ASPECT_STENCIL_BIT = 4,
    VK_IMAGE_ASPECT_METADATA_BIT = 8,
    VK_IMAGE_ASPECT_PLANE_0BIT = 16,
    VK_IMAGE_ASPECT_PLANE_1BIT = 32,
    VK_IMAGE_ASPECT_PLANE_2BIT = 64,
    VK_IMAGE_ASPECT_PLANE_0BIT_KHR = 16,
    VK_IMAGE_ASPECT_PLANE_1BIT_KHR = 32,
    VK_IMAGE_ASPECT_PLANE_2BIT_KHR = 64,
    VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkSparseImageFormatFlagBits
{
    VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 1,
    VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 2,
    VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 4,
    VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkSparseMemoryBindFlagBits
{
    VK_SPARSE_MEMORY_BIND_METADATA_BIT = 1,
    VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkFenceCreateFlagBits
{
    VK_FENCE_CREATE_SIGNALED_BIT = 1,
    VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkQueryPipelineStatisticFlagBits
{
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 1,
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 2,
    VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 4,
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 8,
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 16,
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 32,
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 64,
    VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 128,
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 256,
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 512,
    VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 1024,
    VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkQueryResultFlagBits
{
    VK_QUERY_RESULT_64BIT = 1,
    VK_QUERY_RESULT_WAIT_BIT = 2,
    VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 4,
    VK_QUERY_RESULT_PARTIAL_BIT = 8,
    VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkBufferCreateFlagBits
{
    VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 1,
    VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 2,
    VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 4,
    VK_BUFFER_CREATE_PROTECTED_BIT = 8,
    VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkBufferUsageFlagBits
{
    VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 1,
    VK_BUFFER_USAGE_TRANSFER_DST_BIT = 2,
    VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 4,
    VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 8,
    VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 16,
    VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 32,
    VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 64,
    VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 128,
    VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 256,
    VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkPipelineCreateFlagBits
{
    VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 1,
    VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 2,
    VK_PIPELINE_CREATE_DERIVATIVE_BIT = 4,
    VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 8,
    VK_PIPELINE_CREATE_DISPATCH_BASE = 16,
    VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = 8,
    VK_PIPELINE_CREATE_DISPATCH_BASE_KHR = 16,
    VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkShaderStageFlagBits
{
    VK_SHADER_STAGE_VERTEX_BIT = 1,
    VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 2,
    VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 4,
    VK_SHADER_STAGE_GEOMETRY_BIT = 8,
    VK_SHADER_STAGE_FRAGMENT_BIT = 16,
    VK_SHADER_STAGE_COMPUTE_BIT = 32,
    VK_SHADER_STAGE_ALL_GRAPHICS = 31,
    VK_SHADER_STAGE_ALL = 2147483647,
    VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkCullModeFlagBits
{
    VK_CULL_MODE_NONE = 0,
    VK_CULL_MODE_FRONT_BIT = 1,
    VK_CULL_MODE_BACK_BIT = 2,
    VK_CULL_MODE_FRONT_AND_BACK = 3,
    VK_CULL_MODE_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkColorComponentFlagBits
{
    VK_COLOR_COMPONENT_R_BIT = 1,
    VK_COLOR_COMPONENT_G_BIT = 2,
    VK_COLOR_COMPONENT_B_BIT = 4,
    VK_COLOR_COMPONENT_A_BIT = 8,
    VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkDescriptorSetLayoutCreateFlagBits
{
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 1,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT = 2,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkDescriptorPoolCreateFlagBits
{
    VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 1,
    VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = 2,
    VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkAttachmentDescriptionFlagBits
{
    VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 1,
    VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkSubpassDescriptionFlagBits
{
    VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 1,
    VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 2,
    VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkAccessFlagBits
{
    VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 1,
    VK_ACCESS_INDEX_READ_BIT = 2,
    VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 4,
    VK_ACCESS_UNIFORM_READ_BIT = 8,
    VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 16,
    VK_ACCESS_SHADER_READ_BIT = 32,
    VK_ACCESS_SHADER_WRITE_BIT = 64,
    VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 128,
    VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 256,
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 512,
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1024,
    VK_ACCESS_TRANSFER_READ_BIT = 2048,
    VK_ACCESS_TRANSFER_WRITE_BIT = 4096,
    VK_ACCESS_HOST_READ_BIT = 8192,
    VK_ACCESS_HOST_WRITE_BIT = 16384,
    VK_ACCESS_MEMORY_READ_BIT = 32768,
    VK_ACCESS_MEMORY_WRITE_BIT = 65536,
    VK_ACCESS_COMMAND_PROCESS_READ_BIT_NVX = 131072,
    VK_ACCESS_COMMAND_PROCESS_WRITE_BIT_NVX = 262144,
    VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 524288,
    VK_ACCESS_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkDependencyFlagBits
{
    VK_DEPENDENCY_BY_REGION_BIT = 1,
    VK_DEPENDENCY_DEVICE_GROUP_BIT = 4,
    VK_DEPENDENCY_VIEW_LOCAL_BIT = 2,
    VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR = 2,
    VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR = 4,
    VK_DEPENDENCY_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkCommandPoolCreateFlagBits
{
    VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 1,
    VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 2,
    VK_COMMAND_POOL_CREATE_PROTECTED_BIT = 4,
    VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkCommandPoolResetFlagBits
{
    VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 1,
    VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkCommandBufferUsageFlagBits
{
    VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 1,
    VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 2,
    VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 4,
    VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkQueryControlFlagBits
{
    VK_QUERY_CONTROL_PRECISE_BIT = 1,
    VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkCommandBufferResetFlagBits
{
    VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 1,
    VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkStencilFaceFlagBits
{
    VK_STENCIL_FACE_FRONT_BIT = 1,
    VK_STENCIL_FACE_BACK_BIT = 2,
    VK_STENCIL_FRONT_AND_BACK = 3,
    VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkPointClippingBehavior
{
    VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0,
    VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1,
    VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR = 0,
    VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR = 1,
    VK_POINT_CLIPPING_BEHAVIOR_BEGIN_RANGE = 0,
    VK_POINT_CLIPPING_BEHAVIOR_END_RANGE = 1,
    VK_POINT_CLIPPING_BEHAVIOR_RANGE_SIZE = 2,
    VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM = 2147483647
}

public enum VkTessellationDomainOrigin
{
    VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0,
    VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1,
    VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR = 0,
    VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR = 1,
    VK_TESSELLATION_DOMAIN_ORIGIN_BEGIN_RANGE = 0,
    VK_TESSELLATION_DOMAIN_ORIGIN_END_RANGE = 1,
    VK_TESSELLATION_DOMAIN_ORIGIN_RANGE_SIZE = 2,
    VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM = 2147483647
}

public enum VkSamplerYcbcrModelConversion
{
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR = 0,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR = 1,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709KHR = 2,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601KHR = 3,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020KHR = 4,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_BEGIN_RANGE = 0,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_END_RANGE = 4,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_RANGE_SIZE = 5,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM = 2147483647
}

public enum VkSamplerYcbcrRange
{
    VK_SAMPLER_YCBCR_RANGE_ITU_FULL = 0,
    VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1,
    VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR = 0,
    VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR = 1,
    VK_SAMPLER_YCBCR_RANGE_BEGIN_RANGE = 0,
    VK_SAMPLER_YCBCR_RANGE_END_RANGE = 1,
    VK_SAMPLER_YCBCR_RANGE_RANGE_SIZE = 2,
    VK_SAMPLER_YCBCR_RANGE_MAX_ENUM = 2147483647
}

public enum VkChromaLocation
{
    VK_CHROMA_LOCATION_COSITED_EVEN = 0,
    VK_CHROMA_LOCATION_MIDPOINT = 1,
    VK_CHROMA_LOCATION_COSITED_EVEN_KHR = 0,
    VK_CHROMA_LOCATION_MIDPOINT_KHR = 1,
    VK_CHROMA_LOCATION_BEGIN_RANGE = 0,
    VK_CHROMA_LOCATION_END_RANGE = 1,
    VK_CHROMA_LOCATION_RANGE_SIZE = 2,
    VK_CHROMA_LOCATION_MAX_ENUM = 2147483647
}

public enum VkDescriptorUpdateTemplateType
{
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0,
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1,
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR = 0,
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_BEGIN_RANGE = 0,
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_END_RANGE = 0,
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_RANGE_SIZE = 1,
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM = 2147483647
}

public enum VkSubgroupFeatureFlagBits
{
    VK_SUBGROUP_FEATURE_BASIC_BIT = 1,
    VK_SUBGROUP_FEATURE_VOTE_BIT = 2,
    VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = 4,
    VK_SUBGROUP_FEATURE_BALLOT_BIT = 8,
    VK_SUBGROUP_FEATURE_SHUFFLE_BIT = 16,
    VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 32,
    VK_SUBGROUP_FEATURE_CLUSTERED_BIT = 64,
    VK_SUBGROUP_FEATURE_QUAD_BIT = 128,
    VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 256,
    VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkPeerMemoryFeatureFlagBits
{
    VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = 1,
    VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = 2,
    VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 4,
    VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 8,
    VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR = 1,
    VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR = 2,
    VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR = 4,
    VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR = 8,
    VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkMemoryAllocateFlagBits
{
    VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = 1,
    VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR = 1,
    VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkExternalMemoryHandleTypeFlagBits
{
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32BIT = 2,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32KMT_BIT = 4,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11TEXTURE_BIT = 8,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11TEXTURE_KMT_BIT = 16,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12HEAP_BIT = 32,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12RESOURCE_BIT = 64,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 512,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 1024,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 128,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 256,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32BIT_KHR = 2,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32KMT_BIT_KHR = 4,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11TEXTURE_BIT_KHR = 8,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11TEXTURE_KMT_BIT_KHR = 16,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12HEAP_BIT_KHR = 32,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12RESOURCE_BIT_KHR = 64,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkExternalMemoryFeatureFlagBits
{
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 1,
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 2,
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 4,
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR = 1,
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR = 2,
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR = 4,
    VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkExternalFenceHandleTypeFlagBits
{
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32BIT = 2,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32KMT_BIT = 4,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 8,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32BIT_KHR = 2,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32KMT_BIT_KHR = 4,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR = 8,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkExternalFenceFeatureFlagBits
{
    VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 1,
    VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 2,
    VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR = 1,
    VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR = 2,
    VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkFenceImportFlagBits
{
    VK_FENCE_IMPORT_TEMPORARY_BIT = 1,
    VK_FENCE_IMPORT_TEMPORARY_BIT_KHR = 1,
    VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkSemaphoreImportFlagBits
{
    VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = 1,
    VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR = 1,
    VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkExternalSemaphoreHandleTypeFlagBits
{
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32BIT = 2,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32KMT_BIT = 4,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12FENCE_BIT = 8,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 16,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32BIT_KHR = 2,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32KMT_BIT_KHR = 4,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12FENCE_BIT_KHR = 8,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR = 16,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkExternalSemaphoreFeatureFlagBits
{
    VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 1,
    VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 2,
    VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = 1,
    VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = 2,
    VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
}

public enum VkColorSpaceKHR
{
    VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0,
    VK_COLOR_SPACE_DISPLAY_P3NONLINEAR_EXT = 1000104001,
    VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002,
    VK_COLOR_SPACE_DCI_P3LINEAR_EXT = 1000104003,
    VK_COLOR_SPACE_DCI_P3NONLINEAR_EXT = 1000104004,
    VK_COLOR_SPACE_BT709LINEAR_EXT = 1000104005,
    VK_COLOR_SPACE_BT709NONLINEAR_EXT = 1000104006,
    VK_COLOR_SPACE_BT2020LINEAR_EXT = 1000104007,
    VK_COLOR_SPACE_HDR10ST2084EXT = 1000104008,
    VK_COLOR_SPACE_DOLBYVISION_EXT = 1000104009,
    VK_COLOR_SPACE_HDR10HLG_EXT = 1000104010,
    VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011,
    VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012,
    VK_COLOR_SPACE_PASS_THROUGH_EXT = 1000104013,
    VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014,
    VK_COLOR_SPACE_BEGIN_RANGE_KHR = 0,
    VK_COLOR_SPACE_END_RANGE_KHR = 0,
    VK_COLOR_SPACE_RANGE_SIZE_KHR = 1,
    VK_COLOR_SPACE_MAX_ENUM_KHR = 2147483647
}

public enum VkPresentModeKHR
{
    VK_PRESENT_MODE_IMMEDIATE_KHR = 0,
    VK_PRESENT_MODE_MAILBOX_KHR = 1,
    VK_PRESENT_MODE_FIFO_KHR = 2,
    VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3,
    VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000,
    VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001,
    VK_PRESENT_MODE_BEGIN_RANGE_KHR = 0,
    VK_PRESENT_MODE_END_RANGE_KHR = 3,
    VK_PRESENT_MODE_RANGE_SIZE_KHR = 4,
    VK_PRESENT_MODE_MAX_ENUM_KHR = 2147483647
}

public enum VkSurfaceTransformFlagBitsKHR
{
    VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 1,
    VK_SURFACE_TRANSFORM_ROTATE_90BIT_KHR = 2,
    VK_SURFACE_TRANSFORM_ROTATE_180BIT_KHR = 4,
    VK_SURFACE_TRANSFORM_ROTATE_270BIT_KHR = 8,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 16,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90BIT_KHR = 32,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180BIT_KHR = 64,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270BIT_KHR = 128,
    VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 256,
    VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

public enum VkCompositeAlphaFlagBitsKHR
{
    VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 1,
    VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 2,
    VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 4,
    VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 8,
    VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

public enum VkSwapchainCreateFlagBitsKHR
{
    VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 1,
    VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 2,
    VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

public enum VkDeviceGroupPresentModeFlagBitsKHR
{
    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 1,
    VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 2,
    VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 4,
    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 8,
    VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

public enum VkDisplayPlaneAlphaFlagBitsKHR
{
    VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 1,
    VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 2,
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 4,
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 8,
    VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 2147483647
}

public enum VkDebugReportObjectTypeEXT
{
    VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0,
    VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1,
    VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3,
    VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4,
    VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5,
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6,
    VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8,
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9,
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10,
    VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11,
    VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12,
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13,
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14,
    VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17,
    VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20,
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23,
    VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24,
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25,
    VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26,
    VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28,
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29,
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30,
    VK_DEBUG_REPORT_OBJECT_TYPE_OBJECT_TABLE_NVX_EXT = 31,
    VK_DEBUG_REPORT_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX_EXT = 32,
    VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33,
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = 1000085000,
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT = 1000156000,
    VK_DEBUG_REPORT_OBJECT_TYPE_BEGIN_RANGE_EXT = 0,
    VK_DEBUG_REPORT_OBJECT_TYPE_END_RANGE_EXT = 33,
    VK_DEBUG_REPORT_OBJECT_TYPE_RANGE_SIZE_EXT = 34,
    VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = 2147483647
}

public enum VkDebugReportFlagBitsEXT
{
    VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 1,
    VK_DEBUG_REPORT_WARNING_BIT_EXT = 2,
    VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 4,
    VK_DEBUG_REPORT_ERROR_BIT_EXT = 8,
    VK_DEBUG_REPORT_DEBUG_BIT_EXT = 16,
    VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

public enum VkRasterizationOrderAMD
{
    VK_RASTERIZATION_ORDER_STRICT_AMD = 0,
    VK_RASTERIZATION_ORDER_RELAXED_AMD = 1,
    VK_RASTERIZATION_ORDER_BEGIN_RANGE_AMD = 0,
    VK_RASTERIZATION_ORDER_END_RANGE_AMD = 1,
    VK_RASTERIZATION_ORDER_RANGE_SIZE_AMD = 2,
    VK_RASTERIZATION_ORDER_MAX_ENUM_AMD = 2147483647
}

public enum VkShaderInfoTypeAMD
{
    VK_SHADER_INFO_TYPE_STATISTICS_AMD = 0,
    VK_SHADER_INFO_TYPE_BINARY_AMD = 1,
    VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2,
    VK_SHADER_INFO_TYPE_BEGIN_RANGE_AMD = 0,
    VK_SHADER_INFO_TYPE_END_RANGE_AMD = 2,
    VK_SHADER_INFO_TYPE_RANGE_SIZE_AMD = 3,
    VK_SHADER_INFO_TYPE_MAX_ENUM_AMD = 2147483647
}

public enum VkExternalMemoryHandleTypeFlagBitsNV
{
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32BIT_NV = 1,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32KMT_BIT_NV = 2,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11IMAGE_BIT_NV = 4,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11IMAGE_KMT_BIT_NV = 8,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV = 2147483647
}

public enum VkExternalMemoryFeatureFlagBitsNV
{
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 1,
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 2,
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 4,
    VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV = 2147483647
}

public enum VkValidationCheckEXT
{
    VK_VALIDATION_CHECK_ALL_EXT = 0,
    VK_VALIDATION_CHECK_SHADERS_EXT = 1,
    VK_VALIDATION_CHECK_BEGIN_RANGE_EXT = 0,
    VK_VALIDATION_CHECK_END_RANGE_EXT = 1,
    VK_VALIDATION_CHECK_RANGE_SIZE_EXT = 2,
    VK_VALIDATION_CHECK_MAX_ENUM_EXT = 2147483647
}

public enum VkIndirectCommandsTokenTypeNVX
{
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NVX = 0,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DESCRIPTOR_SET_NVX = 1,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NVX = 2,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NVX = 3,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NVX = 4,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NVX = 5,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NVX = 6,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NVX = 7,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_BEGIN_RANGE_NVX = 0,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_END_RANGE_NVX = 7,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_RANGE_SIZE_NVX = 8,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NVX = 2147483647
}

public enum VkObjectEntryTypeNVX
{
    VK_OBJECT_ENTRY_TYPE_DESCRIPTOR_SET_NVX = 0,
    VK_OBJECT_ENTRY_TYPE_PIPELINE_NVX = 1,
    VK_OBJECT_ENTRY_TYPE_INDEX_BUFFER_NVX = 2,
    VK_OBJECT_ENTRY_TYPE_VERTEX_BUFFER_NVX = 3,
    VK_OBJECT_ENTRY_TYPE_PUSH_CONSTANT_NVX = 4,
    VK_OBJECT_ENTRY_TYPE_BEGIN_RANGE_NVX = 0,
    VK_OBJECT_ENTRY_TYPE_END_RANGE_NVX = 4,
    VK_OBJECT_ENTRY_TYPE_RANGE_SIZE_NVX = 5,
    VK_OBJECT_ENTRY_TYPE_MAX_ENUM_NVX = 2147483647
}

public enum VkIndirectCommandsLayoutUsageFlagBitsNVX
{
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NVX = 1,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_SPARSE_SEQUENCES_BIT_NVX = 2,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EMPTY_EXECUTIONS_BIT_NVX = 4,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NVX = 8,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NVX = 2147483647
}

public enum VkObjectEntryUsageFlagBitsNVX
{
    VK_OBJECT_ENTRY_USAGE_GRAPHICS_BIT_NVX = 1,
    VK_OBJECT_ENTRY_USAGE_COMPUTE_BIT_NVX = 2,
    VK_OBJECT_ENTRY_USAGE_FLAG_BITS_MAX_ENUM_NVX = 2147483647
}

public enum VkSurfaceCounterFlagBitsEXT
{
    VK_SURFACE_COUNTER_VBLANK_EXT = 1,
    VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

public enum VkDisplayPowerStateEXT
{
    VK_DISPLAY_POWER_STATE_OFF_EXT = 0,
    VK_DISPLAY_POWER_STATE_SUSPEND_EXT = 1,
    VK_DISPLAY_POWER_STATE_ON_EXT = 2,
    VK_DISPLAY_POWER_STATE_BEGIN_RANGE_EXT = 0,
    VK_DISPLAY_POWER_STATE_END_RANGE_EXT = 2,
    VK_DISPLAY_POWER_STATE_RANGE_SIZE_EXT = 3,
    VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT = 2147483647
}

public enum VkDeviceEventTypeEXT
{
    VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0,
    VK_DEVICE_EVENT_TYPE_BEGIN_RANGE_EXT = 0,
    VK_DEVICE_EVENT_TYPE_END_RANGE_EXT = 0,
    VK_DEVICE_EVENT_TYPE_RANGE_SIZE_EXT = 1,
    VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT = 2147483647
}

public enum VkDisplayEventTypeEXT
{
    VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0,
    VK_DISPLAY_EVENT_TYPE_BEGIN_RANGE_EXT = 0,
    VK_DISPLAY_EVENT_TYPE_END_RANGE_EXT = 0,
    VK_DISPLAY_EVENT_TYPE_RANGE_SIZE_EXT = 1,
    VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT = 2147483647
}

public enum VkViewportCoordinateSwizzleNV
{
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1,
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3,
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5,
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7,
    VK_VIEWPORT_COORDINATE_SWIZZLE_BEGIN_RANGE_NV = 0,
    VK_VIEWPORT_COORDINATE_SWIZZLE_END_RANGE_NV = 7,
    VK_VIEWPORT_COORDINATE_SWIZZLE_RANGE_SIZE_NV = 8,
    VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV = 2147483647
}

public enum VkDiscardRectangleModeEXT
{
    VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0,
    VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1,
    VK_DISCARD_RECTANGLE_MODE_BEGIN_RANGE_EXT = 0,
    VK_DISCARD_RECTANGLE_MODE_END_RANGE_EXT = 1,
    VK_DISCARD_RECTANGLE_MODE_RANGE_SIZE_EXT = 2,
    VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT = 2147483647
}

public enum VkConservativeRasterizationModeEXT
{
    VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0,
    VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1,
    VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2,
    VK_CONSERVATIVE_RASTERIZATION_MODE_BEGIN_RANGE_EXT = 0,
    VK_CONSERVATIVE_RASTERIZATION_MODE_END_RANGE_EXT = 2,
    VK_CONSERVATIVE_RASTERIZATION_MODE_RANGE_SIZE_EXT = 3,
    VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT = 2147483647
}

public enum VkDebugUtilsMessageSeverityFlagBitsEXT
{
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 1,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 16,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 256,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 4096,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

public enum VkDebugUtilsMessageTypeFlagBitsEXT
{
    VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 1,
    VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 2,
    VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 4,
    VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

public enum VkSamplerReductionModeEXT
{
    VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = 0,
    VK_SAMPLER_REDUCTION_MODE_MIN_EXT = 1,
    VK_SAMPLER_REDUCTION_MODE_MAX_EXT = 2,
    VK_SAMPLER_REDUCTION_MODE_BEGIN_RANGE_EXT = 0,
    VK_SAMPLER_REDUCTION_MODE_END_RANGE_EXT = 2,
    VK_SAMPLER_REDUCTION_MODE_RANGE_SIZE_EXT = 3,
    VK_SAMPLER_REDUCTION_MODE_MAX_ENUM_EXT = 2147483647
}

public enum VkBlendOverlapEXT
{
    VK_BLEND_OVERLAP_UNCORRELATED_EXT = 0,
    VK_BLEND_OVERLAP_DISJOINT_EXT = 1,
    VK_BLEND_OVERLAP_CONJOINT_EXT = 2,
    VK_BLEND_OVERLAP_BEGIN_RANGE_EXT = 0,
    VK_BLEND_OVERLAP_END_RANGE_EXT = 2,
    VK_BLEND_OVERLAP_RANGE_SIZE_EXT = 3,
    VK_BLEND_OVERLAP_MAX_ENUM_EXT = 2147483647
}

public enum VkCoverageModulationModeNV
{
    VK_COVERAGE_MODULATION_MODE_NONE_NV = 0,
    VK_COVERAGE_MODULATION_MODE_RGB_NV = 1,
    VK_COVERAGE_MODULATION_MODE_ALPHA_NV = 2,
    VK_COVERAGE_MODULATION_MODE_RGBA_NV = 3,
    VK_COVERAGE_MODULATION_MODE_BEGIN_RANGE_NV = 0,
    VK_COVERAGE_MODULATION_MODE_END_RANGE_NV = 3,
    VK_COVERAGE_MODULATION_MODE_RANGE_SIZE_NV = 4,
    VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV = 2147483647
}

public enum VkValidationCacheHeaderVersionEXT
{
    VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1,
    VK_VALIDATION_CACHE_HEADER_VERSION_BEGIN_RANGE_EXT = 1,
    VK_VALIDATION_CACHE_HEADER_VERSION_END_RANGE_EXT = 1,
    VK_VALIDATION_CACHE_HEADER_VERSION_RANGE_SIZE_EXT = 1,
    VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT = 2147483647
}

public enum VkDescriptorBindingFlagBitsEXT
{
    VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT = 1,
    VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = 2,
    VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT = 4,
    VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT = 8,
    VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM_EXT = 2147483647
}

public enum VkQueueGlobalPriorityEXT
{
    VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT = 128,
    VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = 256,
    VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT = 512,
    VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = 1024,
    VK_QUEUE_GLOBAL_PRIORITY_BEGIN_RANGE_EXT = 128,
    VK_QUEUE_GLOBAL_PRIORITY_END_RANGE_EXT = 1024,
    VK_QUEUE_GLOBAL_PRIORITY_RANGE_SIZE_EXT = 897,
    VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_EXT = 2147483647
}

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::System.IntPtr PFN_vkAllocationFunction(global::System.IntPtr pUserData, ulong size, ulong alignment, global::VkSystemAllocationScope allocationScope);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::System.IntPtr PFN_vkReallocationFunction(global::System.IntPtr pUserData, global::System.IntPtr pOriginal, ulong size, ulong alignment, global::VkSystemAllocationScope allocationScope);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkFreeFunction(global::System.IntPtr pUserData, global::System.IntPtr pMemory);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkInternalAllocationNotification(global::System.IntPtr pUserData, ulong size, global::VkInternalAllocationType allocationType, global::VkSystemAllocationScope allocationScope);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkInternalFreeNotification(global::System.IntPtr pUserData, ulong size, global::VkInternalAllocationType allocationType, global::VkSystemAllocationScope allocationScope);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkVoidFunction();

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreateInstance(global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pInstance);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkDestroyInstance(global::System.IntPtr instance, global::System.IntPtr pAllocator);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkEnumeratePhysicalDevices(global::System.IntPtr instance, uint* pPhysicalDeviceCount, global::System.IntPtr pPhysicalDevices);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetPhysicalDeviceFeatures(global::System.IntPtr physicalDevice, global::System.IntPtr pFeatures);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetPhysicalDeviceFormatProperties(global::System.IntPtr physicalDevice, global::VkFormat format, global::System.IntPtr pFormatProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetPhysicalDeviceImageFormatProperties(global::System.IntPtr physicalDevice, global::VkFormat format, global::VkImageType type, global::VkImageTiling tiling, uint usage, uint flags, global::System.IntPtr pImageFormatProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetPhysicalDeviceProperties(global::System.IntPtr physicalDevice, global::System.IntPtr pProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetPhysicalDeviceQueueFamilyProperties(global::System.IntPtr physicalDevice, uint* pQueueFamilyPropertyCount, global::System.IntPtr pQueueFamilyProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetPhysicalDeviceMemoryProperties(global::System.IntPtr physicalDevice, global::System.IntPtr pMemoryProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::System.IntPtr PFN_vkGetInstanceProcAddr(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string pName);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::System.IntPtr PFN_vkGetDeviceProcAddr(global::System.IntPtr device, [MarshalAs(UnmanagedType.LPStr)] string pName);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreateDevice(global::System.IntPtr physicalDevice, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pDevice);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkDestroyDevice(global::System.IntPtr device, global::System.IntPtr pAllocator);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkEnumerateInstanceExtensionProperties([MarshalAs(UnmanagedType.LPStr)] string pLayerName, uint* pPropertyCount, global::System.IntPtr pProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkEnumerateDeviceExtensionProperties(global::System.IntPtr physicalDevice, [MarshalAs(UnmanagedType.LPStr)] string pLayerName, uint* pPropertyCount, global::System.IntPtr pProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkEnumerateInstanceLayerProperties(uint* pPropertyCount, global::System.IntPtr pProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkEnumerateDeviceLayerProperties(global::System.IntPtr physicalDevice, uint* pPropertyCount, global::System.IntPtr pProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetDeviceQueue(global::System.IntPtr device, uint queueFamilyIndex, uint queueIndex, global::System.IntPtr pQueue);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkQueueSubmit(global::System.IntPtr queue, uint submitCount, global::System.IntPtr pSubmits, global::System.IntPtr fence);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkQueueWaitIdle(global::System.IntPtr queue);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkDeviceWaitIdle(global::System.IntPtr device);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkAllocateMemory(global::System.IntPtr device, global::System.IntPtr pAllocateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pMemory);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkFreeMemory(global::System.IntPtr device, global::System.IntPtr memory, global::System.IntPtr pAllocator);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkMapMemory(global::System.IntPtr device, global::System.IntPtr memory, ulong offset, ulong size, uint flags, void** ppData);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkUnmapMemory(global::System.IntPtr device, global::System.IntPtr memory);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkFlushMappedMemoryRanges(global::System.IntPtr device, uint memoryRangeCount, global::System.IntPtr pMemoryRanges);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkInvalidateMappedMemoryRanges(global::System.IntPtr device, uint memoryRangeCount, global::System.IntPtr pMemoryRanges);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetDeviceMemoryCommitment(global::System.IntPtr device, global::System.IntPtr memory, ulong* pCommittedMemoryInBytes);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkBindBufferMemory(global::System.IntPtr device, global::System.IntPtr buffer, global::System.IntPtr memory, ulong memoryOffset);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkBindImageMemory(global::System.IntPtr device, global::System.IntPtr image, global::System.IntPtr memory, ulong memoryOffset);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetBufferMemoryRequirements(global::System.IntPtr device, global::System.IntPtr buffer, global::System.IntPtr pMemoryRequirements);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetImageMemoryRequirements(global::System.IntPtr device, global::System.IntPtr image, global::System.IntPtr pMemoryRequirements);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetImageSparseMemoryRequirements(global::System.IntPtr device, global::System.IntPtr image, uint* pSparseMemoryRequirementCount, global::System.IntPtr pSparseMemoryRequirements);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetPhysicalDeviceSparseImageFormatProperties(global::System.IntPtr physicalDevice, global::VkFormat format, global::VkImageType type, global::VkSampleCountFlagBits samples, uint usage, global::VkImageTiling tiling, uint* pPropertyCount, global::System.IntPtr pProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkQueueBindSparse(global::System.IntPtr queue, uint bindInfoCount, global::System.IntPtr pBindInfo, global::System.IntPtr fence);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreateFence(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pFence);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkDestroyFence(global::System.IntPtr device, global::System.IntPtr fence, global::System.IntPtr pAllocator);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkResetFences(global::System.IntPtr device, uint fenceCount, global::System.IntPtr pFences);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetFenceStatus(global::System.IntPtr device, global::System.IntPtr fence);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkWaitForFences(global::System.IntPtr device, uint fenceCount, global::System.IntPtr pFences, uint waitAll, ulong timeout);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreateSemaphore(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pSemaphore);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkDestroySemaphore(global::System.IntPtr device, global::System.IntPtr semaphore, global::System.IntPtr pAllocator);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreateEvent(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pEvent);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkDestroyEvent(global::System.IntPtr device, global::System.IntPtr @event, global::System.IntPtr pAllocator);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetEventStatus(global::System.IntPtr device, global::System.IntPtr @event);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkSetEvent(global::System.IntPtr device, global::System.IntPtr @event);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkResetEvent(global::System.IntPtr device, global::System.IntPtr @event);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreateQueryPool(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pQueryPool);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkDestroyQueryPool(global::System.IntPtr device, global::System.IntPtr queryPool, global::System.IntPtr pAllocator);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetQueryPoolResults(global::System.IntPtr device, global::System.IntPtr queryPool, uint firstQuery, uint queryCount, ulong dataSize, global::System.IntPtr pData, ulong stride, uint flags);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreateBuffer(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pBuffer);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkDestroyBuffer(global::System.IntPtr device, global::System.IntPtr buffer, global::System.IntPtr pAllocator);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreateBufferView(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pView);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkDestroyBufferView(global::System.IntPtr device, global::System.IntPtr bufferView, global::System.IntPtr pAllocator);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreateImage(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pImage);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkDestroyImage(global::System.IntPtr device, global::System.IntPtr image, global::System.IntPtr pAllocator);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetImageSubresourceLayout(global::System.IntPtr device, global::System.IntPtr image, global::System.IntPtr pSubresource, global::System.IntPtr pLayout);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreateImageView(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pView);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkDestroyImageView(global::System.IntPtr device, global::System.IntPtr imageView, global::System.IntPtr pAllocator);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreateShaderModule(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pShaderModule);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkDestroyShaderModule(global::System.IntPtr device, global::System.IntPtr shaderModule, global::System.IntPtr pAllocator);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreatePipelineCache(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pPipelineCache);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkDestroyPipelineCache(global::System.IntPtr device, global::System.IntPtr pipelineCache, global::System.IntPtr pAllocator);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetPipelineCacheData(global::System.IntPtr device, global::System.IntPtr pipelineCache, ulong* pDataSize, global::System.IntPtr pData);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkMergePipelineCaches(global::System.IntPtr device, global::System.IntPtr dstCache, uint srcCacheCount, global::System.IntPtr pSrcCaches);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreateGraphicsPipelines(global::System.IntPtr device, global::System.IntPtr pipelineCache, uint createInfoCount, global::System.IntPtr pCreateInfos, global::System.IntPtr pAllocator, global::System.IntPtr pPipelines);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreateComputePipelines(global::System.IntPtr device, global::System.IntPtr pipelineCache, uint createInfoCount, global::System.IntPtr pCreateInfos, global::System.IntPtr pAllocator, global::System.IntPtr pPipelines);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkDestroyPipeline(global::System.IntPtr device, global::System.IntPtr pipeline, global::System.IntPtr pAllocator);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreatePipelineLayout(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pPipelineLayout);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkDestroyPipelineLayout(global::System.IntPtr device, global::System.IntPtr pipelineLayout, global::System.IntPtr pAllocator);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreateSampler(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pSampler);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkDestroySampler(global::System.IntPtr device, global::System.IntPtr sampler, global::System.IntPtr pAllocator);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreateDescriptorSetLayout(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pSetLayout);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkDestroyDescriptorSetLayout(global::System.IntPtr device, global::System.IntPtr descriptorSetLayout, global::System.IntPtr pAllocator);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreateDescriptorPool(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pDescriptorPool);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkDestroyDescriptorPool(global::System.IntPtr device, global::System.IntPtr descriptorPool, global::System.IntPtr pAllocator);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkResetDescriptorPool(global::System.IntPtr device, global::System.IntPtr descriptorPool, uint flags);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkAllocateDescriptorSets(global::System.IntPtr device, global::System.IntPtr pAllocateInfo, global::System.IntPtr pDescriptorSets);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkFreeDescriptorSets(global::System.IntPtr device, global::System.IntPtr descriptorPool, uint descriptorSetCount, global::System.IntPtr pDescriptorSets);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkUpdateDescriptorSets(global::System.IntPtr device, uint descriptorWriteCount, global::System.IntPtr pDescriptorWrites, uint descriptorCopyCount, global::System.IntPtr pDescriptorCopies);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreateFramebuffer(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pFramebuffer);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkDestroyFramebuffer(global::System.IntPtr device, global::System.IntPtr framebuffer, global::System.IntPtr pAllocator);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreateRenderPass(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pRenderPass);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkDestroyRenderPass(global::System.IntPtr device, global::System.IntPtr renderPass, global::System.IntPtr pAllocator);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetRenderAreaGranularity(global::System.IntPtr device, global::System.IntPtr renderPass, global::System.IntPtr pGranularity);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreateCommandPool(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pCommandPool);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkDestroyCommandPool(global::System.IntPtr device, global::System.IntPtr commandPool, global::System.IntPtr pAllocator);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkResetCommandPool(global::System.IntPtr device, global::System.IntPtr commandPool, uint flags);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkAllocateCommandBuffers(global::System.IntPtr device, global::System.IntPtr pAllocateInfo, global::System.IntPtr pCommandBuffers);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkFreeCommandBuffers(global::System.IntPtr device, global::System.IntPtr commandPool, uint commandBufferCount, global::System.IntPtr pCommandBuffers);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkBeginCommandBuffer(global::System.IntPtr commandBuffer, global::System.IntPtr pBeginInfo);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkEndCommandBuffer(global::System.IntPtr commandBuffer);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkResetCommandBuffer(global::System.IntPtr commandBuffer, uint flags);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdBindPipeline(global::System.IntPtr commandBuffer, global::VkPipelineBindPoint pipelineBindPoint, global::System.IntPtr pipeline);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdSetViewport(global::System.IntPtr commandBuffer, uint firstViewport, uint viewportCount, global::System.IntPtr pViewports);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdSetScissor(global::System.IntPtr commandBuffer, uint firstScissor, uint scissorCount, global::System.IntPtr pScissors);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdSetLineWidth(global::System.IntPtr commandBuffer, float lineWidth);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdSetDepthBias(global::System.IntPtr commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdSetBlendConstants(global::System.IntPtr commandBuffer, float[] blendConstants);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdSetDepthBounds(global::System.IntPtr commandBuffer, float minDepthBounds, float maxDepthBounds);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdSetStencilCompareMask(global::System.IntPtr commandBuffer, uint faceMask, uint compareMask);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdSetStencilWriteMask(global::System.IntPtr commandBuffer, uint faceMask, uint writeMask);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdSetStencilReference(global::System.IntPtr commandBuffer, uint faceMask, uint reference);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdBindDescriptorSets(global::System.IntPtr commandBuffer, global::VkPipelineBindPoint pipelineBindPoint, global::System.IntPtr layout, uint firstSet, uint descriptorSetCount, global::System.IntPtr pDescriptorSets, uint dynamicOffsetCount, uint* pDynamicOffsets);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdBindIndexBuffer(global::System.IntPtr commandBuffer, global::System.IntPtr buffer, ulong offset, global::VkIndexType indexType);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdBindVertexBuffers(global::System.IntPtr commandBuffer, uint firstBinding, uint bindingCount, global::System.IntPtr pBuffers, ulong* pOffsets);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdDraw(global::System.IntPtr commandBuffer, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdDrawIndexed(global::System.IntPtr commandBuffer, uint indexCount, uint instanceCount, uint firstIndex, int vertexOffset, uint firstInstance);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdDrawIndirect(global::System.IntPtr commandBuffer, global::System.IntPtr buffer, ulong offset, uint drawCount, uint stride);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdDrawIndexedIndirect(global::System.IntPtr commandBuffer, global::System.IntPtr buffer, ulong offset, uint drawCount, uint stride);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdDispatch(global::System.IntPtr commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdDispatchIndirect(global::System.IntPtr commandBuffer, global::System.IntPtr buffer, ulong offset);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdCopyBuffer(global::System.IntPtr commandBuffer, global::System.IntPtr srcBuffer, global::System.IntPtr dstBuffer, uint regionCount, global::System.IntPtr pRegions);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdCopyImage(global::System.IntPtr commandBuffer, global::System.IntPtr srcImage, global::VkImageLayout srcImageLayout, global::System.IntPtr dstImage, global::VkImageLayout dstImageLayout, uint regionCount, global::System.IntPtr pRegions);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdBlitImage(global::System.IntPtr commandBuffer, global::System.IntPtr srcImage, global::VkImageLayout srcImageLayout, global::System.IntPtr dstImage, global::VkImageLayout dstImageLayout, uint regionCount, global::System.IntPtr pRegions, global::VkFilter filter);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdCopyBufferToImage(global::System.IntPtr commandBuffer, global::System.IntPtr srcBuffer, global::System.IntPtr dstImage, global::VkImageLayout dstImageLayout, uint regionCount, global::System.IntPtr pRegions);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdCopyImageToBuffer(global::System.IntPtr commandBuffer, global::System.IntPtr srcImage, global::VkImageLayout srcImageLayout, global::System.IntPtr dstBuffer, uint regionCount, global::System.IntPtr pRegions);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdUpdateBuffer(global::System.IntPtr commandBuffer, global::System.IntPtr dstBuffer, ulong dstOffset, ulong dataSize, global::System.IntPtr pData);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdFillBuffer(global::System.IntPtr commandBuffer, global::System.IntPtr dstBuffer, ulong dstOffset, ulong size, uint data);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdClearColorImage(global::System.IntPtr commandBuffer, global::System.IntPtr image, global::VkImageLayout imageLayout, global::System.IntPtr pColor, uint rangeCount, global::System.IntPtr pRanges);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdClearDepthStencilImage(global::System.IntPtr commandBuffer, global::System.IntPtr image, global::VkImageLayout imageLayout, global::System.IntPtr pDepthStencil, uint rangeCount, global::System.IntPtr pRanges);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdClearAttachments(global::System.IntPtr commandBuffer, uint attachmentCount, global::System.IntPtr pAttachments, uint rectCount, global::System.IntPtr pRects);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdResolveImage(global::System.IntPtr commandBuffer, global::System.IntPtr srcImage, global::VkImageLayout srcImageLayout, global::System.IntPtr dstImage, global::VkImageLayout dstImageLayout, uint regionCount, global::System.IntPtr pRegions);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdSetEvent(global::System.IntPtr commandBuffer, global::System.IntPtr @event, uint stageMask);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdResetEvent(global::System.IntPtr commandBuffer, global::System.IntPtr @event, uint stageMask);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdWaitEvents(global::System.IntPtr commandBuffer, uint eventCount, global::System.IntPtr pEvents, uint srcStageMask, uint dstStageMask, uint memoryBarrierCount, global::System.IntPtr pMemoryBarriers, uint bufferMemoryBarrierCount, global::System.IntPtr pBufferMemoryBarriers, uint imageMemoryBarrierCount, global::System.IntPtr pImageMemoryBarriers);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdPipelineBarrier(global::System.IntPtr commandBuffer, uint srcStageMask, uint dstStageMask, uint dependencyFlags, uint memoryBarrierCount, global::System.IntPtr pMemoryBarriers, uint bufferMemoryBarrierCount, global::System.IntPtr pBufferMemoryBarriers, uint imageMemoryBarrierCount, global::System.IntPtr pImageMemoryBarriers);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdBeginQuery(global::System.IntPtr commandBuffer, global::System.IntPtr queryPool, uint query, uint flags);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdEndQuery(global::System.IntPtr commandBuffer, global::System.IntPtr queryPool, uint query);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdResetQueryPool(global::System.IntPtr commandBuffer, global::System.IntPtr queryPool, uint firstQuery, uint queryCount);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdWriteTimestamp(global::System.IntPtr commandBuffer, global::VkPipelineStageFlagBits pipelineStage, global::System.IntPtr queryPool, uint query);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdCopyQueryPoolResults(global::System.IntPtr commandBuffer, global::System.IntPtr queryPool, uint firstQuery, uint queryCount, global::System.IntPtr dstBuffer, ulong dstOffset, ulong stride, uint flags);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdPushConstants(global::System.IntPtr commandBuffer, global::System.IntPtr layout, uint stageFlags, uint offset, uint size, global::System.IntPtr pValues);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdBeginRenderPass(global::System.IntPtr commandBuffer, global::System.IntPtr pRenderPassBegin, global::VkSubpassContents contents);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdNextSubpass(global::System.IntPtr commandBuffer, global::VkSubpassContents contents);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdEndRenderPass(global::System.IntPtr commandBuffer);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdExecuteCommands(global::System.IntPtr commandBuffer, uint commandBufferCount, global::System.IntPtr pCommandBuffers);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkEnumerateInstanceVersion(uint* pApiVersion);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkBindBufferMemory2(global::System.IntPtr device, uint bindInfoCount, global::System.IntPtr pBindInfos);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkBindImageMemory2(global::System.IntPtr device, uint bindInfoCount, global::System.IntPtr pBindInfos);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetDeviceGroupPeerMemoryFeatures(global::System.IntPtr device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, uint* pPeerMemoryFeatures);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdSetDeviceMask(global::System.IntPtr commandBuffer, uint deviceMask);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdDispatchBase(global::System.IntPtr commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkEnumeratePhysicalDeviceGroups(global::System.IntPtr instance, uint* pPhysicalDeviceGroupCount, global::System.IntPtr pPhysicalDeviceGroupProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetImageMemoryRequirements2(global::System.IntPtr device, global::System.IntPtr pInfo, global::System.IntPtr pMemoryRequirements);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetBufferMemoryRequirements2(global::System.IntPtr device, global::System.IntPtr pInfo, global::System.IntPtr pMemoryRequirements);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetImageSparseMemoryRequirements2(global::System.IntPtr device, global::System.IntPtr pInfo, uint* pSparseMemoryRequirementCount, global::System.IntPtr pSparseMemoryRequirements);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetPhysicalDeviceFeatures2(global::System.IntPtr physicalDevice, global::System.IntPtr pFeatures);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetPhysicalDeviceProperties2(global::System.IntPtr physicalDevice, global::System.IntPtr pProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetPhysicalDeviceFormatProperties2(global::System.IntPtr physicalDevice, global::VkFormat format, global::System.IntPtr pFormatProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetPhysicalDeviceImageFormatProperties2(global::System.IntPtr physicalDevice, global::System.IntPtr pImageFormatInfo, global::System.IntPtr pImageFormatProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetPhysicalDeviceQueueFamilyProperties2(global::System.IntPtr physicalDevice, uint* pQueueFamilyPropertyCount, global::System.IntPtr pQueueFamilyProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetPhysicalDeviceMemoryProperties2(global::System.IntPtr physicalDevice, global::System.IntPtr pMemoryProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetPhysicalDeviceSparseImageFormatProperties2(global::System.IntPtr physicalDevice, global::System.IntPtr pFormatInfo, uint* pPropertyCount, global::System.IntPtr pProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkTrimCommandPool(global::System.IntPtr device, global::System.IntPtr commandPool, uint flags);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetDeviceQueue2(global::System.IntPtr device, global::System.IntPtr pQueueInfo, global::System.IntPtr pQueue);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreateSamplerYcbcrConversion(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pYcbcrConversion);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkDestroySamplerYcbcrConversion(global::System.IntPtr device, global::System.IntPtr ycbcrConversion, global::System.IntPtr pAllocator);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreateDescriptorUpdateTemplate(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pDescriptorUpdateTemplate);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkDestroyDescriptorUpdateTemplate(global::System.IntPtr device, global::System.IntPtr descriptorUpdateTemplate, global::System.IntPtr pAllocator);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkUpdateDescriptorSetWithTemplate(global::System.IntPtr device, global::System.IntPtr descriptorSet, global::System.IntPtr descriptorUpdateTemplate, global::System.IntPtr pData);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetPhysicalDeviceExternalBufferProperties(global::System.IntPtr physicalDevice, global::System.IntPtr pExternalBufferInfo, global::System.IntPtr pExternalBufferProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetPhysicalDeviceExternalFenceProperties(global::System.IntPtr physicalDevice, global::System.IntPtr pExternalFenceInfo, global::System.IntPtr pExternalFenceProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetPhysicalDeviceExternalSemaphoreProperties(global::System.IntPtr physicalDevice, global::System.IntPtr pExternalSemaphoreInfo, global::System.IntPtr pExternalSemaphoreProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetDescriptorSetLayoutSupport(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pSupport);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkDestroySurfaceKHR(global::System.IntPtr instance, global::System.IntPtr surface, global::System.IntPtr pAllocator);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetPhysicalDeviceSurfaceSupportKHR(global::System.IntPtr physicalDevice, uint queueFamilyIndex, global::System.IntPtr surface, uint* pSupported);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR(global::System.IntPtr physicalDevice, global::System.IntPtr surface, global::System.IntPtr pSurfaceCapabilities);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetPhysicalDeviceSurfaceFormatsKHR(global::System.IntPtr physicalDevice, global::System.IntPtr surface, uint* pSurfaceFormatCount, global::System.IntPtr pSurfaceFormats);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetPhysicalDeviceSurfacePresentModesKHR(global::System.IntPtr physicalDevice, global::System.IntPtr surface, uint* pPresentModeCount, global::VkPresentModeKHR* pPresentModes);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreateSwapchainKHR(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pSwapchain);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkDestroySwapchainKHR(global::System.IntPtr device, global::System.IntPtr swapchain, global::System.IntPtr pAllocator);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetSwapchainImagesKHR(global::System.IntPtr device, global::System.IntPtr swapchain, uint* pSwapchainImageCount, global::System.IntPtr pSwapchainImages);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkAcquireNextImageKHR(global::System.IntPtr device, global::System.IntPtr swapchain, ulong timeout, global::System.IntPtr semaphore, global::System.IntPtr fence, uint* pImageIndex);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkQueuePresentKHR(global::System.IntPtr queue, global::System.IntPtr pPresentInfo);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetDeviceGroupPresentCapabilitiesKHR(global::System.IntPtr device, global::System.IntPtr pDeviceGroupPresentCapabilities);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetDeviceGroupSurfacePresentModesKHR(global::System.IntPtr device, global::System.IntPtr surface, uint* pModes);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetPhysicalDevicePresentRectanglesKHR(global::System.IntPtr physicalDevice, global::System.IntPtr surface, uint* pRectCount, global::System.IntPtr pRects);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkAcquireNextImage2KHR(global::System.IntPtr device, global::System.IntPtr pAcquireInfo, uint* pImageIndex);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetPhysicalDeviceDisplayPropertiesKHR(global::System.IntPtr physicalDevice, uint* pPropertyCount, global::System.IntPtr pProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR(global::System.IntPtr physicalDevice, uint* pPropertyCount, global::System.IntPtr pProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetDisplayPlaneSupportedDisplaysKHR(global::System.IntPtr physicalDevice, uint planeIndex, uint* pDisplayCount, global::System.IntPtr pDisplays);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetDisplayModePropertiesKHR(global::System.IntPtr physicalDevice, global::System.IntPtr display, uint* pPropertyCount, global::System.IntPtr pProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreateDisplayModeKHR(global::System.IntPtr physicalDevice, global::System.IntPtr display, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pMode);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetDisplayPlaneCapabilitiesKHR(global::System.IntPtr physicalDevice, global::System.IntPtr mode, uint planeIndex, global::System.IntPtr pCapabilities);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreateDisplayPlaneSurfaceKHR(global::System.IntPtr instance, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pSurface);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreateSharedSwapchainsKHR(global::System.IntPtr device, uint swapchainCount, global::System.IntPtr pCreateInfos, global::System.IntPtr pAllocator, global::System.IntPtr pSwapchains);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetPhysicalDeviceFeatures2KHR(global::System.IntPtr physicalDevice, global::System.IntPtr pFeatures);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetPhysicalDeviceProperties2KHR(global::System.IntPtr physicalDevice, global::System.IntPtr pProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetPhysicalDeviceFormatProperties2KHR(global::System.IntPtr physicalDevice, global::VkFormat format, global::System.IntPtr pFormatProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetPhysicalDeviceImageFormatProperties2KHR(global::System.IntPtr physicalDevice, global::System.IntPtr pImageFormatInfo, global::System.IntPtr pImageFormatProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR(global::System.IntPtr physicalDevice, uint* pQueueFamilyPropertyCount, global::System.IntPtr pQueueFamilyProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetPhysicalDeviceMemoryProperties2KHR(global::System.IntPtr physicalDevice, global::System.IntPtr pMemoryProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR(global::System.IntPtr physicalDevice, global::System.IntPtr pFormatInfo, uint* pPropertyCount, global::System.IntPtr pProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR(global::System.IntPtr device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, uint* pPeerMemoryFeatures);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdSetDeviceMaskKHR(global::System.IntPtr commandBuffer, uint deviceMask);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdDispatchBaseKHR(global::System.IntPtr commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkTrimCommandPoolKHR(global::System.IntPtr device, global::System.IntPtr commandPool, uint flags);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkEnumeratePhysicalDeviceGroupsKHR(global::System.IntPtr instance, uint* pPhysicalDeviceGroupCount, global::System.IntPtr pPhysicalDeviceGroupProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR(global::System.IntPtr physicalDevice, global::System.IntPtr pExternalBufferInfo, global::System.IntPtr pExternalBufferProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetMemoryFdKHR(global::System.IntPtr device, global::System.IntPtr pGetFdInfo, int* pFd);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetMemoryFdPropertiesKHR(global::System.IntPtr device, global::VkExternalMemoryHandleTypeFlagBits handleType, int fd, global::System.IntPtr pMemoryFdProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(global::System.IntPtr physicalDevice, global::System.IntPtr pExternalSemaphoreInfo, global::System.IntPtr pExternalSemaphoreProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkImportSemaphoreFdKHR(global::System.IntPtr device, global::System.IntPtr pImportSemaphoreFdInfo);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetSemaphoreFdKHR(global::System.IntPtr device, global::System.IntPtr pGetFdInfo, int* pFd);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdPushDescriptorSetKHR(global::System.IntPtr commandBuffer, global::VkPipelineBindPoint pipelineBindPoint, global::System.IntPtr layout, uint set, uint descriptorWriteCount, global::System.IntPtr pDescriptorWrites);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdPushDescriptorSetWithTemplateKHR(global::System.IntPtr commandBuffer, global::System.IntPtr descriptorUpdateTemplate, global::System.IntPtr layout, uint set, global::System.IntPtr pData);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreateDescriptorUpdateTemplateKHR(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pDescriptorUpdateTemplate);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkDestroyDescriptorUpdateTemplateKHR(global::System.IntPtr device, global::System.IntPtr descriptorUpdateTemplate, global::System.IntPtr pAllocator);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkUpdateDescriptorSetWithTemplateKHR(global::System.IntPtr device, global::System.IntPtr descriptorSet, global::System.IntPtr descriptorUpdateTemplate, global::System.IntPtr pData);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetSwapchainStatusKHR(global::System.IntPtr device, global::System.IntPtr swapchain);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR(global::System.IntPtr physicalDevice, global::System.IntPtr pExternalFenceInfo, global::System.IntPtr pExternalFenceProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkImportFenceFdKHR(global::System.IntPtr device, global::System.IntPtr pImportFenceFdInfo);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetFenceFdKHR(global::System.IntPtr device, global::System.IntPtr pGetFdInfo, int* pFd);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR(global::System.IntPtr physicalDevice, global::System.IntPtr pSurfaceInfo, global::System.IntPtr pSurfaceCapabilities);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetPhysicalDeviceSurfaceFormats2KHR(global::System.IntPtr physicalDevice, global::System.IntPtr pSurfaceInfo, uint* pSurfaceFormatCount, global::System.IntPtr pSurfaceFormats);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetImageMemoryRequirements2KHR(global::System.IntPtr device, global::System.IntPtr pInfo, global::System.IntPtr pMemoryRequirements);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetBufferMemoryRequirements2KHR(global::System.IntPtr device, global::System.IntPtr pInfo, global::System.IntPtr pMemoryRequirements);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetImageSparseMemoryRequirements2KHR(global::System.IntPtr device, global::System.IntPtr pInfo, uint* pSparseMemoryRequirementCount, global::System.IntPtr pSparseMemoryRequirements);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreateSamplerYcbcrConversionKHR(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pYcbcrConversion);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkDestroySamplerYcbcrConversionKHR(global::System.IntPtr device, global::System.IntPtr ycbcrConversion, global::System.IntPtr pAllocator);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkBindBufferMemory2KHR(global::System.IntPtr device, uint bindInfoCount, global::System.IntPtr pBindInfos);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkBindImageMemory2KHR(global::System.IntPtr device, uint bindInfoCount, global::System.IntPtr pBindInfos);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetDescriptorSetLayoutSupportKHR(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pSupport);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate uint PFN_vkDebugReportCallbackEXT(uint flags, global::VkDebugReportObjectTypeEXT objectType, ulong targetObject, ulong location, int messageCode, [MarshalAs(UnmanagedType.LPStr)] string pLayerPrefix, [MarshalAs(UnmanagedType.LPStr)] string pMessage, global::System.IntPtr pUserData);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreateDebugReportCallbackEXT(global::System.IntPtr instance, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pCallback);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkDestroyDebugReportCallbackEXT(global::System.IntPtr instance, global::System.IntPtr callback, global::System.IntPtr pAllocator);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkDebugReportMessageEXT(global::System.IntPtr instance, uint flags, global::VkDebugReportObjectTypeEXT objectType, ulong targetObject, ulong location, int messageCode, [MarshalAs(UnmanagedType.LPStr)] string pLayerPrefix, [MarshalAs(UnmanagedType.LPStr)] string pMessage);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkDebugMarkerSetObjectTagEXT(global::System.IntPtr device, global::System.IntPtr pTagInfo);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkDebugMarkerSetObjectNameEXT(global::System.IntPtr device, global::System.IntPtr pNameInfo);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdDebugMarkerBeginEXT(global::System.IntPtr commandBuffer, global::System.IntPtr pMarkerInfo);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdDebugMarkerEndEXT(global::System.IntPtr commandBuffer);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdDebugMarkerInsertEXT(global::System.IntPtr commandBuffer, global::System.IntPtr pMarkerInfo);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdDrawIndirectCountAMD(global::System.IntPtr commandBuffer, global::System.IntPtr buffer, ulong offset, global::System.IntPtr countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdDrawIndexedIndirectCountAMD(global::System.IntPtr commandBuffer, global::System.IntPtr buffer, ulong offset, global::System.IntPtr countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetShaderInfoAMD(global::System.IntPtr device, global::System.IntPtr pipeline, global::VkShaderStageFlagBits shaderStage, global::VkShaderInfoTypeAMD infoType, ulong* pInfoSize, global::System.IntPtr pInfo);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV(global::System.IntPtr physicalDevice, global::VkFormat format, global::VkImageType type, global::VkImageTiling tiling, uint usage, uint flags, uint externalHandleType, global::System.IntPtr pExternalImageFormatProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdProcessCommandsNVX(global::System.IntPtr commandBuffer, global::System.IntPtr pProcessCommandsInfo);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdReserveSpaceForCommandsNVX(global::System.IntPtr commandBuffer, global::System.IntPtr pReserveSpaceInfo);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreateIndirectCommandsLayoutNVX(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pIndirectCommandsLayout);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkDestroyIndirectCommandsLayoutNVX(global::System.IntPtr device, global::System.IntPtr indirectCommandsLayout, global::System.IntPtr pAllocator);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreateObjectTableNVX(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pObjectTable);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkDestroyObjectTableNVX(global::System.IntPtr device, global::System.IntPtr objectTable, global::System.IntPtr pAllocator);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkRegisterObjectsNVX(global::System.IntPtr device, global::System.IntPtr objectTable, uint objectCount, global::System.IntPtr ppObjectTableEntries, uint* pObjectIndices);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkUnregisterObjectsNVX(global::System.IntPtr device, global::System.IntPtr objectTable, uint objectCount, global::VkObjectEntryTypeNVX* pObjectEntryTypes, uint* pObjectIndices);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX(global::System.IntPtr physicalDevice, global::System.IntPtr pFeatures, global::System.IntPtr pLimits);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdSetViewportWScalingNV(global::System.IntPtr commandBuffer, uint firstViewport, uint viewportCount, global::System.IntPtr pViewportWScalings);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkReleaseDisplayEXT(global::System.IntPtr physicalDevice, global::System.IntPtr display);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT(global::System.IntPtr physicalDevice, global::System.IntPtr surface, global::System.IntPtr pSurfaceCapabilities);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkDisplayPowerControlEXT(global::System.IntPtr device, global::System.IntPtr display, global::System.IntPtr pDisplayPowerInfo);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkRegisterDeviceEventEXT(global::System.IntPtr device, global::System.IntPtr pDeviceEventInfo, global::System.IntPtr pAllocator, global::System.IntPtr pFence);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkRegisterDisplayEventEXT(global::System.IntPtr device, global::System.IntPtr display, global::System.IntPtr pDisplayEventInfo, global::System.IntPtr pAllocator, global::System.IntPtr pFence);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetSwapchainCounterEXT(global::System.IntPtr device, global::System.IntPtr swapchain, global::VkSurfaceCounterFlagBitsEXT counter, ulong* pCounterValue);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetRefreshCycleDurationGOOGLE(global::System.IntPtr device, global::System.IntPtr swapchain, global::System.IntPtr pDisplayTimingProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetPastPresentationTimingGOOGLE(global::System.IntPtr device, global::System.IntPtr swapchain, uint* pPresentationTimingCount, global::System.IntPtr pPresentationTimings);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdSetDiscardRectangleEXT(global::System.IntPtr commandBuffer, uint firstDiscardRectangle, uint discardRectangleCount, global::System.IntPtr pDiscardRectangles);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkSetHdrMetadataEXT(global::System.IntPtr device, uint swapchainCount, global::System.IntPtr pSwapchains, global::System.IntPtr pMetadata);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate uint PFN_vkDebugUtilsMessengerCallbackEXT(global::VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, uint messageType, global::System.IntPtr pCallbackData, global::System.IntPtr pUserData);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkSetDebugUtilsObjectNameEXT(global::System.IntPtr device, global::System.IntPtr pNameInfo);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkSetDebugUtilsObjectTagEXT(global::System.IntPtr device, global::System.IntPtr pTagInfo);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkQueueBeginDebugUtilsLabelEXT(global::System.IntPtr queue, global::System.IntPtr pLabelInfo);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkQueueEndDebugUtilsLabelEXT(global::System.IntPtr queue);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkQueueInsertDebugUtilsLabelEXT(global::System.IntPtr queue, global::System.IntPtr pLabelInfo);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdBeginDebugUtilsLabelEXT(global::System.IntPtr commandBuffer, global::System.IntPtr pLabelInfo);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdEndDebugUtilsLabelEXT(global::System.IntPtr commandBuffer);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdInsertDebugUtilsLabelEXT(global::System.IntPtr commandBuffer, global::System.IntPtr pLabelInfo);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreateDebugUtilsMessengerEXT(global::System.IntPtr instance, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pMessenger);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkDestroyDebugUtilsMessengerEXT(global::System.IntPtr instance, global::System.IntPtr messenger, global::System.IntPtr pAllocator);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkSubmitDebugUtilsMessageEXT(global::System.IntPtr instance, global::VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, uint messageTypes, global::System.IntPtr pCallbackData);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdSetSampleLocationsEXT(global::System.IntPtr commandBuffer, global::System.IntPtr pSampleLocationsInfo);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT(global::System.IntPtr physicalDevice, global::VkSampleCountFlagBits samples, global::System.IntPtr pMultisampleProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkCreateValidationCacheEXT(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pValidationCache);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkDestroyValidationCacheEXT(global::System.IntPtr device, global::System.IntPtr validationCache, global::System.IntPtr pAllocator);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkMergeValidationCachesEXT(global::System.IntPtr device, global::System.IntPtr dstCache, uint srcCacheCount, global::System.IntPtr pSrcCaches);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetValidationCacheDataEXT(global::System.IntPtr device, global::System.IntPtr validationCache, ulong* pDataSize, global::System.IntPtr pData);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::VkResult PFN_vkGetMemoryHostPointerPropertiesEXT(global::System.IntPtr device, global::VkExternalMemoryHandleTypeFlagBits handleType, global::System.IntPtr pHostPointer, global::System.IntPtr pMemoryHostPointerProperties);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void PFN_vkCmdWriteBufferMarkerAMD(global::System.IntPtr commandBuffer, global::VkPipelineStageFlagBits pipelineStage, global::System.IntPtr dstBuffer, ulong dstOffset, uint marker);

public unsafe partial class VkInstanceT
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkInstanceT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkInstanceT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkInstanceT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkInstanceT(native.ToPointer(), skipVTables);
    }

    internal static global::VkInstanceT __CreateInstance(global::VkInstanceT.__Internal native, bool skipVTables = false)
    {
        return new global::VkInstanceT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkInstanceT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkInstanceT.__Internal));
        *(global::VkInstanceT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkInstanceT(global::VkInstanceT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkInstanceT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkInstanceT()
    {
        Dispose(false);
    }
}

public unsafe partial class VkPhysicalDeviceT
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceT(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceT __CreateInstance(global::VkPhysicalDeviceT.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceT.__Internal));
        *(global::VkPhysicalDeviceT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceT(global::VkPhysicalDeviceT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceT()
    {
        Dispose(false);
    }
}

public unsafe partial class VkDeviceT
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDeviceT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDeviceT(native.ToPointer(), skipVTables);
    }

    internal static global::VkDeviceT __CreateInstance(global::VkDeviceT.__Internal native, bool skipVTables = false)
    {
        return new global::VkDeviceT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDeviceT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDeviceT.__Internal));
        *(global::VkDeviceT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDeviceT(global::VkDeviceT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDeviceT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDeviceT()
    {
        Dispose(false);
    }
}

public unsafe partial class VkQueueT
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkQueueT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkQueueT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkQueueT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkQueueT(native.ToPointer(), skipVTables);
    }

    internal static global::VkQueueT __CreateInstance(global::VkQueueT.__Internal native, bool skipVTables = false)
    {
        return new global::VkQueueT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkQueueT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkQueueT.__Internal));
        *(global::VkQueueT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkQueueT(global::VkQueueT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkQueueT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkQueueT()
    {
        Dispose(false);
    }
}

public unsafe partial class VkSemaphoreT
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSemaphoreT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSemaphoreT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSemaphoreT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSemaphoreT(native.ToPointer(), skipVTables);
    }

    internal static global::VkSemaphoreT __CreateInstance(global::VkSemaphoreT.__Internal native, bool skipVTables = false)
    {
        return new global::VkSemaphoreT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSemaphoreT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSemaphoreT.__Internal));
        *(global::VkSemaphoreT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSemaphoreT(global::VkSemaphoreT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSemaphoreT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSemaphoreT()
    {
        Dispose(false);
    }
}

public unsafe partial class VkCommandBufferT
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkCommandBufferT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkCommandBufferT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkCommandBufferT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkCommandBufferT(native.ToPointer(), skipVTables);
    }

    internal static global::VkCommandBufferT __CreateInstance(global::VkCommandBufferT.__Internal native, bool skipVTables = false)
    {
        return new global::VkCommandBufferT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkCommandBufferT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkCommandBufferT.__Internal));
        *(global::VkCommandBufferT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkCommandBufferT(global::VkCommandBufferT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkCommandBufferT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkCommandBufferT()
    {
        Dispose(false);
    }
}

public unsafe partial class VkFenceT
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkFenceT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkFenceT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkFenceT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkFenceT(native.ToPointer(), skipVTables);
    }

    internal static global::VkFenceT __CreateInstance(global::VkFenceT.__Internal native, bool skipVTables = false)
    {
        return new global::VkFenceT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkFenceT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkFenceT.__Internal));
        *(global::VkFenceT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkFenceT(global::VkFenceT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkFenceT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkFenceT()
    {
        Dispose(false);
    }
}

public unsafe partial class VkDeviceMemoryT
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceMemoryT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceMemoryT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDeviceMemoryT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDeviceMemoryT(native.ToPointer(), skipVTables);
    }

    internal static global::VkDeviceMemoryT __CreateInstance(global::VkDeviceMemoryT.__Internal native, bool skipVTables = false)
    {
        return new global::VkDeviceMemoryT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDeviceMemoryT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDeviceMemoryT.__Internal));
        *(global::VkDeviceMemoryT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDeviceMemoryT(global::VkDeviceMemoryT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDeviceMemoryT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDeviceMemoryT()
    {
        Dispose(false);
    }
}

public unsafe partial class VkBufferT
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkBufferT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkBufferT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkBufferT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkBufferT(native.ToPointer(), skipVTables);
    }

    internal static global::VkBufferT __CreateInstance(global::VkBufferT.__Internal native, bool skipVTables = false)
    {
        return new global::VkBufferT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkBufferT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkBufferT.__Internal));
        *(global::VkBufferT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkBufferT(global::VkBufferT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkBufferT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkBufferT()
    {
        Dispose(false);
    }
}

public unsafe partial class VkImageT
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkImageT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkImageT(native.ToPointer(), skipVTables);
    }

    internal static global::VkImageT __CreateInstance(global::VkImageT.__Internal native, bool skipVTables = false)
    {
        return new global::VkImageT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkImageT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkImageT.__Internal));
        *(global::VkImageT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkImageT(global::VkImageT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkImageT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkImageT()
    {
        Dispose(false);
    }
}

public unsafe partial class VkEventT
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkEventT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkEventT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkEventT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkEventT(native.ToPointer(), skipVTables);
    }

    internal static global::VkEventT __CreateInstance(global::VkEventT.__Internal native, bool skipVTables = false)
    {
        return new global::VkEventT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkEventT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkEventT.__Internal));
        *(global::VkEventT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkEventT(global::VkEventT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkEventT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkEventT()
    {
        Dispose(false);
    }
}

public unsafe partial class VkQueryPoolT
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkQueryPoolT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkQueryPoolT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkQueryPoolT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkQueryPoolT(native.ToPointer(), skipVTables);
    }

    internal static global::VkQueryPoolT __CreateInstance(global::VkQueryPoolT.__Internal native, bool skipVTables = false)
    {
        return new global::VkQueryPoolT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkQueryPoolT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkQueryPoolT.__Internal));
        *(global::VkQueryPoolT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkQueryPoolT(global::VkQueryPoolT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkQueryPoolT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkQueryPoolT()
    {
        Dispose(false);
    }
}

public unsafe partial class VkBufferViewT
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkBufferViewT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkBufferViewT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkBufferViewT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkBufferViewT(native.ToPointer(), skipVTables);
    }

    internal static global::VkBufferViewT __CreateInstance(global::VkBufferViewT.__Internal native, bool skipVTables = false)
    {
        return new global::VkBufferViewT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkBufferViewT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkBufferViewT.__Internal));
        *(global::VkBufferViewT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkBufferViewT(global::VkBufferViewT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkBufferViewT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkBufferViewT()
    {
        Dispose(false);
    }
}

public unsafe partial class VkImageViewT
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageViewT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageViewT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkImageViewT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkImageViewT(native.ToPointer(), skipVTables);
    }

    internal static global::VkImageViewT __CreateInstance(global::VkImageViewT.__Internal native, bool skipVTables = false)
    {
        return new global::VkImageViewT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkImageViewT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkImageViewT.__Internal));
        *(global::VkImageViewT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkImageViewT(global::VkImageViewT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkImageViewT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkImageViewT()
    {
        Dispose(false);
    }
}

public unsafe partial class VkShaderModuleT
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkShaderModuleT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkShaderModuleT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkShaderModuleT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkShaderModuleT(native.ToPointer(), skipVTables);
    }

    internal static global::VkShaderModuleT __CreateInstance(global::VkShaderModuleT.__Internal native, bool skipVTables = false)
    {
        return new global::VkShaderModuleT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkShaderModuleT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkShaderModuleT.__Internal));
        *(global::VkShaderModuleT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkShaderModuleT(global::VkShaderModuleT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkShaderModuleT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkShaderModuleT()
    {
        Dispose(false);
    }
}

public unsafe partial class VkPipelineCacheT
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineCacheT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineCacheT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPipelineCacheT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPipelineCacheT(native.ToPointer(), skipVTables);
    }

    internal static global::VkPipelineCacheT __CreateInstance(global::VkPipelineCacheT.__Internal native, bool skipVTables = false)
    {
        return new global::VkPipelineCacheT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPipelineCacheT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPipelineCacheT.__Internal));
        *(global::VkPipelineCacheT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPipelineCacheT(global::VkPipelineCacheT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPipelineCacheT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPipelineCacheT()
    {
        Dispose(false);
    }
}

public unsafe partial class VkPipelineLayoutT
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineLayoutT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineLayoutT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPipelineLayoutT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPipelineLayoutT(native.ToPointer(), skipVTables);
    }

    internal static global::VkPipelineLayoutT __CreateInstance(global::VkPipelineLayoutT.__Internal native, bool skipVTables = false)
    {
        return new global::VkPipelineLayoutT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPipelineLayoutT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPipelineLayoutT.__Internal));
        *(global::VkPipelineLayoutT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPipelineLayoutT(global::VkPipelineLayoutT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPipelineLayoutT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPipelineLayoutT()
    {
        Dispose(false);
    }
}

public unsafe partial class VkRenderPassT
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkRenderPassT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkRenderPassT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkRenderPassT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkRenderPassT(native.ToPointer(), skipVTables);
    }

    internal static global::VkRenderPassT __CreateInstance(global::VkRenderPassT.__Internal native, bool skipVTables = false)
    {
        return new global::VkRenderPassT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkRenderPassT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkRenderPassT.__Internal));
        *(global::VkRenderPassT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkRenderPassT(global::VkRenderPassT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkRenderPassT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkRenderPassT()
    {
        Dispose(false);
    }
}

public unsafe partial class VkPipelineT
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPipelineT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPipelineT(native.ToPointer(), skipVTables);
    }

    internal static global::VkPipelineT __CreateInstance(global::VkPipelineT.__Internal native, bool skipVTables = false)
    {
        return new global::VkPipelineT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPipelineT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPipelineT.__Internal));
        *(global::VkPipelineT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPipelineT(global::VkPipelineT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPipelineT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPipelineT()
    {
        Dispose(false);
    }
}

public unsafe partial class VkDescriptorSetLayoutT
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorSetLayoutT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorSetLayoutT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDescriptorSetLayoutT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDescriptorSetLayoutT(native.ToPointer(), skipVTables);
    }

    internal static global::VkDescriptorSetLayoutT __CreateInstance(global::VkDescriptorSetLayoutT.__Internal native, bool skipVTables = false)
    {
        return new global::VkDescriptorSetLayoutT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDescriptorSetLayoutT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDescriptorSetLayoutT.__Internal));
        *(global::VkDescriptorSetLayoutT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDescriptorSetLayoutT(global::VkDescriptorSetLayoutT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDescriptorSetLayoutT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDescriptorSetLayoutT()
    {
        Dispose(false);
    }
}

public unsafe partial class VkSamplerT
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSamplerT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSamplerT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSamplerT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSamplerT(native.ToPointer(), skipVTables);
    }

    internal static global::VkSamplerT __CreateInstance(global::VkSamplerT.__Internal native, bool skipVTables = false)
    {
        return new global::VkSamplerT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSamplerT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSamplerT.__Internal));
        *(global::VkSamplerT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSamplerT(global::VkSamplerT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSamplerT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSamplerT()
    {
        Dispose(false);
    }
}

public unsafe partial class VkDescriptorPoolT
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorPoolT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorPoolT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDescriptorPoolT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDescriptorPoolT(native.ToPointer(), skipVTables);
    }

    internal static global::VkDescriptorPoolT __CreateInstance(global::VkDescriptorPoolT.__Internal native, bool skipVTables = false)
    {
        return new global::VkDescriptorPoolT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDescriptorPoolT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDescriptorPoolT.__Internal));
        *(global::VkDescriptorPoolT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDescriptorPoolT(global::VkDescriptorPoolT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDescriptorPoolT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDescriptorPoolT()
    {
        Dispose(false);
    }
}

public unsafe partial class VkDescriptorSetT
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorSetT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorSetT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDescriptorSetT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDescriptorSetT(native.ToPointer(), skipVTables);
    }

    internal static global::VkDescriptorSetT __CreateInstance(global::VkDescriptorSetT.__Internal native, bool skipVTables = false)
    {
        return new global::VkDescriptorSetT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDescriptorSetT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDescriptorSetT.__Internal));
        *(global::VkDescriptorSetT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDescriptorSetT(global::VkDescriptorSetT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDescriptorSetT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDescriptorSetT()
    {
        Dispose(false);
    }
}

public unsafe partial class VkFramebufferT
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkFramebufferT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkFramebufferT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkFramebufferT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkFramebufferT(native.ToPointer(), skipVTables);
    }

    internal static global::VkFramebufferT __CreateInstance(global::VkFramebufferT.__Internal native, bool skipVTables = false)
    {
        return new global::VkFramebufferT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkFramebufferT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkFramebufferT.__Internal));
        *(global::VkFramebufferT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkFramebufferT(global::VkFramebufferT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkFramebufferT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkFramebufferT()
    {
        Dispose(false);
    }
}

public unsafe partial class VkCommandPoolT
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkCommandPoolT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkCommandPoolT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkCommandPoolT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkCommandPoolT(native.ToPointer(), skipVTables);
    }

    internal static global::VkCommandPoolT __CreateInstance(global::VkCommandPoolT.__Internal native, bool skipVTables = false)
    {
        return new global::VkCommandPoolT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkCommandPoolT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkCommandPoolT.__Internal));
        *(global::VkCommandPoolT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkCommandPoolT(global::VkCommandPoolT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkCommandPoolT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkCommandPoolT()
    {
        Dispose(false);
    }
}

public unsafe partial class VkApplicationInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 48)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::System.IntPtr pApplicationName;

        [FieldOffset(24)]
        internal uint applicationVersion;

        [FieldOffset(32)]
        internal global::System.IntPtr pEngineName;

        [FieldOffset(40)]
        internal uint engineVersion;

        [FieldOffset(44)]
        internal uint apiVersion;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkApplicationInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkApplicationInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkApplicationInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkApplicationInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkApplicationInfo __CreateInstance(global::VkApplicationInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkApplicationInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkApplicationInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkApplicationInfo.__Internal));
        *(global::VkApplicationInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkApplicationInfo(global::VkApplicationInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkApplicationInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkApplicationInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkApplicationInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkApplicationInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkApplicationInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkApplicationInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkApplicationInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public string PApplicationName
    {
        get
        {
            return Marshal.PtrToStringAnsi(((global::VkApplicationInfo.__Internal*) __Instance)->pApplicationName);
        }

        set
        {
            ((global::VkApplicationInfo.__Internal*)__Instance)->pApplicationName = Marshal.StringToHGlobalAnsi(value);
        }
    }

    public uint ApplicationVersion
    {
        get
        {
            return ((global::VkApplicationInfo.__Internal*) __Instance)->applicationVersion;
        }

        set
        {
            ((global::VkApplicationInfo.__Internal*)__Instance)->applicationVersion = value;
        }
    }

    public string PEngineName
    {
        get
        {
            return Marshal.PtrToStringAnsi(((global::VkApplicationInfo.__Internal*) __Instance)->pEngineName);
        }

        set
        {
            ((global::VkApplicationInfo.__Internal*)__Instance)->pEngineName = Marshal.StringToHGlobalAnsi(value);
        }
    }

    public uint EngineVersion
    {
        get
        {
            return ((global::VkApplicationInfo.__Internal*) __Instance)->engineVersion;
        }

        set
        {
            ((global::VkApplicationInfo.__Internal*)__Instance)->engineVersion = value;
        }
    }

    public uint ApiVersion
    {
        get
        {
            return ((global::VkApplicationInfo.__Internal*) __Instance)->apiVersion;
        }

        set
        {
            ((global::VkApplicationInfo.__Internal*)__Instance)->apiVersion = value;
        }
    }
}

public unsafe partial class VkInstanceCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 64)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(24)]
        internal global::System.IntPtr pApplicationInfo;

        [FieldOffset(32)]
        internal uint enabledLayerCount;

        [FieldOffset(40)]
        internal global::System.IntPtr ppEnabledLayerNames;

        [FieldOffset(48)]
        internal uint enabledExtensionCount;

        [FieldOffset(56)]
        internal global::System.IntPtr ppEnabledExtensionNames;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkInstanceCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkInstanceCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkInstanceCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkInstanceCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkInstanceCreateInfo __CreateInstance(global::VkInstanceCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkInstanceCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkInstanceCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkInstanceCreateInfo.__Internal));
        *(global::VkInstanceCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkInstanceCreateInfo(global::VkInstanceCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkInstanceCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkInstanceCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkInstanceCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkInstanceCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkInstanceCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkInstanceCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkInstanceCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkInstanceCreateInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkInstanceCreateInfo.__Internal*)__Instance)->flags = value;
        }
    }

    public global::VkApplicationInfo PApplicationInfo
    {
        get
        {
            global::VkApplicationInfo __result0;
            if (((global::VkInstanceCreateInfo.__Internal*) __Instance)->pApplicationInfo == IntPtr.Zero) __result0 = null;
            else if (global::VkApplicationInfo.NativeToManagedMap.ContainsKey(((global::VkInstanceCreateInfo.__Internal*) __Instance)->pApplicationInfo))
                __result0 = (global::VkApplicationInfo) global::VkApplicationInfo.NativeToManagedMap[((global::VkInstanceCreateInfo.__Internal*) __Instance)->pApplicationInfo];
            else __result0 = global::VkApplicationInfo.__CreateInstance(((global::VkInstanceCreateInfo.__Internal*) __Instance)->pApplicationInfo);
            return __result0;
        }

        set
        {
            ((global::VkInstanceCreateInfo.__Internal*)__Instance)->pApplicationInfo = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint EnabledLayerCount
    {
        get
        {
            return ((global::VkInstanceCreateInfo.__Internal*) __Instance)->enabledLayerCount;
        }

        set
        {
            ((global::VkInstanceCreateInfo.__Internal*)__Instance)->enabledLayerCount = value;
        }
    }

    public char** PpEnabledLayerNames
    {
        get
        {
            return (char**) ((global::VkInstanceCreateInfo.__Internal*) __Instance)->ppEnabledLayerNames;
        }

        set
        {
            ((global::VkInstanceCreateInfo.__Internal*)__Instance)->ppEnabledLayerNames = (global::System.IntPtr) (sbyte**) value;
        }
    }

    public uint EnabledExtensionCount
    {
        get
        {
            return ((global::VkInstanceCreateInfo.__Internal*) __Instance)->enabledExtensionCount;
        }

        set
        {
            ((global::VkInstanceCreateInfo.__Internal*)__Instance)->enabledExtensionCount = value;
        }
    }

    public char** PpEnabledExtensionNames
    {
        get
        {
            return (char**) ((global::VkInstanceCreateInfo.__Internal*) __Instance)->ppEnabledExtensionNames;
        }

        set
        {
            ((global::VkInstanceCreateInfo.__Internal*)__Instance)->ppEnabledExtensionNames = (global::System.IntPtr) (sbyte**) value;
        }
    }
}

public unsafe partial class VkAllocationCallbacks : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 48)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::System.IntPtr pUserData;

        [FieldOffset(8)]
        internal global::System.IntPtr pfnAllocation;

        [FieldOffset(16)]
        internal global::System.IntPtr pfnReallocation;

        [FieldOffset(24)]
        internal global::System.IntPtr pfnFree;

        [FieldOffset(32)]
        internal global::System.IntPtr pfnInternalAllocation;

        [FieldOffset(40)]
        internal global::System.IntPtr pfnInternalFree;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkAllocationCallbacks> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkAllocationCallbacks>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkAllocationCallbacks __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkAllocationCallbacks(native.ToPointer(), skipVTables);
    }

    internal static global::VkAllocationCallbacks __CreateInstance(global::VkAllocationCallbacks.__Internal native, bool skipVTables = false)
    {
        return new global::VkAllocationCallbacks(native, skipVTables);
    }

    private static void* __CopyValue(global::VkAllocationCallbacks.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkAllocationCallbacks.__Internal));
        *(global::VkAllocationCallbacks.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkAllocationCallbacks(global::VkAllocationCallbacks.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkAllocationCallbacks(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkAllocationCallbacks()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkAllocationCallbacks __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::System.IntPtr PUserData
    {
        get
        {
            return ((global::VkAllocationCallbacks.__Internal*) __Instance)->pUserData;
        }

        set
        {
            ((global::VkAllocationCallbacks.__Internal*)__Instance)->pUserData = (global::System.IntPtr) value;
        }
    }

    public global::PFN_vkAllocationFunction PfnAllocation
    {
        get
        {
            var __ptr0 = ((global::VkAllocationCallbacks.__Internal*) __Instance)->pfnAllocation;
            return __ptr0 == IntPtr.Zero? null : (global::PFN_vkAllocationFunction) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PFN_vkAllocationFunction));
        }

        set
        {
            ((global::VkAllocationCallbacks.__Internal*)__Instance)->pfnAllocation = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
        }
    }

    public global::PFN_vkReallocationFunction PfnReallocation
    {
        get
        {
            var __ptr0 = ((global::VkAllocationCallbacks.__Internal*) __Instance)->pfnReallocation;
            return __ptr0 == IntPtr.Zero? null : (global::PFN_vkReallocationFunction) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PFN_vkReallocationFunction));
        }

        set
        {
            ((global::VkAllocationCallbacks.__Internal*)__Instance)->pfnReallocation = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
        }
    }

    public global::PFN_vkFreeFunction PfnFree
    {
        get
        {
            var __ptr0 = ((global::VkAllocationCallbacks.__Internal*) __Instance)->pfnFree;
            return __ptr0 == IntPtr.Zero? null : (global::PFN_vkFreeFunction) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PFN_vkFreeFunction));
        }

        set
        {
            ((global::VkAllocationCallbacks.__Internal*)__Instance)->pfnFree = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
        }
    }

    public global::PFN_vkInternalAllocationNotification PfnInternalAllocation
    {
        get
        {
            var __ptr0 = ((global::VkAllocationCallbacks.__Internal*) __Instance)->pfnInternalAllocation;
            return __ptr0 == IntPtr.Zero? null : (global::PFN_vkInternalAllocationNotification) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PFN_vkInternalAllocationNotification));
        }

        set
        {
            ((global::VkAllocationCallbacks.__Internal*)__Instance)->pfnInternalAllocation = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
        }
    }

    public global::PFN_vkInternalFreeNotification PfnInternalFree
    {
        get
        {
            var __ptr0 = ((global::VkAllocationCallbacks.__Internal*) __Instance)->pfnInternalFree;
            return __ptr0 == IntPtr.Zero? null : (global::PFN_vkInternalFreeNotification) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PFN_vkInternalFreeNotification));
        }

        set
        {
            ((global::VkAllocationCallbacks.__Internal*)__Instance)->pfnInternalFree = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
        }
    }
}

public unsafe partial class VkPhysicalDeviceFeatures : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 220)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint robustBufferAccess;

        [FieldOffset(4)]
        internal uint fullDrawIndexUint32;

        [FieldOffset(8)]
        internal uint imageCubeArray;

        [FieldOffset(12)]
        internal uint independentBlend;

        [FieldOffset(16)]
        internal uint geometryShader;

        [FieldOffset(20)]
        internal uint tessellationShader;

        [FieldOffset(24)]
        internal uint sampleRateShading;

        [FieldOffset(28)]
        internal uint dualSrcBlend;

        [FieldOffset(32)]
        internal uint logicOp;

        [FieldOffset(36)]
        internal uint multiDrawIndirect;

        [FieldOffset(40)]
        internal uint drawIndirectFirstInstance;

        [FieldOffset(44)]
        internal uint depthClamp;

        [FieldOffset(48)]
        internal uint depthBiasClamp;

        [FieldOffset(52)]
        internal uint fillModeNonSolid;

        [FieldOffset(56)]
        internal uint depthBounds;

        [FieldOffset(60)]
        internal uint wideLines;

        [FieldOffset(64)]
        internal uint largePoints;

        [FieldOffset(68)]
        internal uint alphaToOne;

        [FieldOffset(72)]
        internal uint multiViewport;

        [FieldOffset(76)]
        internal uint samplerAnisotropy;

        [FieldOffset(80)]
        internal uint textureCompressionETC2;

        [FieldOffset(84)]
        internal uint textureCompressionASTC_LDR;

        [FieldOffset(88)]
        internal uint textureCompressionBC;

        [FieldOffset(92)]
        internal uint occlusionQueryPrecise;

        [FieldOffset(96)]
        internal uint pipelineStatisticsQuery;

        [FieldOffset(100)]
        internal uint vertexPipelineStoresAndAtomics;

        [FieldOffset(104)]
        internal uint fragmentStoresAndAtomics;

        [FieldOffset(108)]
        internal uint shaderTessellationAndGeometryPointSize;

        [FieldOffset(112)]
        internal uint shaderImageGatherExtended;

        [FieldOffset(116)]
        internal uint shaderStorageImageExtendedFormats;

        [FieldOffset(120)]
        internal uint shaderStorageImageMultisample;

        [FieldOffset(124)]
        internal uint shaderStorageImageReadWithoutFormat;

        [FieldOffset(128)]
        internal uint shaderStorageImageWriteWithoutFormat;

        [FieldOffset(132)]
        internal uint shaderUniformBufferArrayDynamicIndexing;

        [FieldOffset(136)]
        internal uint shaderSampledImageArrayDynamicIndexing;

        [FieldOffset(140)]
        internal uint shaderStorageBufferArrayDynamicIndexing;

        [FieldOffset(144)]
        internal uint shaderStorageImageArrayDynamicIndexing;

        [FieldOffset(148)]
        internal uint shaderClipDistance;

        [FieldOffset(152)]
        internal uint shaderCullDistance;

        [FieldOffset(156)]
        internal uint shaderFloat64;

        [FieldOffset(160)]
        internal uint shaderInt64;

        [FieldOffset(164)]
        internal uint shaderInt16;

        [FieldOffset(168)]
        internal uint shaderResourceResidency;

        [FieldOffset(172)]
        internal uint shaderResourceMinLod;

        [FieldOffset(176)]
        internal uint sparseBinding;

        [FieldOffset(180)]
        internal uint sparseResidencyBuffer;

        [FieldOffset(184)]
        internal uint sparseResidencyImage2D;

        [FieldOffset(188)]
        internal uint sparseResidencyImage3D;

        [FieldOffset(192)]
        internal uint sparseResidency2Samples;

        [FieldOffset(196)]
        internal uint sparseResidency4Samples;

        [FieldOffset(200)]
        internal uint sparseResidency8Samples;

        [FieldOffset(204)]
        internal uint sparseResidency16Samples;

        [FieldOffset(208)]
        internal uint sparseResidencyAliased;

        [FieldOffset(212)]
        internal uint variableMultisampleRate;

        [FieldOffset(216)]
        internal uint inheritedQueries;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceFeatures> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceFeatures>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceFeatures __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceFeatures(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceFeatures __CreateInstance(global::VkPhysicalDeviceFeatures.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceFeatures(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceFeatures.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceFeatures.__Internal));
        *(global::VkPhysicalDeviceFeatures.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceFeatures(global::VkPhysicalDeviceFeatures.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceFeatures(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceFeatures()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceFeatures __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint RobustBufferAccess
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->robustBufferAccess;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->robustBufferAccess = value;
        }
    }

    public uint FullDrawIndexUint32
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->fullDrawIndexUint32;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->fullDrawIndexUint32 = value;
        }
    }

    public uint ImageCubeArray
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->imageCubeArray;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->imageCubeArray = value;
        }
    }

    public uint IndependentBlend
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->independentBlend;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->independentBlend = value;
        }
    }

    public uint GeometryShader
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->geometryShader;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->geometryShader = value;
        }
    }

    public uint TessellationShader
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->tessellationShader;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->tessellationShader = value;
        }
    }

    public uint SampleRateShading
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->sampleRateShading;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->sampleRateShading = value;
        }
    }

    public uint DualSrcBlend
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->dualSrcBlend;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->dualSrcBlend = value;
        }
    }

    public uint LogicOp
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->logicOp;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->logicOp = value;
        }
    }

    public uint MultiDrawIndirect
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->multiDrawIndirect;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->multiDrawIndirect = value;
        }
    }

    public uint DrawIndirectFirstInstance
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->drawIndirectFirstInstance;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->drawIndirectFirstInstance = value;
        }
    }

    public uint DepthClamp
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->depthClamp;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->depthClamp = value;
        }
    }

    public uint DepthBiasClamp
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->depthBiasClamp;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->depthBiasClamp = value;
        }
    }

    public uint FillModeNonSolid
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->fillModeNonSolid;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->fillModeNonSolid = value;
        }
    }

    public uint DepthBounds
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->depthBounds;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->depthBounds = value;
        }
    }

    public uint WideLines
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->wideLines;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->wideLines = value;
        }
    }

    public uint LargePoints
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->largePoints;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->largePoints = value;
        }
    }

    public uint AlphaToOne
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->alphaToOne;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->alphaToOne = value;
        }
    }

    public uint MultiViewport
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->multiViewport;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->multiViewport = value;
        }
    }

    public uint SamplerAnisotropy
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->samplerAnisotropy;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->samplerAnisotropy = value;
        }
    }

    public uint TextureCompressionETC2
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->textureCompressionETC2;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->textureCompressionETC2 = value;
        }
    }

    public uint TextureCompressionASTC_LDR
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->textureCompressionASTC_LDR;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->textureCompressionASTC_LDR = value;
        }
    }

    public uint TextureCompressionBC
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->textureCompressionBC;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->textureCompressionBC = value;
        }
    }

    public uint OcclusionQueryPrecise
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->occlusionQueryPrecise;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->occlusionQueryPrecise = value;
        }
    }

    public uint PipelineStatisticsQuery
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->pipelineStatisticsQuery;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->pipelineStatisticsQuery = value;
        }
    }

    public uint VertexPipelineStoresAndAtomics
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->vertexPipelineStoresAndAtomics;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->vertexPipelineStoresAndAtomics = value;
        }
    }

    public uint FragmentStoresAndAtomics
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->fragmentStoresAndAtomics;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->fragmentStoresAndAtomics = value;
        }
    }

    public uint ShaderTessellationAndGeometryPointSize
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->shaderTessellationAndGeometryPointSize;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->shaderTessellationAndGeometryPointSize = value;
        }
    }

    public uint ShaderImageGatherExtended
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->shaderImageGatherExtended;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->shaderImageGatherExtended = value;
        }
    }

    public uint ShaderStorageImageExtendedFormats
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->shaderStorageImageExtendedFormats;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->shaderStorageImageExtendedFormats = value;
        }
    }

    public uint ShaderStorageImageMultisample
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->shaderStorageImageMultisample;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->shaderStorageImageMultisample = value;
        }
    }

    public uint ShaderStorageImageReadWithoutFormat
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->shaderStorageImageReadWithoutFormat;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->shaderStorageImageReadWithoutFormat = value;
        }
    }

    public uint ShaderStorageImageWriteWithoutFormat
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->shaderStorageImageWriteWithoutFormat;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->shaderStorageImageWriteWithoutFormat = value;
        }
    }

    public uint ShaderUniformBufferArrayDynamicIndexing
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->shaderUniformBufferArrayDynamicIndexing;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->shaderUniformBufferArrayDynamicIndexing = value;
        }
    }

    public uint ShaderSampledImageArrayDynamicIndexing
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->shaderSampledImageArrayDynamicIndexing;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->shaderSampledImageArrayDynamicIndexing = value;
        }
    }

    public uint ShaderStorageBufferArrayDynamicIndexing
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->shaderStorageBufferArrayDynamicIndexing;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->shaderStorageBufferArrayDynamicIndexing = value;
        }
    }

    public uint ShaderStorageImageArrayDynamicIndexing
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->shaderStorageImageArrayDynamicIndexing;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->shaderStorageImageArrayDynamicIndexing = value;
        }
    }

    public uint ShaderClipDistance
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->shaderClipDistance;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->shaderClipDistance = value;
        }
    }

    public uint ShaderCullDistance
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->shaderCullDistance;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->shaderCullDistance = value;
        }
    }

    public uint ShaderFloat64
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->shaderFloat64;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->shaderFloat64 = value;
        }
    }

    public uint ShaderInt64
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->shaderInt64;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->shaderInt64 = value;
        }
    }

    public uint ShaderInt16
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->shaderInt16;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->shaderInt16 = value;
        }
    }

    public uint ShaderResourceResidency
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->shaderResourceResidency;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->shaderResourceResidency = value;
        }
    }

    public uint ShaderResourceMinLod
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->shaderResourceMinLod;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->shaderResourceMinLod = value;
        }
    }

    public uint SparseBinding
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->sparseBinding;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->sparseBinding = value;
        }
    }

    public uint SparseResidencyBuffer
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->sparseResidencyBuffer;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->sparseResidencyBuffer = value;
        }
    }

    public uint SparseResidencyImage2D
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->sparseResidencyImage2D;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->sparseResidencyImage2D = value;
        }
    }

    public uint SparseResidencyImage3D
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->sparseResidencyImage3D;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->sparseResidencyImage3D = value;
        }
    }

    public uint SparseResidency2Samples
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->sparseResidency2Samples;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->sparseResidency2Samples = value;
        }
    }

    public uint SparseResidency4Samples
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->sparseResidency4Samples;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->sparseResidency4Samples = value;
        }
    }

    public uint SparseResidency8Samples
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->sparseResidency8Samples;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->sparseResidency8Samples = value;
        }
    }

    public uint SparseResidency16Samples
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->sparseResidency16Samples;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->sparseResidency16Samples = value;
        }
    }

    public uint SparseResidencyAliased
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->sparseResidencyAliased;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->sparseResidencyAliased = value;
        }
    }

    public uint VariableMultisampleRate
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->variableMultisampleRate;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->variableMultisampleRate = value;
        }
    }

    public uint InheritedQueries
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures.__Internal*) __Instance)->inheritedQueries;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures.__Internal*)__Instance)->inheritedQueries = value;
        }
    }
}

public unsafe partial class VkFormatProperties : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 12)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint linearTilingFeatures;

        [FieldOffset(4)]
        internal uint optimalTilingFeatures;

        [FieldOffset(8)]
        internal uint bufferFeatures;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkFormatProperties> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkFormatProperties>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkFormatProperties __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkFormatProperties(native.ToPointer(), skipVTables);
    }

    internal static global::VkFormatProperties __CreateInstance(global::VkFormatProperties.__Internal native, bool skipVTables = false)
    {
        return new global::VkFormatProperties(native, skipVTables);
    }

    private static void* __CopyValue(global::VkFormatProperties.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkFormatProperties.__Internal));
        *(global::VkFormatProperties.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkFormatProperties(global::VkFormatProperties.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkFormatProperties(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkFormatProperties()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkFormatProperties __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint LinearTilingFeatures
    {
        get
        {
            return ((global::VkFormatProperties.__Internal*) __Instance)->linearTilingFeatures;
        }

        set
        {
            ((global::VkFormatProperties.__Internal*)__Instance)->linearTilingFeatures = value;
        }
    }

    public uint OptimalTilingFeatures
    {
        get
        {
            return ((global::VkFormatProperties.__Internal*) __Instance)->optimalTilingFeatures;
        }

        set
        {
            ((global::VkFormatProperties.__Internal*)__Instance)->optimalTilingFeatures = value;
        }
    }

    public uint BufferFeatures
    {
        get
        {
            return ((global::VkFormatProperties.__Internal*) __Instance)->bufferFeatures;
        }

        set
        {
            ((global::VkFormatProperties.__Internal*)__Instance)->bufferFeatures = value;
        }
    }
}

public unsafe partial class VkExtent3D : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 12)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint width;

        [FieldOffset(4)]
        internal uint height;

        [FieldOffset(8)]
        internal uint depth;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkExtent3D> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkExtent3D>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkExtent3D __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkExtent3D(native.ToPointer(), skipVTables);
    }

    internal static global::VkExtent3D __CreateInstance(global::VkExtent3D.__Internal native, bool skipVTables = false)
    {
        return new global::VkExtent3D(native, skipVTables);
    }

    private static void* __CopyValue(global::VkExtent3D.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkExtent3D.__Internal));
        *(global::VkExtent3D.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkExtent3D(global::VkExtent3D.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkExtent3D(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkExtent3D()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkExtent3D __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint Width
    {
        get
        {
            return ((global::VkExtent3D.__Internal*) __Instance)->width;
        }

        set
        {
            ((global::VkExtent3D.__Internal*)__Instance)->width = value;
        }
    }

    public uint Height
    {
        get
        {
            return ((global::VkExtent3D.__Internal*) __Instance)->height;
        }

        set
        {
            ((global::VkExtent3D.__Internal*)__Instance)->height = value;
        }
    }

    public uint Depth
    {
        get
        {
            return ((global::VkExtent3D.__Internal*) __Instance)->depth;
        }

        set
        {
            ((global::VkExtent3D.__Internal*)__Instance)->depth = value;
        }
    }
}

public unsafe partial class VkImageFormatProperties : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkExtent3D.__Internal maxExtent;

        [FieldOffset(12)]
        internal uint maxMipLevels;

        [FieldOffset(16)]
        internal uint maxArrayLayers;

        [FieldOffset(20)]
        internal uint sampleCounts;

        [FieldOffset(24)]
        internal ulong maxResourceSize;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageFormatProperties> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageFormatProperties>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkImageFormatProperties __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkImageFormatProperties(native.ToPointer(), skipVTables);
    }

    internal static global::VkImageFormatProperties __CreateInstance(global::VkImageFormatProperties.__Internal native, bool skipVTables = false)
    {
        return new global::VkImageFormatProperties(native, skipVTables);
    }

    private static void* __CopyValue(global::VkImageFormatProperties.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkImageFormatProperties.__Internal));
        *(global::VkImageFormatProperties.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkImageFormatProperties(global::VkImageFormatProperties.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkImageFormatProperties(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkImageFormatProperties()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkImageFormatProperties __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkExtent3D MaxExtent
    {
        get
        {
            return global::VkExtent3D.__CreateInstance(new global::System.IntPtr(&((global::VkImageFormatProperties.__Internal*) __Instance)->maxExtent));
        }

        set
        {
            ((global::VkImageFormatProperties.__Internal*)__Instance)->maxExtent = ReferenceEquals(value, null) ? new global::VkExtent3D.__Internal() : *(global::VkExtent3D.__Internal*) value.__Instance;
        }
    }

    public uint MaxMipLevels
    {
        get
        {
            return ((global::VkImageFormatProperties.__Internal*) __Instance)->maxMipLevels;
        }

        set
        {
            ((global::VkImageFormatProperties.__Internal*)__Instance)->maxMipLevels = value;
        }
    }

    public uint MaxArrayLayers
    {
        get
        {
            return ((global::VkImageFormatProperties.__Internal*) __Instance)->maxArrayLayers;
        }

        set
        {
            ((global::VkImageFormatProperties.__Internal*)__Instance)->maxArrayLayers = value;
        }
    }

    public uint SampleCounts
    {
        get
        {
            return ((global::VkImageFormatProperties.__Internal*) __Instance)->sampleCounts;
        }

        set
        {
            ((global::VkImageFormatProperties.__Internal*)__Instance)->sampleCounts = value;
        }
    }

    public ulong MaxResourceSize
    {
        get
        {
            return ((global::VkImageFormatProperties.__Internal*) __Instance)->maxResourceSize;
        }

        set
        {
            ((global::VkImageFormatProperties.__Internal*)__Instance)->maxResourceSize = value;
        }
    }
}

public unsafe partial class VkPhysicalDeviceLimits : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 504)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint maxImageDimension1D;

        [FieldOffset(4)]
        internal uint maxImageDimension2D;

        [FieldOffset(8)]
        internal uint maxImageDimension3D;

        [FieldOffset(12)]
        internal uint maxImageDimensionCube;

        [FieldOffset(16)]
        internal uint maxImageArrayLayers;

        [FieldOffset(20)]
        internal uint maxTexelBufferElements;

        [FieldOffset(24)]
        internal uint maxUniformBufferRange;

        [FieldOffset(28)]
        internal uint maxStorageBufferRange;

        [FieldOffset(32)]
        internal uint maxPushConstantsSize;

        [FieldOffset(36)]
        internal uint maxMemoryAllocationCount;

        [FieldOffset(40)]
        internal uint maxSamplerAllocationCount;

        [FieldOffset(48)]
        internal ulong bufferImageGranularity;

        [FieldOffset(56)]
        internal ulong sparseAddressSpaceSize;

        [FieldOffset(64)]
        internal uint maxBoundDescriptorSets;

        [FieldOffset(68)]
        internal uint maxPerStageDescriptorSamplers;

        [FieldOffset(72)]
        internal uint maxPerStageDescriptorUniformBuffers;

        [FieldOffset(76)]
        internal uint maxPerStageDescriptorStorageBuffers;

        [FieldOffset(80)]
        internal uint maxPerStageDescriptorSampledImages;

        [FieldOffset(84)]
        internal uint maxPerStageDescriptorStorageImages;

        [FieldOffset(88)]
        internal uint maxPerStageDescriptorInputAttachments;

        [FieldOffset(92)]
        internal uint maxPerStageResources;

        [FieldOffset(96)]
        internal uint maxDescriptorSetSamplers;

        [FieldOffset(100)]
        internal uint maxDescriptorSetUniformBuffers;

        [FieldOffset(104)]
        internal uint maxDescriptorSetUniformBuffersDynamic;

        [FieldOffset(108)]
        internal uint maxDescriptorSetStorageBuffers;

        [FieldOffset(112)]
        internal uint maxDescriptorSetStorageBuffersDynamic;

        [FieldOffset(116)]
        internal uint maxDescriptorSetSampledImages;

        [FieldOffset(120)]
        internal uint maxDescriptorSetStorageImages;

        [FieldOffset(124)]
        internal uint maxDescriptorSetInputAttachments;

        [FieldOffset(128)]
        internal uint maxVertexInputAttributes;

        [FieldOffset(132)]
        internal uint maxVertexInputBindings;

        [FieldOffset(136)]
        internal uint maxVertexInputAttributeOffset;

        [FieldOffset(140)]
        internal uint maxVertexInputBindingStride;

        [FieldOffset(144)]
        internal uint maxVertexOutputComponents;

        [FieldOffset(148)]
        internal uint maxTessellationGenerationLevel;

        [FieldOffset(152)]
        internal uint maxTessellationPatchSize;

        [FieldOffset(156)]
        internal uint maxTessellationControlPerVertexInputComponents;

        [FieldOffset(160)]
        internal uint maxTessellationControlPerVertexOutputComponents;

        [FieldOffset(164)]
        internal uint maxTessellationControlPerPatchOutputComponents;

        [FieldOffset(168)]
        internal uint maxTessellationControlTotalOutputComponents;

        [FieldOffset(172)]
        internal uint maxTessellationEvaluationInputComponents;

        [FieldOffset(176)]
        internal uint maxTessellationEvaluationOutputComponents;

        [FieldOffset(180)]
        internal uint maxGeometryShaderInvocations;

        [FieldOffset(184)]
        internal uint maxGeometryInputComponents;

        [FieldOffset(188)]
        internal uint maxGeometryOutputComponents;

        [FieldOffset(192)]
        internal uint maxGeometryOutputVertices;

        [FieldOffset(196)]
        internal uint maxGeometryTotalOutputComponents;

        [FieldOffset(200)]
        internal uint maxFragmentInputComponents;

        [FieldOffset(204)]
        internal uint maxFragmentOutputAttachments;

        [FieldOffset(208)]
        internal uint maxFragmentDualSrcAttachments;

        [FieldOffset(212)]
        internal uint maxFragmentCombinedOutputResources;

        [FieldOffset(216)]
        internal uint maxComputeSharedMemorySize;

        [FieldOffset(220)]
        internal fixed uint maxComputeWorkGroupCount[3];

        [FieldOffset(232)]
        internal uint maxComputeWorkGroupInvocations;

        [FieldOffset(236)]
        internal fixed uint maxComputeWorkGroupSize[3];

        [FieldOffset(248)]
        internal uint subPixelPrecisionBits;

        [FieldOffset(252)]
        internal uint subTexelPrecisionBits;

        [FieldOffset(256)]
        internal uint mipmapPrecisionBits;

        [FieldOffset(260)]
        internal uint maxDrawIndexedIndexValue;

        [FieldOffset(264)]
        internal uint maxDrawIndirectCount;

        [FieldOffset(268)]
        internal float maxSamplerLodBias;

        [FieldOffset(272)]
        internal float maxSamplerAnisotropy;

        [FieldOffset(276)]
        internal uint maxViewports;

        [FieldOffset(280)]
        internal fixed uint maxViewportDimensions[2];

        [FieldOffset(288)]
        internal fixed float viewportBoundsRange[2];

        [FieldOffset(296)]
        internal uint viewportSubPixelBits;

        [FieldOffset(304)]
        internal ulong minMemoryMapAlignment;

        [FieldOffset(312)]
        internal ulong minTexelBufferOffsetAlignment;

        [FieldOffset(320)]
        internal ulong minUniformBufferOffsetAlignment;

        [FieldOffset(328)]
        internal ulong minStorageBufferOffsetAlignment;

        [FieldOffset(336)]
        internal int minTexelOffset;

        [FieldOffset(340)]
        internal uint maxTexelOffset;

        [FieldOffset(344)]
        internal int minTexelGatherOffset;

        [FieldOffset(348)]
        internal uint maxTexelGatherOffset;

        [FieldOffset(352)]
        internal float minInterpolationOffset;

        [FieldOffset(356)]
        internal float maxInterpolationOffset;

        [FieldOffset(360)]
        internal uint subPixelInterpolationOffsetBits;

        [FieldOffset(364)]
        internal uint maxFramebufferWidth;

        [FieldOffset(368)]
        internal uint maxFramebufferHeight;

        [FieldOffset(372)]
        internal uint maxFramebufferLayers;

        [FieldOffset(376)]
        internal uint framebufferColorSampleCounts;

        [FieldOffset(380)]
        internal uint framebufferDepthSampleCounts;

        [FieldOffset(384)]
        internal uint framebufferStencilSampleCounts;

        [FieldOffset(388)]
        internal uint framebufferNoAttachmentsSampleCounts;

        [FieldOffset(392)]
        internal uint maxColorAttachments;

        [FieldOffset(396)]
        internal uint sampledImageColorSampleCounts;

        [FieldOffset(400)]
        internal uint sampledImageIntegerSampleCounts;

        [FieldOffset(404)]
        internal uint sampledImageDepthSampleCounts;

        [FieldOffset(408)]
        internal uint sampledImageStencilSampleCounts;

        [FieldOffset(412)]
        internal uint storageImageSampleCounts;

        [FieldOffset(416)]
        internal uint maxSampleMaskWords;

        [FieldOffset(420)]
        internal uint timestampComputeAndGraphics;

        [FieldOffset(424)]
        internal float timestampPeriod;

        [FieldOffset(428)]
        internal uint maxClipDistances;

        [FieldOffset(432)]
        internal uint maxCullDistances;

        [FieldOffset(436)]
        internal uint maxCombinedClipAndCullDistances;

        [FieldOffset(440)]
        internal uint discreteQueuePriorities;

        [FieldOffset(444)]
        internal fixed float pointSizeRange[2];

        [FieldOffset(452)]
        internal fixed float lineWidthRange[2];

        [FieldOffset(460)]
        internal float pointSizeGranularity;

        [FieldOffset(464)]
        internal float lineWidthGranularity;

        [FieldOffset(468)]
        internal uint strictLines;

        [FieldOffset(472)]
        internal uint standardSampleLocations;

        [FieldOffset(480)]
        internal ulong optimalBufferCopyOffsetAlignment;

        [FieldOffset(488)]
        internal ulong optimalBufferCopyRowPitchAlignment;

        [FieldOffset(496)]
        internal ulong nonCoherentAtomSize;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceLimits> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceLimits>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceLimits __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceLimits(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceLimits __CreateInstance(global::VkPhysicalDeviceLimits.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceLimits(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceLimits.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceLimits.__Internal));
        *(global::VkPhysicalDeviceLimits.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceLimits(global::VkPhysicalDeviceLimits.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceLimits(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceLimits()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceLimits __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint MaxImageDimension1D
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxImageDimension1D;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxImageDimension1D = value;
        }
    }

    public uint MaxImageDimension2D
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxImageDimension2D;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxImageDimension2D = value;
        }
    }

    public uint MaxImageDimension3D
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxImageDimension3D;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxImageDimension3D = value;
        }
    }

    public uint MaxImageDimensionCube
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxImageDimensionCube;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxImageDimensionCube = value;
        }
    }

    public uint MaxImageArrayLayers
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxImageArrayLayers;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxImageArrayLayers = value;
        }
    }

    public uint MaxTexelBufferElements
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxTexelBufferElements;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxTexelBufferElements = value;
        }
    }

    public uint MaxUniformBufferRange
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxUniformBufferRange;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxUniformBufferRange = value;
        }
    }

    public uint MaxStorageBufferRange
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxStorageBufferRange;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxStorageBufferRange = value;
        }
    }

    public uint MaxPushConstantsSize
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxPushConstantsSize;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxPushConstantsSize = value;
        }
    }

    public uint MaxMemoryAllocationCount
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxMemoryAllocationCount;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxMemoryAllocationCount = value;
        }
    }

    public uint MaxSamplerAllocationCount
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxSamplerAllocationCount;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxSamplerAllocationCount = value;
        }
    }

    public ulong BufferImageGranularity
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->bufferImageGranularity;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->bufferImageGranularity = value;
        }
    }

    public ulong SparseAddressSpaceSize
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->sparseAddressSpaceSize;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->sparseAddressSpaceSize = value;
        }
    }

    public uint MaxBoundDescriptorSets
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxBoundDescriptorSets;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxBoundDescriptorSets = value;
        }
    }

    public uint MaxPerStageDescriptorSamplers
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxPerStageDescriptorSamplers;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxPerStageDescriptorSamplers = value;
        }
    }

    public uint MaxPerStageDescriptorUniformBuffers
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxPerStageDescriptorUniformBuffers;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxPerStageDescriptorUniformBuffers = value;
        }
    }

    public uint MaxPerStageDescriptorStorageBuffers
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxPerStageDescriptorStorageBuffers;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxPerStageDescriptorStorageBuffers = value;
        }
    }

    public uint MaxPerStageDescriptorSampledImages
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxPerStageDescriptorSampledImages;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxPerStageDescriptorSampledImages = value;
        }
    }

    public uint MaxPerStageDescriptorStorageImages
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxPerStageDescriptorStorageImages;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxPerStageDescriptorStorageImages = value;
        }
    }

    public uint MaxPerStageDescriptorInputAttachments
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxPerStageDescriptorInputAttachments;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxPerStageDescriptorInputAttachments = value;
        }
    }

    public uint MaxPerStageResources
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxPerStageResources;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxPerStageResources = value;
        }
    }

    public uint MaxDescriptorSetSamplers
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxDescriptorSetSamplers;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxDescriptorSetSamplers = value;
        }
    }

    public uint MaxDescriptorSetUniformBuffers
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxDescriptorSetUniformBuffers;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxDescriptorSetUniformBuffers = value;
        }
    }

    public uint MaxDescriptorSetUniformBuffersDynamic
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxDescriptorSetUniformBuffersDynamic;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxDescriptorSetUniformBuffersDynamic = value;
        }
    }

    public uint MaxDescriptorSetStorageBuffers
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxDescriptorSetStorageBuffers;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxDescriptorSetStorageBuffers = value;
        }
    }

    public uint MaxDescriptorSetStorageBuffersDynamic
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxDescriptorSetStorageBuffersDynamic;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxDescriptorSetStorageBuffersDynamic = value;
        }
    }

    public uint MaxDescriptorSetSampledImages
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxDescriptorSetSampledImages;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxDescriptorSetSampledImages = value;
        }
    }

    public uint MaxDescriptorSetStorageImages
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxDescriptorSetStorageImages;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxDescriptorSetStorageImages = value;
        }
    }

    public uint MaxDescriptorSetInputAttachments
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxDescriptorSetInputAttachments;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxDescriptorSetInputAttachments = value;
        }
    }

    public uint MaxVertexInputAttributes
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxVertexInputAttributes;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxVertexInputAttributes = value;
        }
    }

    public uint MaxVertexInputBindings
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxVertexInputBindings;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxVertexInputBindings = value;
        }
    }

    public uint MaxVertexInputAttributeOffset
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxVertexInputAttributeOffset;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxVertexInputAttributeOffset = value;
        }
    }

    public uint MaxVertexInputBindingStride
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxVertexInputBindingStride;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxVertexInputBindingStride = value;
        }
    }

    public uint MaxVertexOutputComponents
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxVertexOutputComponents;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxVertexOutputComponents = value;
        }
    }

    public uint MaxTessellationGenerationLevel
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxTessellationGenerationLevel;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxTessellationGenerationLevel = value;
        }
    }

    public uint MaxTessellationPatchSize
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxTessellationPatchSize;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxTessellationPatchSize = value;
        }
    }

    public uint MaxTessellationControlPerVertexInputComponents
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxTessellationControlPerVertexInputComponents;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxTessellationControlPerVertexInputComponents = value;
        }
    }

    public uint MaxTessellationControlPerVertexOutputComponents
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxTessellationControlPerVertexOutputComponents;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxTessellationControlPerVertexOutputComponents = value;
        }
    }

    public uint MaxTessellationControlPerPatchOutputComponents
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxTessellationControlPerPatchOutputComponents;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxTessellationControlPerPatchOutputComponents = value;
        }
    }

    public uint MaxTessellationControlTotalOutputComponents
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxTessellationControlTotalOutputComponents;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxTessellationControlTotalOutputComponents = value;
        }
    }

    public uint MaxTessellationEvaluationInputComponents
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxTessellationEvaluationInputComponents;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxTessellationEvaluationInputComponents = value;
        }
    }

    public uint MaxTessellationEvaluationOutputComponents
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxTessellationEvaluationOutputComponents;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxTessellationEvaluationOutputComponents = value;
        }
    }

    public uint MaxGeometryShaderInvocations
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxGeometryShaderInvocations;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxGeometryShaderInvocations = value;
        }
    }

    public uint MaxGeometryInputComponents
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxGeometryInputComponents;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxGeometryInputComponents = value;
        }
    }

    public uint MaxGeometryOutputComponents
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxGeometryOutputComponents;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxGeometryOutputComponents = value;
        }
    }

    public uint MaxGeometryOutputVertices
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxGeometryOutputVertices;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxGeometryOutputVertices = value;
        }
    }

    public uint MaxGeometryTotalOutputComponents
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxGeometryTotalOutputComponents;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxGeometryTotalOutputComponents = value;
        }
    }

    public uint MaxFragmentInputComponents
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxFragmentInputComponents;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxFragmentInputComponents = value;
        }
    }

    public uint MaxFragmentOutputAttachments
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxFragmentOutputAttachments;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxFragmentOutputAttachments = value;
        }
    }

    public uint MaxFragmentDualSrcAttachments
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxFragmentDualSrcAttachments;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxFragmentDualSrcAttachments = value;
        }
    }

    public uint MaxFragmentCombinedOutputResources
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxFragmentCombinedOutputResources;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxFragmentCombinedOutputResources = value;
        }
    }

    public uint MaxComputeSharedMemorySize
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxComputeSharedMemorySize;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxComputeSharedMemorySize = value;
        }
    }

    public uint[] MaxComputeWorkGroupCount
    {
        get
        {
            uint[] __value = null;
            if (((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxComputeWorkGroupCount != null)
            {
                __value = new uint[3];
                for (int i = 0; i < 3; i++)
                    __value[i] = ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxComputeWorkGroupCount[i];
            }
            return __value;
        }

        set
        {
            if (value != null)
            {
                for (int i = 0; i < 3; i++)
                    ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxComputeWorkGroupCount[i] = value[i];
            }
        }
    }

    public uint MaxComputeWorkGroupInvocations
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxComputeWorkGroupInvocations;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxComputeWorkGroupInvocations = value;
        }
    }

    public uint[] MaxComputeWorkGroupSize
    {
        get
        {
            uint[] __value = null;
            if (((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxComputeWorkGroupSize != null)
            {
                __value = new uint[3];
                for (int i = 0; i < 3; i++)
                    __value[i] = ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxComputeWorkGroupSize[i];
            }
            return __value;
        }

        set
        {
            if (value != null)
            {
                for (int i = 0; i < 3; i++)
                    ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxComputeWorkGroupSize[i] = value[i];
            }
        }
    }

    public uint SubPixelPrecisionBits
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->subPixelPrecisionBits;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->subPixelPrecisionBits = value;
        }
    }

    public uint SubTexelPrecisionBits
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->subTexelPrecisionBits;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->subTexelPrecisionBits = value;
        }
    }

    public uint MipmapPrecisionBits
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->mipmapPrecisionBits;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->mipmapPrecisionBits = value;
        }
    }

    public uint MaxDrawIndexedIndexValue
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxDrawIndexedIndexValue;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxDrawIndexedIndexValue = value;
        }
    }

    public uint MaxDrawIndirectCount
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxDrawIndirectCount;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxDrawIndirectCount = value;
        }
    }

    public float MaxSamplerLodBias
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxSamplerLodBias;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxSamplerLodBias = value;
        }
    }

    public float MaxSamplerAnisotropy
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxSamplerAnisotropy;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxSamplerAnisotropy = value;
        }
    }

    public uint MaxViewports
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxViewports;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxViewports = value;
        }
    }

    public uint[] MaxViewportDimensions
    {
        get
        {
            uint[] __value = null;
            if (((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxViewportDimensions != null)
            {
                __value = new uint[2];
                for (int i = 0; i < 2; i++)
                    __value[i] = ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxViewportDimensions[i];
            }
            return __value;
        }

        set
        {
            if (value != null)
            {
                for (int i = 0; i < 2; i++)
                    ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxViewportDimensions[i] = value[i];
            }
        }
    }

    public float[] ViewportBoundsRange
    {
        get
        {
            float[] __value = null;
            if (((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->viewportBoundsRange != null)
            {
                __value = new float[2];
                for (int i = 0; i < 2; i++)
                    __value[i] = ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->viewportBoundsRange[i];
            }
            return __value;
        }

        set
        {
            if (value != null)
            {
                for (int i = 0; i < 2; i++)
                    ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->viewportBoundsRange[i] = value[i];
            }
        }
    }

    public uint ViewportSubPixelBits
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->viewportSubPixelBits;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->viewportSubPixelBits = value;
        }
    }

    public ulong MinMemoryMapAlignment
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->minMemoryMapAlignment;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->minMemoryMapAlignment = value;
        }
    }

    public ulong MinTexelBufferOffsetAlignment
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->minTexelBufferOffsetAlignment;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->minTexelBufferOffsetAlignment = value;
        }
    }

    public ulong MinUniformBufferOffsetAlignment
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->minUniformBufferOffsetAlignment;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->minUniformBufferOffsetAlignment = value;
        }
    }

    public ulong MinStorageBufferOffsetAlignment
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->minStorageBufferOffsetAlignment;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->minStorageBufferOffsetAlignment = value;
        }
    }

    public int MinTexelOffset
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->minTexelOffset;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->minTexelOffset = value;
        }
    }

    public uint MaxTexelOffset
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxTexelOffset;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxTexelOffset = value;
        }
    }

    public int MinTexelGatherOffset
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->minTexelGatherOffset;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->minTexelGatherOffset = value;
        }
    }

    public uint MaxTexelGatherOffset
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxTexelGatherOffset;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxTexelGatherOffset = value;
        }
    }

    public float MinInterpolationOffset
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->minInterpolationOffset;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->minInterpolationOffset = value;
        }
    }

    public float MaxInterpolationOffset
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxInterpolationOffset;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxInterpolationOffset = value;
        }
    }

    public uint SubPixelInterpolationOffsetBits
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->subPixelInterpolationOffsetBits;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->subPixelInterpolationOffsetBits = value;
        }
    }

    public uint MaxFramebufferWidth
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxFramebufferWidth;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxFramebufferWidth = value;
        }
    }

    public uint MaxFramebufferHeight
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxFramebufferHeight;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxFramebufferHeight = value;
        }
    }

    public uint MaxFramebufferLayers
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxFramebufferLayers;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxFramebufferLayers = value;
        }
    }

    public uint FramebufferColorSampleCounts
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->framebufferColorSampleCounts;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->framebufferColorSampleCounts = value;
        }
    }

    public uint FramebufferDepthSampleCounts
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->framebufferDepthSampleCounts;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->framebufferDepthSampleCounts = value;
        }
    }

    public uint FramebufferStencilSampleCounts
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->framebufferStencilSampleCounts;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->framebufferStencilSampleCounts = value;
        }
    }

    public uint FramebufferNoAttachmentsSampleCounts
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->framebufferNoAttachmentsSampleCounts;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->framebufferNoAttachmentsSampleCounts = value;
        }
    }

    public uint MaxColorAttachments
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxColorAttachments;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxColorAttachments = value;
        }
    }

    public uint SampledImageColorSampleCounts
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->sampledImageColorSampleCounts;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->sampledImageColorSampleCounts = value;
        }
    }

    public uint SampledImageIntegerSampleCounts
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->sampledImageIntegerSampleCounts;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->sampledImageIntegerSampleCounts = value;
        }
    }

    public uint SampledImageDepthSampleCounts
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->sampledImageDepthSampleCounts;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->sampledImageDepthSampleCounts = value;
        }
    }

    public uint SampledImageStencilSampleCounts
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->sampledImageStencilSampleCounts;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->sampledImageStencilSampleCounts = value;
        }
    }

    public uint StorageImageSampleCounts
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->storageImageSampleCounts;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->storageImageSampleCounts = value;
        }
    }

    public uint MaxSampleMaskWords
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxSampleMaskWords;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxSampleMaskWords = value;
        }
    }

    public uint TimestampComputeAndGraphics
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->timestampComputeAndGraphics;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->timestampComputeAndGraphics = value;
        }
    }

    public float TimestampPeriod
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->timestampPeriod;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->timestampPeriod = value;
        }
    }

    public uint MaxClipDistances
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxClipDistances;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxClipDistances = value;
        }
    }

    public uint MaxCullDistances
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxCullDistances;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxCullDistances = value;
        }
    }

    public uint MaxCombinedClipAndCullDistances
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->maxCombinedClipAndCullDistances;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->maxCombinedClipAndCullDistances = value;
        }
    }

    public uint DiscreteQueuePriorities
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->discreteQueuePriorities;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->discreteQueuePriorities = value;
        }
    }

    public float[] PointSizeRange
    {
        get
        {
            float[] __value = null;
            if (((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->pointSizeRange != null)
            {
                __value = new float[2];
                for (int i = 0; i < 2; i++)
                    __value[i] = ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->pointSizeRange[i];
            }
            return __value;
        }

        set
        {
            if (value != null)
            {
                for (int i = 0; i < 2; i++)
                    ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->pointSizeRange[i] = value[i];
            }
        }
    }

    public float[] LineWidthRange
    {
        get
        {
            float[] __value = null;
            if (((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->lineWidthRange != null)
            {
                __value = new float[2];
                for (int i = 0; i < 2; i++)
                    __value[i] = ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->lineWidthRange[i];
            }
            return __value;
        }

        set
        {
            if (value != null)
            {
                for (int i = 0; i < 2; i++)
                    ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->lineWidthRange[i] = value[i];
            }
        }
    }

    public float PointSizeGranularity
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->pointSizeGranularity;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->pointSizeGranularity = value;
        }
    }

    public float LineWidthGranularity
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->lineWidthGranularity;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->lineWidthGranularity = value;
        }
    }

    public uint StrictLines
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->strictLines;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->strictLines = value;
        }
    }

    public uint StandardSampleLocations
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->standardSampleLocations;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->standardSampleLocations = value;
        }
    }

    public ulong OptimalBufferCopyOffsetAlignment
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->optimalBufferCopyOffsetAlignment;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->optimalBufferCopyOffsetAlignment = value;
        }
    }

    public ulong OptimalBufferCopyRowPitchAlignment
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->optimalBufferCopyRowPitchAlignment;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->optimalBufferCopyRowPitchAlignment = value;
        }
    }

    public ulong NonCoherentAtomSize
    {
        get
        {
            return ((global::VkPhysicalDeviceLimits.__Internal*) __Instance)->nonCoherentAtomSize;
        }

        set
        {
            ((global::VkPhysicalDeviceLimits.__Internal*)__Instance)->nonCoherentAtomSize = value;
        }
    }
}

public unsafe partial class VkPhysicalDeviceSparseProperties : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 20)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint residencyStandard2DBlockShape;

        [FieldOffset(4)]
        internal uint residencyStandard2DMultisampleBlockShape;

        [FieldOffset(8)]
        internal uint residencyStandard3DBlockShape;

        [FieldOffset(12)]
        internal uint residencyAlignedMipSize;

        [FieldOffset(16)]
        internal uint residencyNonResidentStrict;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceSparseProperties> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceSparseProperties>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceSparseProperties __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceSparseProperties(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceSparseProperties __CreateInstance(global::VkPhysicalDeviceSparseProperties.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceSparseProperties(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceSparseProperties.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceSparseProperties.__Internal));
        *(global::VkPhysicalDeviceSparseProperties.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceSparseProperties(global::VkPhysicalDeviceSparseProperties.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceSparseProperties(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceSparseProperties()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceSparseProperties __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint ResidencyStandard2DBlockShape
    {
        get
        {
            return ((global::VkPhysicalDeviceSparseProperties.__Internal*) __Instance)->residencyStandard2DBlockShape;
        }

        set
        {
            ((global::VkPhysicalDeviceSparseProperties.__Internal*)__Instance)->residencyStandard2DBlockShape = value;
        }
    }

    public uint ResidencyStandard2DMultisampleBlockShape
    {
        get
        {
            return ((global::VkPhysicalDeviceSparseProperties.__Internal*) __Instance)->residencyStandard2DMultisampleBlockShape;
        }

        set
        {
            ((global::VkPhysicalDeviceSparseProperties.__Internal*)__Instance)->residencyStandard2DMultisampleBlockShape = value;
        }
    }

    public uint ResidencyStandard3DBlockShape
    {
        get
        {
            return ((global::VkPhysicalDeviceSparseProperties.__Internal*) __Instance)->residencyStandard3DBlockShape;
        }

        set
        {
            ((global::VkPhysicalDeviceSparseProperties.__Internal*)__Instance)->residencyStandard3DBlockShape = value;
        }
    }

    public uint ResidencyAlignedMipSize
    {
        get
        {
            return ((global::VkPhysicalDeviceSparseProperties.__Internal*) __Instance)->residencyAlignedMipSize;
        }

        set
        {
            ((global::VkPhysicalDeviceSparseProperties.__Internal*)__Instance)->residencyAlignedMipSize = value;
        }
    }

    public uint ResidencyNonResidentStrict
    {
        get
        {
            return ((global::VkPhysicalDeviceSparseProperties.__Internal*) __Instance)->residencyNonResidentStrict;
        }

        set
        {
            ((global::VkPhysicalDeviceSparseProperties.__Internal*)__Instance)->residencyNonResidentStrict = value;
        }
    }
}

public unsafe partial class VkPhysicalDeviceProperties : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 824)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint apiVersion;

        [FieldOffset(4)]
        internal uint driverVersion;

        [FieldOffset(8)]
        internal uint vendorID;

        [FieldOffset(12)]
        internal uint deviceID;

        [FieldOffset(16)]
        internal global::VkPhysicalDeviceType deviceType;

        [FieldOffset(20)]
        internal fixed sbyte deviceName[256];

        [FieldOffset(276)]
        internal fixed byte pipelineCacheUUID[16];

        [FieldOffset(296)]
        internal global::VkPhysicalDeviceLimits.__Internal limits;

        [FieldOffset(800)]
        internal global::VkPhysicalDeviceSparseProperties.__Internal sparseProperties;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceProperties> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceProperties>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceProperties __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceProperties(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceProperties __CreateInstance(global::VkPhysicalDeviceProperties.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceProperties(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceProperties.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceProperties.__Internal));
        *(global::VkPhysicalDeviceProperties.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceProperties(global::VkPhysicalDeviceProperties.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceProperties(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceProperties()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceProperties __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint ApiVersion
    {
        get
        {
            return ((global::VkPhysicalDeviceProperties.__Internal*) __Instance)->apiVersion;
        }

        set
        {
            ((global::VkPhysicalDeviceProperties.__Internal*)__Instance)->apiVersion = value;
        }
    }

    public uint DriverVersion
    {
        get
        {
            return ((global::VkPhysicalDeviceProperties.__Internal*) __Instance)->driverVersion;
        }

        set
        {
            ((global::VkPhysicalDeviceProperties.__Internal*)__Instance)->driverVersion = value;
        }
    }

    public uint VendorID
    {
        get
        {
            return ((global::VkPhysicalDeviceProperties.__Internal*) __Instance)->vendorID;
        }

        set
        {
            ((global::VkPhysicalDeviceProperties.__Internal*)__Instance)->vendorID = value;
        }
    }

    public uint DeviceID
    {
        get
        {
            return ((global::VkPhysicalDeviceProperties.__Internal*) __Instance)->deviceID;
        }

        set
        {
            ((global::VkPhysicalDeviceProperties.__Internal*)__Instance)->deviceID = value;
        }
    }

    public global::VkPhysicalDeviceType DeviceType
    {
        get
        {
            return ((global::VkPhysicalDeviceProperties.__Internal*) __Instance)->deviceType;
        }

        set
        {
            ((global::VkPhysicalDeviceProperties.__Internal*)__Instance)->deviceType = value;
        }
    }

    public char[] DeviceName
    {
        get
        {
            char[] __value = null;
            if (((global::VkPhysicalDeviceProperties.__Internal*) __Instance)->deviceName != null)
            {
                __value = new char[256];
                for (int i = 0; i < 256; i++)
                    __value[i] = global::System.Convert.ToChar(((global::VkPhysicalDeviceProperties.__Internal*) __Instance)->deviceName[i]);
            }
            return __value;
        }

        set
        {
            if (value != null)
            {
                for (int i = 0; i < 256; i++)
                    ((global::VkPhysicalDeviceProperties.__Internal*)__Instance)->deviceName[i] = global::System.Convert.ToSByte(value[i]);
            }
        }
    }

    public byte[] PipelineCacheUUID
    {
        get
        {
            byte[] __value = null;
            if (((global::VkPhysicalDeviceProperties.__Internal*) __Instance)->pipelineCacheUUID != null)
            {
                __value = new byte[16];
                for (int i = 0; i < 16; i++)
                    __value[i] = ((global::VkPhysicalDeviceProperties.__Internal*) __Instance)->pipelineCacheUUID[i];
            }
            return __value;
        }

        set
        {
            if (value != null)
            {
                for (int i = 0; i < 16; i++)
                    ((global::VkPhysicalDeviceProperties.__Internal*)__Instance)->pipelineCacheUUID[i] = value[i];
            }
        }
    }

    public global::VkPhysicalDeviceLimits Limits
    {
        get
        {
            return global::VkPhysicalDeviceLimits.__CreateInstance(new global::System.IntPtr(&((global::VkPhysicalDeviceProperties.__Internal*) __Instance)->limits));
        }

        set
        {
            ((global::VkPhysicalDeviceProperties.__Internal*)__Instance)->limits = ReferenceEquals(value, null) ? new global::VkPhysicalDeviceLimits.__Internal() : *(global::VkPhysicalDeviceLimits.__Internal*) value.__Instance;
        }
    }

    public global::VkPhysicalDeviceSparseProperties SparseProperties
    {
        get
        {
            return global::VkPhysicalDeviceSparseProperties.__CreateInstance(new global::System.IntPtr(&((global::VkPhysicalDeviceProperties.__Internal*) __Instance)->sparseProperties));
        }

        set
        {
            ((global::VkPhysicalDeviceProperties.__Internal*)__Instance)->sparseProperties = ReferenceEquals(value, null) ? new global::VkPhysicalDeviceSparseProperties.__Internal() : *(global::VkPhysicalDeviceSparseProperties.__Internal*) value.__Instance;
        }
    }
}

public unsafe partial class VkQueueFamilyProperties : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint queueFlags;

        [FieldOffset(4)]
        internal uint queueCount;

        [FieldOffset(8)]
        internal uint timestampValidBits;

        [FieldOffset(12)]
        internal global::VkExtent3D.__Internal minImageTransferGranularity;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkQueueFamilyProperties> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkQueueFamilyProperties>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkQueueFamilyProperties __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkQueueFamilyProperties(native.ToPointer(), skipVTables);
    }

    internal static global::VkQueueFamilyProperties __CreateInstance(global::VkQueueFamilyProperties.__Internal native, bool skipVTables = false)
    {
        return new global::VkQueueFamilyProperties(native, skipVTables);
    }

    private static void* __CopyValue(global::VkQueueFamilyProperties.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkQueueFamilyProperties.__Internal));
        *(global::VkQueueFamilyProperties.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkQueueFamilyProperties(global::VkQueueFamilyProperties.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkQueueFamilyProperties(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkQueueFamilyProperties()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkQueueFamilyProperties __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint QueueFlags
    {
        get
        {
            return ((global::VkQueueFamilyProperties.__Internal*) __Instance)->queueFlags;
        }

        set
        {
            ((global::VkQueueFamilyProperties.__Internal*)__Instance)->queueFlags = value;
        }
    }

    public uint QueueCount
    {
        get
        {
            return ((global::VkQueueFamilyProperties.__Internal*) __Instance)->queueCount;
        }

        set
        {
            ((global::VkQueueFamilyProperties.__Internal*)__Instance)->queueCount = value;
        }
    }

    public uint TimestampValidBits
    {
        get
        {
            return ((global::VkQueueFamilyProperties.__Internal*) __Instance)->timestampValidBits;
        }

        set
        {
            ((global::VkQueueFamilyProperties.__Internal*)__Instance)->timestampValidBits = value;
        }
    }

    public global::VkExtent3D MinImageTransferGranularity
    {
        get
        {
            return global::VkExtent3D.__CreateInstance(new global::System.IntPtr(&((global::VkQueueFamilyProperties.__Internal*) __Instance)->minImageTransferGranularity));
        }

        set
        {
            ((global::VkQueueFamilyProperties.__Internal*)__Instance)->minImageTransferGranularity = ReferenceEquals(value, null) ? new global::VkExtent3D.__Internal() : *(global::VkExtent3D.__Internal*) value.__Instance;
        }
    }
}

public unsafe partial class VkMemoryType : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint propertyFlags;

        [FieldOffset(4)]
        internal uint heapIndex;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkMemoryType> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkMemoryType>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkMemoryType __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkMemoryType(native.ToPointer(), skipVTables);
    }

    internal static global::VkMemoryType __CreateInstance(global::VkMemoryType.__Internal native, bool skipVTables = false)
    {
        return new global::VkMemoryType(native, skipVTables);
    }

    private static void* __CopyValue(global::VkMemoryType.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkMemoryType.__Internal));
        *(global::VkMemoryType.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkMemoryType(global::VkMemoryType.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkMemoryType(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkMemoryType()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkMemoryType __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint PropertyFlags
    {
        get
        {
            return ((global::VkMemoryType.__Internal*) __Instance)->propertyFlags;
        }

        set
        {
            ((global::VkMemoryType.__Internal*)__Instance)->propertyFlags = value;
        }
    }

    public uint HeapIndex
    {
        get
        {
            return ((global::VkMemoryType.__Internal*) __Instance)->heapIndex;
        }

        set
        {
            ((global::VkMemoryType.__Internal*)__Instance)->heapIndex = value;
        }
    }
}

public unsafe partial class VkMemoryHeap : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal ulong size;

        [FieldOffset(8)]
        internal uint flags;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkMemoryHeap> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkMemoryHeap>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkMemoryHeap __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkMemoryHeap(native.ToPointer(), skipVTables);
    }

    internal static global::VkMemoryHeap __CreateInstance(global::VkMemoryHeap.__Internal native, bool skipVTables = false)
    {
        return new global::VkMemoryHeap(native, skipVTables);
    }

    private static void* __CopyValue(global::VkMemoryHeap.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkMemoryHeap.__Internal));
        *(global::VkMemoryHeap.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkMemoryHeap(global::VkMemoryHeap.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkMemoryHeap(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkMemoryHeap()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkMemoryHeap __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public ulong Size
    {
        get
        {
            return ((global::VkMemoryHeap.__Internal*) __Instance)->size;
        }

        set
        {
            ((global::VkMemoryHeap.__Internal*)__Instance)->size = value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkMemoryHeap.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkMemoryHeap.__Internal*)__Instance)->flags = value;
        }
    }
}

public unsafe partial class VkPhysicalDeviceMemoryProperties : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 520)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint memoryTypeCount;

        [FieldOffset(4)]
        internal fixed byte memoryTypes[256];

        [FieldOffset(260)]
        internal uint memoryHeapCount;

        [FieldOffset(264)]
        internal fixed byte memoryHeaps[256];
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceMemoryProperties> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceMemoryProperties>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceMemoryProperties __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceMemoryProperties(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceMemoryProperties __CreateInstance(global::VkPhysicalDeviceMemoryProperties.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceMemoryProperties(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceMemoryProperties.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceMemoryProperties.__Internal));
        *(global::VkPhysicalDeviceMemoryProperties.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceMemoryProperties(global::VkPhysicalDeviceMemoryProperties.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceMemoryProperties(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceMemoryProperties()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceMemoryProperties __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint MemoryTypeCount
    {
        get
        {
            return ((global::VkPhysicalDeviceMemoryProperties.__Internal*) __Instance)->memoryTypeCount;
        }

        set
        {
            ((global::VkPhysicalDeviceMemoryProperties.__Internal*)__Instance)->memoryTypeCount = value;
        }
    }

    public global::VkMemoryType[] MemoryTypes
    {
        get
        {
            global::VkMemoryType[] __value = null;
            if (((global::VkPhysicalDeviceMemoryProperties.__Internal*) __Instance)->memoryTypes != null)
            {
                __value = new global::VkMemoryType[32];
                for (int i = 0; i < 32; i++)
                    __value[i] = global::VkMemoryType.__CreateInstance(*((global::VkMemoryType.__Internal*)&(((global::VkPhysicalDeviceMemoryProperties.__Internal*) __Instance)->memoryTypes[i * sizeof(global::VkMemoryType.__Internal)])));
            }
            return __value;
        }

        set
        {
            if (value != null)
            {
                if (value.Length != 32)
                    throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                for (int i = 0; i < 32; i++)
                    *(global::VkMemoryType.__Internal*) &((global::VkPhysicalDeviceMemoryProperties.__Internal*)__Instance)->memoryTypes[i * sizeof(global::VkMemoryType.__Internal)] = *(global::VkMemoryType.__Internal*)value[i].__Instance;
            }
        }
    }

    public uint MemoryHeapCount
    {
        get
        {
            return ((global::VkPhysicalDeviceMemoryProperties.__Internal*) __Instance)->memoryHeapCount;
        }

        set
        {
            ((global::VkPhysicalDeviceMemoryProperties.__Internal*)__Instance)->memoryHeapCount = value;
        }
    }

    public global::VkMemoryHeap[] MemoryHeaps
    {
        get
        {
            global::VkMemoryHeap[] __value = null;
            if (((global::VkPhysicalDeviceMemoryProperties.__Internal*) __Instance)->memoryHeaps != null)
            {
                __value = new global::VkMemoryHeap[16];
                for (int i = 0; i < 16; i++)
                    __value[i] = global::VkMemoryHeap.__CreateInstance(*((global::VkMemoryHeap.__Internal*)&(((global::VkPhysicalDeviceMemoryProperties.__Internal*) __Instance)->memoryHeaps[i * sizeof(global::VkMemoryHeap.__Internal)])));
            }
            return __value;
        }

        set
        {
            if (value != null)
            {
                if (value.Length != 16)
                    throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                for (int i = 0; i < 16; i++)
                    *(global::VkMemoryHeap.__Internal*) &((global::VkPhysicalDeviceMemoryProperties.__Internal*)__Instance)->memoryHeaps[i * sizeof(global::VkMemoryHeap.__Internal)] = *(global::VkMemoryHeap.__Internal*)value[i].__Instance;
            }
        }
    }
}

public unsafe partial class VkDeviceQueueCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(20)]
        internal uint queueFamilyIndex;

        [FieldOffset(24)]
        internal uint queueCount;

        [FieldOffset(32)]
        internal global::System.IntPtr pQueuePriorities;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceQueueCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceQueueCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDeviceQueueCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDeviceQueueCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkDeviceQueueCreateInfo __CreateInstance(global::VkDeviceQueueCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkDeviceQueueCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDeviceQueueCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDeviceQueueCreateInfo.__Internal));
        *(global::VkDeviceQueueCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDeviceQueueCreateInfo(global::VkDeviceQueueCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDeviceQueueCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDeviceQueueCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDeviceQueueCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDeviceQueueCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDeviceQueueCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDeviceQueueCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDeviceQueueCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkDeviceQueueCreateInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkDeviceQueueCreateInfo.__Internal*)__Instance)->flags = value;
        }
    }

    public uint QueueFamilyIndex
    {
        get
        {
            return ((global::VkDeviceQueueCreateInfo.__Internal*) __Instance)->queueFamilyIndex;
        }

        set
        {
            ((global::VkDeviceQueueCreateInfo.__Internal*)__Instance)->queueFamilyIndex = value;
        }
    }

    public uint QueueCount
    {
        get
        {
            return ((global::VkDeviceQueueCreateInfo.__Internal*) __Instance)->queueCount;
        }

        set
        {
            ((global::VkDeviceQueueCreateInfo.__Internal*)__Instance)->queueCount = value;
        }
    }

    public float* PQueuePriorities
    {
        get
        {
            return (float*) ((global::VkDeviceQueueCreateInfo.__Internal*) __Instance)->pQueuePriorities;
        }

        set
        {
            ((global::VkDeviceQueueCreateInfo.__Internal*)__Instance)->pQueuePriorities = (global::System.IntPtr) value;
        }
    }
}

public unsafe partial class VkDeviceCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 72)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(20)]
        internal uint queueCreateInfoCount;

        [FieldOffset(24)]
        internal global::System.IntPtr pQueueCreateInfos;

        [FieldOffset(32)]
        internal uint enabledLayerCount;

        [FieldOffset(40)]
        internal global::System.IntPtr ppEnabledLayerNames;

        [FieldOffset(48)]
        internal uint enabledExtensionCount;

        [FieldOffset(56)]
        internal global::System.IntPtr ppEnabledExtensionNames;

        [FieldOffset(64)]
        internal global::System.IntPtr pEnabledFeatures;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDeviceCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDeviceCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkDeviceCreateInfo __CreateInstance(global::VkDeviceCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkDeviceCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDeviceCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDeviceCreateInfo.__Internal));
        *(global::VkDeviceCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDeviceCreateInfo(global::VkDeviceCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDeviceCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDeviceCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDeviceCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDeviceCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDeviceCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDeviceCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDeviceCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkDeviceCreateInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkDeviceCreateInfo.__Internal*)__Instance)->flags = value;
        }
    }

    public uint QueueCreateInfoCount
    {
        get
        {
            return ((global::VkDeviceCreateInfo.__Internal*) __Instance)->queueCreateInfoCount;
        }

        set
        {
            ((global::VkDeviceCreateInfo.__Internal*)__Instance)->queueCreateInfoCount = value;
        }
    }

    public global::VkDeviceQueueCreateInfo PQueueCreateInfos
    {
        get
        {
            global::VkDeviceQueueCreateInfo __result0;
            if (((global::VkDeviceCreateInfo.__Internal*) __Instance)->pQueueCreateInfos == IntPtr.Zero) __result0 = null;
            else if (global::VkDeviceQueueCreateInfo.NativeToManagedMap.ContainsKey(((global::VkDeviceCreateInfo.__Internal*) __Instance)->pQueueCreateInfos))
                __result0 = (global::VkDeviceQueueCreateInfo) global::VkDeviceQueueCreateInfo.NativeToManagedMap[((global::VkDeviceCreateInfo.__Internal*) __Instance)->pQueueCreateInfos];
            else __result0 = global::VkDeviceQueueCreateInfo.__CreateInstance(((global::VkDeviceCreateInfo.__Internal*) __Instance)->pQueueCreateInfos);
            return __result0;
        }

        set
        {
            ((global::VkDeviceCreateInfo.__Internal*)__Instance)->pQueueCreateInfos = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint EnabledLayerCount
    {
        get
        {
            return ((global::VkDeviceCreateInfo.__Internal*) __Instance)->enabledLayerCount;
        }

        set
        {
            ((global::VkDeviceCreateInfo.__Internal*)__Instance)->enabledLayerCount = value;
        }
    }

    public char** PpEnabledLayerNames
    {
        get
        {
            return (char**) ((global::VkDeviceCreateInfo.__Internal*) __Instance)->ppEnabledLayerNames;
        }

        set
        {
            ((global::VkDeviceCreateInfo.__Internal*)__Instance)->ppEnabledLayerNames = (global::System.IntPtr) (sbyte**) value;
        }
    }

    public uint EnabledExtensionCount
    {
        get
        {
            return ((global::VkDeviceCreateInfo.__Internal*) __Instance)->enabledExtensionCount;
        }

        set
        {
            ((global::VkDeviceCreateInfo.__Internal*)__Instance)->enabledExtensionCount = value;
        }
    }

    public char** PpEnabledExtensionNames
    {
        get
        {
            return (char**) ((global::VkDeviceCreateInfo.__Internal*) __Instance)->ppEnabledExtensionNames;
        }

        set
        {
            ((global::VkDeviceCreateInfo.__Internal*)__Instance)->ppEnabledExtensionNames = (global::System.IntPtr) (sbyte**) value;
        }
    }

    public global::VkPhysicalDeviceFeatures PEnabledFeatures
    {
        get
        {
            global::VkPhysicalDeviceFeatures __result0;
            if (((global::VkDeviceCreateInfo.__Internal*) __Instance)->pEnabledFeatures == IntPtr.Zero) __result0 = null;
            else if (global::VkPhysicalDeviceFeatures.NativeToManagedMap.ContainsKey(((global::VkDeviceCreateInfo.__Internal*) __Instance)->pEnabledFeatures))
                __result0 = (global::VkPhysicalDeviceFeatures) global::VkPhysicalDeviceFeatures.NativeToManagedMap[((global::VkDeviceCreateInfo.__Internal*) __Instance)->pEnabledFeatures];
            else __result0 = global::VkPhysicalDeviceFeatures.__CreateInstance(((global::VkDeviceCreateInfo.__Internal*) __Instance)->pEnabledFeatures);
            return __result0;
        }

        set
        {
            ((global::VkDeviceCreateInfo.__Internal*)__Instance)->pEnabledFeatures = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkExtensionProperties : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 260)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal fixed sbyte extensionName[256];

        [FieldOffset(256)]
        internal uint specVersion;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkExtensionProperties> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkExtensionProperties>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkExtensionProperties __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkExtensionProperties(native.ToPointer(), skipVTables);
    }

    internal static global::VkExtensionProperties __CreateInstance(global::VkExtensionProperties.__Internal native, bool skipVTables = false)
    {
        return new global::VkExtensionProperties(native, skipVTables);
    }

    private static void* __CopyValue(global::VkExtensionProperties.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkExtensionProperties.__Internal));
        *(global::VkExtensionProperties.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkExtensionProperties(global::VkExtensionProperties.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkExtensionProperties(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkExtensionProperties()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkExtensionProperties __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public char[] ExtensionName
    {
        get
        {
            char[] __value = null;
            if (((global::VkExtensionProperties.__Internal*) __Instance)->extensionName != null)
            {
                __value = new char[256];
                for (int i = 0; i < 256; i++)
                    __value[i] = global::System.Convert.ToChar(((global::VkExtensionProperties.__Internal*) __Instance)->extensionName[i]);
            }
            return __value;
        }

        set
        {
            if (value != null)
            {
                for (int i = 0; i < 256; i++)
                    ((global::VkExtensionProperties.__Internal*)__Instance)->extensionName[i] = global::System.Convert.ToSByte(value[i]);
            }
        }
    }

    public uint SpecVersion
    {
        get
        {
            return ((global::VkExtensionProperties.__Internal*) __Instance)->specVersion;
        }

        set
        {
            ((global::VkExtensionProperties.__Internal*)__Instance)->specVersion = value;
        }
    }
}

public unsafe partial class VkLayerProperties : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 520)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal fixed sbyte layerName[256];

        [FieldOffset(256)]
        internal uint specVersion;

        [FieldOffset(260)]
        internal uint implementationVersion;

        [FieldOffset(264)]
        internal fixed sbyte description[256];
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkLayerProperties> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkLayerProperties>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkLayerProperties __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkLayerProperties(native.ToPointer(), skipVTables);
    }

    internal static global::VkLayerProperties __CreateInstance(global::VkLayerProperties.__Internal native, bool skipVTables = false)
    {
        return new global::VkLayerProperties(native, skipVTables);
    }

    private static void* __CopyValue(global::VkLayerProperties.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkLayerProperties.__Internal));
        *(global::VkLayerProperties.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkLayerProperties(global::VkLayerProperties.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkLayerProperties(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkLayerProperties()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkLayerProperties __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public char[] LayerName
    {
        get
        {
            char[] __value = null;
            if (((global::VkLayerProperties.__Internal*) __Instance)->layerName != null)
            {
                __value = new char[256];
                for (int i = 0; i < 256; i++)
                    __value[i] = global::System.Convert.ToChar(((global::VkLayerProperties.__Internal*) __Instance)->layerName[i]);
            }
            return __value;
        }

        set
        {
            if (value != null)
            {
                for (int i = 0; i < 256; i++)
                    ((global::VkLayerProperties.__Internal*)__Instance)->layerName[i] = global::System.Convert.ToSByte(value[i]);
            }
        }
    }

    public uint SpecVersion
    {
        get
        {
            return ((global::VkLayerProperties.__Internal*) __Instance)->specVersion;
        }

        set
        {
            ((global::VkLayerProperties.__Internal*)__Instance)->specVersion = value;
        }
    }

    public uint ImplementationVersion
    {
        get
        {
            return ((global::VkLayerProperties.__Internal*) __Instance)->implementationVersion;
        }

        set
        {
            ((global::VkLayerProperties.__Internal*)__Instance)->implementationVersion = value;
        }
    }

    public char[] Description
    {
        get
        {
            char[] __value = null;
            if (((global::VkLayerProperties.__Internal*) __Instance)->description != null)
            {
                __value = new char[256];
                for (int i = 0; i < 256; i++)
                    __value[i] = global::System.Convert.ToChar(((global::VkLayerProperties.__Internal*) __Instance)->description[i]);
            }
            return __value;
        }

        set
        {
            if (value != null)
            {
                for (int i = 0; i < 256; i++)
                    ((global::VkLayerProperties.__Internal*)__Instance)->description[i] = global::System.Convert.ToSByte(value[i]);
            }
        }
    }
}

public unsafe partial class VkSubmitInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 72)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint waitSemaphoreCount;

        [FieldOffset(24)]
        internal global::System.IntPtr pWaitSemaphores;

        [FieldOffset(32)]
        internal global::System.IntPtr pWaitDstStageMask;

        [FieldOffset(40)]
        internal uint commandBufferCount;

        [FieldOffset(48)]
        internal global::System.IntPtr pCommandBuffers;

        [FieldOffset(56)]
        internal uint signalSemaphoreCount;

        [FieldOffset(64)]
        internal global::System.IntPtr pSignalSemaphores;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSubmitInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSubmitInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSubmitInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSubmitInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkSubmitInfo __CreateInstance(global::VkSubmitInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkSubmitInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSubmitInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSubmitInfo.__Internal));
        *(global::VkSubmitInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSubmitInfo(global::VkSubmitInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSubmitInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSubmitInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkSubmitInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkSubmitInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkSubmitInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkSubmitInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkSubmitInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint WaitSemaphoreCount
    {
        get
        {
            return ((global::VkSubmitInfo.__Internal*) __Instance)->waitSemaphoreCount;
        }

        set
        {
            ((global::VkSubmitInfo.__Internal*)__Instance)->waitSemaphoreCount = value;
        }
    }

    public global::VkSemaphoreT PWaitSemaphores
    {
        get
        {
            global::VkSemaphoreT __result0;
            if (((global::VkSubmitInfo.__Internal*) __Instance)->pWaitSemaphores == IntPtr.Zero) __result0 = null;
            else if (global::VkSemaphoreT.NativeToManagedMap.ContainsKey(((global::VkSubmitInfo.__Internal*) __Instance)->pWaitSemaphores))
                __result0 = (global::VkSemaphoreT) global::VkSemaphoreT.NativeToManagedMap[((global::VkSubmitInfo.__Internal*) __Instance)->pWaitSemaphores];
            else __result0 = global::VkSemaphoreT.__CreateInstance(((global::VkSubmitInfo.__Internal*) __Instance)->pWaitSemaphores);
            return __result0;
        }

        set
        {
            ((global::VkSubmitInfo.__Internal*)__Instance)->pWaitSemaphores = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint* PWaitDstStageMask
    {
        get
        {
            return (uint*) ((global::VkSubmitInfo.__Internal*) __Instance)->pWaitDstStageMask;
        }

        set
        {
            ((global::VkSubmitInfo.__Internal*)__Instance)->pWaitDstStageMask = (global::System.IntPtr) value;
        }
    }

    public uint CommandBufferCount
    {
        get
        {
            return ((global::VkSubmitInfo.__Internal*) __Instance)->commandBufferCount;
        }

        set
        {
            ((global::VkSubmitInfo.__Internal*)__Instance)->commandBufferCount = value;
        }
    }

    public global::VkCommandBufferT PCommandBuffers
    {
        get
        {
            global::VkCommandBufferT __result0;
            if (((global::VkSubmitInfo.__Internal*) __Instance)->pCommandBuffers == IntPtr.Zero) __result0 = null;
            else if (global::VkCommandBufferT.NativeToManagedMap.ContainsKey(((global::VkSubmitInfo.__Internal*) __Instance)->pCommandBuffers))
                __result0 = (global::VkCommandBufferT) global::VkCommandBufferT.NativeToManagedMap[((global::VkSubmitInfo.__Internal*) __Instance)->pCommandBuffers];
            else __result0 = global::VkCommandBufferT.__CreateInstance(((global::VkSubmitInfo.__Internal*) __Instance)->pCommandBuffers);
            return __result0;
        }

        set
        {
            ((global::VkSubmitInfo.__Internal*)__Instance)->pCommandBuffers = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint SignalSemaphoreCount
    {
        get
        {
            return ((global::VkSubmitInfo.__Internal*) __Instance)->signalSemaphoreCount;
        }

        set
        {
            ((global::VkSubmitInfo.__Internal*)__Instance)->signalSemaphoreCount = value;
        }
    }

    public global::VkSemaphoreT PSignalSemaphores
    {
        get
        {
            global::VkSemaphoreT __result0;
            if (((global::VkSubmitInfo.__Internal*) __Instance)->pSignalSemaphores == IntPtr.Zero) __result0 = null;
            else if (global::VkSemaphoreT.NativeToManagedMap.ContainsKey(((global::VkSubmitInfo.__Internal*) __Instance)->pSignalSemaphores))
                __result0 = (global::VkSemaphoreT) global::VkSemaphoreT.NativeToManagedMap[((global::VkSubmitInfo.__Internal*) __Instance)->pSignalSemaphores];
            else __result0 = global::VkSemaphoreT.__CreateInstance(((global::VkSubmitInfo.__Internal*) __Instance)->pSignalSemaphores);
            return __result0;
        }

        set
        {
            ((global::VkSubmitInfo.__Internal*)__Instance)->pSignalSemaphores = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkMemoryAllocateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal ulong allocationSize;

        [FieldOffset(24)]
        internal uint memoryTypeIndex;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkMemoryAllocateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkMemoryAllocateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkMemoryAllocateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkMemoryAllocateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkMemoryAllocateInfo __CreateInstance(global::VkMemoryAllocateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkMemoryAllocateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkMemoryAllocateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkMemoryAllocateInfo.__Internal));
        *(global::VkMemoryAllocateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkMemoryAllocateInfo(global::VkMemoryAllocateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkMemoryAllocateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkMemoryAllocateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkMemoryAllocateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkMemoryAllocateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkMemoryAllocateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkMemoryAllocateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkMemoryAllocateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public ulong AllocationSize
    {
        get
        {
            return ((global::VkMemoryAllocateInfo.__Internal*) __Instance)->allocationSize;
        }

        set
        {
            ((global::VkMemoryAllocateInfo.__Internal*)__Instance)->allocationSize = value;
        }
    }

    public uint MemoryTypeIndex
    {
        get
        {
            return ((global::VkMemoryAllocateInfo.__Internal*) __Instance)->memoryTypeIndex;
        }

        set
        {
            ((global::VkMemoryAllocateInfo.__Internal*)__Instance)->memoryTypeIndex = value;
        }
    }
}

public unsafe partial class VkMappedMemoryRange : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::System.IntPtr memory;

        [FieldOffset(24)]
        internal ulong offset;

        [FieldOffset(32)]
        internal ulong size;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkMappedMemoryRange> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkMappedMemoryRange>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkMappedMemoryRange __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkMappedMemoryRange(native.ToPointer(), skipVTables);
    }

    internal static global::VkMappedMemoryRange __CreateInstance(global::VkMappedMemoryRange.__Internal native, bool skipVTables = false)
    {
        return new global::VkMappedMemoryRange(native, skipVTables);
    }

    private static void* __CopyValue(global::VkMappedMemoryRange.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkMappedMemoryRange.__Internal));
        *(global::VkMappedMemoryRange.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkMappedMemoryRange(global::VkMappedMemoryRange.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkMappedMemoryRange(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkMappedMemoryRange()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkMappedMemoryRange __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkMappedMemoryRange.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkMappedMemoryRange.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkMappedMemoryRange.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkMappedMemoryRange.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkDeviceMemoryT Memory
    {
        get
        {
            global::VkDeviceMemoryT __result0;
            if (((global::VkMappedMemoryRange.__Internal*) __Instance)->memory == IntPtr.Zero) __result0 = null;
            else if (global::VkDeviceMemoryT.NativeToManagedMap.ContainsKey(((global::VkMappedMemoryRange.__Internal*) __Instance)->memory))
                __result0 = (global::VkDeviceMemoryT) global::VkDeviceMemoryT.NativeToManagedMap[((global::VkMappedMemoryRange.__Internal*) __Instance)->memory];
            else __result0 = global::VkDeviceMemoryT.__CreateInstance(((global::VkMappedMemoryRange.__Internal*) __Instance)->memory);
            return __result0;
        }

        set
        {
            ((global::VkMappedMemoryRange.__Internal*)__Instance)->memory = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public ulong Offset
    {
        get
        {
            return ((global::VkMappedMemoryRange.__Internal*) __Instance)->offset;
        }

        set
        {
            ((global::VkMappedMemoryRange.__Internal*)__Instance)->offset = value;
        }
    }

    public ulong Size
    {
        get
        {
            return ((global::VkMappedMemoryRange.__Internal*) __Instance)->size;
        }

        set
        {
            ((global::VkMappedMemoryRange.__Internal*)__Instance)->size = value;
        }
    }
}

public unsafe partial class VkMemoryRequirements : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal ulong size;

        [FieldOffset(8)]
        internal ulong alignment;

        [FieldOffset(16)]
        internal uint memoryTypeBits;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkMemoryRequirements> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkMemoryRequirements>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkMemoryRequirements __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkMemoryRequirements(native.ToPointer(), skipVTables);
    }

    internal static global::VkMemoryRequirements __CreateInstance(global::VkMemoryRequirements.__Internal native, bool skipVTables = false)
    {
        return new global::VkMemoryRequirements(native, skipVTables);
    }

    private static void* __CopyValue(global::VkMemoryRequirements.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkMemoryRequirements.__Internal));
        *(global::VkMemoryRequirements.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkMemoryRequirements(global::VkMemoryRequirements.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkMemoryRequirements(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkMemoryRequirements()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkMemoryRequirements __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public ulong Size
    {
        get
        {
            return ((global::VkMemoryRequirements.__Internal*) __Instance)->size;
        }

        set
        {
            ((global::VkMemoryRequirements.__Internal*)__Instance)->size = value;
        }
    }

    public ulong Alignment
    {
        get
        {
            return ((global::VkMemoryRequirements.__Internal*) __Instance)->alignment;
        }

        set
        {
            ((global::VkMemoryRequirements.__Internal*)__Instance)->alignment = value;
        }
    }

    public uint MemoryTypeBits
    {
        get
        {
            return ((global::VkMemoryRequirements.__Internal*) __Instance)->memoryTypeBits;
        }

        set
        {
            ((global::VkMemoryRequirements.__Internal*)__Instance)->memoryTypeBits = value;
        }
    }
}

public unsafe partial class VkSparseImageFormatProperties : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 20)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint aspectMask;

        [FieldOffset(4)]
        internal global::VkExtent3D.__Internal imageGranularity;

        [FieldOffset(16)]
        internal uint flags;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSparseImageFormatProperties> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSparseImageFormatProperties>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSparseImageFormatProperties __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSparseImageFormatProperties(native.ToPointer(), skipVTables);
    }

    internal static global::VkSparseImageFormatProperties __CreateInstance(global::VkSparseImageFormatProperties.__Internal native, bool skipVTables = false)
    {
        return new global::VkSparseImageFormatProperties(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSparseImageFormatProperties.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSparseImageFormatProperties.__Internal));
        *(global::VkSparseImageFormatProperties.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSparseImageFormatProperties(global::VkSparseImageFormatProperties.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSparseImageFormatProperties(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSparseImageFormatProperties()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkSparseImageFormatProperties __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint AspectMask
    {
        get
        {
            return ((global::VkSparseImageFormatProperties.__Internal*) __Instance)->aspectMask;
        }

        set
        {
            ((global::VkSparseImageFormatProperties.__Internal*)__Instance)->aspectMask = value;
        }
    }

    public global::VkExtent3D ImageGranularity
    {
        get
        {
            return global::VkExtent3D.__CreateInstance(new global::System.IntPtr(&((global::VkSparseImageFormatProperties.__Internal*) __Instance)->imageGranularity));
        }

        set
        {
            ((global::VkSparseImageFormatProperties.__Internal*)__Instance)->imageGranularity = ReferenceEquals(value, null) ? new global::VkExtent3D.__Internal() : *(global::VkExtent3D.__Internal*) value.__Instance;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkSparseImageFormatProperties.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkSparseImageFormatProperties.__Internal*)__Instance)->flags = value;
        }
    }
}

public unsafe partial class VkSparseImageMemoryRequirements : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 48)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkSparseImageFormatProperties.__Internal formatProperties;

        [FieldOffset(20)]
        internal uint imageMipTailFirstLod;

        [FieldOffset(24)]
        internal ulong imageMipTailSize;

        [FieldOffset(32)]
        internal ulong imageMipTailOffset;

        [FieldOffset(40)]
        internal ulong imageMipTailStride;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSparseImageMemoryRequirements> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSparseImageMemoryRequirements>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSparseImageMemoryRequirements __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSparseImageMemoryRequirements(native.ToPointer(), skipVTables);
    }

    internal static global::VkSparseImageMemoryRequirements __CreateInstance(global::VkSparseImageMemoryRequirements.__Internal native, bool skipVTables = false)
    {
        return new global::VkSparseImageMemoryRequirements(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSparseImageMemoryRequirements.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSparseImageMemoryRequirements.__Internal));
        *(global::VkSparseImageMemoryRequirements.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSparseImageMemoryRequirements(global::VkSparseImageMemoryRequirements.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSparseImageMemoryRequirements(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSparseImageMemoryRequirements()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkSparseImageMemoryRequirements __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkSparseImageFormatProperties FormatProperties
    {
        get
        {
            return global::VkSparseImageFormatProperties.__CreateInstance(new global::System.IntPtr(&((global::VkSparseImageMemoryRequirements.__Internal*) __Instance)->formatProperties));
        }

        set
        {
            ((global::VkSparseImageMemoryRequirements.__Internal*)__Instance)->formatProperties = ReferenceEquals(value, null) ? new global::VkSparseImageFormatProperties.__Internal() : *(global::VkSparseImageFormatProperties.__Internal*) value.__Instance;
        }
    }

    public uint ImageMipTailFirstLod
    {
        get
        {
            return ((global::VkSparseImageMemoryRequirements.__Internal*) __Instance)->imageMipTailFirstLod;
        }

        set
        {
            ((global::VkSparseImageMemoryRequirements.__Internal*)__Instance)->imageMipTailFirstLod = value;
        }
    }

    public ulong ImageMipTailSize
    {
        get
        {
            return ((global::VkSparseImageMemoryRequirements.__Internal*) __Instance)->imageMipTailSize;
        }

        set
        {
            ((global::VkSparseImageMemoryRequirements.__Internal*)__Instance)->imageMipTailSize = value;
        }
    }

    public ulong ImageMipTailOffset
    {
        get
        {
            return ((global::VkSparseImageMemoryRequirements.__Internal*) __Instance)->imageMipTailOffset;
        }

        set
        {
            ((global::VkSparseImageMemoryRequirements.__Internal*)__Instance)->imageMipTailOffset = value;
        }
    }

    public ulong ImageMipTailStride
    {
        get
        {
            return ((global::VkSparseImageMemoryRequirements.__Internal*) __Instance)->imageMipTailStride;
        }

        set
        {
            ((global::VkSparseImageMemoryRequirements.__Internal*)__Instance)->imageMipTailStride = value;
        }
    }
}

public unsafe partial class VkSparseMemoryBind : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal ulong resourceOffset;

        [FieldOffset(8)]
        internal ulong size;

        [FieldOffset(16)]
        internal global::System.IntPtr memory;

        [FieldOffset(24)]
        internal ulong memoryOffset;

        [FieldOffset(32)]
        internal uint flags;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSparseMemoryBind> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSparseMemoryBind>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSparseMemoryBind __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSparseMemoryBind(native.ToPointer(), skipVTables);
    }

    internal static global::VkSparseMemoryBind __CreateInstance(global::VkSparseMemoryBind.__Internal native, bool skipVTables = false)
    {
        return new global::VkSparseMemoryBind(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSparseMemoryBind.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSparseMemoryBind.__Internal));
        *(global::VkSparseMemoryBind.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSparseMemoryBind(global::VkSparseMemoryBind.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSparseMemoryBind(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSparseMemoryBind()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkSparseMemoryBind __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public ulong ResourceOffset
    {
        get
        {
            return ((global::VkSparseMemoryBind.__Internal*) __Instance)->resourceOffset;
        }

        set
        {
            ((global::VkSparseMemoryBind.__Internal*)__Instance)->resourceOffset = value;
        }
    }

    public ulong Size
    {
        get
        {
            return ((global::VkSparseMemoryBind.__Internal*) __Instance)->size;
        }

        set
        {
            ((global::VkSparseMemoryBind.__Internal*)__Instance)->size = value;
        }
    }

    public global::VkDeviceMemoryT Memory
    {
        get
        {
            global::VkDeviceMemoryT __result0;
            if (((global::VkSparseMemoryBind.__Internal*) __Instance)->memory == IntPtr.Zero) __result0 = null;
            else if (global::VkDeviceMemoryT.NativeToManagedMap.ContainsKey(((global::VkSparseMemoryBind.__Internal*) __Instance)->memory))
                __result0 = (global::VkDeviceMemoryT) global::VkDeviceMemoryT.NativeToManagedMap[((global::VkSparseMemoryBind.__Internal*) __Instance)->memory];
            else __result0 = global::VkDeviceMemoryT.__CreateInstance(((global::VkSparseMemoryBind.__Internal*) __Instance)->memory);
            return __result0;
        }

        set
        {
            ((global::VkSparseMemoryBind.__Internal*)__Instance)->memory = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public ulong MemoryOffset
    {
        get
        {
            return ((global::VkSparseMemoryBind.__Internal*) __Instance)->memoryOffset;
        }

        set
        {
            ((global::VkSparseMemoryBind.__Internal*)__Instance)->memoryOffset = value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkSparseMemoryBind.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkSparseMemoryBind.__Internal*)__Instance)->flags = value;
        }
    }
}

public unsafe partial class VkSparseBufferMemoryBindInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::System.IntPtr buffer;

        [FieldOffset(8)]
        internal uint bindCount;

        [FieldOffset(16)]
        internal global::System.IntPtr pBinds;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSparseBufferMemoryBindInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSparseBufferMemoryBindInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSparseBufferMemoryBindInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSparseBufferMemoryBindInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkSparseBufferMemoryBindInfo __CreateInstance(global::VkSparseBufferMemoryBindInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkSparseBufferMemoryBindInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSparseBufferMemoryBindInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSparseBufferMemoryBindInfo.__Internal));
        *(global::VkSparseBufferMemoryBindInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSparseBufferMemoryBindInfo(global::VkSparseBufferMemoryBindInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSparseBufferMemoryBindInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSparseBufferMemoryBindInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkSparseBufferMemoryBindInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkBufferT Buffer
    {
        get
        {
            global::VkBufferT __result0;
            if (((global::VkSparseBufferMemoryBindInfo.__Internal*) __Instance)->buffer == IntPtr.Zero) __result0 = null;
            else if (global::VkBufferT.NativeToManagedMap.ContainsKey(((global::VkSparseBufferMemoryBindInfo.__Internal*) __Instance)->buffer))
                __result0 = (global::VkBufferT) global::VkBufferT.NativeToManagedMap[((global::VkSparseBufferMemoryBindInfo.__Internal*) __Instance)->buffer];
            else __result0 = global::VkBufferT.__CreateInstance(((global::VkSparseBufferMemoryBindInfo.__Internal*) __Instance)->buffer);
            return __result0;
        }

        set
        {
            ((global::VkSparseBufferMemoryBindInfo.__Internal*)__Instance)->buffer = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint BindCount
    {
        get
        {
            return ((global::VkSparseBufferMemoryBindInfo.__Internal*) __Instance)->bindCount;
        }

        set
        {
            ((global::VkSparseBufferMemoryBindInfo.__Internal*)__Instance)->bindCount = value;
        }
    }

    public global::VkSparseMemoryBind PBinds
    {
        get
        {
            global::VkSparseMemoryBind __result0;
            if (((global::VkSparseBufferMemoryBindInfo.__Internal*) __Instance)->pBinds == IntPtr.Zero) __result0 = null;
            else if (global::VkSparseMemoryBind.NativeToManagedMap.ContainsKey(((global::VkSparseBufferMemoryBindInfo.__Internal*) __Instance)->pBinds))
                __result0 = (global::VkSparseMemoryBind) global::VkSparseMemoryBind.NativeToManagedMap[((global::VkSparseBufferMemoryBindInfo.__Internal*) __Instance)->pBinds];
            else __result0 = global::VkSparseMemoryBind.__CreateInstance(((global::VkSparseBufferMemoryBindInfo.__Internal*) __Instance)->pBinds);
            return __result0;
        }

        set
        {
            ((global::VkSparseBufferMemoryBindInfo.__Internal*)__Instance)->pBinds = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkSparseImageOpaqueMemoryBindInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::System.IntPtr image;

        [FieldOffset(8)]
        internal uint bindCount;

        [FieldOffset(16)]
        internal global::System.IntPtr pBinds;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSparseImageOpaqueMemoryBindInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSparseImageOpaqueMemoryBindInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSparseImageOpaqueMemoryBindInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSparseImageOpaqueMemoryBindInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkSparseImageOpaqueMemoryBindInfo __CreateInstance(global::VkSparseImageOpaqueMemoryBindInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkSparseImageOpaqueMemoryBindInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSparseImageOpaqueMemoryBindInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSparseImageOpaqueMemoryBindInfo.__Internal));
        *(global::VkSparseImageOpaqueMemoryBindInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSparseImageOpaqueMemoryBindInfo(global::VkSparseImageOpaqueMemoryBindInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSparseImageOpaqueMemoryBindInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSparseImageOpaqueMemoryBindInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkSparseImageOpaqueMemoryBindInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkImageT Image
    {
        get
        {
            global::VkImageT __result0;
            if (((global::VkSparseImageOpaqueMemoryBindInfo.__Internal*) __Instance)->image == IntPtr.Zero) __result0 = null;
            else if (global::VkImageT.NativeToManagedMap.ContainsKey(((global::VkSparseImageOpaqueMemoryBindInfo.__Internal*) __Instance)->image))
                __result0 = (global::VkImageT) global::VkImageT.NativeToManagedMap[((global::VkSparseImageOpaqueMemoryBindInfo.__Internal*) __Instance)->image];
            else __result0 = global::VkImageT.__CreateInstance(((global::VkSparseImageOpaqueMemoryBindInfo.__Internal*) __Instance)->image);
            return __result0;
        }

        set
        {
            ((global::VkSparseImageOpaqueMemoryBindInfo.__Internal*)__Instance)->image = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint BindCount
    {
        get
        {
            return ((global::VkSparseImageOpaqueMemoryBindInfo.__Internal*) __Instance)->bindCount;
        }

        set
        {
            ((global::VkSparseImageOpaqueMemoryBindInfo.__Internal*)__Instance)->bindCount = value;
        }
    }

    public global::VkSparseMemoryBind PBinds
    {
        get
        {
            global::VkSparseMemoryBind __result0;
            if (((global::VkSparseImageOpaqueMemoryBindInfo.__Internal*) __Instance)->pBinds == IntPtr.Zero) __result0 = null;
            else if (global::VkSparseMemoryBind.NativeToManagedMap.ContainsKey(((global::VkSparseImageOpaqueMemoryBindInfo.__Internal*) __Instance)->pBinds))
                __result0 = (global::VkSparseMemoryBind) global::VkSparseMemoryBind.NativeToManagedMap[((global::VkSparseImageOpaqueMemoryBindInfo.__Internal*) __Instance)->pBinds];
            else __result0 = global::VkSparseMemoryBind.__CreateInstance(((global::VkSparseImageOpaqueMemoryBindInfo.__Internal*) __Instance)->pBinds);
            return __result0;
        }

        set
        {
            ((global::VkSparseImageOpaqueMemoryBindInfo.__Internal*)__Instance)->pBinds = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkImageSubresource : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 12)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint aspectMask;

        [FieldOffset(4)]
        internal uint mipLevel;

        [FieldOffset(8)]
        internal uint arrayLayer;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageSubresource> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageSubresource>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkImageSubresource __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkImageSubresource(native.ToPointer(), skipVTables);
    }

    internal static global::VkImageSubresource __CreateInstance(global::VkImageSubresource.__Internal native, bool skipVTables = false)
    {
        return new global::VkImageSubresource(native, skipVTables);
    }

    private static void* __CopyValue(global::VkImageSubresource.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkImageSubresource.__Internal));
        *(global::VkImageSubresource.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkImageSubresource(global::VkImageSubresource.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkImageSubresource(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkImageSubresource()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkImageSubresource __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint AspectMask
    {
        get
        {
            return ((global::VkImageSubresource.__Internal*) __Instance)->aspectMask;
        }

        set
        {
            ((global::VkImageSubresource.__Internal*)__Instance)->aspectMask = value;
        }
    }

    public uint MipLevel
    {
        get
        {
            return ((global::VkImageSubresource.__Internal*) __Instance)->mipLevel;
        }

        set
        {
            ((global::VkImageSubresource.__Internal*)__Instance)->mipLevel = value;
        }
    }

    public uint ArrayLayer
    {
        get
        {
            return ((global::VkImageSubresource.__Internal*) __Instance)->arrayLayer;
        }

        set
        {
            ((global::VkImageSubresource.__Internal*)__Instance)->arrayLayer = value;
        }
    }
}

public unsafe partial class VkOffset3D : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 12)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal int x;

        [FieldOffset(4)]
        internal int y;

        [FieldOffset(8)]
        internal int z;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkOffset3D> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkOffset3D>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkOffset3D __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkOffset3D(native.ToPointer(), skipVTables);
    }

    internal static global::VkOffset3D __CreateInstance(global::VkOffset3D.__Internal native, bool skipVTables = false)
    {
        return new global::VkOffset3D(native, skipVTables);
    }

    private static void* __CopyValue(global::VkOffset3D.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkOffset3D.__Internal));
        *(global::VkOffset3D.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkOffset3D(global::VkOffset3D.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkOffset3D(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkOffset3D()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkOffset3D __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public int X
    {
        get
        {
            return ((global::VkOffset3D.__Internal*) __Instance)->x;
        }

        set
        {
            ((global::VkOffset3D.__Internal*)__Instance)->x = value;
        }
    }

    public int Y
    {
        get
        {
            return ((global::VkOffset3D.__Internal*) __Instance)->y;
        }

        set
        {
            ((global::VkOffset3D.__Internal*)__Instance)->y = value;
        }
    }

    public int Z
    {
        get
        {
            return ((global::VkOffset3D.__Internal*) __Instance)->z;
        }

        set
        {
            ((global::VkOffset3D.__Internal*)__Instance)->z = value;
        }
    }
}

public unsafe partial class VkSparseImageMemoryBind : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 64)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkImageSubresource.__Internal subresource;

        [FieldOffset(12)]
        internal global::VkOffset3D.__Internal offset;

        [FieldOffset(24)]
        internal global::VkExtent3D.__Internal extent;

        [FieldOffset(40)]
        internal global::System.IntPtr memory;

        [FieldOffset(48)]
        internal ulong memoryOffset;

        [FieldOffset(56)]
        internal uint flags;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSparseImageMemoryBind> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSparseImageMemoryBind>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSparseImageMemoryBind __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSparseImageMemoryBind(native.ToPointer(), skipVTables);
    }

    internal static global::VkSparseImageMemoryBind __CreateInstance(global::VkSparseImageMemoryBind.__Internal native, bool skipVTables = false)
    {
        return new global::VkSparseImageMemoryBind(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSparseImageMemoryBind.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSparseImageMemoryBind.__Internal));
        *(global::VkSparseImageMemoryBind.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSparseImageMemoryBind(global::VkSparseImageMemoryBind.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSparseImageMemoryBind(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSparseImageMemoryBind()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkSparseImageMemoryBind __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkImageSubresource Subresource
    {
        get
        {
            return global::VkImageSubresource.__CreateInstance(new global::System.IntPtr(&((global::VkSparseImageMemoryBind.__Internal*) __Instance)->subresource));
        }

        set
        {
            ((global::VkSparseImageMemoryBind.__Internal*)__Instance)->subresource = ReferenceEquals(value, null) ? new global::VkImageSubresource.__Internal() : *(global::VkImageSubresource.__Internal*) value.__Instance;
        }
    }

    public global::VkOffset3D Offset
    {
        get
        {
            return global::VkOffset3D.__CreateInstance(new global::System.IntPtr(&((global::VkSparseImageMemoryBind.__Internal*) __Instance)->offset));
        }

        set
        {
            ((global::VkSparseImageMemoryBind.__Internal*)__Instance)->offset = ReferenceEquals(value, null) ? new global::VkOffset3D.__Internal() : *(global::VkOffset3D.__Internal*) value.__Instance;
        }
    }

    public global::VkExtent3D Extent
    {
        get
        {
            return global::VkExtent3D.__CreateInstance(new global::System.IntPtr(&((global::VkSparseImageMemoryBind.__Internal*) __Instance)->extent));
        }

        set
        {
            ((global::VkSparseImageMemoryBind.__Internal*)__Instance)->extent = ReferenceEquals(value, null) ? new global::VkExtent3D.__Internal() : *(global::VkExtent3D.__Internal*) value.__Instance;
        }
    }

    public global::VkDeviceMemoryT Memory
    {
        get
        {
            global::VkDeviceMemoryT __result0;
            if (((global::VkSparseImageMemoryBind.__Internal*) __Instance)->memory == IntPtr.Zero) __result0 = null;
            else if (global::VkDeviceMemoryT.NativeToManagedMap.ContainsKey(((global::VkSparseImageMemoryBind.__Internal*) __Instance)->memory))
                __result0 = (global::VkDeviceMemoryT) global::VkDeviceMemoryT.NativeToManagedMap[((global::VkSparseImageMemoryBind.__Internal*) __Instance)->memory];
            else __result0 = global::VkDeviceMemoryT.__CreateInstance(((global::VkSparseImageMemoryBind.__Internal*) __Instance)->memory);
            return __result0;
        }

        set
        {
            ((global::VkSparseImageMemoryBind.__Internal*)__Instance)->memory = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public ulong MemoryOffset
    {
        get
        {
            return ((global::VkSparseImageMemoryBind.__Internal*) __Instance)->memoryOffset;
        }

        set
        {
            ((global::VkSparseImageMemoryBind.__Internal*)__Instance)->memoryOffset = value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkSparseImageMemoryBind.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkSparseImageMemoryBind.__Internal*)__Instance)->flags = value;
        }
    }
}

public unsafe partial class VkSparseImageMemoryBindInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::System.IntPtr image;

        [FieldOffset(8)]
        internal uint bindCount;

        [FieldOffset(16)]
        internal global::System.IntPtr pBinds;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSparseImageMemoryBindInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSparseImageMemoryBindInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSparseImageMemoryBindInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSparseImageMemoryBindInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkSparseImageMemoryBindInfo __CreateInstance(global::VkSparseImageMemoryBindInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkSparseImageMemoryBindInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSparseImageMemoryBindInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSparseImageMemoryBindInfo.__Internal));
        *(global::VkSparseImageMemoryBindInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSparseImageMemoryBindInfo(global::VkSparseImageMemoryBindInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSparseImageMemoryBindInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSparseImageMemoryBindInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkSparseImageMemoryBindInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkImageT Image
    {
        get
        {
            global::VkImageT __result0;
            if (((global::VkSparseImageMemoryBindInfo.__Internal*) __Instance)->image == IntPtr.Zero) __result0 = null;
            else if (global::VkImageT.NativeToManagedMap.ContainsKey(((global::VkSparseImageMemoryBindInfo.__Internal*) __Instance)->image))
                __result0 = (global::VkImageT) global::VkImageT.NativeToManagedMap[((global::VkSparseImageMemoryBindInfo.__Internal*) __Instance)->image];
            else __result0 = global::VkImageT.__CreateInstance(((global::VkSparseImageMemoryBindInfo.__Internal*) __Instance)->image);
            return __result0;
        }

        set
        {
            ((global::VkSparseImageMemoryBindInfo.__Internal*)__Instance)->image = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint BindCount
    {
        get
        {
            return ((global::VkSparseImageMemoryBindInfo.__Internal*) __Instance)->bindCount;
        }

        set
        {
            ((global::VkSparseImageMemoryBindInfo.__Internal*)__Instance)->bindCount = value;
        }
    }

    public global::VkSparseImageMemoryBind PBinds
    {
        get
        {
            global::VkSparseImageMemoryBind __result0;
            if (((global::VkSparseImageMemoryBindInfo.__Internal*) __Instance)->pBinds == IntPtr.Zero) __result0 = null;
            else if (global::VkSparseImageMemoryBind.NativeToManagedMap.ContainsKey(((global::VkSparseImageMemoryBindInfo.__Internal*) __Instance)->pBinds))
                __result0 = (global::VkSparseImageMemoryBind) global::VkSparseImageMemoryBind.NativeToManagedMap[((global::VkSparseImageMemoryBindInfo.__Internal*) __Instance)->pBinds];
            else __result0 = global::VkSparseImageMemoryBind.__CreateInstance(((global::VkSparseImageMemoryBindInfo.__Internal*) __Instance)->pBinds);
            return __result0;
        }

        set
        {
            ((global::VkSparseImageMemoryBindInfo.__Internal*)__Instance)->pBinds = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkBindSparseInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 96)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint waitSemaphoreCount;

        [FieldOffset(24)]
        internal global::System.IntPtr pWaitSemaphores;

        [FieldOffset(32)]
        internal uint bufferBindCount;

        [FieldOffset(40)]
        internal global::System.IntPtr pBufferBinds;

        [FieldOffset(48)]
        internal uint imageOpaqueBindCount;

        [FieldOffset(56)]
        internal global::System.IntPtr pImageOpaqueBinds;

        [FieldOffset(64)]
        internal uint imageBindCount;

        [FieldOffset(72)]
        internal global::System.IntPtr pImageBinds;

        [FieldOffset(80)]
        internal uint signalSemaphoreCount;

        [FieldOffset(88)]
        internal global::System.IntPtr pSignalSemaphores;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkBindSparseInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkBindSparseInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkBindSparseInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkBindSparseInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkBindSparseInfo __CreateInstance(global::VkBindSparseInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkBindSparseInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkBindSparseInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkBindSparseInfo.__Internal));
        *(global::VkBindSparseInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkBindSparseInfo(global::VkBindSparseInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkBindSparseInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkBindSparseInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkBindSparseInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkBindSparseInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkBindSparseInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkBindSparseInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkBindSparseInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint WaitSemaphoreCount
    {
        get
        {
            return ((global::VkBindSparseInfo.__Internal*) __Instance)->waitSemaphoreCount;
        }

        set
        {
            ((global::VkBindSparseInfo.__Internal*)__Instance)->waitSemaphoreCount = value;
        }
    }

    public global::VkSemaphoreT PWaitSemaphores
    {
        get
        {
            global::VkSemaphoreT __result0;
            if (((global::VkBindSparseInfo.__Internal*) __Instance)->pWaitSemaphores == IntPtr.Zero) __result0 = null;
            else if (global::VkSemaphoreT.NativeToManagedMap.ContainsKey(((global::VkBindSparseInfo.__Internal*) __Instance)->pWaitSemaphores))
                __result0 = (global::VkSemaphoreT) global::VkSemaphoreT.NativeToManagedMap[((global::VkBindSparseInfo.__Internal*) __Instance)->pWaitSemaphores];
            else __result0 = global::VkSemaphoreT.__CreateInstance(((global::VkBindSparseInfo.__Internal*) __Instance)->pWaitSemaphores);
            return __result0;
        }

        set
        {
            ((global::VkBindSparseInfo.__Internal*)__Instance)->pWaitSemaphores = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint BufferBindCount
    {
        get
        {
            return ((global::VkBindSparseInfo.__Internal*) __Instance)->bufferBindCount;
        }

        set
        {
            ((global::VkBindSparseInfo.__Internal*)__Instance)->bufferBindCount = value;
        }
    }

    public global::VkSparseBufferMemoryBindInfo PBufferBinds
    {
        get
        {
            global::VkSparseBufferMemoryBindInfo __result0;
            if (((global::VkBindSparseInfo.__Internal*) __Instance)->pBufferBinds == IntPtr.Zero) __result0 = null;
            else if (global::VkSparseBufferMemoryBindInfo.NativeToManagedMap.ContainsKey(((global::VkBindSparseInfo.__Internal*) __Instance)->pBufferBinds))
                __result0 = (global::VkSparseBufferMemoryBindInfo) global::VkSparseBufferMemoryBindInfo.NativeToManagedMap[((global::VkBindSparseInfo.__Internal*) __Instance)->pBufferBinds];
            else __result0 = global::VkSparseBufferMemoryBindInfo.__CreateInstance(((global::VkBindSparseInfo.__Internal*) __Instance)->pBufferBinds);
            return __result0;
        }

        set
        {
            ((global::VkBindSparseInfo.__Internal*)__Instance)->pBufferBinds = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint ImageOpaqueBindCount
    {
        get
        {
            return ((global::VkBindSparseInfo.__Internal*) __Instance)->imageOpaqueBindCount;
        }

        set
        {
            ((global::VkBindSparseInfo.__Internal*)__Instance)->imageOpaqueBindCount = value;
        }
    }

    public global::VkSparseImageOpaqueMemoryBindInfo PImageOpaqueBinds
    {
        get
        {
            global::VkSparseImageOpaqueMemoryBindInfo __result0;
            if (((global::VkBindSparseInfo.__Internal*) __Instance)->pImageOpaqueBinds == IntPtr.Zero) __result0 = null;
            else if (global::VkSparseImageOpaqueMemoryBindInfo.NativeToManagedMap.ContainsKey(((global::VkBindSparseInfo.__Internal*) __Instance)->pImageOpaqueBinds))
                __result0 = (global::VkSparseImageOpaqueMemoryBindInfo) global::VkSparseImageOpaqueMemoryBindInfo.NativeToManagedMap[((global::VkBindSparseInfo.__Internal*) __Instance)->pImageOpaqueBinds];
            else __result0 = global::VkSparseImageOpaqueMemoryBindInfo.__CreateInstance(((global::VkBindSparseInfo.__Internal*) __Instance)->pImageOpaqueBinds);
            return __result0;
        }

        set
        {
            ((global::VkBindSparseInfo.__Internal*)__Instance)->pImageOpaqueBinds = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint ImageBindCount
    {
        get
        {
            return ((global::VkBindSparseInfo.__Internal*) __Instance)->imageBindCount;
        }

        set
        {
            ((global::VkBindSparseInfo.__Internal*)__Instance)->imageBindCount = value;
        }
    }

    public global::VkSparseImageMemoryBindInfo PImageBinds
    {
        get
        {
            global::VkSparseImageMemoryBindInfo __result0;
            if (((global::VkBindSparseInfo.__Internal*) __Instance)->pImageBinds == IntPtr.Zero) __result0 = null;
            else if (global::VkSparseImageMemoryBindInfo.NativeToManagedMap.ContainsKey(((global::VkBindSparseInfo.__Internal*) __Instance)->pImageBinds))
                __result0 = (global::VkSparseImageMemoryBindInfo) global::VkSparseImageMemoryBindInfo.NativeToManagedMap[((global::VkBindSparseInfo.__Internal*) __Instance)->pImageBinds];
            else __result0 = global::VkSparseImageMemoryBindInfo.__CreateInstance(((global::VkBindSparseInfo.__Internal*) __Instance)->pImageBinds);
            return __result0;
        }

        set
        {
            ((global::VkBindSparseInfo.__Internal*)__Instance)->pImageBinds = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint SignalSemaphoreCount
    {
        get
        {
            return ((global::VkBindSparseInfo.__Internal*) __Instance)->signalSemaphoreCount;
        }

        set
        {
            ((global::VkBindSparseInfo.__Internal*)__Instance)->signalSemaphoreCount = value;
        }
    }

    public global::VkSemaphoreT PSignalSemaphores
    {
        get
        {
            global::VkSemaphoreT __result0;
            if (((global::VkBindSparseInfo.__Internal*) __Instance)->pSignalSemaphores == IntPtr.Zero) __result0 = null;
            else if (global::VkSemaphoreT.NativeToManagedMap.ContainsKey(((global::VkBindSparseInfo.__Internal*) __Instance)->pSignalSemaphores))
                __result0 = (global::VkSemaphoreT) global::VkSemaphoreT.NativeToManagedMap[((global::VkBindSparseInfo.__Internal*) __Instance)->pSignalSemaphores];
            else __result0 = global::VkSemaphoreT.__CreateInstance(((global::VkBindSparseInfo.__Internal*) __Instance)->pSignalSemaphores);
            return __result0;
        }

        set
        {
            ((global::VkBindSparseInfo.__Internal*)__Instance)->pSignalSemaphores = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkFenceCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkFenceCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkFenceCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkFenceCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkFenceCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkFenceCreateInfo __CreateInstance(global::VkFenceCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkFenceCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkFenceCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkFenceCreateInfo.__Internal));
        *(global::VkFenceCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkFenceCreateInfo(global::VkFenceCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkFenceCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkFenceCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkFenceCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkFenceCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkFenceCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkFenceCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkFenceCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkFenceCreateInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkFenceCreateInfo.__Internal*)__Instance)->flags = value;
        }
    }
}

public unsafe partial class VkSemaphoreCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSemaphoreCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSemaphoreCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSemaphoreCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSemaphoreCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkSemaphoreCreateInfo __CreateInstance(global::VkSemaphoreCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkSemaphoreCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSemaphoreCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSemaphoreCreateInfo.__Internal));
        *(global::VkSemaphoreCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSemaphoreCreateInfo(global::VkSemaphoreCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSemaphoreCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSemaphoreCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkSemaphoreCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkSemaphoreCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkSemaphoreCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkSemaphoreCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkSemaphoreCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkSemaphoreCreateInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkSemaphoreCreateInfo.__Internal*)__Instance)->flags = value;
        }
    }
}

public unsafe partial class VkEventCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkEventCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkEventCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkEventCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkEventCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkEventCreateInfo __CreateInstance(global::VkEventCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkEventCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkEventCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkEventCreateInfo.__Internal));
        *(global::VkEventCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkEventCreateInfo(global::VkEventCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkEventCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkEventCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkEventCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkEventCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkEventCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkEventCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkEventCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkEventCreateInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkEventCreateInfo.__Internal*)__Instance)->flags = value;
        }
    }
}

public unsafe partial class VkQueryPoolCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(20)]
        internal global::VkQueryType queryType;

        [FieldOffset(24)]
        internal uint queryCount;

        [FieldOffset(28)]
        internal uint pipelineStatistics;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkQueryPoolCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkQueryPoolCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkQueryPoolCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkQueryPoolCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkQueryPoolCreateInfo __CreateInstance(global::VkQueryPoolCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkQueryPoolCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkQueryPoolCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkQueryPoolCreateInfo.__Internal));
        *(global::VkQueryPoolCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkQueryPoolCreateInfo(global::VkQueryPoolCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkQueryPoolCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkQueryPoolCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkQueryPoolCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkQueryPoolCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkQueryPoolCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkQueryPoolCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkQueryPoolCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkQueryPoolCreateInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkQueryPoolCreateInfo.__Internal*)__Instance)->flags = value;
        }
    }

    public global::VkQueryType QueryType
    {
        get
        {
            return ((global::VkQueryPoolCreateInfo.__Internal*) __Instance)->queryType;
        }

        set
        {
            ((global::VkQueryPoolCreateInfo.__Internal*)__Instance)->queryType = value;
        }
    }

    public uint QueryCount
    {
        get
        {
            return ((global::VkQueryPoolCreateInfo.__Internal*) __Instance)->queryCount;
        }

        set
        {
            ((global::VkQueryPoolCreateInfo.__Internal*)__Instance)->queryCount = value;
        }
    }

    public uint PipelineStatistics
    {
        get
        {
            return ((global::VkQueryPoolCreateInfo.__Internal*) __Instance)->pipelineStatistics;
        }

        set
        {
            ((global::VkQueryPoolCreateInfo.__Internal*)__Instance)->pipelineStatistics = value;
        }
    }
}

public unsafe partial class VkBufferCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 56)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(24)]
        internal ulong size;

        [FieldOffset(32)]
        internal uint usage;

        [FieldOffset(36)]
        internal global::VkSharingMode sharingMode;

        [FieldOffset(40)]
        internal uint queueFamilyIndexCount;

        [FieldOffset(48)]
        internal global::System.IntPtr pQueueFamilyIndices;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkBufferCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkBufferCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkBufferCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkBufferCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkBufferCreateInfo __CreateInstance(global::VkBufferCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkBufferCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkBufferCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkBufferCreateInfo.__Internal));
        *(global::VkBufferCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkBufferCreateInfo(global::VkBufferCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkBufferCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkBufferCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkBufferCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkBufferCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkBufferCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkBufferCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkBufferCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkBufferCreateInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkBufferCreateInfo.__Internal*)__Instance)->flags = value;
        }
    }

    public ulong Size
    {
        get
        {
            return ((global::VkBufferCreateInfo.__Internal*) __Instance)->size;
        }

        set
        {
            ((global::VkBufferCreateInfo.__Internal*)__Instance)->size = value;
        }
    }

    public uint Usage
    {
        get
        {
            return ((global::VkBufferCreateInfo.__Internal*) __Instance)->usage;
        }

        set
        {
            ((global::VkBufferCreateInfo.__Internal*)__Instance)->usage = value;
        }
    }

    public global::VkSharingMode SharingMode
    {
        get
        {
            return ((global::VkBufferCreateInfo.__Internal*) __Instance)->sharingMode;
        }

        set
        {
            ((global::VkBufferCreateInfo.__Internal*)__Instance)->sharingMode = value;
        }
    }

    public uint QueueFamilyIndexCount
    {
        get
        {
            return ((global::VkBufferCreateInfo.__Internal*) __Instance)->queueFamilyIndexCount;
        }

        set
        {
            ((global::VkBufferCreateInfo.__Internal*)__Instance)->queueFamilyIndexCount = value;
        }
    }

    public uint* PQueueFamilyIndices
    {
        get
        {
            return (uint*) ((global::VkBufferCreateInfo.__Internal*) __Instance)->pQueueFamilyIndices;
        }

        set
        {
            ((global::VkBufferCreateInfo.__Internal*)__Instance)->pQueueFamilyIndices = (global::System.IntPtr) value;
        }
    }
}

public unsafe partial class VkBufferViewCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 56)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(24)]
        internal global::System.IntPtr buffer;

        [FieldOffset(32)]
        internal global::VkFormat format;

        [FieldOffset(40)]
        internal ulong offset;

        [FieldOffset(48)]
        internal ulong range;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkBufferViewCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkBufferViewCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkBufferViewCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkBufferViewCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkBufferViewCreateInfo __CreateInstance(global::VkBufferViewCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkBufferViewCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkBufferViewCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkBufferViewCreateInfo.__Internal));
        *(global::VkBufferViewCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkBufferViewCreateInfo(global::VkBufferViewCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkBufferViewCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkBufferViewCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkBufferViewCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkBufferViewCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkBufferViewCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkBufferViewCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkBufferViewCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkBufferViewCreateInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkBufferViewCreateInfo.__Internal*)__Instance)->flags = value;
        }
    }

    public global::VkBufferT Buffer
    {
        get
        {
            global::VkBufferT __result0;
            if (((global::VkBufferViewCreateInfo.__Internal*) __Instance)->buffer == IntPtr.Zero) __result0 = null;
            else if (global::VkBufferT.NativeToManagedMap.ContainsKey(((global::VkBufferViewCreateInfo.__Internal*) __Instance)->buffer))
                __result0 = (global::VkBufferT) global::VkBufferT.NativeToManagedMap[((global::VkBufferViewCreateInfo.__Internal*) __Instance)->buffer];
            else __result0 = global::VkBufferT.__CreateInstance(((global::VkBufferViewCreateInfo.__Internal*) __Instance)->buffer);
            return __result0;
        }

        set
        {
            ((global::VkBufferViewCreateInfo.__Internal*)__Instance)->buffer = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkFormat Format
    {
        get
        {
            return ((global::VkBufferViewCreateInfo.__Internal*) __Instance)->format;
        }

        set
        {
            ((global::VkBufferViewCreateInfo.__Internal*)__Instance)->format = value;
        }
    }

    public ulong Offset
    {
        get
        {
            return ((global::VkBufferViewCreateInfo.__Internal*) __Instance)->offset;
        }

        set
        {
            ((global::VkBufferViewCreateInfo.__Internal*)__Instance)->offset = value;
        }
    }

    public ulong Range
    {
        get
        {
            return ((global::VkBufferViewCreateInfo.__Internal*) __Instance)->range;
        }

        set
        {
            ((global::VkBufferViewCreateInfo.__Internal*)__Instance)->range = value;
        }
    }
}

public unsafe partial class VkImageCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 88)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(20)]
        internal global::VkImageType imageType;

        [FieldOffset(24)]
        internal global::VkFormat format;

        [FieldOffset(28)]
        internal global::VkExtent3D.__Internal extent;

        [FieldOffset(40)]
        internal uint mipLevels;

        [FieldOffset(44)]
        internal uint arrayLayers;

        [FieldOffset(48)]
        internal global::VkSampleCountFlagBits samples;

        [FieldOffset(52)]
        internal global::VkImageTiling tiling;

        [FieldOffset(56)]
        internal uint usage;

        [FieldOffset(60)]
        internal global::VkSharingMode sharingMode;

        [FieldOffset(64)]
        internal uint queueFamilyIndexCount;

        [FieldOffset(72)]
        internal global::System.IntPtr pQueueFamilyIndices;

        [FieldOffset(80)]
        internal global::VkImageLayout initialLayout;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkImageCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkImageCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkImageCreateInfo __CreateInstance(global::VkImageCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkImageCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkImageCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkImageCreateInfo.__Internal));
        *(global::VkImageCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkImageCreateInfo(global::VkImageCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkImageCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkImageCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkImageCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkImageCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkImageCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkImageCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkImageCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkImageCreateInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkImageCreateInfo.__Internal*)__Instance)->flags = value;
        }
    }

    public global::VkImageType ImageType
    {
        get
        {
            return ((global::VkImageCreateInfo.__Internal*) __Instance)->imageType;
        }

        set
        {
            ((global::VkImageCreateInfo.__Internal*)__Instance)->imageType = value;
        }
    }

    public global::VkFormat Format
    {
        get
        {
            return ((global::VkImageCreateInfo.__Internal*) __Instance)->format;
        }

        set
        {
            ((global::VkImageCreateInfo.__Internal*)__Instance)->format = value;
        }
    }

    public global::VkExtent3D Extent
    {
        get
        {
            return global::VkExtent3D.__CreateInstance(new global::System.IntPtr(&((global::VkImageCreateInfo.__Internal*) __Instance)->extent));
        }

        set
        {
            ((global::VkImageCreateInfo.__Internal*)__Instance)->extent = ReferenceEquals(value, null) ? new global::VkExtent3D.__Internal() : *(global::VkExtent3D.__Internal*) value.__Instance;
        }
    }

    public uint MipLevels
    {
        get
        {
            return ((global::VkImageCreateInfo.__Internal*) __Instance)->mipLevels;
        }

        set
        {
            ((global::VkImageCreateInfo.__Internal*)__Instance)->mipLevels = value;
        }
    }

    public uint ArrayLayers
    {
        get
        {
            return ((global::VkImageCreateInfo.__Internal*) __Instance)->arrayLayers;
        }

        set
        {
            ((global::VkImageCreateInfo.__Internal*)__Instance)->arrayLayers = value;
        }
    }

    public global::VkSampleCountFlagBits Samples
    {
        get
        {
            return ((global::VkImageCreateInfo.__Internal*) __Instance)->samples;
        }

        set
        {
            ((global::VkImageCreateInfo.__Internal*)__Instance)->samples = value;
        }
    }

    public global::VkImageTiling Tiling
    {
        get
        {
            return ((global::VkImageCreateInfo.__Internal*) __Instance)->tiling;
        }

        set
        {
            ((global::VkImageCreateInfo.__Internal*)__Instance)->tiling = value;
        }
    }

    public uint Usage
    {
        get
        {
            return ((global::VkImageCreateInfo.__Internal*) __Instance)->usage;
        }

        set
        {
            ((global::VkImageCreateInfo.__Internal*)__Instance)->usage = value;
        }
    }

    public global::VkSharingMode SharingMode
    {
        get
        {
            return ((global::VkImageCreateInfo.__Internal*) __Instance)->sharingMode;
        }

        set
        {
            ((global::VkImageCreateInfo.__Internal*)__Instance)->sharingMode = value;
        }
    }

    public uint QueueFamilyIndexCount
    {
        get
        {
            return ((global::VkImageCreateInfo.__Internal*) __Instance)->queueFamilyIndexCount;
        }

        set
        {
            ((global::VkImageCreateInfo.__Internal*)__Instance)->queueFamilyIndexCount = value;
        }
    }

    public uint* PQueueFamilyIndices
    {
        get
        {
            return (uint*) ((global::VkImageCreateInfo.__Internal*) __Instance)->pQueueFamilyIndices;
        }

        set
        {
            ((global::VkImageCreateInfo.__Internal*)__Instance)->pQueueFamilyIndices = (global::System.IntPtr) value;
        }
    }

    public global::VkImageLayout InitialLayout
    {
        get
        {
            return ((global::VkImageCreateInfo.__Internal*) __Instance)->initialLayout;
        }

        set
        {
            ((global::VkImageCreateInfo.__Internal*)__Instance)->initialLayout = value;
        }
    }
}

public unsafe partial class VkSubresourceLayout : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal ulong offset;

        [FieldOffset(8)]
        internal ulong size;

        [FieldOffset(16)]
        internal ulong rowPitch;

        [FieldOffset(24)]
        internal ulong arrayPitch;

        [FieldOffset(32)]
        internal ulong depthPitch;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSubresourceLayout> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSubresourceLayout>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSubresourceLayout __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSubresourceLayout(native.ToPointer(), skipVTables);
    }

    internal static global::VkSubresourceLayout __CreateInstance(global::VkSubresourceLayout.__Internal native, bool skipVTables = false)
    {
        return new global::VkSubresourceLayout(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSubresourceLayout.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSubresourceLayout.__Internal));
        *(global::VkSubresourceLayout.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSubresourceLayout(global::VkSubresourceLayout.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSubresourceLayout(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSubresourceLayout()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkSubresourceLayout __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public ulong Offset
    {
        get
        {
            return ((global::VkSubresourceLayout.__Internal*) __Instance)->offset;
        }

        set
        {
            ((global::VkSubresourceLayout.__Internal*)__Instance)->offset = value;
        }
    }

    public ulong Size
    {
        get
        {
            return ((global::VkSubresourceLayout.__Internal*) __Instance)->size;
        }

        set
        {
            ((global::VkSubresourceLayout.__Internal*)__Instance)->size = value;
        }
    }

    public ulong RowPitch
    {
        get
        {
            return ((global::VkSubresourceLayout.__Internal*) __Instance)->rowPitch;
        }

        set
        {
            ((global::VkSubresourceLayout.__Internal*)__Instance)->rowPitch = value;
        }
    }

    public ulong ArrayPitch
    {
        get
        {
            return ((global::VkSubresourceLayout.__Internal*) __Instance)->arrayPitch;
        }

        set
        {
            ((global::VkSubresourceLayout.__Internal*)__Instance)->arrayPitch = value;
        }
    }

    public ulong DepthPitch
    {
        get
        {
            return ((global::VkSubresourceLayout.__Internal*) __Instance)->depthPitch;
        }

        set
        {
            ((global::VkSubresourceLayout.__Internal*)__Instance)->depthPitch = value;
        }
    }
}

public unsafe partial class VkComponentMapping : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkComponentSwizzle r;

        [FieldOffset(4)]
        internal global::VkComponentSwizzle g;

        [FieldOffset(8)]
        internal global::VkComponentSwizzle b;

        [FieldOffset(12)]
        internal global::VkComponentSwizzle a;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkComponentMapping> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkComponentMapping>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkComponentMapping __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkComponentMapping(native.ToPointer(), skipVTables);
    }

    internal static global::VkComponentMapping __CreateInstance(global::VkComponentMapping.__Internal native, bool skipVTables = false)
    {
        return new global::VkComponentMapping(native, skipVTables);
    }

    private static void* __CopyValue(global::VkComponentMapping.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkComponentMapping.__Internal));
        *(global::VkComponentMapping.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkComponentMapping(global::VkComponentMapping.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkComponentMapping(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkComponentMapping()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkComponentMapping __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkComponentSwizzle R
    {
        get
        {
            return ((global::VkComponentMapping.__Internal*) __Instance)->r;
        }

        set
        {
            ((global::VkComponentMapping.__Internal*)__Instance)->r = value;
        }
    }

    public global::VkComponentSwizzle G
    {
        get
        {
            return ((global::VkComponentMapping.__Internal*) __Instance)->g;
        }

        set
        {
            ((global::VkComponentMapping.__Internal*)__Instance)->g = value;
        }
    }

    public global::VkComponentSwizzle B
    {
        get
        {
            return ((global::VkComponentMapping.__Internal*) __Instance)->b;
        }

        set
        {
            ((global::VkComponentMapping.__Internal*)__Instance)->b = value;
        }
    }

    public global::VkComponentSwizzle A
    {
        get
        {
            return ((global::VkComponentMapping.__Internal*) __Instance)->a;
        }

        set
        {
            ((global::VkComponentMapping.__Internal*)__Instance)->a = value;
        }
    }
}

public unsafe partial class VkImageSubresourceRange : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 20)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint aspectMask;

        [FieldOffset(4)]
        internal uint baseMipLevel;

        [FieldOffset(8)]
        internal uint levelCount;

        [FieldOffset(12)]
        internal uint baseArrayLayer;

        [FieldOffset(16)]
        internal uint layerCount;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageSubresourceRange> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageSubresourceRange>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkImageSubresourceRange __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkImageSubresourceRange(native.ToPointer(), skipVTables);
    }

    internal static global::VkImageSubresourceRange __CreateInstance(global::VkImageSubresourceRange.__Internal native, bool skipVTables = false)
    {
        return new global::VkImageSubresourceRange(native, skipVTables);
    }

    private static void* __CopyValue(global::VkImageSubresourceRange.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkImageSubresourceRange.__Internal));
        *(global::VkImageSubresourceRange.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkImageSubresourceRange(global::VkImageSubresourceRange.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkImageSubresourceRange(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkImageSubresourceRange()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkImageSubresourceRange __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint AspectMask
    {
        get
        {
            return ((global::VkImageSubresourceRange.__Internal*) __Instance)->aspectMask;
        }

        set
        {
            ((global::VkImageSubresourceRange.__Internal*)__Instance)->aspectMask = value;
        }
    }

    public uint BaseMipLevel
    {
        get
        {
            return ((global::VkImageSubresourceRange.__Internal*) __Instance)->baseMipLevel;
        }

        set
        {
            ((global::VkImageSubresourceRange.__Internal*)__Instance)->baseMipLevel = value;
        }
    }

    public uint LevelCount
    {
        get
        {
            return ((global::VkImageSubresourceRange.__Internal*) __Instance)->levelCount;
        }

        set
        {
            ((global::VkImageSubresourceRange.__Internal*)__Instance)->levelCount = value;
        }
    }

    public uint BaseArrayLayer
    {
        get
        {
            return ((global::VkImageSubresourceRange.__Internal*) __Instance)->baseArrayLayer;
        }

        set
        {
            ((global::VkImageSubresourceRange.__Internal*)__Instance)->baseArrayLayer = value;
        }
    }

    public uint LayerCount
    {
        get
        {
            return ((global::VkImageSubresourceRange.__Internal*) __Instance)->layerCount;
        }

        set
        {
            ((global::VkImageSubresourceRange.__Internal*)__Instance)->layerCount = value;
        }
    }
}

public unsafe partial class VkImageViewCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 80)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(24)]
        internal global::System.IntPtr image;

        [FieldOffset(32)]
        internal global::VkImageViewType viewType;

        [FieldOffset(36)]
        internal global::VkFormat format;

        [FieldOffset(40)]
        internal global::VkComponentMapping.__Internal components;

        [FieldOffset(56)]
        internal global::VkImageSubresourceRange.__Internal subresourceRange;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageViewCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageViewCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkImageViewCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkImageViewCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkImageViewCreateInfo __CreateInstance(global::VkImageViewCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkImageViewCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkImageViewCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkImageViewCreateInfo.__Internal));
        *(global::VkImageViewCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkImageViewCreateInfo(global::VkImageViewCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkImageViewCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkImageViewCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkImageViewCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkImageViewCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkImageViewCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkImageViewCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkImageViewCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkImageViewCreateInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkImageViewCreateInfo.__Internal*)__Instance)->flags = value;
        }
    }

    public global::VkImageT Image
    {
        get
        {
            global::VkImageT __result0;
            if (((global::VkImageViewCreateInfo.__Internal*) __Instance)->image == IntPtr.Zero) __result0 = null;
            else if (global::VkImageT.NativeToManagedMap.ContainsKey(((global::VkImageViewCreateInfo.__Internal*) __Instance)->image))
                __result0 = (global::VkImageT) global::VkImageT.NativeToManagedMap[((global::VkImageViewCreateInfo.__Internal*) __Instance)->image];
            else __result0 = global::VkImageT.__CreateInstance(((global::VkImageViewCreateInfo.__Internal*) __Instance)->image);
            return __result0;
        }

        set
        {
            ((global::VkImageViewCreateInfo.__Internal*)__Instance)->image = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkImageViewType ViewType
    {
        get
        {
            return ((global::VkImageViewCreateInfo.__Internal*) __Instance)->viewType;
        }

        set
        {
            ((global::VkImageViewCreateInfo.__Internal*)__Instance)->viewType = value;
        }
    }

    public global::VkFormat Format
    {
        get
        {
            return ((global::VkImageViewCreateInfo.__Internal*) __Instance)->format;
        }

        set
        {
            ((global::VkImageViewCreateInfo.__Internal*)__Instance)->format = value;
        }
    }

    public global::VkComponentMapping Components
    {
        get
        {
            return global::VkComponentMapping.__CreateInstance(new global::System.IntPtr(&((global::VkImageViewCreateInfo.__Internal*) __Instance)->components));
        }

        set
        {
            ((global::VkImageViewCreateInfo.__Internal*)__Instance)->components = ReferenceEquals(value, null) ? new global::VkComponentMapping.__Internal() : *(global::VkComponentMapping.__Internal*) value.__Instance;
        }
    }

    public global::VkImageSubresourceRange SubresourceRange
    {
        get
        {
            return global::VkImageSubresourceRange.__CreateInstance(new global::System.IntPtr(&((global::VkImageViewCreateInfo.__Internal*) __Instance)->subresourceRange));
        }

        set
        {
            ((global::VkImageViewCreateInfo.__Internal*)__Instance)->subresourceRange = ReferenceEquals(value, null) ? new global::VkImageSubresourceRange.__Internal() : *(global::VkImageSubresourceRange.__Internal*) value.__Instance;
        }
    }
}

public unsafe partial class VkShaderModuleCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(24)]
        internal ulong codeSize;

        [FieldOffset(32)]
        internal global::System.IntPtr pCode;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkShaderModuleCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkShaderModuleCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkShaderModuleCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkShaderModuleCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkShaderModuleCreateInfo __CreateInstance(global::VkShaderModuleCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkShaderModuleCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkShaderModuleCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkShaderModuleCreateInfo.__Internal));
        *(global::VkShaderModuleCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkShaderModuleCreateInfo(global::VkShaderModuleCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkShaderModuleCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkShaderModuleCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkShaderModuleCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkShaderModuleCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkShaderModuleCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkShaderModuleCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkShaderModuleCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkShaderModuleCreateInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkShaderModuleCreateInfo.__Internal*)__Instance)->flags = value;
        }
    }

    public ulong CodeSize
    {
        get
        {
            return ((global::VkShaderModuleCreateInfo.__Internal*) __Instance)->codeSize;
        }

        set
        {
            ((global::VkShaderModuleCreateInfo.__Internal*)__Instance)->codeSize = value;
        }
    }

    public uint* PCode
    {
        get
        {
            return (uint*) ((global::VkShaderModuleCreateInfo.__Internal*) __Instance)->pCode;
        }

        set
        {
            ((global::VkShaderModuleCreateInfo.__Internal*)__Instance)->pCode = (global::System.IntPtr) value;
        }
    }
}

public unsafe partial class VkPipelineCacheCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(24)]
        internal ulong initialDataSize;

        [FieldOffset(32)]
        internal global::System.IntPtr pInitialData;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineCacheCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineCacheCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPipelineCacheCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPipelineCacheCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkPipelineCacheCreateInfo __CreateInstance(global::VkPipelineCacheCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkPipelineCacheCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPipelineCacheCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPipelineCacheCreateInfo.__Internal));
        *(global::VkPipelineCacheCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPipelineCacheCreateInfo(global::VkPipelineCacheCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPipelineCacheCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPipelineCacheCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPipelineCacheCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPipelineCacheCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPipelineCacheCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPipelineCacheCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPipelineCacheCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkPipelineCacheCreateInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkPipelineCacheCreateInfo.__Internal*)__Instance)->flags = value;
        }
    }

    public ulong InitialDataSize
    {
        get
        {
            return ((global::VkPipelineCacheCreateInfo.__Internal*) __Instance)->initialDataSize;
        }

        set
        {
            ((global::VkPipelineCacheCreateInfo.__Internal*)__Instance)->initialDataSize = value;
        }
    }

    public global::System.IntPtr PInitialData
    {
        get
        {
            return ((global::VkPipelineCacheCreateInfo.__Internal*) __Instance)->pInitialData;
        }

        set
        {
            ((global::VkPipelineCacheCreateInfo.__Internal*)__Instance)->pInitialData = (global::System.IntPtr) value;
        }
    }
}

public unsafe partial class VkSpecializationMapEntry : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint constantID;

        [FieldOffset(4)]
        internal uint offset;

        [FieldOffset(8)]
        internal ulong size;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSpecializationMapEntry> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSpecializationMapEntry>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSpecializationMapEntry __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSpecializationMapEntry(native.ToPointer(), skipVTables);
    }

    internal static global::VkSpecializationMapEntry __CreateInstance(global::VkSpecializationMapEntry.__Internal native, bool skipVTables = false)
    {
        return new global::VkSpecializationMapEntry(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSpecializationMapEntry.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSpecializationMapEntry.__Internal));
        *(global::VkSpecializationMapEntry.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSpecializationMapEntry(global::VkSpecializationMapEntry.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSpecializationMapEntry(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSpecializationMapEntry()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkSpecializationMapEntry __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint ConstantID
    {
        get
        {
            return ((global::VkSpecializationMapEntry.__Internal*) __Instance)->constantID;
        }

        set
        {
            ((global::VkSpecializationMapEntry.__Internal*)__Instance)->constantID = value;
        }
    }

    public uint Offset
    {
        get
        {
            return ((global::VkSpecializationMapEntry.__Internal*) __Instance)->offset;
        }

        set
        {
            ((global::VkSpecializationMapEntry.__Internal*)__Instance)->offset = value;
        }
    }

    public ulong Size
    {
        get
        {
            return ((global::VkSpecializationMapEntry.__Internal*) __Instance)->size;
        }

        set
        {
            ((global::VkSpecializationMapEntry.__Internal*)__Instance)->size = value;
        }
    }
}

public unsafe partial class VkSpecializationInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint mapEntryCount;

        [FieldOffset(8)]
        internal global::System.IntPtr pMapEntries;

        [FieldOffset(16)]
        internal ulong dataSize;

        [FieldOffset(24)]
        internal global::System.IntPtr pData;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSpecializationInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSpecializationInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSpecializationInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSpecializationInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkSpecializationInfo __CreateInstance(global::VkSpecializationInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkSpecializationInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSpecializationInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSpecializationInfo.__Internal));
        *(global::VkSpecializationInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSpecializationInfo(global::VkSpecializationInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSpecializationInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSpecializationInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkSpecializationInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint MapEntryCount
    {
        get
        {
            return ((global::VkSpecializationInfo.__Internal*) __Instance)->mapEntryCount;
        }

        set
        {
            ((global::VkSpecializationInfo.__Internal*)__Instance)->mapEntryCount = value;
        }
    }

    public global::VkSpecializationMapEntry PMapEntries
    {
        get
        {
            global::VkSpecializationMapEntry __result0;
            if (((global::VkSpecializationInfo.__Internal*) __Instance)->pMapEntries == IntPtr.Zero) __result0 = null;
            else if (global::VkSpecializationMapEntry.NativeToManagedMap.ContainsKey(((global::VkSpecializationInfo.__Internal*) __Instance)->pMapEntries))
                __result0 = (global::VkSpecializationMapEntry) global::VkSpecializationMapEntry.NativeToManagedMap[((global::VkSpecializationInfo.__Internal*) __Instance)->pMapEntries];
            else __result0 = global::VkSpecializationMapEntry.__CreateInstance(((global::VkSpecializationInfo.__Internal*) __Instance)->pMapEntries);
            return __result0;
        }

        set
        {
            ((global::VkSpecializationInfo.__Internal*)__Instance)->pMapEntries = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public ulong DataSize
    {
        get
        {
            return ((global::VkSpecializationInfo.__Internal*) __Instance)->dataSize;
        }

        set
        {
            ((global::VkSpecializationInfo.__Internal*)__Instance)->dataSize = value;
        }
    }

    public global::System.IntPtr PData
    {
        get
        {
            return ((global::VkSpecializationInfo.__Internal*) __Instance)->pData;
        }

        set
        {
            ((global::VkSpecializationInfo.__Internal*)__Instance)->pData = (global::System.IntPtr) value;
        }
    }
}

public unsafe partial class VkPipelineShaderStageCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 48)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(20)]
        internal global::VkShaderStageFlagBits stage;

        [FieldOffset(24)]
        internal global::System.IntPtr module;

        [FieldOffset(32)]
        internal global::System.IntPtr pName;

        [FieldOffset(40)]
        internal global::System.IntPtr pSpecializationInfo;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineShaderStageCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineShaderStageCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPipelineShaderStageCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPipelineShaderStageCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkPipelineShaderStageCreateInfo __CreateInstance(global::VkPipelineShaderStageCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkPipelineShaderStageCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPipelineShaderStageCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPipelineShaderStageCreateInfo.__Internal));
        *(global::VkPipelineShaderStageCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPipelineShaderStageCreateInfo(global::VkPipelineShaderStageCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPipelineShaderStageCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPipelineShaderStageCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPipelineShaderStageCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPipelineShaderStageCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPipelineShaderStageCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPipelineShaderStageCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPipelineShaderStageCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkPipelineShaderStageCreateInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkPipelineShaderStageCreateInfo.__Internal*)__Instance)->flags = value;
        }
    }

    public global::VkShaderStageFlagBits Stage
    {
        get
        {
            return ((global::VkPipelineShaderStageCreateInfo.__Internal*) __Instance)->stage;
        }

        set
        {
            ((global::VkPipelineShaderStageCreateInfo.__Internal*)__Instance)->stage = value;
        }
    }

    public global::VkShaderModuleT Module
    {
        get
        {
            global::VkShaderModuleT __result0;
            if (((global::VkPipelineShaderStageCreateInfo.__Internal*) __Instance)->module == IntPtr.Zero) __result0 = null;
            else if (global::VkShaderModuleT.NativeToManagedMap.ContainsKey(((global::VkPipelineShaderStageCreateInfo.__Internal*) __Instance)->module))
                __result0 = (global::VkShaderModuleT) global::VkShaderModuleT.NativeToManagedMap[((global::VkPipelineShaderStageCreateInfo.__Internal*) __Instance)->module];
            else __result0 = global::VkShaderModuleT.__CreateInstance(((global::VkPipelineShaderStageCreateInfo.__Internal*) __Instance)->module);
            return __result0;
        }

        set
        {
            ((global::VkPipelineShaderStageCreateInfo.__Internal*)__Instance)->module = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public string PName
    {
        get
        {
            return Marshal.PtrToStringAnsi(((global::VkPipelineShaderStageCreateInfo.__Internal*) __Instance)->pName);
        }

        set
        {
            ((global::VkPipelineShaderStageCreateInfo.__Internal*)__Instance)->pName = Marshal.StringToHGlobalAnsi(value);
        }
    }

    public global::VkSpecializationInfo PSpecializationInfo
    {
        get
        {
            global::VkSpecializationInfo __result0;
            if (((global::VkPipelineShaderStageCreateInfo.__Internal*) __Instance)->pSpecializationInfo == IntPtr.Zero) __result0 = null;
            else if (global::VkSpecializationInfo.NativeToManagedMap.ContainsKey(((global::VkPipelineShaderStageCreateInfo.__Internal*) __Instance)->pSpecializationInfo))
                __result0 = (global::VkSpecializationInfo) global::VkSpecializationInfo.NativeToManagedMap[((global::VkPipelineShaderStageCreateInfo.__Internal*) __Instance)->pSpecializationInfo];
            else __result0 = global::VkSpecializationInfo.__CreateInstance(((global::VkPipelineShaderStageCreateInfo.__Internal*) __Instance)->pSpecializationInfo);
            return __result0;
        }

        set
        {
            ((global::VkPipelineShaderStageCreateInfo.__Internal*)__Instance)->pSpecializationInfo = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkVertexInputBindingDescription : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 12)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint binding;

        [FieldOffset(4)]
        internal uint stride;

        [FieldOffset(8)]
        internal global::VkVertexInputRate inputRate;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkVertexInputBindingDescription> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkVertexInputBindingDescription>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkVertexInputBindingDescription __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkVertexInputBindingDescription(native.ToPointer(), skipVTables);
    }

    internal static global::VkVertexInputBindingDescription __CreateInstance(global::VkVertexInputBindingDescription.__Internal native, bool skipVTables = false)
    {
        return new global::VkVertexInputBindingDescription(native, skipVTables);
    }

    private static void* __CopyValue(global::VkVertexInputBindingDescription.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkVertexInputBindingDescription.__Internal));
        *(global::VkVertexInputBindingDescription.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkVertexInputBindingDescription(global::VkVertexInputBindingDescription.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkVertexInputBindingDescription(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkVertexInputBindingDescription()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkVertexInputBindingDescription __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint Binding
    {
        get
        {
            return ((global::VkVertexInputBindingDescription.__Internal*) __Instance)->binding;
        }

        set
        {
            ((global::VkVertexInputBindingDescription.__Internal*)__Instance)->binding = value;
        }
    }

    public uint Stride
    {
        get
        {
            return ((global::VkVertexInputBindingDescription.__Internal*) __Instance)->stride;
        }

        set
        {
            ((global::VkVertexInputBindingDescription.__Internal*)__Instance)->stride = value;
        }
    }

    public global::VkVertexInputRate InputRate
    {
        get
        {
            return ((global::VkVertexInputBindingDescription.__Internal*) __Instance)->inputRate;
        }

        set
        {
            ((global::VkVertexInputBindingDescription.__Internal*)__Instance)->inputRate = value;
        }
    }
}

public unsafe partial class VkVertexInputAttributeDescription : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint location;

        [FieldOffset(4)]
        internal uint binding;

        [FieldOffset(8)]
        internal global::VkFormat format;

        [FieldOffset(12)]
        internal uint offset;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkVertexInputAttributeDescription> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkVertexInputAttributeDescription>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkVertexInputAttributeDescription __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkVertexInputAttributeDescription(native.ToPointer(), skipVTables);
    }

    internal static global::VkVertexInputAttributeDescription __CreateInstance(global::VkVertexInputAttributeDescription.__Internal native, bool skipVTables = false)
    {
        return new global::VkVertexInputAttributeDescription(native, skipVTables);
    }

    private static void* __CopyValue(global::VkVertexInputAttributeDescription.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkVertexInputAttributeDescription.__Internal));
        *(global::VkVertexInputAttributeDescription.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkVertexInputAttributeDescription(global::VkVertexInputAttributeDescription.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkVertexInputAttributeDescription(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkVertexInputAttributeDescription()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkVertexInputAttributeDescription __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint Location
    {
        get
        {
            return ((global::VkVertexInputAttributeDescription.__Internal*) __Instance)->location;
        }

        set
        {
            ((global::VkVertexInputAttributeDescription.__Internal*)__Instance)->location = value;
        }
    }

    public uint Binding
    {
        get
        {
            return ((global::VkVertexInputAttributeDescription.__Internal*) __Instance)->binding;
        }

        set
        {
            ((global::VkVertexInputAttributeDescription.__Internal*)__Instance)->binding = value;
        }
    }

    public global::VkFormat Format
    {
        get
        {
            return ((global::VkVertexInputAttributeDescription.__Internal*) __Instance)->format;
        }

        set
        {
            ((global::VkVertexInputAttributeDescription.__Internal*)__Instance)->format = value;
        }
    }

    public uint Offset
    {
        get
        {
            return ((global::VkVertexInputAttributeDescription.__Internal*) __Instance)->offset;
        }

        set
        {
            ((global::VkVertexInputAttributeDescription.__Internal*)__Instance)->offset = value;
        }
    }
}

public unsafe partial class VkPipelineVertexInputStateCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 48)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(20)]
        internal uint vertexBindingDescriptionCount;

        [FieldOffset(24)]
        internal global::System.IntPtr pVertexBindingDescriptions;

        [FieldOffset(32)]
        internal uint vertexAttributeDescriptionCount;

        [FieldOffset(40)]
        internal global::System.IntPtr pVertexAttributeDescriptions;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineVertexInputStateCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineVertexInputStateCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPipelineVertexInputStateCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPipelineVertexInputStateCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkPipelineVertexInputStateCreateInfo __CreateInstance(global::VkPipelineVertexInputStateCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkPipelineVertexInputStateCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPipelineVertexInputStateCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPipelineVertexInputStateCreateInfo.__Internal));
        *(global::VkPipelineVertexInputStateCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPipelineVertexInputStateCreateInfo(global::VkPipelineVertexInputStateCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPipelineVertexInputStateCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPipelineVertexInputStateCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPipelineVertexInputStateCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPipelineVertexInputStateCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPipelineVertexInputStateCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPipelineVertexInputStateCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPipelineVertexInputStateCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkPipelineVertexInputStateCreateInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkPipelineVertexInputStateCreateInfo.__Internal*)__Instance)->flags = value;
        }
    }

    public uint VertexBindingDescriptionCount
    {
        get
        {
            return ((global::VkPipelineVertexInputStateCreateInfo.__Internal*) __Instance)->vertexBindingDescriptionCount;
        }

        set
        {
            ((global::VkPipelineVertexInputStateCreateInfo.__Internal*)__Instance)->vertexBindingDescriptionCount = value;
        }
    }

    public global::VkVertexInputBindingDescription PVertexBindingDescriptions
    {
        get
        {
            global::VkVertexInputBindingDescription __result0;
            if (((global::VkPipelineVertexInputStateCreateInfo.__Internal*) __Instance)->pVertexBindingDescriptions == IntPtr.Zero) __result0 = null;
            else if (global::VkVertexInputBindingDescription.NativeToManagedMap.ContainsKey(((global::VkPipelineVertexInputStateCreateInfo.__Internal*) __Instance)->pVertexBindingDescriptions))
                __result0 = (global::VkVertexInputBindingDescription) global::VkVertexInputBindingDescription.NativeToManagedMap[((global::VkPipelineVertexInputStateCreateInfo.__Internal*) __Instance)->pVertexBindingDescriptions];
            else __result0 = global::VkVertexInputBindingDescription.__CreateInstance(((global::VkPipelineVertexInputStateCreateInfo.__Internal*) __Instance)->pVertexBindingDescriptions);
            return __result0;
        }

        set
        {
            ((global::VkPipelineVertexInputStateCreateInfo.__Internal*)__Instance)->pVertexBindingDescriptions = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint VertexAttributeDescriptionCount
    {
        get
        {
            return ((global::VkPipelineVertexInputStateCreateInfo.__Internal*) __Instance)->vertexAttributeDescriptionCount;
        }

        set
        {
            ((global::VkPipelineVertexInputStateCreateInfo.__Internal*)__Instance)->vertexAttributeDescriptionCount = value;
        }
    }

    public global::VkVertexInputAttributeDescription PVertexAttributeDescriptions
    {
        get
        {
            global::VkVertexInputAttributeDescription __result0;
            if (((global::VkPipelineVertexInputStateCreateInfo.__Internal*) __Instance)->pVertexAttributeDescriptions == IntPtr.Zero) __result0 = null;
            else if (global::VkVertexInputAttributeDescription.NativeToManagedMap.ContainsKey(((global::VkPipelineVertexInputStateCreateInfo.__Internal*) __Instance)->pVertexAttributeDescriptions))
                __result0 = (global::VkVertexInputAttributeDescription) global::VkVertexInputAttributeDescription.NativeToManagedMap[((global::VkPipelineVertexInputStateCreateInfo.__Internal*) __Instance)->pVertexAttributeDescriptions];
            else __result0 = global::VkVertexInputAttributeDescription.__CreateInstance(((global::VkPipelineVertexInputStateCreateInfo.__Internal*) __Instance)->pVertexAttributeDescriptions);
            return __result0;
        }

        set
        {
            ((global::VkPipelineVertexInputStateCreateInfo.__Internal*)__Instance)->pVertexAttributeDescriptions = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkPipelineInputAssemblyStateCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(20)]
        internal global::VkPrimitiveTopology topology;

        [FieldOffset(24)]
        internal uint primitiveRestartEnable;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineInputAssemblyStateCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineInputAssemblyStateCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPipelineInputAssemblyStateCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPipelineInputAssemblyStateCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkPipelineInputAssemblyStateCreateInfo __CreateInstance(global::VkPipelineInputAssemblyStateCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkPipelineInputAssemblyStateCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPipelineInputAssemblyStateCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPipelineInputAssemblyStateCreateInfo.__Internal));
        *(global::VkPipelineInputAssemblyStateCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPipelineInputAssemblyStateCreateInfo(global::VkPipelineInputAssemblyStateCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPipelineInputAssemblyStateCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPipelineInputAssemblyStateCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPipelineInputAssemblyStateCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPipelineInputAssemblyStateCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPipelineInputAssemblyStateCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPipelineInputAssemblyStateCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPipelineInputAssemblyStateCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkPipelineInputAssemblyStateCreateInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkPipelineInputAssemblyStateCreateInfo.__Internal*)__Instance)->flags = value;
        }
    }

    public global::VkPrimitiveTopology Topology
    {
        get
        {
            return ((global::VkPipelineInputAssemblyStateCreateInfo.__Internal*) __Instance)->topology;
        }

        set
        {
            ((global::VkPipelineInputAssemblyStateCreateInfo.__Internal*)__Instance)->topology = value;
        }
    }

    public uint PrimitiveRestartEnable
    {
        get
        {
            return ((global::VkPipelineInputAssemblyStateCreateInfo.__Internal*) __Instance)->primitiveRestartEnable;
        }

        set
        {
            ((global::VkPipelineInputAssemblyStateCreateInfo.__Internal*)__Instance)->primitiveRestartEnable = value;
        }
    }
}

public unsafe partial class VkPipelineTessellationStateCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(20)]
        internal uint patchControlPoints;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineTessellationStateCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineTessellationStateCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPipelineTessellationStateCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPipelineTessellationStateCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkPipelineTessellationStateCreateInfo __CreateInstance(global::VkPipelineTessellationStateCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkPipelineTessellationStateCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPipelineTessellationStateCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPipelineTessellationStateCreateInfo.__Internal));
        *(global::VkPipelineTessellationStateCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPipelineTessellationStateCreateInfo(global::VkPipelineTessellationStateCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPipelineTessellationStateCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPipelineTessellationStateCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPipelineTessellationStateCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPipelineTessellationStateCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPipelineTessellationStateCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPipelineTessellationStateCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPipelineTessellationStateCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkPipelineTessellationStateCreateInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkPipelineTessellationStateCreateInfo.__Internal*)__Instance)->flags = value;
        }
    }

    public uint PatchControlPoints
    {
        get
        {
            return ((global::VkPipelineTessellationStateCreateInfo.__Internal*) __Instance)->patchControlPoints;
        }

        set
        {
            ((global::VkPipelineTessellationStateCreateInfo.__Internal*)__Instance)->patchControlPoints = value;
        }
    }
}

public unsafe partial class VkViewport : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal float x;

        [FieldOffset(4)]
        internal float y;

        [FieldOffset(8)]
        internal float width;

        [FieldOffset(12)]
        internal float height;

        [FieldOffset(16)]
        internal float minDepth;

        [FieldOffset(20)]
        internal float maxDepth;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkViewport> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkViewport>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkViewport __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkViewport(native.ToPointer(), skipVTables);
    }

    internal static global::VkViewport __CreateInstance(global::VkViewport.__Internal native, bool skipVTables = false)
    {
        return new global::VkViewport(native, skipVTables);
    }

    private static void* __CopyValue(global::VkViewport.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkViewport.__Internal));
        *(global::VkViewport.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkViewport(global::VkViewport.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkViewport(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkViewport()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkViewport __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public float X
    {
        get
        {
            return ((global::VkViewport.__Internal*) __Instance)->x;
        }

        set
        {
            ((global::VkViewport.__Internal*)__Instance)->x = value;
        }
    }

    public float Y
    {
        get
        {
            return ((global::VkViewport.__Internal*) __Instance)->y;
        }

        set
        {
            ((global::VkViewport.__Internal*)__Instance)->y = value;
        }
    }

    public float Width
    {
        get
        {
            return ((global::VkViewport.__Internal*) __Instance)->width;
        }

        set
        {
            ((global::VkViewport.__Internal*)__Instance)->width = value;
        }
    }

    public float Height
    {
        get
        {
            return ((global::VkViewport.__Internal*) __Instance)->height;
        }

        set
        {
            ((global::VkViewport.__Internal*)__Instance)->height = value;
        }
    }

    public float MinDepth
    {
        get
        {
            return ((global::VkViewport.__Internal*) __Instance)->minDepth;
        }

        set
        {
            ((global::VkViewport.__Internal*)__Instance)->minDepth = value;
        }
    }

    public float MaxDepth
    {
        get
        {
            return ((global::VkViewport.__Internal*) __Instance)->maxDepth;
        }

        set
        {
            ((global::VkViewport.__Internal*)__Instance)->maxDepth = value;
        }
    }
}

public unsafe partial class VkOffset2D : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal int x;

        [FieldOffset(4)]
        internal int y;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkOffset2D> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkOffset2D>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkOffset2D __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkOffset2D(native.ToPointer(), skipVTables);
    }

    internal static global::VkOffset2D __CreateInstance(global::VkOffset2D.__Internal native, bool skipVTables = false)
    {
        return new global::VkOffset2D(native, skipVTables);
    }

    private static void* __CopyValue(global::VkOffset2D.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkOffset2D.__Internal));
        *(global::VkOffset2D.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkOffset2D(global::VkOffset2D.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkOffset2D(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkOffset2D()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkOffset2D __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public int X
    {
        get
        {
            return ((global::VkOffset2D.__Internal*) __Instance)->x;
        }

        set
        {
            ((global::VkOffset2D.__Internal*)__Instance)->x = value;
        }
    }

    public int Y
    {
        get
        {
            return ((global::VkOffset2D.__Internal*) __Instance)->y;
        }

        set
        {
            ((global::VkOffset2D.__Internal*)__Instance)->y = value;
        }
    }
}

public unsafe partial class VkExtent2D : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint width;

        [FieldOffset(4)]
        internal uint height;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkExtent2D> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkExtent2D>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkExtent2D __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkExtent2D(native.ToPointer(), skipVTables);
    }

    internal static global::VkExtent2D __CreateInstance(global::VkExtent2D.__Internal native, bool skipVTables = false)
    {
        return new global::VkExtent2D(native, skipVTables);
    }

    private static void* __CopyValue(global::VkExtent2D.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkExtent2D.__Internal));
        *(global::VkExtent2D.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkExtent2D(global::VkExtent2D.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkExtent2D(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkExtent2D()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkExtent2D __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint Width
    {
        get
        {
            return ((global::VkExtent2D.__Internal*) __Instance)->width;
        }

        set
        {
            ((global::VkExtent2D.__Internal*)__Instance)->width = value;
        }
    }

    public uint Height
    {
        get
        {
            return ((global::VkExtent2D.__Internal*) __Instance)->height;
        }

        set
        {
            ((global::VkExtent2D.__Internal*)__Instance)->height = value;
        }
    }
}

public unsafe partial class VkRect2D : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkOffset2D.__Internal offset;

        [FieldOffset(8)]
        internal global::VkExtent2D.__Internal extent;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkRect2D> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkRect2D>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkRect2D __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkRect2D(native.ToPointer(), skipVTables);
    }

    internal static global::VkRect2D __CreateInstance(global::VkRect2D.__Internal native, bool skipVTables = false)
    {
        return new global::VkRect2D(native, skipVTables);
    }

    private static void* __CopyValue(global::VkRect2D.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkRect2D.__Internal));
        *(global::VkRect2D.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkRect2D(global::VkRect2D.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkRect2D(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkRect2D()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkRect2D __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkOffset2D Offset
    {
        get
        {
            return global::VkOffset2D.__CreateInstance(new global::System.IntPtr(&((global::VkRect2D.__Internal*) __Instance)->offset));
        }

        set
        {
            ((global::VkRect2D.__Internal*)__Instance)->offset = ReferenceEquals(value, null) ? new global::VkOffset2D.__Internal() : *(global::VkOffset2D.__Internal*) value.__Instance;
        }
    }

    public global::VkExtent2D Extent
    {
        get
        {
            return global::VkExtent2D.__CreateInstance(new global::System.IntPtr(&((global::VkRect2D.__Internal*) __Instance)->extent));
        }

        set
        {
            ((global::VkRect2D.__Internal*)__Instance)->extent = ReferenceEquals(value, null) ? new global::VkExtent2D.__Internal() : *(global::VkExtent2D.__Internal*) value.__Instance;
        }
    }
}

public unsafe partial class VkPipelineViewportStateCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 48)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(20)]
        internal uint viewportCount;

        [FieldOffset(24)]
        internal global::System.IntPtr pViewports;

        [FieldOffset(32)]
        internal uint scissorCount;

        [FieldOffset(40)]
        internal global::System.IntPtr pScissors;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineViewportStateCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineViewportStateCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPipelineViewportStateCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPipelineViewportStateCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkPipelineViewportStateCreateInfo __CreateInstance(global::VkPipelineViewportStateCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkPipelineViewportStateCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPipelineViewportStateCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPipelineViewportStateCreateInfo.__Internal));
        *(global::VkPipelineViewportStateCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPipelineViewportStateCreateInfo(global::VkPipelineViewportStateCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPipelineViewportStateCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPipelineViewportStateCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPipelineViewportStateCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPipelineViewportStateCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPipelineViewportStateCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPipelineViewportStateCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPipelineViewportStateCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkPipelineViewportStateCreateInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkPipelineViewportStateCreateInfo.__Internal*)__Instance)->flags = value;
        }
    }

    public uint ViewportCount
    {
        get
        {
            return ((global::VkPipelineViewportStateCreateInfo.__Internal*) __Instance)->viewportCount;
        }

        set
        {
            ((global::VkPipelineViewportStateCreateInfo.__Internal*)__Instance)->viewportCount = value;
        }
    }

    public global::VkViewport PViewports
    {
        get
        {
            global::VkViewport __result0;
            if (((global::VkPipelineViewportStateCreateInfo.__Internal*) __Instance)->pViewports == IntPtr.Zero) __result0 = null;
            else if (global::VkViewport.NativeToManagedMap.ContainsKey(((global::VkPipelineViewportStateCreateInfo.__Internal*) __Instance)->pViewports))
                __result0 = (global::VkViewport) global::VkViewport.NativeToManagedMap[((global::VkPipelineViewportStateCreateInfo.__Internal*) __Instance)->pViewports];
            else __result0 = global::VkViewport.__CreateInstance(((global::VkPipelineViewportStateCreateInfo.__Internal*) __Instance)->pViewports);
            return __result0;
        }

        set
        {
            ((global::VkPipelineViewportStateCreateInfo.__Internal*)__Instance)->pViewports = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint ScissorCount
    {
        get
        {
            return ((global::VkPipelineViewportStateCreateInfo.__Internal*) __Instance)->scissorCount;
        }

        set
        {
            ((global::VkPipelineViewportStateCreateInfo.__Internal*)__Instance)->scissorCount = value;
        }
    }

    public global::VkRect2D PScissors
    {
        get
        {
            global::VkRect2D __result0;
            if (((global::VkPipelineViewportStateCreateInfo.__Internal*) __Instance)->pScissors == IntPtr.Zero) __result0 = null;
            else if (global::VkRect2D.NativeToManagedMap.ContainsKey(((global::VkPipelineViewportStateCreateInfo.__Internal*) __Instance)->pScissors))
                __result0 = (global::VkRect2D) global::VkRect2D.NativeToManagedMap[((global::VkPipelineViewportStateCreateInfo.__Internal*) __Instance)->pScissors];
            else __result0 = global::VkRect2D.__CreateInstance(((global::VkPipelineViewportStateCreateInfo.__Internal*) __Instance)->pScissors);
            return __result0;
        }

        set
        {
            ((global::VkPipelineViewportStateCreateInfo.__Internal*)__Instance)->pScissors = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkPipelineRasterizationStateCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 64)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(20)]
        internal uint depthClampEnable;

        [FieldOffset(24)]
        internal uint rasterizerDiscardEnable;

        [FieldOffset(28)]
        internal global::VkPolygonMode polygonMode;

        [FieldOffset(32)]
        internal uint cullMode;

        [FieldOffset(36)]
        internal global::VkFrontFace frontFace;

        [FieldOffset(40)]
        internal uint depthBiasEnable;

        [FieldOffset(44)]
        internal float depthBiasConstantFactor;

        [FieldOffset(48)]
        internal float depthBiasClamp;

        [FieldOffset(52)]
        internal float depthBiasSlopeFactor;

        [FieldOffset(56)]
        internal float lineWidth;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineRasterizationStateCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineRasterizationStateCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPipelineRasterizationStateCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPipelineRasterizationStateCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkPipelineRasterizationStateCreateInfo __CreateInstance(global::VkPipelineRasterizationStateCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkPipelineRasterizationStateCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPipelineRasterizationStateCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPipelineRasterizationStateCreateInfo.__Internal));
        *(global::VkPipelineRasterizationStateCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPipelineRasterizationStateCreateInfo(global::VkPipelineRasterizationStateCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPipelineRasterizationStateCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPipelineRasterizationStateCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPipelineRasterizationStateCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPipelineRasterizationStateCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPipelineRasterizationStateCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPipelineRasterizationStateCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPipelineRasterizationStateCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkPipelineRasterizationStateCreateInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkPipelineRasterizationStateCreateInfo.__Internal*)__Instance)->flags = value;
        }
    }

    public uint DepthClampEnable
    {
        get
        {
            return ((global::VkPipelineRasterizationStateCreateInfo.__Internal*) __Instance)->depthClampEnable;
        }

        set
        {
            ((global::VkPipelineRasterizationStateCreateInfo.__Internal*)__Instance)->depthClampEnable = value;
        }
    }

    public uint RasterizerDiscardEnable
    {
        get
        {
            return ((global::VkPipelineRasterizationStateCreateInfo.__Internal*) __Instance)->rasterizerDiscardEnable;
        }

        set
        {
            ((global::VkPipelineRasterizationStateCreateInfo.__Internal*)__Instance)->rasterizerDiscardEnable = value;
        }
    }

    public global::VkPolygonMode PolygonMode
    {
        get
        {
            return ((global::VkPipelineRasterizationStateCreateInfo.__Internal*) __Instance)->polygonMode;
        }

        set
        {
            ((global::VkPipelineRasterizationStateCreateInfo.__Internal*)__Instance)->polygonMode = value;
        }
    }

    public uint CullMode
    {
        get
        {
            return ((global::VkPipelineRasterizationStateCreateInfo.__Internal*) __Instance)->cullMode;
        }

        set
        {
            ((global::VkPipelineRasterizationStateCreateInfo.__Internal*)__Instance)->cullMode = value;
        }
    }

    public global::VkFrontFace FrontFace
    {
        get
        {
            return ((global::VkPipelineRasterizationStateCreateInfo.__Internal*) __Instance)->frontFace;
        }

        set
        {
            ((global::VkPipelineRasterizationStateCreateInfo.__Internal*)__Instance)->frontFace = value;
        }
    }

    public uint DepthBiasEnable
    {
        get
        {
            return ((global::VkPipelineRasterizationStateCreateInfo.__Internal*) __Instance)->depthBiasEnable;
        }

        set
        {
            ((global::VkPipelineRasterizationStateCreateInfo.__Internal*)__Instance)->depthBiasEnable = value;
        }
    }

    public float DepthBiasConstantFactor
    {
        get
        {
            return ((global::VkPipelineRasterizationStateCreateInfo.__Internal*) __Instance)->depthBiasConstantFactor;
        }

        set
        {
            ((global::VkPipelineRasterizationStateCreateInfo.__Internal*)__Instance)->depthBiasConstantFactor = value;
        }
    }

    public float DepthBiasClamp
    {
        get
        {
            return ((global::VkPipelineRasterizationStateCreateInfo.__Internal*) __Instance)->depthBiasClamp;
        }

        set
        {
            ((global::VkPipelineRasterizationStateCreateInfo.__Internal*)__Instance)->depthBiasClamp = value;
        }
    }

    public float DepthBiasSlopeFactor
    {
        get
        {
            return ((global::VkPipelineRasterizationStateCreateInfo.__Internal*) __Instance)->depthBiasSlopeFactor;
        }

        set
        {
            ((global::VkPipelineRasterizationStateCreateInfo.__Internal*)__Instance)->depthBiasSlopeFactor = value;
        }
    }

    public float LineWidth
    {
        get
        {
            return ((global::VkPipelineRasterizationStateCreateInfo.__Internal*) __Instance)->lineWidth;
        }

        set
        {
            ((global::VkPipelineRasterizationStateCreateInfo.__Internal*)__Instance)->lineWidth = value;
        }
    }
}

public unsafe partial class VkPipelineMultisampleStateCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 48)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(20)]
        internal global::VkSampleCountFlagBits rasterizationSamples;

        [FieldOffset(24)]
        internal uint sampleShadingEnable;

        [FieldOffset(28)]
        internal float minSampleShading;

        [FieldOffset(32)]
        internal global::System.IntPtr pSampleMask;

        [FieldOffset(40)]
        internal uint alphaToCoverageEnable;

        [FieldOffset(44)]
        internal uint alphaToOneEnable;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineMultisampleStateCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineMultisampleStateCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPipelineMultisampleStateCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPipelineMultisampleStateCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkPipelineMultisampleStateCreateInfo __CreateInstance(global::VkPipelineMultisampleStateCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkPipelineMultisampleStateCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPipelineMultisampleStateCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPipelineMultisampleStateCreateInfo.__Internal));
        *(global::VkPipelineMultisampleStateCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPipelineMultisampleStateCreateInfo(global::VkPipelineMultisampleStateCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPipelineMultisampleStateCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPipelineMultisampleStateCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPipelineMultisampleStateCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPipelineMultisampleStateCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPipelineMultisampleStateCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPipelineMultisampleStateCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPipelineMultisampleStateCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkPipelineMultisampleStateCreateInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkPipelineMultisampleStateCreateInfo.__Internal*)__Instance)->flags = value;
        }
    }

    public global::VkSampleCountFlagBits RasterizationSamples
    {
        get
        {
            return ((global::VkPipelineMultisampleStateCreateInfo.__Internal*) __Instance)->rasterizationSamples;
        }

        set
        {
            ((global::VkPipelineMultisampleStateCreateInfo.__Internal*)__Instance)->rasterizationSamples = value;
        }
    }

    public uint SampleShadingEnable
    {
        get
        {
            return ((global::VkPipelineMultisampleStateCreateInfo.__Internal*) __Instance)->sampleShadingEnable;
        }

        set
        {
            ((global::VkPipelineMultisampleStateCreateInfo.__Internal*)__Instance)->sampleShadingEnable = value;
        }
    }

    public float MinSampleShading
    {
        get
        {
            return ((global::VkPipelineMultisampleStateCreateInfo.__Internal*) __Instance)->minSampleShading;
        }

        set
        {
            ((global::VkPipelineMultisampleStateCreateInfo.__Internal*)__Instance)->minSampleShading = value;
        }
    }

    public uint* PSampleMask
    {
        get
        {
            return (uint*) ((global::VkPipelineMultisampleStateCreateInfo.__Internal*) __Instance)->pSampleMask;
        }

        set
        {
            ((global::VkPipelineMultisampleStateCreateInfo.__Internal*)__Instance)->pSampleMask = (global::System.IntPtr) value;
        }
    }

    public uint AlphaToCoverageEnable
    {
        get
        {
            return ((global::VkPipelineMultisampleStateCreateInfo.__Internal*) __Instance)->alphaToCoverageEnable;
        }

        set
        {
            ((global::VkPipelineMultisampleStateCreateInfo.__Internal*)__Instance)->alphaToCoverageEnable = value;
        }
    }

    public uint AlphaToOneEnable
    {
        get
        {
            return ((global::VkPipelineMultisampleStateCreateInfo.__Internal*) __Instance)->alphaToOneEnable;
        }

        set
        {
            ((global::VkPipelineMultisampleStateCreateInfo.__Internal*)__Instance)->alphaToOneEnable = value;
        }
    }
}

public unsafe partial class VkStencilOpState : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 28)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStencilOp failOp;

        [FieldOffset(4)]
        internal global::VkStencilOp passOp;

        [FieldOffset(8)]
        internal global::VkStencilOp depthFailOp;

        [FieldOffset(12)]
        internal global::VkCompareOp compareOp;

        [FieldOffset(16)]
        internal uint compareMask;

        [FieldOffset(20)]
        internal uint writeMask;

        [FieldOffset(24)]
        internal uint reference;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkStencilOpState> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkStencilOpState>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkStencilOpState __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkStencilOpState(native.ToPointer(), skipVTables);
    }

    internal static global::VkStencilOpState __CreateInstance(global::VkStencilOpState.__Internal native, bool skipVTables = false)
    {
        return new global::VkStencilOpState(native, skipVTables);
    }

    private static void* __CopyValue(global::VkStencilOpState.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkStencilOpState.__Internal));
        *(global::VkStencilOpState.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkStencilOpState(global::VkStencilOpState.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkStencilOpState(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkStencilOpState()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkStencilOpState __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStencilOp FailOp
    {
        get
        {
            return ((global::VkStencilOpState.__Internal*) __Instance)->failOp;
        }

        set
        {
            ((global::VkStencilOpState.__Internal*)__Instance)->failOp = value;
        }
    }

    public global::VkStencilOp PassOp
    {
        get
        {
            return ((global::VkStencilOpState.__Internal*) __Instance)->passOp;
        }

        set
        {
            ((global::VkStencilOpState.__Internal*)__Instance)->passOp = value;
        }
    }

    public global::VkStencilOp DepthFailOp
    {
        get
        {
            return ((global::VkStencilOpState.__Internal*) __Instance)->depthFailOp;
        }

        set
        {
            ((global::VkStencilOpState.__Internal*)__Instance)->depthFailOp = value;
        }
    }

    public global::VkCompareOp CompareOp
    {
        get
        {
            return ((global::VkStencilOpState.__Internal*) __Instance)->compareOp;
        }

        set
        {
            ((global::VkStencilOpState.__Internal*)__Instance)->compareOp = value;
        }
    }

    public uint CompareMask
    {
        get
        {
            return ((global::VkStencilOpState.__Internal*) __Instance)->compareMask;
        }

        set
        {
            ((global::VkStencilOpState.__Internal*)__Instance)->compareMask = value;
        }
    }

    public uint WriteMask
    {
        get
        {
            return ((global::VkStencilOpState.__Internal*) __Instance)->writeMask;
        }

        set
        {
            ((global::VkStencilOpState.__Internal*)__Instance)->writeMask = value;
        }
    }

    public uint Reference
    {
        get
        {
            return ((global::VkStencilOpState.__Internal*) __Instance)->reference;
        }

        set
        {
            ((global::VkStencilOpState.__Internal*)__Instance)->reference = value;
        }
    }
}

public unsafe partial class VkPipelineDepthStencilStateCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 104)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(20)]
        internal uint depthTestEnable;

        [FieldOffset(24)]
        internal uint depthWriteEnable;

        [FieldOffset(28)]
        internal global::VkCompareOp depthCompareOp;

        [FieldOffset(32)]
        internal uint depthBoundsTestEnable;

        [FieldOffset(36)]
        internal uint stencilTestEnable;

        [FieldOffset(40)]
        internal global::VkStencilOpState.__Internal front;

        [FieldOffset(68)]
        internal global::VkStencilOpState.__Internal back;

        [FieldOffset(96)]
        internal float minDepthBounds;

        [FieldOffset(100)]
        internal float maxDepthBounds;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineDepthStencilStateCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineDepthStencilStateCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPipelineDepthStencilStateCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPipelineDepthStencilStateCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkPipelineDepthStencilStateCreateInfo __CreateInstance(global::VkPipelineDepthStencilStateCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkPipelineDepthStencilStateCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPipelineDepthStencilStateCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPipelineDepthStencilStateCreateInfo.__Internal));
        *(global::VkPipelineDepthStencilStateCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPipelineDepthStencilStateCreateInfo(global::VkPipelineDepthStencilStateCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPipelineDepthStencilStateCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPipelineDepthStencilStateCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPipelineDepthStencilStateCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPipelineDepthStencilStateCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPipelineDepthStencilStateCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPipelineDepthStencilStateCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPipelineDepthStencilStateCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkPipelineDepthStencilStateCreateInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkPipelineDepthStencilStateCreateInfo.__Internal*)__Instance)->flags = value;
        }
    }

    public uint DepthTestEnable
    {
        get
        {
            return ((global::VkPipelineDepthStencilStateCreateInfo.__Internal*) __Instance)->depthTestEnable;
        }

        set
        {
            ((global::VkPipelineDepthStencilStateCreateInfo.__Internal*)__Instance)->depthTestEnable = value;
        }
    }

    public uint DepthWriteEnable
    {
        get
        {
            return ((global::VkPipelineDepthStencilStateCreateInfo.__Internal*) __Instance)->depthWriteEnable;
        }

        set
        {
            ((global::VkPipelineDepthStencilStateCreateInfo.__Internal*)__Instance)->depthWriteEnable = value;
        }
    }

    public global::VkCompareOp DepthCompareOp
    {
        get
        {
            return ((global::VkPipelineDepthStencilStateCreateInfo.__Internal*) __Instance)->depthCompareOp;
        }

        set
        {
            ((global::VkPipelineDepthStencilStateCreateInfo.__Internal*)__Instance)->depthCompareOp = value;
        }
    }

    public uint DepthBoundsTestEnable
    {
        get
        {
            return ((global::VkPipelineDepthStencilStateCreateInfo.__Internal*) __Instance)->depthBoundsTestEnable;
        }

        set
        {
            ((global::VkPipelineDepthStencilStateCreateInfo.__Internal*)__Instance)->depthBoundsTestEnable = value;
        }
    }

    public uint StencilTestEnable
    {
        get
        {
            return ((global::VkPipelineDepthStencilStateCreateInfo.__Internal*) __Instance)->stencilTestEnable;
        }

        set
        {
            ((global::VkPipelineDepthStencilStateCreateInfo.__Internal*)__Instance)->stencilTestEnable = value;
        }
    }

    public global::VkStencilOpState Front
    {
        get
        {
            return global::VkStencilOpState.__CreateInstance(new global::System.IntPtr(&((global::VkPipelineDepthStencilStateCreateInfo.__Internal*) __Instance)->front));
        }

        set
        {
            ((global::VkPipelineDepthStencilStateCreateInfo.__Internal*)__Instance)->front = ReferenceEquals(value, null) ? new global::VkStencilOpState.__Internal() : *(global::VkStencilOpState.__Internal*) value.__Instance;
        }
    }

    public global::VkStencilOpState Back
    {
        get
        {
            return global::VkStencilOpState.__CreateInstance(new global::System.IntPtr(&((global::VkPipelineDepthStencilStateCreateInfo.__Internal*) __Instance)->back));
        }

        set
        {
            ((global::VkPipelineDepthStencilStateCreateInfo.__Internal*)__Instance)->back = ReferenceEquals(value, null) ? new global::VkStencilOpState.__Internal() : *(global::VkStencilOpState.__Internal*) value.__Instance;
        }
    }

    public float MinDepthBounds
    {
        get
        {
            return ((global::VkPipelineDepthStencilStateCreateInfo.__Internal*) __Instance)->minDepthBounds;
        }

        set
        {
            ((global::VkPipelineDepthStencilStateCreateInfo.__Internal*)__Instance)->minDepthBounds = value;
        }
    }

    public float MaxDepthBounds
    {
        get
        {
            return ((global::VkPipelineDepthStencilStateCreateInfo.__Internal*) __Instance)->maxDepthBounds;
        }

        set
        {
            ((global::VkPipelineDepthStencilStateCreateInfo.__Internal*)__Instance)->maxDepthBounds = value;
        }
    }
}

public unsafe partial class VkPipelineColorBlendAttachmentState : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint blendEnable;

        [FieldOffset(4)]
        internal global::VkBlendFactor srcColorBlendFactor;

        [FieldOffset(8)]
        internal global::VkBlendFactor dstColorBlendFactor;

        [FieldOffset(12)]
        internal global::VkBlendOp colorBlendOp;

        [FieldOffset(16)]
        internal global::VkBlendFactor srcAlphaBlendFactor;

        [FieldOffset(20)]
        internal global::VkBlendFactor dstAlphaBlendFactor;

        [FieldOffset(24)]
        internal global::VkBlendOp alphaBlendOp;

        [FieldOffset(28)]
        internal uint colorWriteMask;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineColorBlendAttachmentState> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineColorBlendAttachmentState>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPipelineColorBlendAttachmentState __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPipelineColorBlendAttachmentState(native.ToPointer(), skipVTables);
    }

    internal static global::VkPipelineColorBlendAttachmentState __CreateInstance(global::VkPipelineColorBlendAttachmentState.__Internal native, bool skipVTables = false)
    {
        return new global::VkPipelineColorBlendAttachmentState(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPipelineColorBlendAttachmentState.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPipelineColorBlendAttachmentState.__Internal));
        *(global::VkPipelineColorBlendAttachmentState.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPipelineColorBlendAttachmentState(global::VkPipelineColorBlendAttachmentState.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPipelineColorBlendAttachmentState(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPipelineColorBlendAttachmentState()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPipelineColorBlendAttachmentState __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint BlendEnable
    {
        get
        {
            return ((global::VkPipelineColorBlendAttachmentState.__Internal*) __Instance)->blendEnable;
        }

        set
        {
            ((global::VkPipelineColorBlendAttachmentState.__Internal*)__Instance)->blendEnable = value;
        }
    }

    public global::VkBlendFactor SrcColorBlendFactor
    {
        get
        {
            return ((global::VkPipelineColorBlendAttachmentState.__Internal*) __Instance)->srcColorBlendFactor;
        }

        set
        {
            ((global::VkPipelineColorBlendAttachmentState.__Internal*)__Instance)->srcColorBlendFactor = value;
        }
    }

    public global::VkBlendFactor DstColorBlendFactor
    {
        get
        {
            return ((global::VkPipelineColorBlendAttachmentState.__Internal*) __Instance)->dstColorBlendFactor;
        }

        set
        {
            ((global::VkPipelineColorBlendAttachmentState.__Internal*)__Instance)->dstColorBlendFactor = value;
        }
    }

    public global::VkBlendOp ColorBlendOp
    {
        get
        {
            return ((global::VkPipelineColorBlendAttachmentState.__Internal*) __Instance)->colorBlendOp;
        }

        set
        {
            ((global::VkPipelineColorBlendAttachmentState.__Internal*)__Instance)->colorBlendOp = value;
        }
    }

    public global::VkBlendFactor SrcAlphaBlendFactor
    {
        get
        {
            return ((global::VkPipelineColorBlendAttachmentState.__Internal*) __Instance)->srcAlphaBlendFactor;
        }

        set
        {
            ((global::VkPipelineColorBlendAttachmentState.__Internal*)__Instance)->srcAlphaBlendFactor = value;
        }
    }

    public global::VkBlendFactor DstAlphaBlendFactor
    {
        get
        {
            return ((global::VkPipelineColorBlendAttachmentState.__Internal*) __Instance)->dstAlphaBlendFactor;
        }

        set
        {
            ((global::VkPipelineColorBlendAttachmentState.__Internal*)__Instance)->dstAlphaBlendFactor = value;
        }
    }

    public global::VkBlendOp AlphaBlendOp
    {
        get
        {
            return ((global::VkPipelineColorBlendAttachmentState.__Internal*) __Instance)->alphaBlendOp;
        }

        set
        {
            ((global::VkPipelineColorBlendAttachmentState.__Internal*)__Instance)->alphaBlendOp = value;
        }
    }

    public uint ColorWriteMask
    {
        get
        {
            return ((global::VkPipelineColorBlendAttachmentState.__Internal*) __Instance)->colorWriteMask;
        }

        set
        {
            ((global::VkPipelineColorBlendAttachmentState.__Internal*)__Instance)->colorWriteMask = value;
        }
    }
}

public unsafe partial class VkPipelineColorBlendStateCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 56)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(20)]
        internal uint logicOpEnable;

        [FieldOffset(24)]
        internal global::VkLogicOp logicOp;

        [FieldOffset(28)]
        internal uint attachmentCount;

        [FieldOffset(32)]
        internal global::System.IntPtr pAttachments;

        [FieldOffset(40)]
        internal fixed float blendConstants[4];
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineColorBlendStateCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineColorBlendStateCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPipelineColorBlendStateCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPipelineColorBlendStateCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkPipelineColorBlendStateCreateInfo __CreateInstance(global::VkPipelineColorBlendStateCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkPipelineColorBlendStateCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPipelineColorBlendStateCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPipelineColorBlendStateCreateInfo.__Internal));
        *(global::VkPipelineColorBlendStateCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPipelineColorBlendStateCreateInfo(global::VkPipelineColorBlendStateCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPipelineColorBlendStateCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPipelineColorBlendStateCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPipelineColorBlendStateCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPipelineColorBlendStateCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPipelineColorBlendStateCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPipelineColorBlendStateCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPipelineColorBlendStateCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkPipelineColorBlendStateCreateInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkPipelineColorBlendStateCreateInfo.__Internal*)__Instance)->flags = value;
        }
    }

    public uint LogicOpEnable
    {
        get
        {
            return ((global::VkPipelineColorBlendStateCreateInfo.__Internal*) __Instance)->logicOpEnable;
        }

        set
        {
            ((global::VkPipelineColorBlendStateCreateInfo.__Internal*)__Instance)->logicOpEnable = value;
        }
    }

    public global::VkLogicOp LogicOp
    {
        get
        {
            return ((global::VkPipelineColorBlendStateCreateInfo.__Internal*) __Instance)->logicOp;
        }

        set
        {
            ((global::VkPipelineColorBlendStateCreateInfo.__Internal*)__Instance)->logicOp = value;
        }
    }

    public uint AttachmentCount
    {
        get
        {
            return ((global::VkPipelineColorBlendStateCreateInfo.__Internal*) __Instance)->attachmentCount;
        }

        set
        {
            ((global::VkPipelineColorBlendStateCreateInfo.__Internal*)__Instance)->attachmentCount = value;
        }
    }

    public global::VkPipelineColorBlendAttachmentState PAttachments
    {
        get
        {
            global::VkPipelineColorBlendAttachmentState __result0;
            if (((global::VkPipelineColorBlendStateCreateInfo.__Internal*) __Instance)->pAttachments == IntPtr.Zero) __result0 = null;
            else if (global::VkPipelineColorBlendAttachmentState.NativeToManagedMap.ContainsKey(((global::VkPipelineColorBlendStateCreateInfo.__Internal*) __Instance)->pAttachments))
                __result0 = (global::VkPipelineColorBlendAttachmentState) global::VkPipelineColorBlendAttachmentState.NativeToManagedMap[((global::VkPipelineColorBlendStateCreateInfo.__Internal*) __Instance)->pAttachments];
            else __result0 = global::VkPipelineColorBlendAttachmentState.__CreateInstance(((global::VkPipelineColorBlendStateCreateInfo.__Internal*) __Instance)->pAttachments);
            return __result0;
        }

        set
        {
            ((global::VkPipelineColorBlendStateCreateInfo.__Internal*)__Instance)->pAttachments = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public float[] BlendConstants
    {
        get
        {
            float[] __value = null;
            if (((global::VkPipelineColorBlendStateCreateInfo.__Internal*) __Instance)->blendConstants != null)
            {
                __value = new float[4];
                for (int i = 0; i < 4; i++)
                    __value[i] = ((global::VkPipelineColorBlendStateCreateInfo.__Internal*) __Instance)->blendConstants[i];
            }
            return __value;
        }

        set
        {
            if (value != null)
            {
                for (int i = 0; i < 4; i++)
                    ((global::VkPipelineColorBlendStateCreateInfo.__Internal*)__Instance)->blendConstants[i] = value[i];
            }
        }
    }
}

public unsafe partial class VkPipelineDynamicStateCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(20)]
        internal uint dynamicStateCount;

        [FieldOffset(24)]
        internal global::System.IntPtr pDynamicStates;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineDynamicStateCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineDynamicStateCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPipelineDynamicStateCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPipelineDynamicStateCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkPipelineDynamicStateCreateInfo __CreateInstance(global::VkPipelineDynamicStateCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkPipelineDynamicStateCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPipelineDynamicStateCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPipelineDynamicStateCreateInfo.__Internal));
        *(global::VkPipelineDynamicStateCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPipelineDynamicStateCreateInfo(global::VkPipelineDynamicStateCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPipelineDynamicStateCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPipelineDynamicStateCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPipelineDynamicStateCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPipelineDynamicStateCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPipelineDynamicStateCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPipelineDynamicStateCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPipelineDynamicStateCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkPipelineDynamicStateCreateInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkPipelineDynamicStateCreateInfo.__Internal*)__Instance)->flags = value;
        }
    }

    public uint DynamicStateCount
    {
        get
        {
            return ((global::VkPipelineDynamicStateCreateInfo.__Internal*) __Instance)->dynamicStateCount;
        }

        set
        {
            ((global::VkPipelineDynamicStateCreateInfo.__Internal*)__Instance)->dynamicStateCount = value;
        }
    }

    public global::VkDynamicState* PDynamicStates
    {
        get
        {
            return ((global::VkPipelineDynamicStateCreateInfo.__Internal*) __Instance)->pDynamicStates;
        }

        set
        {
            ((global::VkPipelineDynamicStateCreateInfo.__Internal*)__Instance)->pDynamicStates = value;
        }
    }
}

public unsafe partial class VkGraphicsPipelineCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 144)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(20)]
        internal uint stageCount;

        [FieldOffset(24)]
        internal global::System.IntPtr pStages;

        [FieldOffset(32)]
        internal global::System.IntPtr pVertexInputState;

        [FieldOffset(40)]
        internal global::System.IntPtr pInputAssemblyState;

        [FieldOffset(48)]
        internal global::System.IntPtr pTessellationState;

        [FieldOffset(56)]
        internal global::System.IntPtr pViewportState;

        [FieldOffset(64)]
        internal global::System.IntPtr pRasterizationState;

        [FieldOffset(72)]
        internal global::System.IntPtr pMultisampleState;

        [FieldOffset(80)]
        internal global::System.IntPtr pDepthStencilState;

        [FieldOffset(88)]
        internal global::System.IntPtr pColorBlendState;

        [FieldOffset(96)]
        internal global::System.IntPtr pDynamicState;

        [FieldOffset(104)]
        internal global::System.IntPtr layout;

        [FieldOffset(112)]
        internal global::System.IntPtr renderPass;

        [FieldOffset(120)]
        internal uint subpass;

        [FieldOffset(128)]
        internal global::System.IntPtr basePipelineHandle;

        [FieldOffset(136)]
        internal int basePipelineIndex;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkGraphicsPipelineCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkGraphicsPipelineCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkGraphicsPipelineCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkGraphicsPipelineCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkGraphicsPipelineCreateInfo __CreateInstance(global::VkGraphicsPipelineCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkGraphicsPipelineCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkGraphicsPipelineCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkGraphicsPipelineCreateInfo.__Internal));
        *(global::VkGraphicsPipelineCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkGraphicsPipelineCreateInfo(global::VkGraphicsPipelineCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkGraphicsPipelineCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkGraphicsPipelineCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkGraphicsPipelineCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkGraphicsPipelineCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkGraphicsPipelineCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkGraphicsPipelineCreateInfo.__Internal*)__Instance)->flags = value;
        }
    }

    public uint StageCount
    {
        get
        {
            return ((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->stageCount;
        }

        set
        {
            ((global::VkGraphicsPipelineCreateInfo.__Internal*)__Instance)->stageCount = value;
        }
    }

    public global::VkPipelineShaderStageCreateInfo PStages
    {
        get
        {
            global::VkPipelineShaderStageCreateInfo __result0;
            if (((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pStages == IntPtr.Zero) __result0 = null;
            else if (global::VkPipelineShaderStageCreateInfo.NativeToManagedMap.ContainsKey(((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pStages))
                __result0 = (global::VkPipelineShaderStageCreateInfo) global::VkPipelineShaderStageCreateInfo.NativeToManagedMap[((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pStages];
            else __result0 = global::VkPipelineShaderStageCreateInfo.__CreateInstance(((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pStages);
            return __result0;
        }

        set
        {
            ((global::VkGraphicsPipelineCreateInfo.__Internal*)__Instance)->pStages = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkPipelineVertexInputStateCreateInfo PVertexInputState
    {
        get
        {
            global::VkPipelineVertexInputStateCreateInfo __result0;
            if (((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pVertexInputState == IntPtr.Zero) __result0 = null;
            else if (global::VkPipelineVertexInputStateCreateInfo.NativeToManagedMap.ContainsKey(((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pVertexInputState))
                __result0 = (global::VkPipelineVertexInputStateCreateInfo) global::VkPipelineVertexInputStateCreateInfo.NativeToManagedMap[((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pVertexInputState];
            else __result0 = global::VkPipelineVertexInputStateCreateInfo.__CreateInstance(((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pVertexInputState);
            return __result0;
        }

        set
        {
            ((global::VkGraphicsPipelineCreateInfo.__Internal*)__Instance)->pVertexInputState = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkPipelineInputAssemblyStateCreateInfo PInputAssemblyState
    {
        get
        {
            global::VkPipelineInputAssemblyStateCreateInfo __result0;
            if (((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pInputAssemblyState == IntPtr.Zero) __result0 = null;
            else if (global::VkPipelineInputAssemblyStateCreateInfo.NativeToManagedMap.ContainsKey(((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pInputAssemblyState))
                __result0 = (global::VkPipelineInputAssemblyStateCreateInfo) global::VkPipelineInputAssemblyStateCreateInfo.NativeToManagedMap[((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pInputAssemblyState];
            else __result0 = global::VkPipelineInputAssemblyStateCreateInfo.__CreateInstance(((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pInputAssemblyState);
            return __result0;
        }

        set
        {
            ((global::VkGraphicsPipelineCreateInfo.__Internal*)__Instance)->pInputAssemblyState = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkPipelineTessellationStateCreateInfo PTessellationState
    {
        get
        {
            global::VkPipelineTessellationStateCreateInfo __result0;
            if (((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pTessellationState == IntPtr.Zero) __result0 = null;
            else if (global::VkPipelineTessellationStateCreateInfo.NativeToManagedMap.ContainsKey(((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pTessellationState))
                __result0 = (global::VkPipelineTessellationStateCreateInfo) global::VkPipelineTessellationStateCreateInfo.NativeToManagedMap[((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pTessellationState];
            else __result0 = global::VkPipelineTessellationStateCreateInfo.__CreateInstance(((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pTessellationState);
            return __result0;
        }

        set
        {
            ((global::VkGraphicsPipelineCreateInfo.__Internal*)__Instance)->pTessellationState = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkPipelineViewportStateCreateInfo PViewportState
    {
        get
        {
            global::VkPipelineViewportStateCreateInfo __result0;
            if (((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pViewportState == IntPtr.Zero) __result0 = null;
            else if (global::VkPipelineViewportStateCreateInfo.NativeToManagedMap.ContainsKey(((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pViewportState))
                __result0 = (global::VkPipelineViewportStateCreateInfo) global::VkPipelineViewportStateCreateInfo.NativeToManagedMap[((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pViewportState];
            else __result0 = global::VkPipelineViewportStateCreateInfo.__CreateInstance(((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pViewportState);
            return __result0;
        }

        set
        {
            ((global::VkGraphicsPipelineCreateInfo.__Internal*)__Instance)->pViewportState = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkPipelineRasterizationStateCreateInfo PRasterizationState
    {
        get
        {
            global::VkPipelineRasterizationStateCreateInfo __result0;
            if (((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pRasterizationState == IntPtr.Zero) __result0 = null;
            else if (global::VkPipelineRasterizationStateCreateInfo.NativeToManagedMap.ContainsKey(((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pRasterizationState))
                __result0 = (global::VkPipelineRasterizationStateCreateInfo) global::VkPipelineRasterizationStateCreateInfo.NativeToManagedMap[((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pRasterizationState];
            else __result0 = global::VkPipelineRasterizationStateCreateInfo.__CreateInstance(((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pRasterizationState);
            return __result0;
        }

        set
        {
            ((global::VkGraphicsPipelineCreateInfo.__Internal*)__Instance)->pRasterizationState = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkPipelineMultisampleStateCreateInfo PMultisampleState
    {
        get
        {
            global::VkPipelineMultisampleStateCreateInfo __result0;
            if (((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pMultisampleState == IntPtr.Zero) __result0 = null;
            else if (global::VkPipelineMultisampleStateCreateInfo.NativeToManagedMap.ContainsKey(((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pMultisampleState))
                __result0 = (global::VkPipelineMultisampleStateCreateInfo) global::VkPipelineMultisampleStateCreateInfo.NativeToManagedMap[((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pMultisampleState];
            else __result0 = global::VkPipelineMultisampleStateCreateInfo.__CreateInstance(((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pMultisampleState);
            return __result0;
        }

        set
        {
            ((global::VkGraphicsPipelineCreateInfo.__Internal*)__Instance)->pMultisampleState = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkPipelineDepthStencilStateCreateInfo PDepthStencilState
    {
        get
        {
            global::VkPipelineDepthStencilStateCreateInfo __result0;
            if (((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pDepthStencilState == IntPtr.Zero) __result0 = null;
            else if (global::VkPipelineDepthStencilStateCreateInfo.NativeToManagedMap.ContainsKey(((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pDepthStencilState))
                __result0 = (global::VkPipelineDepthStencilStateCreateInfo) global::VkPipelineDepthStencilStateCreateInfo.NativeToManagedMap[((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pDepthStencilState];
            else __result0 = global::VkPipelineDepthStencilStateCreateInfo.__CreateInstance(((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pDepthStencilState);
            return __result0;
        }

        set
        {
            ((global::VkGraphicsPipelineCreateInfo.__Internal*)__Instance)->pDepthStencilState = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkPipelineColorBlendStateCreateInfo PColorBlendState
    {
        get
        {
            global::VkPipelineColorBlendStateCreateInfo __result0;
            if (((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pColorBlendState == IntPtr.Zero) __result0 = null;
            else if (global::VkPipelineColorBlendStateCreateInfo.NativeToManagedMap.ContainsKey(((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pColorBlendState))
                __result0 = (global::VkPipelineColorBlendStateCreateInfo) global::VkPipelineColorBlendStateCreateInfo.NativeToManagedMap[((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pColorBlendState];
            else __result0 = global::VkPipelineColorBlendStateCreateInfo.__CreateInstance(((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pColorBlendState);
            return __result0;
        }

        set
        {
            ((global::VkGraphicsPipelineCreateInfo.__Internal*)__Instance)->pColorBlendState = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkPipelineDynamicStateCreateInfo PDynamicState
    {
        get
        {
            global::VkPipelineDynamicStateCreateInfo __result0;
            if (((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pDynamicState == IntPtr.Zero) __result0 = null;
            else if (global::VkPipelineDynamicStateCreateInfo.NativeToManagedMap.ContainsKey(((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pDynamicState))
                __result0 = (global::VkPipelineDynamicStateCreateInfo) global::VkPipelineDynamicStateCreateInfo.NativeToManagedMap[((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pDynamicState];
            else __result0 = global::VkPipelineDynamicStateCreateInfo.__CreateInstance(((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->pDynamicState);
            return __result0;
        }

        set
        {
            ((global::VkGraphicsPipelineCreateInfo.__Internal*)__Instance)->pDynamicState = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkPipelineLayoutT Layout
    {
        get
        {
            global::VkPipelineLayoutT __result0;
            if (((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->layout == IntPtr.Zero) __result0 = null;
            else if (global::VkPipelineLayoutT.NativeToManagedMap.ContainsKey(((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->layout))
                __result0 = (global::VkPipelineLayoutT) global::VkPipelineLayoutT.NativeToManagedMap[((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->layout];
            else __result0 = global::VkPipelineLayoutT.__CreateInstance(((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->layout);
            return __result0;
        }

        set
        {
            ((global::VkGraphicsPipelineCreateInfo.__Internal*)__Instance)->layout = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkRenderPassT RenderPass
    {
        get
        {
            global::VkRenderPassT __result0;
            if (((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->renderPass == IntPtr.Zero) __result0 = null;
            else if (global::VkRenderPassT.NativeToManagedMap.ContainsKey(((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->renderPass))
                __result0 = (global::VkRenderPassT) global::VkRenderPassT.NativeToManagedMap[((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->renderPass];
            else __result0 = global::VkRenderPassT.__CreateInstance(((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->renderPass);
            return __result0;
        }

        set
        {
            ((global::VkGraphicsPipelineCreateInfo.__Internal*)__Instance)->renderPass = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint Subpass
    {
        get
        {
            return ((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->subpass;
        }

        set
        {
            ((global::VkGraphicsPipelineCreateInfo.__Internal*)__Instance)->subpass = value;
        }
    }

    public global::VkPipelineT BasePipelineHandle
    {
        get
        {
            global::VkPipelineT __result0;
            if (((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->basePipelineHandle == IntPtr.Zero) __result0 = null;
            else if (global::VkPipelineT.NativeToManagedMap.ContainsKey(((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->basePipelineHandle))
                __result0 = (global::VkPipelineT) global::VkPipelineT.NativeToManagedMap[((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->basePipelineHandle];
            else __result0 = global::VkPipelineT.__CreateInstance(((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->basePipelineHandle);
            return __result0;
        }

        set
        {
            ((global::VkGraphicsPipelineCreateInfo.__Internal*)__Instance)->basePipelineHandle = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public int BasePipelineIndex
    {
        get
        {
            return ((global::VkGraphicsPipelineCreateInfo.__Internal*) __Instance)->basePipelineIndex;
        }

        set
        {
            ((global::VkGraphicsPipelineCreateInfo.__Internal*)__Instance)->basePipelineIndex = value;
        }
    }
}

public unsafe partial class VkComputePipelineCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 96)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(24)]
        internal global::VkPipelineShaderStageCreateInfo.__Internal stage;

        [FieldOffset(72)]
        internal global::System.IntPtr layout;

        [FieldOffset(80)]
        internal global::System.IntPtr basePipelineHandle;

        [FieldOffset(88)]
        internal int basePipelineIndex;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkComputePipelineCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkComputePipelineCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkComputePipelineCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkComputePipelineCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkComputePipelineCreateInfo __CreateInstance(global::VkComputePipelineCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkComputePipelineCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkComputePipelineCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkComputePipelineCreateInfo.__Internal));
        *(global::VkComputePipelineCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkComputePipelineCreateInfo(global::VkComputePipelineCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkComputePipelineCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkComputePipelineCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkComputePipelineCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkComputePipelineCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkComputePipelineCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkComputePipelineCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkComputePipelineCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkComputePipelineCreateInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkComputePipelineCreateInfo.__Internal*)__Instance)->flags = value;
        }
    }

    public global::VkPipelineShaderStageCreateInfo Stage
    {
        get
        {
            return global::VkPipelineShaderStageCreateInfo.__CreateInstance(new global::System.IntPtr(&((global::VkComputePipelineCreateInfo.__Internal*) __Instance)->stage));
        }

        set
        {
            ((global::VkComputePipelineCreateInfo.__Internal*)__Instance)->stage = ReferenceEquals(value, null) ? new global::VkPipelineShaderStageCreateInfo.__Internal() : *(global::VkPipelineShaderStageCreateInfo.__Internal*) value.__Instance;
        }
    }

    public global::VkPipelineLayoutT Layout
    {
        get
        {
            global::VkPipelineLayoutT __result0;
            if (((global::VkComputePipelineCreateInfo.__Internal*) __Instance)->layout == IntPtr.Zero) __result0 = null;
            else if (global::VkPipelineLayoutT.NativeToManagedMap.ContainsKey(((global::VkComputePipelineCreateInfo.__Internal*) __Instance)->layout))
                __result0 = (global::VkPipelineLayoutT) global::VkPipelineLayoutT.NativeToManagedMap[((global::VkComputePipelineCreateInfo.__Internal*) __Instance)->layout];
            else __result0 = global::VkPipelineLayoutT.__CreateInstance(((global::VkComputePipelineCreateInfo.__Internal*) __Instance)->layout);
            return __result0;
        }

        set
        {
            ((global::VkComputePipelineCreateInfo.__Internal*)__Instance)->layout = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkPipelineT BasePipelineHandle
    {
        get
        {
            global::VkPipelineT __result0;
            if (((global::VkComputePipelineCreateInfo.__Internal*) __Instance)->basePipelineHandle == IntPtr.Zero) __result0 = null;
            else if (global::VkPipelineT.NativeToManagedMap.ContainsKey(((global::VkComputePipelineCreateInfo.__Internal*) __Instance)->basePipelineHandle))
                __result0 = (global::VkPipelineT) global::VkPipelineT.NativeToManagedMap[((global::VkComputePipelineCreateInfo.__Internal*) __Instance)->basePipelineHandle];
            else __result0 = global::VkPipelineT.__CreateInstance(((global::VkComputePipelineCreateInfo.__Internal*) __Instance)->basePipelineHandle);
            return __result0;
        }

        set
        {
            ((global::VkComputePipelineCreateInfo.__Internal*)__Instance)->basePipelineHandle = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public int BasePipelineIndex
    {
        get
        {
            return ((global::VkComputePipelineCreateInfo.__Internal*) __Instance)->basePipelineIndex;
        }

        set
        {
            ((global::VkComputePipelineCreateInfo.__Internal*)__Instance)->basePipelineIndex = value;
        }
    }
}

public unsafe partial class VkPushConstantRange : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 12)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint stageFlags;

        [FieldOffset(4)]
        internal uint offset;

        [FieldOffset(8)]
        internal uint size;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPushConstantRange> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPushConstantRange>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPushConstantRange __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPushConstantRange(native.ToPointer(), skipVTables);
    }

    internal static global::VkPushConstantRange __CreateInstance(global::VkPushConstantRange.__Internal native, bool skipVTables = false)
    {
        return new global::VkPushConstantRange(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPushConstantRange.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPushConstantRange.__Internal));
        *(global::VkPushConstantRange.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPushConstantRange(global::VkPushConstantRange.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPushConstantRange(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPushConstantRange()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPushConstantRange __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint StageFlags
    {
        get
        {
            return ((global::VkPushConstantRange.__Internal*) __Instance)->stageFlags;
        }

        set
        {
            ((global::VkPushConstantRange.__Internal*)__Instance)->stageFlags = value;
        }
    }

    public uint Offset
    {
        get
        {
            return ((global::VkPushConstantRange.__Internal*) __Instance)->offset;
        }

        set
        {
            ((global::VkPushConstantRange.__Internal*)__Instance)->offset = value;
        }
    }

    public uint Size
    {
        get
        {
            return ((global::VkPushConstantRange.__Internal*) __Instance)->size;
        }

        set
        {
            ((global::VkPushConstantRange.__Internal*)__Instance)->size = value;
        }
    }
}

public unsafe partial class VkPipelineLayoutCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 48)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(20)]
        internal uint setLayoutCount;

        [FieldOffset(24)]
        internal global::System.IntPtr pSetLayouts;

        [FieldOffset(32)]
        internal uint pushConstantRangeCount;

        [FieldOffset(40)]
        internal global::System.IntPtr pPushConstantRanges;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineLayoutCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineLayoutCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPipelineLayoutCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPipelineLayoutCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkPipelineLayoutCreateInfo __CreateInstance(global::VkPipelineLayoutCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkPipelineLayoutCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPipelineLayoutCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPipelineLayoutCreateInfo.__Internal));
        *(global::VkPipelineLayoutCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPipelineLayoutCreateInfo(global::VkPipelineLayoutCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPipelineLayoutCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPipelineLayoutCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPipelineLayoutCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPipelineLayoutCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPipelineLayoutCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPipelineLayoutCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPipelineLayoutCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkPipelineLayoutCreateInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkPipelineLayoutCreateInfo.__Internal*)__Instance)->flags = value;
        }
    }

    public uint SetLayoutCount
    {
        get
        {
            return ((global::VkPipelineLayoutCreateInfo.__Internal*) __Instance)->setLayoutCount;
        }

        set
        {
            ((global::VkPipelineLayoutCreateInfo.__Internal*)__Instance)->setLayoutCount = value;
        }
    }

    public global::VkDescriptorSetLayoutT PSetLayouts
    {
        get
        {
            global::VkDescriptorSetLayoutT __result0;
            if (((global::VkPipelineLayoutCreateInfo.__Internal*) __Instance)->pSetLayouts == IntPtr.Zero) __result0 = null;
            else if (global::VkDescriptorSetLayoutT.NativeToManagedMap.ContainsKey(((global::VkPipelineLayoutCreateInfo.__Internal*) __Instance)->pSetLayouts))
                __result0 = (global::VkDescriptorSetLayoutT) global::VkDescriptorSetLayoutT.NativeToManagedMap[((global::VkPipelineLayoutCreateInfo.__Internal*) __Instance)->pSetLayouts];
            else __result0 = global::VkDescriptorSetLayoutT.__CreateInstance(((global::VkPipelineLayoutCreateInfo.__Internal*) __Instance)->pSetLayouts);
            return __result0;
        }

        set
        {
            ((global::VkPipelineLayoutCreateInfo.__Internal*)__Instance)->pSetLayouts = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint PushConstantRangeCount
    {
        get
        {
            return ((global::VkPipelineLayoutCreateInfo.__Internal*) __Instance)->pushConstantRangeCount;
        }

        set
        {
            ((global::VkPipelineLayoutCreateInfo.__Internal*)__Instance)->pushConstantRangeCount = value;
        }
    }

    public global::VkPushConstantRange PPushConstantRanges
    {
        get
        {
            global::VkPushConstantRange __result0;
            if (((global::VkPipelineLayoutCreateInfo.__Internal*) __Instance)->pPushConstantRanges == IntPtr.Zero) __result0 = null;
            else if (global::VkPushConstantRange.NativeToManagedMap.ContainsKey(((global::VkPipelineLayoutCreateInfo.__Internal*) __Instance)->pPushConstantRanges))
                __result0 = (global::VkPushConstantRange) global::VkPushConstantRange.NativeToManagedMap[((global::VkPipelineLayoutCreateInfo.__Internal*) __Instance)->pPushConstantRanges];
            else __result0 = global::VkPushConstantRange.__CreateInstance(((global::VkPipelineLayoutCreateInfo.__Internal*) __Instance)->pPushConstantRanges);
            return __result0;
        }

        set
        {
            ((global::VkPipelineLayoutCreateInfo.__Internal*)__Instance)->pPushConstantRanges = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkSamplerCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 80)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(20)]
        internal global::VkFilter magFilter;

        [FieldOffset(24)]
        internal global::VkFilter minFilter;

        [FieldOffset(28)]
        internal global::VkSamplerMipmapMode mipmapMode;

        [FieldOffset(32)]
        internal global::VkSamplerAddressMode addressModeU;

        [FieldOffset(36)]
        internal global::VkSamplerAddressMode addressModeV;

        [FieldOffset(40)]
        internal global::VkSamplerAddressMode addressModeW;

        [FieldOffset(44)]
        internal float mipLodBias;

        [FieldOffset(48)]
        internal uint anisotropyEnable;

        [FieldOffset(52)]
        internal float maxAnisotropy;

        [FieldOffset(56)]
        internal uint compareEnable;

        [FieldOffset(60)]
        internal global::VkCompareOp compareOp;

        [FieldOffset(64)]
        internal float minLod;

        [FieldOffset(68)]
        internal float maxLod;

        [FieldOffset(72)]
        internal global::VkBorderColor borderColor;

        [FieldOffset(76)]
        internal uint unnormalizedCoordinates;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSamplerCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSamplerCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSamplerCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSamplerCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkSamplerCreateInfo __CreateInstance(global::VkSamplerCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkSamplerCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSamplerCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSamplerCreateInfo.__Internal));
        *(global::VkSamplerCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSamplerCreateInfo(global::VkSamplerCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSamplerCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSamplerCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkSamplerCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkSamplerCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkSamplerCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkSamplerCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkSamplerCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkSamplerCreateInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkSamplerCreateInfo.__Internal*)__Instance)->flags = value;
        }
    }

    public global::VkFilter MagFilter
    {
        get
        {
            return ((global::VkSamplerCreateInfo.__Internal*) __Instance)->magFilter;
        }

        set
        {
            ((global::VkSamplerCreateInfo.__Internal*)__Instance)->magFilter = value;
        }
    }

    public global::VkFilter MinFilter
    {
        get
        {
            return ((global::VkSamplerCreateInfo.__Internal*) __Instance)->minFilter;
        }

        set
        {
            ((global::VkSamplerCreateInfo.__Internal*)__Instance)->minFilter = value;
        }
    }

    public global::VkSamplerMipmapMode MipmapMode
    {
        get
        {
            return ((global::VkSamplerCreateInfo.__Internal*) __Instance)->mipmapMode;
        }

        set
        {
            ((global::VkSamplerCreateInfo.__Internal*)__Instance)->mipmapMode = value;
        }
    }

    public global::VkSamplerAddressMode AddressModeU
    {
        get
        {
            return ((global::VkSamplerCreateInfo.__Internal*) __Instance)->addressModeU;
        }

        set
        {
            ((global::VkSamplerCreateInfo.__Internal*)__Instance)->addressModeU = value;
        }
    }

    public global::VkSamplerAddressMode AddressModeV
    {
        get
        {
            return ((global::VkSamplerCreateInfo.__Internal*) __Instance)->addressModeV;
        }

        set
        {
            ((global::VkSamplerCreateInfo.__Internal*)__Instance)->addressModeV = value;
        }
    }

    public global::VkSamplerAddressMode AddressModeW
    {
        get
        {
            return ((global::VkSamplerCreateInfo.__Internal*) __Instance)->addressModeW;
        }

        set
        {
            ((global::VkSamplerCreateInfo.__Internal*)__Instance)->addressModeW = value;
        }
    }

    public float MipLodBias
    {
        get
        {
            return ((global::VkSamplerCreateInfo.__Internal*) __Instance)->mipLodBias;
        }

        set
        {
            ((global::VkSamplerCreateInfo.__Internal*)__Instance)->mipLodBias = value;
        }
    }

    public uint AnisotropyEnable
    {
        get
        {
            return ((global::VkSamplerCreateInfo.__Internal*) __Instance)->anisotropyEnable;
        }

        set
        {
            ((global::VkSamplerCreateInfo.__Internal*)__Instance)->anisotropyEnable = value;
        }
    }

    public float MaxAnisotropy
    {
        get
        {
            return ((global::VkSamplerCreateInfo.__Internal*) __Instance)->maxAnisotropy;
        }

        set
        {
            ((global::VkSamplerCreateInfo.__Internal*)__Instance)->maxAnisotropy = value;
        }
    }

    public uint CompareEnable
    {
        get
        {
            return ((global::VkSamplerCreateInfo.__Internal*) __Instance)->compareEnable;
        }

        set
        {
            ((global::VkSamplerCreateInfo.__Internal*)__Instance)->compareEnable = value;
        }
    }

    public global::VkCompareOp CompareOp
    {
        get
        {
            return ((global::VkSamplerCreateInfo.__Internal*) __Instance)->compareOp;
        }

        set
        {
            ((global::VkSamplerCreateInfo.__Internal*)__Instance)->compareOp = value;
        }
    }

    public float MinLod
    {
        get
        {
            return ((global::VkSamplerCreateInfo.__Internal*) __Instance)->minLod;
        }

        set
        {
            ((global::VkSamplerCreateInfo.__Internal*)__Instance)->minLod = value;
        }
    }

    public float MaxLod
    {
        get
        {
            return ((global::VkSamplerCreateInfo.__Internal*) __Instance)->maxLod;
        }

        set
        {
            ((global::VkSamplerCreateInfo.__Internal*)__Instance)->maxLod = value;
        }
    }

    public global::VkBorderColor BorderColor
    {
        get
        {
            return ((global::VkSamplerCreateInfo.__Internal*) __Instance)->borderColor;
        }

        set
        {
            ((global::VkSamplerCreateInfo.__Internal*)__Instance)->borderColor = value;
        }
    }

    public uint UnnormalizedCoordinates
    {
        get
        {
            return ((global::VkSamplerCreateInfo.__Internal*) __Instance)->unnormalizedCoordinates;
        }

        set
        {
            ((global::VkSamplerCreateInfo.__Internal*)__Instance)->unnormalizedCoordinates = value;
        }
    }
}

public unsafe partial class VkDescriptorSetLayoutBinding : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint binding;

        [FieldOffset(4)]
        internal global::VkDescriptorType descriptorType;

        [FieldOffset(8)]
        internal uint descriptorCount;

        [FieldOffset(12)]
        internal uint stageFlags;

        [FieldOffset(16)]
        internal global::System.IntPtr pImmutableSamplers;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorSetLayoutBinding> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorSetLayoutBinding>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDescriptorSetLayoutBinding __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDescriptorSetLayoutBinding(native.ToPointer(), skipVTables);
    }

    internal static global::VkDescriptorSetLayoutBinding __CreateInstance(global::VkDescriptorSetLayoutBinding.__Internal native, bool skipVTables = false)
    {
        return new global::VkDescriptorSetLayoutBinding(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDescriptorSetLayoutBinding.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDescriptorSetLayoutBinding.__Internal));
        *(global::VkDescriptorSetLayoutBinding.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDescriptorSetLayoutBinding(global::VkDescriptorSetLayoutBinding.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDescriptorSetLayoutBinding(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDescriptorSetLayoutBinding()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDescriptorSetLayoutBinding __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint Binding
    {
        get
        {
            return ((global::VkDescriptorSetLayoutBinding.__Internal*) __Instance)->binding;
        }

        set
        {
            ((global::VkDescriptorSetLayoutBinding.__Internal*)__Instance)->binding = value;
        }
    }

    public global::VkDescriptorType DescriptorType
    {
        get
        {
            return ((global::VkDescriptorSetLayoutBinding.__Internal*) __Instance)->descriptorType;
        }

        set
        {
            ((global::VkDescriptorSetLayoutBinding.__Internal*)__Instance)->descriptorType = value;
        }
    }

    public uint DescriptorCount
    {
        get
        {
            return ((global::VkDescriptorSetLayoutBinding.__Internal*) __Instance)->descriptorCount;
        }

        set
        {
            ((global::VkDescriptorSetLayoutBinding.__Internal*)__Instance)->descriptorCount = value;
        }
    }

    public uint StageFlags
    {
        get
        {
            return ((global::VkDescriptorSetLayoutBinding.__Internal*) __Instance)->stageFlags;
        }

        set
        {
            ((global::VkDescriptorSetLayoutBinding.__Internal*)__Instance)->stageFlags = value;
        }
    }

    public global::VkSamplerT PImmutableSamplers
    {
        get
        {
            global::VkSamplerT __result0;
            if (((global::VkDescriptorSetLayoutBinding.__Internal*) __Instance)->pImmutableSamplers == IntPtr.Zero) __result0 = null;
            else if (global::VkSamplerT.NativeToManagedMap.ContainsKey(((global::VkDescriptorSetLayoutBinding.__Internal*) __Instance)->pImmutableSamplers))
                __result0 = (global::VkSamplerT) global::VkSamplerT.NativeToManagedMap[((global::VkDescriptorSetLayoutBinding.__Internal*) __Instance)->pImmutableSamplers];
            else __result0 = global::VkSamplerT.__CreateInstance(((global::VkDescriptorSetLayoutBinding.__Internal*) __Instance)->pImmutableSamplers);
            return __result0;
        }

        set
        {
            ((global::VkDescriptorSetLayoutBinding.__Internal*)__Instance)->pImmutableSamplers = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkDescriptorSetLayoutCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(20)]
        internal uint bindingCount;

        [FieldOffset(24)]
        internal global::System.IntPtr pBindings;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorSetLayoutCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorSetLayoutCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDescriptorSetLayoutCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDescriptorSetLayoutCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkDescriptorSetLayoutCreateInfo __CreateInstance(global::VkDescriptorSetLayoutCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkDescriptorSetLayoutCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDescriptorSetLayoutCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDescriptorSetLayoutCreateInfo.__Internal));
        *(global::VkDescriptorSetLayoutCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDescriptorSetLayoutCreateInfo(global::VkDescriptorSetLayoutCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDescriptorSetLayoutCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDescriptorSetLayoutCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDescriptorSetLayoutCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDescriptorSetLayoutCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDescriptorSetLayoutCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDescriptorSetLayoutCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDescriptorSetLayoutCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkDescriptorSetLayoutCreateInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkDescriptorSetLayoutCreateInfo.__Internal*)__Instance)->flags = value;
        }
    }

    public uint BindingCount
    {
        get
        {
            return ((global::VkDescriptorSetLayoutCreateInfo.__Internal*) __Instance)->bindingCount;
        }

        set
        {
            ((global::VkDescriptorSetLayoutCreateInfo.__Internal*)__Instance)->bindingCount = value;
        }
    }

    public global::VkDescriptorSetLayoutBinding PBindings
    {
        get
        {
            global::VkDescriptorSetLayoutBinding __result0;
            if (((global::VkDescriptorSetLayoutCreateInfo.__Internal*) __Instance)->pBindings == IntPtr.Zero) __result0 = null;
            else if (global::VkDescriptorSetLayoutBinding.NativeToManagedMap.ContainsKey(((global::VkDescriptorSetLayoutCreateInfo.__Internal*) __Instance)->pBindings))
                __result0 = (global::VkDescriptorSetLayoutBinding) global::VkDescriptorSetLayoutBinding.NativeToManagedMap[((global::VkDescriptorSetLayoutCreateInfo.__Internal*) __Instance)->pBindings];
            else __result0 = global::VkDescriptorSetLayoutBinding.__CreateInstance(((global::VkDescriptorSetLayoutCreateInfo.__Internal*) __Instance)->pBindings);
            return __result0;
        }

        set
        {
            ((global::VkDescriptorSetLayoutCreateInfo.__Internal*)__Instance)->pBindings = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkDescriptorPoolSize : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkDescriptorType type;

        [FieldOffset(4)]
        internal uint descriptorCount;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorPoolSize> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorPoolSize>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDescriptorPoolSize __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDescriptorPoolSize(native.ToPointer(), skipVTables);
    }

    internal static global::VkDescriptorPoolSize __CreateInstance(global::VkDescriptorPoolSize.__Internal native, bool skipVTables = false)
    {
        return new global::VkDescriptorPoolSize(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDescriptorPoolSize.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDescriptorPoolSize.__Internal));
        *(global::VkDescriptorPoolSize.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDescriptorPoolSize(global::VkDescriptorPoolSize.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDescriptorPoolSize(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDescriptorPoolSize()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDescriptorPoolSize __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkDescriptorType Type
    {
        get
        {
            return ((global::VkDescriptorPoolSize.__Internal*) __Instance)->type;
        }

        set
        {
            ((global::VkDescriptorPoolSize.__Internal*)__Instance)->type = value;
        }
    }

    public uint DescriptorCount
    {
        get
        {
            return ((global::VkDescriptorPoolSize.__Internal*) __Instance)->descriptorCount;
        }

        set
        {
            ((global::VkDescriptorPoolSize.__Internal*)__Instance)->descriptorCount = value;
        }
    }
}

public unsafe partial class VkDescriptorPoolCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(20)]
        internal uint maxSets;

        [FieldOffset(24)]
        internal uint poolSizeCount;

        [FieldOffset(32)]
        internal global::System.IntPtr pPoolSizes;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorPoolCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorPoolCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDescriptorPoolCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDescriptorPoolCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkDescriptorPoolCreateInfo __CreateInstance(global::VkDescriptorPoolCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkDescriptorPoolCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDescriptorPoolCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDescriptorPoolCreateInfo.__Internal));
        *(global::VkDescriptorPoolCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDescriptorPoolCreateInfo(global::VkDescriptorPoolCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDescriptorPoolCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDescriptorPoolCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDescriptorPoolCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDescriptorPoolCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDescriptorPoolCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDescriptorPoolCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDescriptorPoolCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkDescriptorPoolCreateInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkDescriptorPoolCreateInfo.__Internal*)__Instance)->flags = value;
        }
    }

    public uint MaxSets
    {
        get
        {
            return ((global::VkDescriptorPoolCreateInfo.__Internal*) __Instance)->maxSets;
        }

        set
        {
            ((global::VkDescriptorPoolCreateInfo.__Internal*)__Instance)->maxSets = value;
        }
    }

    public uint PoolSizeCount
    {
        get
        {
            return ((global::VkDescriptorPoolCreateInfo.__Internal*) __Instance)->poolSizeCount;
        }

        set
        {
            ((global::VkDescriptorPoolCreateInfo.__Internal*)__Instance)->poolSizeCount = value;
        }
    }

    public global::VkDescriptorPoolSize PPoolSizes
    {
        get
        {
            global::VkDescriptorPoolSize __result0;
            if (((global::VkDescriptorPoolCreateInfo.__Internal*) __Instance)->pPoolSizes == IntPtr.Zero) __result0 = null;
            else if (global::VkDescriptorPoolSize.NativeToManagedMap.ContainsKey(((global::VkDescriptorPoolCreateInfo.__Internal*) __Instance)->pPoolSizes))
                __result0 = (global::VkDescriptorPoolSize) global::VkDescriptorPoolSize.NativeToManagedMap[((global::VkDescriptorPoolCreateInfo.__Internal*) __Instance)->pPoolSizes];
            else __result0 = global::VkDescriptorPoolSize.__CreateInstance(((global::VkDescriptorPoolCreateInfo.__Internal*) __Instance)->pPoolSizes);
            return __result0;
        }

        set
        {
            ((global::VkDescriptorPoolCreateInfo.__Internal*)__Instance)->pPoolSizes = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkDescriptorSetAllocateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::System.IntPtr descriptorPool;

        [FieldOffset(24)]
        internal uint descriptorSetCount;

        [FieldOffset(32)]
        internal global::System.IntPtr pSetLayouts;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorSetAllocateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorSetAllocateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDescriptorSetAllocateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDescriptorSetAllocateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkDescriptorSetAllocateInfo __CreateInstance(global::VkDescriptorSetAllocateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkDescriptorSetAllocateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDescriptorSetAllocateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDescriptorSetAllocateInfo.__Internal));
        *(global::VkDescriptorSetAllocateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDescriptorSetAllocateInfo(global::VkDescriptorSetAllocateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDescriptorSetAllocateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDescriptorSetAllocateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDescriptorSetAllocateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDescriptorSetAllocateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDescriptorSetAllocateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDescriptorSetAllocateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDescriptorSetAllocateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkDescriptorPoolT DescriptorPool
    {
        get
        {
            global::VkDescriptorPoolT __result0;
            if (((global::VkDescriptorSetAllocateInfo.__Internal*) __Instance)->descriptorPool == IntPtr.Zero) __result0 = null;
            else if (global::VkDescriptorPoolT.NativeToManagedMap.ContainsKey(((global::VkDescriptorSetAllocateInfo.__Internal*) __Instance)->descriptorPool))
                __result0 = (global::VkDescriptorPoolT) global::VkDescriptorPoolT.NativeToManagedMap[((global::VkDescriptorSetAllocateInfo.__Internal*) __Instance)->descriptorPool];
            else __result0 = global::VkDescriptorPoolT.__CreateInstance(((global::VkDescriptorSetAllocateInfo.__Internal*) __Instance)->descriptorPool);
            return __result0;
        }

        set
        {
            ((global::VkDescriptorSetAllocateInfo.__Internal*)__Instance)->descriptorPool = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint DescriptorSetCount
    {
        get
        {
            return ((global::VkDescriptorSetAllocateInfo.__Internal*) __Instance)->descriptorSetCount;
        }

        set
        {
            ((global::VkDescriptorSetAllocateInfo.__Internal*)__Instance)->descriptorSetCount = value;
        }
    }

    public global::VkDescriptorSetLayoutT PSetLayouts
    {
        get
        {
            global::VkDescriptorSetLayoutT __result0;
            if (((global::VkDescriptorSetAllocateInfo.__Internal*) __Instance)->pSetLayouts == IntPtr.Zero) __result0 = null;
            else if (global::VkDescriptorSetLayoutT.NativeToManagedMap.ContainsKey(((global::VkDescriptorSetAllocateInfo.__Internal*) __Instance)->pSetLayouts))
                __result0 = (global::VkDescriptorSetLayoutT) global::VkDescriptorSetLayoutT.NativeToManagedMap[((global::VkDescriptorSetAllocateInfo.__Internal*) __Instance)->pSetLayouts];
            else __result0 = global::VkDescriptorSetLayoutT.__CreateInstance(((global::VkDescriptorSetAllocateInfo.__Internal*) __Instance)->pSetLayouts);
            return __result0;
        }

        set
        {
            ((global::VkDescriptorSetAllocateInfo.__Internal*)__Instance)->pSetLayouts = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkDescriptorImageInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::System.IntPtr sampler;

        [FieldOffset(8)]
        internal global::System.IntPtr imageView;

        [FieldOffset(16)]
        internal global::VkImageLayout imageLayout;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorImageInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorImageInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDescriptorImageInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDescriptorImageInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkDescriptorImageInfo __CreateInstance(global::VkDescriptorImageInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkDescriptorImageInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDescriptorImageInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDescriptorImageInfo.__Internal));
        *(global::VkDescriptorImageInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDescriptorImageInfo(global::VkDescriptorImageInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDescriptorImageInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDescriptorImageInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDescriptorImageInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkSamplerT Sampler
    {
        get
        {
            global::VkSamplerT __result0;
            if (((global::VkDescriptorImageInfo.__Internal*) __Instance)->sampler == IntPtr.Zero) __result0 = null;
            else if (global::VkSamplerT.NativeToManagedMap.ContainsKey(((global::VkDescriptorImageInfo.__Internal*) __Instance)->sampler))
                __result0 = (global::VkSamplerT) global::VkSamplerT.NativeToManagedMap[((global::VkDescriptorImageInfo.__Internal*) __Instance)->sampler];
            else __result0 = global::VkSamplerT.__CreateInstance(((global::VkDescriptorImageInfo.__Internal*) __Instance)->sampler);
            return __result0;
        }

        set
        {
            ((global::VkDescriptorImageInfo.__Internal*)__Instance)->sampler = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkImageViewT ImageView
    {
        get
        {
            global::VkImageViewT __result0;
            if (((global::VkDescriptorImageInfo.__Internal*) __Instance)->imageView == IntPtr.Zero) __result0 = null;
            else if (global::VkImageViewT.NativeToManagedMap.ContainsKey(((global::VkDescriptorImageInfo.__Internal*) __Instance)->imageView))
                __result0 = (global::VkImageViewT) global::VkImageViewT.NativeToManagedMap[((global::VkDescriptorImageInfo.__Internal*) __Instance)->imageView];
            else __result0 = global::VkImageViewT.__CreateInstance(((global::VkDescriptorImageInfo.__Internal*) __Instance)->imageView);
            return __result0;
        }

        set
        {
            ((global::VkDescriptorImageInfo.__Internal*)__Instance)->imageView = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkImageLayout ImageLayout
    {
        get
        {
            return ((global::VkDescriptorImageInfo.__Internal*) __Instance)->imageLayout;
        }

        set
        {
            ((global::VkDescriptorImageInfo.__Internal*)__Instance)->imageLayout = value;
        }
    }
}

public unsafe partial class VkDescriptorBufferInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::System.IntPtr buffer;

        [FieldOffset(8)]
        internal ulong offset;

        [FieldOffset(16)]
        internal ulong range;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorBufferInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorBufferInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDescriptorBufferInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDescriptorBufferInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkDescriptorBufferInfo __CreateInstance(global::VkDescriptorBufferInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkDescriptorBufferInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDescriptorBufferInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDescriptorBufferInfo.__Internal));
        *(global::VkDescriptorBufferInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDescriptorBufferInfo(global::VkDescriptorBufferInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDescriptorBufferInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDescriptorBufferInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDescriptorBufferInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkBufferT Buffer
    {
        get
        {
            global::VkBufferT __result0;
            if (((global::VkDescriptorBufferInfo.__Internal*) __Instance)->buffer == IntPtr.Zero) __result0 = null;
            else if (global::VkBufferT.NativeToManagedMap.ContainsKey(((global::VkDescriptorBufferInfo.__Internal*) __Instance)->buffer))
                __result0 = (global::VkBufferT) global::VkBufferT.NativeToManagedMap[((global::VkDescriptorBufferInfo.__Internal*) __Instance)->buffer];
            else __result0 = global::VkBufferT.__CreateInstance(((global::VkDescriptorBufferInfo.__Internal*) __Instance)->buffer);
            return __result0;
        }

        set
        {
            ((global::VkDescriptorBufferInfo.__Internal*)__Instance)->buffer = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public ulong Offset
    {
        get
        {
            return ((global::VkDescriptorBufferInfo.__Internal*) __Instance)->offset;
        }

        set
        {
            ((global::VkDescriptorBufferInfo.__Internal*)__Instance)->offset = value;
        }
    }

    public ulong Range
    {
        get
        {
            return ((global::VkDescriptorBufferInfo.__Internal*) __Instance)->range;
        }

        set
        {
            ((global::VkDescriptorBufferInfo.__Internal*)__Instance)->range = value;
        }
    }
}

public unsafe partial class VkWriteDescriptorSet : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 64)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::System.IntPtr dstSet;

        [FieldOffset(24)]
        internal uint dstBinding;

        [FieldOffset(28)]
        internal uint dstArrayElement;

        [FieldOffset(32)]
        internal uint descriptorCount;

        [FieldOffset(36)]
        internal global::VkDescriptorType descriptorType;

        [FieldOffset(40)]
        internal global::System.IntPtr pImageInfo;

        [FieldOffset(48)]
        internal global::System.IntPtr pBufferInfo;

        [FieldOffset(56)]
        internal global::System.IntPtr pTexelBufferView;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkWriteDescriptorSet> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkWriteDescriptorSet>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkWriteDescriptorSet __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkWriteDescriptorSet(native.ToPointer(), skipVTables);
    }

    internal static global::VkWriteDescriptorSet __CreateInstance(global::VkWriteDescriptorSet.__Internal native, bool skipVTables = false)
    {
        return new global::VkWriteDescriptorSet(native, skipVTables);
    }

    private static void* __CopyValue(global::VkWriteDescriptorSet.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkWriteDescriptorSet.__Internal));
        *(global::VkWriteDescriptorSet.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkWriteDescriptorSet(global::VkWriteDescriptorSet.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkWriteDescriptorSet(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkWriteDescriptorSet()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkWriteDescriptorSet __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkWriteDescriptorSet.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkWriteDescriptorSet.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkWriteDescriptorSet.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkWriteDescriptorSet.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkDescriptorSetT DstSet
    {
        get
        {
            global::VkDescriptorSetT __result0;
            if (((global::VkWriteDescriptorSet.__Internal*) __Instance)->dstSet == IntPtr.Zero) __result0 = null;
            else if (global::VkDescriptorSetT.NativeToManagedMap.ContainsKey(((global::VkWriteDescriptorSet.__Internal*) __Instance)->dstSet))
                __result0 = (global::VkDescriptorSetT) global::VkDescriptorSetT.NativeToManagedMap[((global::VkWriteDescriptorSet.__Internal*) __Instance)->dstSet];
            else __result0 = global::VkDescriptorSetT.__CreateInstance(((global::VkWriteDescriptorSet.__Internal*) __Instance)->dstSet);
            return __result0;
        }

        set
        {
            ((global::VkWriteDescriptorSet.__Internal*)__Instance)->dstSet = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint DstBinding
    {
        get
        {
            return ((global::VkWriteDescriptorSet.__Internal*) __Instance)->dstBinding;
        }

        set
        {
            ((global::VkWriteDescriptorSet.__Internal*)__Instance)->dstBinding = value;
        }
    }

    public uint DstArrayElement
    {
        get
        {
            return ((global::VkWriteDescriptorSet.__Internal*) __Instance)->dstArrayElement;
        }

        set
        {
            ((global::VkWriteDescriptorSet.__Internal*)__Instance)->dstArrayElement = value;
        }
    }

    public uint DescriptorCount
    {
        get
        {
            return ((global::VkWriteDescriptorSet.__Internal*) __Instance)->descriptorCount;
        }

        set
        {
            ((global::VkWriteDescriptorSet.__Internal*)__Instance)->descriptorCount = value;
        }
    }

    public global::VkDescriptorType DescriptorType
    {
        get
        {
            return ((global::VkWriteDescriptorSet.__Internal*) __Instance)->descriptorType;
        }

        set
        {
            ((global::VkWriteDescriptorSet.__Internal*)__Instance)->descriptorType = value;
        }
    }

    public global::VkDescriptorImageInfo PImageInfo
    {
        get
        {
            global::VkDescriptorImageInfo __result0;
            if (((global::VkWriteDescriptorSet.__Internal*) __Instance)->pImageInfo == IntPtr.Zero) __result0 = null;
            else if (global::VkDescriptorImageInfo.NativeToManagedMap.ContainsKey(((global::VkWriteDescriptorSet.__Internal*) __Instance)->pImageInfo))
                __result0 = (global::VkDescriptorImageInfo) global::VkDescriptorImageInfo.NativeToManagedMap[((global::VkWriteDescriptorSet.__Internal*) __Instance)->pImageInfo];
            else __result0 = global::VkDescriptorImageInfo.__CreateInstance(((global::VkWriteDescriptorSet.__Internal*) __Instance)->pImageInfo);
            return __result0;
        }

        set
        {
            ((global::VkWriteDescriptorSet.__Internal*)__Instance)->pImageInfo = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkDescriptorBufferInfo PBufferInfo
    {
        get
        {
            global::VkDescriptorBufferInfo __result0;
            if (((global::VkWriteDescriptorSet.__Internal*) __Instance)->pBufferInfo == IntPtr.Zero) __result0 = null;
            else if (global::VkDescriptorBufferInfo.NativeToManagedMap.ContainsKey(((global::VkWriteDescriptorSet.__Internal*) __Instance)->pBufferInfo))
                __result0 = (global::VkDescriptorBufferInfo) global::VkDescriptorBufferInfo.NativeToManagedMap[((global::VkWriteDescriptorSet.__Internal*) __Instance)->pBufferInfo];
            else __result0 = global::VkDescriptorBufferInfo.__CreateInstance(((global::VkWriteDescriptorSet.__Internal*) __Instance)->pBufferInfo);
            return __result0;
        }

        set
        {
            ((global::VkWriteDescriptorSet.__Internal*)__Instance)->pBufferInfo = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkBufferViewT PTexelBufferView
    {
        get
        {
            global::VkBufferViewT __result0;
            if (((global::VkWriteDescriptorSet.__Internal*) __Instance)->pTexelBufferView == IntPtr.Zero) __result0 = null;
            else if (global::VkBufferViewT.NativeToManagedMap.ContainsKey(((global::VkWriteDescriptorSet.__Internal*) __Instance)->pTexelBufferView))
                __result0 = (global::VkBufferViewT) global::VkBufferViewT.NativeToManagedMap[((global::VkWriteDescriptorSet.__Internal*) __Instance)->pTexelBufferView];
            else __result0 = global::VkBufferViewT.__CreateInstance(((global::VkWriteDescriptorSet.__Internal*) __Instance)->pTexelBufferView);
            return __result0;
        }

        set
        {
            ((global::VkWriteDescriptorSet.__Internal*)__Instance)->pTexelBufferView = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkCopyDescriptorSet : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 56)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::System.IntPtr srcSet;

        [FieldOffset(24)]
        internal uint srcBinding;

        [FieldOffset(28)]
        internal uint srcArrayElement;

        [FieldOffset(32)]
        internal global::System.IntPtr dstSet;

        [FieldOffset(40)]
        internal uint dstBinding;

        [FieldOffset(44)]
        internal uint dstArrayElement;

        [FieldOffset(48)]
        internal uint descriptorCount;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkCopyDescriptorSet> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkCopyDescriptorSet>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkCopyDescriptorSet __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkCopyDescriptorSet(native.ToPointer(), skipVTables);
    }

    internal static global::VkCopyDescriptorSet __CreateInstance(global::VkCopyDescriptorSet.__Internal native, bool skipVTables = false)
    {
        return new global::VkCopyDescriptorSet(native, skipVTables);
    }

    private static void* __CopyValue(global::VkCopyDescriptorSet.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkCopyDescriptorSet.__Internal));
        *(global::VkCopyDescriptorSet.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkCopyDescriptorSet(global::VkCopyDescriptorSet.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkCopyDescriptorSet(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkCopyDescriptorSet()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkCopyDescriptorSet __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkCopyDescriptorSet.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkCopyDescriptorSet.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkCopyDescriptorSet.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkCopyDescriptorSet.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkDescriptorSetT SrcSet
    {
        get
        {
            global::VkDescriptorSetT __result0;
            if (((global::VkCopyDescriptorSet.__Internal*) __Instance)->srcSet == IntPtr.Zero) __result0 = null;
            else if (global::VkDescriptorSetT.NativeToManagedMap.ContainsKey(((global::VkCopyDescriptorSet.__Internal*) __Instance)->srcSet))
                __result0 = (global::VkDescriptorSetT) global::VkDescriptorSetT.NativeToManagedMap[((global::VkCopyDescriptorSet.__Internal*) __Instance)->srcSet];
            else __result0 = global::VkDescriptorSetT.__CreateInstance(((global::VkCopyDescriptorSet.__Internal*) __Instance)->srcSet);
            return __result0;
        }

        set
        {
            ((global::VkCopyDescriptorSet.__Internal*)__Instance)->srcSet = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint SrcBinding
    {
        get
        {
            return ((global::VkCopyDescriptorSet.__Internal*) __Instance)->srcBinding;
        }

        set
        {
            ((global::VkCopyDescriptorSet.__Internal*)__Instance)->srcBinding = value;
        }
    }

    public uint SrcArrayElement
    {
        get
        {
            return ((global::VkCopyDescriptorSet.__Internal*) __Instance)->srcArrayElement;
        }

        set
        {
            ((global::VkCopyDescriptorSet.__Internal*)__Instance)->srcArrayElement = value;
        }
    }

    public global::VkDescriptorSetT DstSet
    {
        get
        {
            global::VkDescriptorSetT __result0;
            if (((global::VkCopyDescriptorSet.__Internal*) __Instance)->dstSet == IntPtr.Zero) __result0 = null;
            else if (global::VkDescriptorSetT.NativeToManagedMap.ContainsKey(((global::VkCopyDescriptorSet.__Internal*) __Instance)->dstSet))
                __result0 = (global::VkDescriptorSetT) global::VkDescriptorSetT.NativeToManagedMap[((global::VkCopyDescriptorSet.__Internal*) __Instance)->dstSet];
            else __result0 = global::VkDescriptorSetT.__CreateInstance(((global::VkCopyDescriptorSet.__Internal*) __Instance)->dstSet);
            return __result0;
        }

        set
        {
            ((global::VkCopyDescriptorSet.__Internal*)__Instance)->dstSet = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint DstBinding
    {
        get
        {
            return ((global::VkCopyDescriptorSet.__Internal*) __Instance)->dstBinding;
        }

        set
        {
            ((global::VkCopyDescriptorSet.__Internal*)__Instance)->dstBinding = value;
        }
    }

    public uint DstArrayElement
    {
        get
        {
            return ((global::VkCopyDescriptorSet.__Internal*) __Instance)->dstArrayElement;
        }

        set
        {
            ((global::VkCopyDescriptorSet.__Internal*)__Instance)->dstArrayElement = value;
        }
    }

    public uint DescriptorCount
    {
        get
        {
            return ((global::VkCopyDescriptorSet.__Internal*) __Instance)->descriptorCount;
        }

        set
        {
            ((global::VkCopyDescriptorSet.__Internal*)__Instance)->descriptorCount = value;
        }
    }
}

public unsafe partial class VkFramebufferCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 64)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(24)]
        internal global::System.IntPtr renderPass;

        [FieldOffset(32)]
        internal uint attachmentCount;

        [FieldOffset(40)]
        internal global::System.IntPtr pAttachments;

        [FieldOffset(48)]
        internal uint width;

        [FieldOffset(52)]
        internal uint height;

        [FieldOffset(56)]
        internal uint layers;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkFramebufferCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkFramebufferCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkFramebufferCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkFramebufferCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkFramebufferCreateInfo __CreateInstance(global::VkFramebufferCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkFramebufferCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkFramebufferCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkFramebufferCreateInfo.__Internal));
        *(global::VkFramebufferCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkFramebufferCreateInfo(global::VkFramebufferCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkFramebufferCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkFramebufferCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkFramebufferCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkFramebufferCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkFramebufferCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkFramebufferCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkFramebufferCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkFramebufferCreateInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkFramebufferCreateInfo.__Internal*)__Instance)->flags = value;
        }
    }

    public global::VkRenderPassT RenderPass
    {
        get
        {
            global::VkRenderPassT __result0;
            if (((global::VkFramebufferCreateInfo.__Internal*) __Instance)->renderPass == IntPtr.Zero) __result0 = null;
            else if (global::VkRenderPassT.NativeToManagedMap.ContainsKey(((global::VkFramebufferCreateInfo.__Internal*) __Instance)->renderPass))
                __result0 = (global::VkRenderPassT) global::VkRenderPassT.NativeToManagedMap[((global::VkFramebufferCreateInfo.__Internal*) __Instance)->renderPass];
            else __result0 = global::VkRenderPassT.__CreateInstance(((global::VkFramebufferCreateInfo.__Internal*) __Instance)->renderPass);
            return __result0;
        }

        set
        {
            ((global::VkFramebufferCreateInfo.__Internal*)__Instance)->renderPass = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint AttachmentCount
    {
        get
        {
            return ((global::VkFramebufferCreateInfo.__Internal*) __Instance)->attachmentCount;
        }

        set
        {
            ((global::VkFramebufferCreateInfo.__Internal*)__Instance)->attachmentCount = value;
        }
    }

    public global::VkImageViewT PAttachments
    {
        get
        {
            global::VkImageViewT __result0;
            if (((global::VkFramebufferCreateInfo.__Internal*) __Instance)->pAttachments == IntPtr.Zero) __result0 = null;
            else if (global::VkImageViewT.NativeToManagedMap.ContainsKey(((global::VkFramebufferCreateInfo.__Internal*) __Instance)->pAttachments))
                __result0 = (global::VkImageViewT) global::VkImageViewT.NativeToManagedMap[((global::VkFramebufferCreateInfo.__Internal*) __Instance)->pAttachments];
            else __result0 = global::VkImageViewT.__CreateInstance(((global::VkFramebufferCreateInfo.__Internal*) __Instance)->pAttachments);
            return __result0;
        }

        set
        {
            ((global::VkFramebufferCreateInfo.__Internal*)__Instance)->pAttachments = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint Width
    {
        get
        {
            return ((global::VkFramebufferCreateInfo.__Internal*) __Instance)->width;
        }

        set
        {
            ((global::VkFramebufferCreateInfo.__Internal*)__Instance)->width = value;
        }
    }

    public uint Height
    {
        get
        {
            return ((global::VkFramebufferCreateInfo.__Internal*) __Instance)->height;
        }

        set
        {
            ((global::VkFramebufferCreateInfo.__Internal*)__Instance)->height = value;
        }
    }

    public uint Layers
    {
        get
        {
            return ((global::VkFramebufferCreateInfo.__Internal*) __Instance)->layers;
        }

        set
        {
            ((global::VkFramebufferCreateInfo.__Internal*)__Instance)->layers = value;
        }
    }
}

public unsafe partial class VkAttachmentDescription : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 36)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint flags;

        [FieldOffset(4)]
        internal global::VkFormat format;

        [FieldOffset(8)]
        internal global::VkSampleCountFlagBits samples;

        [FieldOffset(12)]
        internal global::VkAttachmentLoadOp loadOp;

        [FieldOffset(16)]
        internal global::VkAttachmentStoreOp storeOp;

        [FieldOffset(20)]
        internal global::VkAttachmentLoadOp stencilLoadOp;

        [FieldOffset(24)]
        internal global::VkAttachmentStoreOp stencilStoreOp;

        [FieldOffset(28)]
        internal global::VkImageLayout initialLayout;

        [FieldOffset(32)]
        internal global::VkImageLayout finalLayout;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkAttachmentDescription> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkAttachmentDescription>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkAttachmentDescription __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkAttachmentDescription(native.ToPointer(), skipVTables);
    }

    internal static global::VkAttachmentDescription __CreateInstance(global::VkAttachmentDescription.__Internal native, bool skipVTables = false)
    {
        return new global::VkAttachmentDescription(native, skipVTables);
    }

    private static void* __CopyValue(global::VkAttachmentDescription.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkAttachmentDescription.__Internal));
        *(global::VkAttachmentDescription.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkAttachmentDescription(global::VkAttachmentDescription.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkAttachmentDescription(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkAttachmentDescription()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkAttachmentDescription __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint Flags
    {
        get
        {
            return ((global::VkAttachmentDescription.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkAttachmentDescription.__Internal*)__Instance)->flags = value;
        }
    }

    public global::VkFormat Format
    {
        get
        {
            return ((global::VkAttachmentDescription.__Internal*) __Instance)->format;
        }

        set
        {
            ((global::VkAttachmentDescription.__Internal*)__Instance)->format = value;
        }
    }

    public global::VkSampleCountFlagBits Samples
    {
        get
        {
            return ((global::VkAttachmentDescription.__Internal*) __Instance)->samples;
        }

        set
        {
            ((global::VkAttachmentDescription.__Internal*)__Instance)->samples = value;
        }
    }

    public global::VkAttachmentLoadOp LoadOp
    {
        get
        {
            return ((global::VkAttachmentDescription.__Internal*) __Instance)->loadOp;
        }

        set
        {
            ((global::VkAttachmentDescription.__Internal*)__Instance)->loadOp = value;
        }
    }

    public global::VkAttachmentStoreOp StoreOp
    {
        get
        {
            return ((global::VkAttachmentDescription.__Internal*) __Instance)->storeOp;
        }

        set
        {
            ((global::VkAttachmentDescription.__Internal*)__Instance)->storeOp = value;
        }
    }

    public global::VkAttachmentLoadOp StencilLoadOp
    {
        get
        {
            return ((global::VkAttachmentDescription.__Internal*) __Instance)->stencilLoadOp;
        }

        set
        {
            ((global::VkAttachmentDescription.__Internal*)__Instance)->stencilLoadOp = value;
        }
    }

    public global::VkAttachmentStoreOp StencilStoreOp
    {
        get
        {
            return ((global::VkAttachmentDescription.__Internal*) __Instance)->stencilStoreOp;
        }

        set
        {
            ((global::VkAttachmentDescription.__Internal*)__Instance)->stencilStoreOp = value;
        }
    }

    public global::VkImageLayout InitialLayout
    {
        get
        {
            return ((global::VkAttachmentDescription.__Internal*) __Instance)->initialLayout;
        }

        set
        {
            ((global::VkAttachmentDescription.__Internal*)__Instance)->initialLayout = value;
        }
    }

    public global::VkImageLayout FinalLayout
    {
        get
        {
            return ((global::VkAttachmentDescription.__Internal*) __Instance)->finalLayout;
        }

        set
        {
            ((global::VkAttachmentDescription.__Internal*)__Instance)->finalLayout = value;
        }
    }
}

public unsafe partial class VkAttachmentReference : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint attachment;

        [FieldOffset(4)]
        internal global::VkImageLayout layout;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkAttachmentReference> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkAttachmentReference>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkAttachmentReference __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkAttachmentReference(native.ToPointer(), skipVTables);
    }

    internal static global::VkAttachmentReference __CreateInstance(global::VkAttachmentReference.__Internal native, bool skipVTables = false)
    {
        return new global::VkAttachmentReference(native, skipVTables);
    }

    private static void* __CopyValue(global::VkAttachmentReference.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkAttachmentReference.__Internal));
        *(global::VkAttachmentReference.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkAttachmentReference(global::VkAttachmentReference.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkAttachmentReference(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkAttachmentReference()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkAttachmentReference __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint Attachment
    {
        get
        {
            return ((global::VkAttachmentReference.__Internal*) __Instance)->attachment;
        }

        set
        {
            ((global::VkAttachmentReference.__Internal*)__Instance)->attachment = value;
        }
    }

    public global::VkImageLayout Layout
    {
        get
        {
            return ((global::VkAttachmentReference.__Internal*) __Instance)->layout;
        }

        set
        {
            ((global::VkAttachmentReference.__Internal*)__Instance)->layout = value;
        }
    }
}

public unsafe partial class VkSubpassDescription : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 72)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint flags;

        [FieldOffset(4)]
        internal global::VkPipelineBindPoint pipelineBindPoint;

        [FieldOffset(8)]
        internal uint inputAttachmentCount;

        [FieldOffset(16)]
        internal global::System.IntPtr pInputAttachments;

        [FieldOffset(24)]
        internal uint colorAttachmentCount;

        [FieldOffset(32)]
        internal global::System.IntPtr pColorAttachments;

        [FieldOffset(40)]
        internal global::System.IntPtr pResolveAttachments;

        [FieldOffset(48)]
        internal global::System.IntPtr pDepthStencilAttachment;

        [FieldOffset(56)]
        internal uint preserveAttachmentCount;

        [FieldOffset(64)]
        internal global::System.IntPtr pPreserveAttachments;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSubpassDescription> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSubpassDescription>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSubpassDescription __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSubpassDescription(native.ToPointer(), skipVTables);
    }

    internal static global::VkSubpassDescription __CreateInstance(global::VkSubpassDescription.__Internal native, bool skipVTables = false)
    {
        return new global::VkSubpassDescription(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSubpassDescription.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSubpassDescription.__Internal));
        *(global::VkSubpassDescription.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSubpassDescription(global::VkSubpassDescription.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSubpassDescription(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSubpassDescription()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkSubpassDescription __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint Flags
    {
        get
        {
            return ((global::VkSubpassDescription.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkSubpassDescription.__Internal*)__Instance)->flags = value;
        }
    }

    public global::VkPipelineBindPoint PipelineBindPoint
    {
        get
        {
            return ((global::VkSubpassDescription.__Internal*) __Instance)->pipelineBindPoint;
        }

        set
        {
            ((global::VkSubpassDescription.__Internal*)__Instance)->pipelineBindPoint = value;
        }
    }

    public uint InputAttachmentCount
    {
        get
        {
            return ((global::VkSubpassDescription.__Internal*) __Instance)->inputAttachmentCount;
        }

        set
        {
            ((global::VkSubpassDescription.__Internal*)__Instance)->inputAttachmentCount = value;
        }
    }

    public global::VkAttachmentReference PInputAttachments
    {
        get
        {
            global::VkAttachmentReference __result0;
            if (((global::VkSubpassDescription.__Internal*) __Instance)->pInputAttachments == IntPtr.Zero) __result0 = null;
            else if (global::VkAttachmentReference.NativeToManagedMap.ContainsKey(((global::VkSubpassDescription.__Internal*) __Instance)->pInputAttachments))
                __result0 = (global::VkAttachmentReference) global::VkAttachmentReference.NativeToManagedMap[((global::VkSubpassDescription.__Internal*) __Instance)->pInputAttachments];
            else __result0 = global::VkAttachmentReference.__CreateInstance(((global::VkSubpassDescription.__Internal*) __Instance)->pInputAttachments);
            return __result0;
        }

        set
        {
            ((global::VkSubpassDescription.__Internal*)__Instance)->pInputAttachments = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint ColorAttachmentCount
    {
        get
        {
            return ((global::VkSubpassDescription.__Internal*) __Instance)->colorAttachmentCount;
        }

        set
        {
            ((global::VkSubpassDescription.__Internal*)__Instance)->colorAttachmentCount = value;
        }
    }

    public global::VkAttachmentReference PColorAttachments
    {
        get
        {
            global::VkAttachmentReference __result0;
            if (((global::VkSubpassDescription.__Internal*) __Instance)->pColorAttachments == IntPtr.Zero) __result0 = null;
            else if (global::VkAttachmentReference.NativeToManagedMap.ContainsKey(((global::VkSubpassDescription.__Internal*) __Instance)->pColorAttachments))
                __result0 = (global::VkAttachmentReference) global::VkAttachmentReference.NativeToManagedMap[((global::VkSubpassDescription.__Internal*) __Instance)->pColorAttachments];
            else __result0 = global::VkAttachmentReference.__CreateInstance(((global::VkSubpassDescription.__Internal*) __Instance)->pColorAttachments);
            return __result0;
        }

        set
        {
            ((global::VkSubpassDescription.__Internal*)__Instance)->pColorAttachments = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkAttachmentReference PResolveAttachments
    {
        get
        {
            global::VkAttachmentReference __result0;
            if (((global::VkSubpassDescription.__Internal*) __Instance)->pResolveAttachments == IntPtr.Zero) __result0 = null;
            else if (global::VkAttachmentReference.NativeToManagedMap.ContainsKey(((global::VkSubpassDescription.__Internal*) __Instance)->pResolveAttachments))
                __result0 = (global::VkAttachmentReference) global::VkAttachmentReference.NativeToManagedMap[((global::VkSubpassDescription.__Internal*) __Instance)->pResolveAttachments];
            else __result0 = global::VkAttachmentReference.__CreateInstance(((global::VkSubpassDescription.__Internal*) __Instance)->pResolveAttachments);
            return __result0;
        }

        set
        {
            ((global::VkSubpassDescription.__Internal*)__Instance)->pResolveAttachments = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkAttachmentReference PDepthStencilAttachment
    {
        get
        {
            global::VkAttachmentReference __result0;
            if (((global::VkSubpassDescription.__Internal*) __Instance)->pDepthStencilAttachment == IntPtr.Zero) __result0 = null;
            else if (global::VkAttachmentReference.NativeToManagedMap.ContainsKey(((global::VkSubpassDescription.__Internal*) __Instance)->pDepthStencilAttachment))
                __result0 = (global::VkAttachmentReference) global::VkAttachmentReference.NativeToManagedMap[((global::VkSubpassDescription.__Internal*) __Instance)->pDepthStencilAttachment];
            else __result0 = global::VkAttachmentReference.__CreateInstance(((global::VkSubpassDescription.__Internal*) __Instance)->pDepthStencilAttachment);
            return __result0;
        }

        set
        {
            ((global::VkSubpassDescription.__Internal*)__Instance)->pDepthStencilAttachment = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint PreserveAttachmentCount
    {
        get
        {
            return ((global::VkSubpassDescription.__Internal*) __Instance)->preserveAttachmentCount;
        }

        set
        {
            ((global::VkSubpassDescription.__Internal*)__Instance)->preserveAttachmentCount = value;
        }
    }

    public uint* PPreserveAttachments
    {
        get
        {
            return (uint*) ((global::VkSubpassDescription.__Internal*) __Instance)->pPreserveAttachments;
        }

        set
        {
            ((global::VkSubpassDescription.__Internal*)__Instance)->pPreserveAttachments = (global::System.IntPtr) value;
        }
    }
}

public unsafe partial class VkSubpassDependency : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 28)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint srcSubpass;

        [FieldOffset(4)]
        internal uint dstSubpass;

        [FieldOffset(8)]
        internal uint srcStageMask;

        [FieldOffset(12)]
        internal uint dstStageMask;

        [FieldOffset(16)]
        internal uint srcAccessMask;

        [FieldOffset(20)]
        internal uint dstAccessMask;

        [FieldOffset(24)]
        internal uint dependencyFlags;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSubpassDependency> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSubpassDependency>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSubpassDependency __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSubpassDependency(native.ToPointer(), skipVTables);
    }

    internal static global::VkSubpassDependency __CreateInstance(global::VkSubpassDependency.__Internal native, bool skipVTables = false)
    {
        return new global::VkSubpassDependency(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSubpassDependency.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSubpassDependency.__Internal));
        *(global::VkSubpassDependency.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSubpassDependency(global::VkSubpassDependency.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSubpassDependency(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSubpassDependency()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkSubpassDependency __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint SrcSubpass
    {
        get
        {
            return ((global::VkSubpassDependency.__Internal*) __Instance)->srcSubpass;
        }

        set
        {
            ((global::VkSubpassDependency.__Internal*)__Instance)->srcSubpass = value;
        }
    }

    public uint DstSubpass
    {
        get
        {
            return ((global::VkSubpassDependency.__Internal*) __Instance)->dstSubpass;
        }

        set
        {
            ((global::VkSubpassDependency.__Internal*)__Instance)->dstSubpass = value;
        }
    }

    public uint SrcStageMask
    {
        get
        {
            return ((global::VkSubpassDependency.__Internal*) __Instance)->srcStageMask;
        }

        set
        {
            ((global::VkSubpassDependency.__Internal*)__Instance)->srcStageMask = value;
        }
    }

    public uint DstStageMask
    {
        get
        {
            return ((global::VkSubpassDependency.__Internal*) __Instance)->dstStageMask;
        }

        set
        {
            ((global::VkSubpassDependency.__Internal*)__Instance)->dstStageMask = value;
        }
    }

    public uint SrcAccessMask
    {
        get
        {
            return ((global::VkSubpassDependency.__Internal*) __Instance)->srcAccessMask;
        }

        set
        {
            ((global::VkSubpassDependency.__Internal*)__Instance)->srcAccessMask = value;
        }
    }

    public uint DstAccessMask
    {
        get
        {
            return ((global::VkSubpassDependency.__Internal*) __Instance)->dstAccessMask;
        }

        set
        {
            ((global::VkSubpassDependency.__Internal*)__Instance)->dstAccessMask = value;
        }
    }

    public uint DependencyFlags
    {
        get
        {
            return ((global::VkSubpassDependency.__Internal*) __Instance)->dependencyFlags;
        }

        set
        {
            ((global::VkSubpassDependency.__Internal*)__Instance)->dependencyFlags = value;
        }
    }
}

public unsafe partial class VkRenderPassCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 64)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(20)]
        internal uint attachmentCount;

        [FieldOffset(24)]
        internal global::System.IntPtr pAttachments;

        [FieldOffset(32)]
        internal uint subpassCount;

        [FieldOffset(40)]
        internal global::System.IntPtr pSubpasses;

        [FieldOffset(48)]
        internal uint dependencyCount;

        [FieldOffset(56)]
        internal global::System.IntPtr pDependencies;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkRenderPassCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkRenderPassCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkRenderPassCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkRenderPassCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkRenderPassCreateInfo __CreateInstance(global::VkRenderPassCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkRenderPassCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkRenderPassCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkRenderPassCreateInfo.__Internal));
        *(global::VkRenderPassCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkRenderPassCreateInfo(global::VkRenderPassCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkRenderPassCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkRenderPassCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkRenderPassCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkRenderPassCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkRenderPassCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkRenderPassCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkRenderPassCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkRenderPassCreateInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkRenderPassCreateInfo.__Internal*)__Instance)->flags = value;
        }
    }

    public uint AttachmentCount
    {
        get
        {
            return ((global::VkRenderPassCreateInfo.__Internal*) __Instance)->attachmentCount;
        }

        set
        {
            ((global::VkRenderPassCreateInfo.__Internal*)__Instance)->attachmentCount = value;
        }
    }

    public global::VkAttachmentDescription PAttachments
    {
        get
        {
            global::VkAttachmentDescription __result0;
            if (((global::VkRenderPassCreateInfo.__Internal*) __Instance)->pAttachments == IntPtr.Zero) __result0 = null;
            else if (global::VkAttachmentDescription.NativeToManagedMap.ContainsKey(((global::VkRenderPassCreateInfo.__Internal*) __Instance)->pAttachments))
                __result0 = (global::VkAttachmentDescription) global::VkAttachmentDescription.NativeToManagedMap[((global::VkRenderPassCreateInfo.__Internal*) __Instance)->pAttachments];
            else __result0 = global::VkAttachmentDescription.__CreateInstance(((global::VkRenderPassCreateInfo.__Internal*) __Instance)->pAttachments);
            return __result0;
        }

        set
        {
            ((global::VkRenderPassCreateInfo.__Internal*)__Instance)->pAttachments = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint SubpassCount
    {
        get
        {
            return ((global::VkRenderPassCreateInfo.__Internal*) __Instance)->subpassCount;
        }

        set
        {
            ((global::VkRenderPassCreateInfo.__Internal*)__Instance)->subpassCount = value;
        }
    }

    public global::VkSubpassDescription PSubpasses
    {
        get
        {
            global::VkSubpassDescription __result0;
            if (((global::VkRenderPassCreateInfo.__Internal*) __Instance)->pSubpasses == IntPtr.Zero) __result0 = null;
            else if (global::VkSubpassDescription.NativeToManagedMap.ContainsKey(((global::VkRenderPassCreateInfo.__Internal*) __Instance)->pSubpasses))
                __result0 = (global::VkSubpassDescription) global::VkSubpassDescription.NativeToManagedMap[((global::VkRenderPassCreateInfo.__Internal*) __Instance)->pSubpasses];
            else __result0 = global::VkSubpassDescription.__CreateInstance(((global::VkRenderPassCreateInfo.__Internal*) __Instance)->pSubpasses);
            return __result0;
        }

        set
        {
            ((global::VkRenderPassCreateInfo.__Internal*)__Instance)->pSubpasses = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint DependencyCount
    {
        get
        {
            return ((global::VkRenderPassCreateInfo.__Internal*) __Instance)->dependencyCount;
        }

        set
        {
            ((global::VkRenderPassCreateInfo.__Internal*)__Instance)->dependencyCount = value;
        }
    }

    public global::VkSubpassDependency PDependencies
    {
        get
        {
            global::VkSubpassDependency __result0;
            if (((global::VkRenderPassCreateInfo.__Internal*) __Instance)->pDependencies == IntPtr.Zero) __result0 = null;
            else if (global::VkSubpassDependency.NativeToManagedMap.ContainsKey(((global::VkRenderPassCreateInfo.__Internal*) __Instance)->pDependencies))
                __result0 = (global::VkSubpassDependency) global::VkSubpassDependency.NativeToManagedMap[((global::VkRenderPassCreateInfo.__Internal*) __Instance)->pDependencies];
            else __result0 = global::VkSubpassDependency.__CreateInstance(((global::VkRenderPassCreateInfo.__Internal*) __Instance)->pDependencies);
            return __result0;
        }

        set
        {
            ((global::VkRenderPassCreateInfo.__Internal*)__Instance)->pDependencies = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkCommandPoolCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(20)]
        internal uint queueFamilyIndex;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkCommandPoolCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkCommandPoolCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkCommandPoolCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkCommandPoolCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkCommandPoolCreateInfo __CreateInstance(global::VkCommandPoolCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkCommandPoolCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkCommandPoolCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkCommandPoolCreateInfo.__Internal));
        *(global::VkCommandPoolCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkCommandPoolCreateInfo(global::VkCommandPoolCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkCommandPoolCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkCommandPoolCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkCommandPoolCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkCommandPoolCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkCommandPoolCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkCommandPoolCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkCommandPoolCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkCommandPoolCreateInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkCommandPoolCreateInfo.__Internal*)__Instance)->flags = value;
        }
    }

    public uint QueueFamilyIndex
    {
        get
        {
            return ((global::VkCommandPoolCreateInfo.__Internal*) __Instance)->queueFamilyIndex;
        }

        set
        {
            ((global::VkCommandPoolCreateInfo.__Internal*)__Instance)->queueFamilyIndex = value;
        }
    }
}

public unsafe partial class VkCommandBufferAllocateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::System.IntPtr commandPool;

        [FieldOffset(24)]
        internal global::VkCommandBufferLevel level;

        [FieldOffset(28)]
        internal uint commandBufferCount;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkCommandBufferAllocateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkCommandBufferAllocateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkCommandBufferAllocateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkCommandBufferAllocateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkCommandBufferAllocateInfo __CreateInstance(global::VkCommandBufferAllocateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkCommandBufferAllocateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkCommandBufferAllocateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkCommandBufferAllocateInfo.__Internal));
        *(global::VkCommandBufferAllocateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkCommandBufferAllocateInfo(global::VkCommandBufferAllocateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkCommandBufferAllocateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkCommandBufferAllocateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkCommandBufferAllocateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkCommandBufferAllocateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkCommandBufferAllocateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkCommandBufferAllocateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkCommandBufferAllocateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkCommandPoolT CommandPool
    {
        get
        {
            global::VkCommandPoolT __result0;
            if (((global::VkCommandBufferAllocateInfo.__Internal*) __Instance)->commandPool == IntPtr.Zero) __result0 = null;
            else if (global::VkCommandPoolT.NativeToManagedMap.ContainsKey(((global::VkCommandBufferAllocateInfo.__Internal*) __Instance)->commandPool))
                __result0 = (global::VkCommandPoolT) global::VkCommandPoolT.NativeToManagedMap[((global::VkCommandBufferAllocateInfo.__Internal*) __Instance)->commandPool];
            else __result0 = global::VkCommandPoolT.__CreateInstance(((global::VkCommandBufferAllocateInfo.__Internal*) __Instance)->commandPool);
            return __result0;
        }

        set
        {
            ((global::VkCommandBufferAllocateInfo.__Internal*)__Instance)->commandPool = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkCommandBufferLevel Level
    {
        get
        {
            return ((global::VkCommandBufferAllocateInfo.__Internal*) __Instance)->level;
        }

        set
        {
            ((global::VkCommandBufferAllocateInfo.__Internal*)__Instance)->level = value;
        }
    }

    public uint CommandBufferCount
    {
        get
        {
            return ((global::VkCommandBufferAllocateInfo.__Internal*) __Instance)->commandBufferCount;
        }

        set
        {
            ((global::VkCommandBufferAllocateInfo.__Internal*)__Instance)->commandBufferCount = value;
        }
    }
}

public unsafe partial class VkCommandBufferInheritanceInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 56)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::System.IntPtr renderPass;

        [FieldOffset(24)]
        internal uint subpass;

        [FieldOffset(32)]
        internal global::System.IntPtr framebuffer;

        [FieldOffset(40)]
        internal uint occlusionQueryEnable;

        [FieldOffset(44)]
        internal uint queryFlags;

        [FieldOffset(48)]
        internal uint pipelineStatistics;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkCommandBufferInheritanceInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkCommandBufferInheritanceInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkCommandBufferInheritanceInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkCommandBufferInheritanceInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkCommandBufferInheritanceInfo __CreateInstance(global::VkCommandBufferInheritanceInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkCommandBufferInheritanceInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkCommandBufferInheritanceInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkCommandBufferInheritanceInfo.__Internal));
        *(global::VkCommandBufferInheritanceInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkCommandBufferInheritanceInfo(global::VkCommandBufferInheritanceInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkCommandBufferInheritanceInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkCommandBufferInheritanceInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkCommandBufferInheritanceInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkCommandBufferInheritanceInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkCommandBufferInheritanceInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkCommandBufferInheritanceInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkCommandBufferInheritanceInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkRenderPassT RenderPass
    {
        get
        {
            global::VkRenderPassT __result0;
            if (((global::VkCommandBufferInheritanceInfo.__Internal*) __Instance)->renderPass == IntPtr.Zero) __result0 = null;
            else if (global::VkRenderPassT.NativeToManagedMap.ContainsKey(((global::VkCommandBufferInheritanceInfo.__Internal*) __Instance)->renderPass))
                __result0 = (global::VkRenderPassT) global::VkRenderPassT.NativeToManagedMap[((global::VkCommandBufferInheritanceInfo.__Internal*) __Instance)->renderPass];
            else __result0 = global::VkRenderPassT.__CreateInstance(((global::VkCommandBufferInheritanceInfo.__Internal*) __Instance)->renderPass);
            return __result0;
        }

        set
        {
            ((global::VkCommandBufferInheritanceInfo.__Internal*)__Instance)->renderPass = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint Subpass
    {
        get
        {
            return ((global::VkCommandBufferInheritanceInfo.__Internal*) __Instance)->subpass;
        }

        set
        {
            ((global::VkCommandBufferInheritanceInfo.__Internal*)__Instance)->subpass = value;
        }
    }

    public global::VkFramebufferT Framebuffer
    {
        get
        {
            global::VkFramebufferT __result0;
            if (((global::VkCommandBufferInheritanceInfo.__Internal*) __Instance)->framebuffer == IntPtr.Zero) __result0 = null;
            else if (global::VkFramebufferT.NativeToManagedMap.ContainsKey(((global::VkCommandBufferInheritanceInfo.__Internal*) __Instance)->framebuffer))
                __result0 = (global::VkFramebufferT) global::VkFramebufferT.NativeToManagedMap[((global::VkCommandBufferInheritanceInfo.__Internal*) __Instance)->framebuffer];
            else __result0 = global::VkFramebufferT.__CreateInstance(((global::VkCommandBufferInheritanceInfo.__Internal*) __Instance)->framebuffer);
            return __result0;
        }

        set
        {
            ((global::VkCommandBufferInheritanceInfo.__Internal*)__Instance)->framebuffer = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint OcclusionQueryEnable
    {
        get
        {
            return ((global::VkCommandBufferInheritanceInfo.__Internal*) __Instance)->occlusionQueryEnable;
        }

        set
        {
            ((global::VkCommandBufferInheritanceInfo.__Internal*)__Instance)->occlusionQueryEnable = value;
        }
    }

    public uint QueryFlags
    {
        get
        {
            return ((global::VkCommandBufferInheritanceInfo.__Internal*) __Instance)->queryFlags;
        }

        set
        {
            ((global::VkCommandBufferInheritanceInfo.__Internal*)__Instance)->queryFlags = value;
        }
    }

    public uint PipelineStatistics
    {
        get
        {
            return ((global::VkCommandBufferInheritanceInfo.__Internal*) __Instance)->pipelineStatistics;
        }

        set
        {
            ((global::VkCommandBufferInheritanceInfo.__Internal*)__Instance)->pipelineStatistics = value;
        }
    }
}

public unsafe partial class VkCommandBufferBeginInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(24)]
        internal global::System.IntPtr pInheritanceInfo;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkCommandBufferBeginInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkCommandBufferBeginInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkCommandBufferBeginInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkCommandBufferBeginInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkCommandBufferBeginInfo __CreateInstance(global::VkCommandBufferBeginInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkCommandBufferBeginInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkCommandBufferBeginInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkCommandBufferBeginInfo.__Internal));
        *(global::VkCommandBufferBeginInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkCommandBufferBeginInfo(global::VkCommandBufferBeginInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkCommandBufferBeginInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkCommandBufferBeginInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkCommandBufferBeginInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkCommandBufferBeginInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkCommandBufferBeginInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkCommandBufferBeginInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkCommandBufferBeginInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkCommandBufferBeginInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkCommandBufferBeginInfo.__Internal*)__Instance)->flags = value;
        }
    }

    public global::VkCommandBufferInheritanceInfo PInheritanceInfo
    {
        get
        {
            global::VkCommandBufferInheritanceInfo __result0;
            if (((global::VkCommandBufferBeginInfo.__Internal*) __Instance)->pInheritanceInfo == IntPtr.Zero) __result0 = null;
            else if (global::VkCommandBufferInheritanceInfo.NativeToManagedMap.ContainsKey(((global::VkCommandBufferBeginInfo.__Internal*) __Instance)->pInheritanceInfo))
                __result0 = (global::VkCommandBufferInheritanceInfo) global::VkCommandBufferInheritanceInfo.NativeToManagedMap[((global::VkCommandBufferBeginInfo.__Internal*) __Instance)->pInheritanceInfo];
            else __result0 = global::VkCommandBufferInheritanceInfo.__CreateInstance(((global::VkCommandBufferBeginInfo.__Internal*) __Instance)->pInheritanceInfo);
            return __result0;
        }

        set
        {
            ((global::VkCommandBufferBeginInfo.__Internal*)__Instance)->pInheritanceInfo = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkBufferCopy : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal ulong srcOffset;

        [FieldOffset(8)]
        internal ulong dstOffset;

        [FieldOffset(16)]
        internal ulong size;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkBufferCopy> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkBufferCopy>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkBufferCopy __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkBufferCopy(native.ToPointer(), skipVTables);
    }

    internal static global::VkBufferCopy __CreateInstance(global::VkBufferCopy.__Internal native, bool skipVTables = false)
    {
        return new global::VkBufferCopy(native, skipVTables);
    }

    private static void* __CopyValue(global::VkBufferCopy.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkBufferCopy.__Internal));
        *(global::VkBufferCopy.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkBufferCopy(global::VkBufferCopy.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkBufferCopy(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkBufferCopy()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkBufferCopy __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public ulong SrcOffset
    {
        get
        {
            return ((global::VkBufferCopy.__Internal*) __Instance)->srcOffset;
        }

        set
        {
            ((global::VkBufferCopy.__Internal*)__Instance)->srcOffset = value;
        }
    }

    public ulong DstOffset
    {
        get
        {
            return ((global::VkBufferCopy.__Internal*) __Instance)->dstOffset;
        }

        set
        {
            ((global::VkBufferCopy.__Internal*)__Instance)->dstOffset = value;
        }
    }

    public ulong Size
    {
        get
        {
            return ((global::VkBufferCopy.__Internal*) __Instance)->size;
        }

        set
        {
            ((global::VkBufferCopy.__Internal*)__Instance)->size = value;
        }
    }
}

public unsafe partial class VkImageSubresourceLayers : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint aspectMask;

        [FieldOffset(4)]
        internal uint mipLevel;

        [FieldOffset(8)]
        internal uint baseArrayLayer;

        [FieldOffset(12)]
        internal uint layerCount;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageSubresourceLayers> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageSubresourceLayers>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkImageSubresourceLayers __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkImageSubresourceLayers(native.ToPointer(), skipVTables);
    }

    internal static global::VkImageSubresourceLayers __CreateInstance(global::VkImageSubresourceLayers.__Internal native, bool skipVTables = false)
    {
        return new global::VkImageSubresourceLayers(native, skipVTables);
    }

    private static void* __CopyValue(global::VkImageSubresourceLayers.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkImageSubresourceLayers.__Internal));
        *(global::VkImageSubresourceLayers.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkImageSubresourceLayers(global::VkImageSubresourceLayers.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkImageSubresourceLayers(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkImageSubresourceLayers()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkImageSubresourceLayers __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint AspectMask
    {
        get
        {
            return ((global::VkImageSubresourceLayers.__Internal*) __Instance)->aspectMask;
        }

        set
        {
            ((global::VkImageSubresourceLayers.__Internal*)__Instance)->aspectMask = value;
        }
    }

    public uint MipLevel
    {
        get
        {
            return ((global::VkImageSubresourceLayers.__Internal*) __Instance)->mipLevel;
        }

        set
        {
            ((global::VkImageSubresourceLayers.__Internal*)__Instance)->mipLevel = value;
        }
    }

    public uint BaseArrayLayer
    {
        get
        {
            return ((global::VkImageSubresourceLayers.__Internal*) __Instance)->baseArrayLayer;
        }

        set
        {
            ((global::VkImageSubresourceLayers.__Internal*)__Instance)->baseArrayLayer = value;
        }
    }

    public uint LayerCount
    {
        get
        {
            return ((global::VkImageSubresourceLayers.__Internal*) __Instance)->layerCount;
        }

        set
        {
            ((global::VkImageSubresourceLayers.__Internal*)__Instance)->layerCount = value;
        }
    }
}

public unsafe partial class VkImageCopy : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 68)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkImageSubresourceLayers.__Internal srcSubresource;

        [FieldOffset(16)]
        internal global::VkOffset3D.__Internal srcOffset;

        [FieldOffset(28)]
        internal global::VkImageSubresourceLayers.__Internal dstSubresource;

        [FieldOffset(44)]
        internal global::VkOffset3D.__Internal dstOffset;

        [FieldOffset(56)]
        internal global::VkExtent3D.__Internal extent;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageCopy> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageCopy>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkImageCopy __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkImageCopy(native.ToPointer(), skipVTables);
    }

    internal static global::VkImageCopy __CreateInstance(global::VkImageCopy.__Internal native, bool skipVTables = false)
    {
        return new global::VkImageCopy(native, skipVTables);
    }

    private static void* __CopyValue(global::VkImageCopy.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkImageCopy.__Internal));
        *(global::VkImageCopy.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkImageCopy(global::VkImageCopy.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkImageCopy(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkImageCopy()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkImageCopy __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkImageSubresourceLayers SrcSubresource
    {
        get
        {
            return global::VkImageSubresourceLayers.__CreateInstance(new global::System.IntPtr(&((global::VkImageCopy.__Internal*) __Instance)->srcSubresource));
        }

        set
        {
            ((global::VkImageCopy.__Internal*)__Instance)->srcSubresource = ReferenceEquals(value, null) ? new global::VkImageSubresourceLayers.__Internal() : *(global::VkImageSubresourceLayers.__Internal*) value.__Instance;
        }
    }

    public global::VkOffset3D SrcOffset
    {
        get
        {
            return global::VkOffset3D.__CreateInstance(new global::System.IntPtr(&((global::VkImageCopy.__Internal*) __Instance)->srcOffset));
        }

        set
        {
            ((global::VkImageCopy.__Internal*)__Instance)->srcOffset = ReferenceEquals(value, null) ? new global::VkOffset3D.__Internal() : *(global::VkOffset3D.__Internal*) value.__Instance;
        }
    }

    public global::VkImageSubresourceLayers DstSubresource
    {
        get
        {
            return global::VkImageSubresourceLayers.__CreateInstance(new global::System.IntPtr(&((global::VkImageCopy.__Internal*) __Instance)->dstSubresource));
        }

        set
        {
            ((global::VkImageCopy.__Internal*)__Instance)->dstSubresource = ReferenceEquals(value, null) ? new global::VkImageSubresourceLayers.__Internal() : *(global::VkImageSubresourceLayers.__Internal*) value.__Instance;
        }
    }

    public global::VkOffset3D DstOffset
    {
        get
        {
            return global::VkOffset3D.__CreateInstance(new global::System.IntPtr(&((global::VkImageCopy.__Internal*) __Instance)->dstOffset));
        }

        set
        {
            ((global::VkImageCopy.__Internal*)__Instance)->dstOffset = ReferenceEquals(value, null) ? new global::VkOffset3D.__Internal() : *(global::VkOffset3D.__Internal*) value.__Instance;
        }
    }

    public global::VkExtent3D Extent
    {
        get
        {
            return global::VkExtent3D.__CreateInstance(new global::System.IntPtr(&((global::VkImageCopy.__Internal*) __Instance)->extent));
        }

        set
        {
            ((global::VkImageCopy.__Internal*)__Instance)->extent = ReferenceEquals(value, null) ? new global::VkExtent3D.__Internal() : *(global::VkExtent3D.__Internal*) value.__Instance;
        }
    }
}

public unsafe partial class VkImageBlit : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 80)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkImageSubresourceLayers.__Internal srcSubresource;

        [FieldOffset(16)]
        internal fixed byte srcOffsets[24];

        [FieldOffset(40)]
        internal global::VkImageSubresourceLayers.__Internal dstSubresource;

        [FieldOffset(56)]
        internal fixed byte dstOffsets[24];
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageBlit> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageBlit>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkImageBlit __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkImageBlit(native.ToPointer(), skipVTables);
    }

    internal static global::VkImageBlit __CreateInstance(global::VkImageBlit.__Internal native, bool skipVTables = false)
    {
        return new global::VkImageBlit(native, skipVTables);
    }

    private static void* __CopyValue(global::VkImageBlit.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkImageBlit.__Internal));
        *(global::VkImageBlit.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkImageBlit(global::VkImageBlit.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkImageBlit(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkImageBlit()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkImageBlit __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkImageSubresourceLayers SrcSubresource
    {
        get
        {
            return global::VkImageSubresourceLayers.__CreateInstance(new global::System.IntPtr(&((global::VkImageBlit.__Internal*) __Instance)->srcSubresource));
        }

        set
        {
            ((global::VkImageBlit.__Internal*)__Instance)->srcSubresource = ReferenceEquals(value, null) ? new global::VkImageSubresourceLayers.__Internal() : *(global::VkImageSubresourceLayers.__Internal*) value.__Instance;
        }
    }

    public global::VkOffset3D[] SrcOffsets
    {
        get
        {
            global::VkOffset3D[] __value = null;
            if (((global::VkImageBlit.__Internal*) __Instance)->srcOffsets != null)
            {
                __value = new global::VkOffset3D[2];
                for (int i = 0; i < 2; i++)
                    __value[i] = global::VkOffset3D.__CreateInstance(*((global::VkOffset3D.__Internal*)&(((global::VkImageBlit.__Internal*) __Instance)->srcOffsets[i * sizeof(global::VkOffset3D.__Internal)])));
            }
            return __value;
        }

        set
        {
            if (value != null)
            {
                if (value.Length != 2)
                    throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                for (int i = 0; i < 2; i++)
                    *(global::VkOffset3D.__Internal*) &((global::VkImageBlit.__Internal*)__Instance)->srcOffsets[i * sizeof(global::VkOffset3D.__Internal)] = *(global::VkOffset3D.__Internal*)value[i].__Instance;
            }
        }
    }

    public global::VkImageSubresourceLayers DstSubresource
    {
        get
        {
            return global::VkImageSubresourceLayers.__CreateInstance(new global::System.IntPtr(&((global::VkImageBlit.__Internal*) __Instance)->dstSubresource));
        }

        set
        {
            ((global::VkImageBlit.__Internal*)__Instance)->dstSubresource = ReferenceEquals(value, null) ? new global::VkImageSubresourceLayers.__Internal() : *(global::VkImageSubresourceLayers.__Internal*) value.__Instance;
        }
    }

    public global::VkOffset3D[] DstOffsets
    {
        get
        {
            global::VkOffset3D[] __value = null;
            if (((global::VkImageBlit.__Internal*) __Instance)->dstOffsets != null)
            {
                __value = new global::VkOffset3D[2];
                for (int i = 0; i < 2; i++)
                    __value[i] = global::VkOffset3D.__CreateInstance(*((global::VkOffset3D.__Internal*)&(((global::VkImageBlit.__Internal*) __Instance)->dstOffsets[i * sizeof(global::VkOffset3D.__Internal)])));
            }
            return __value;
        }

        set
        {
            if (value != null)
            {
                if (value.Length != 2)
                    throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                for (int i = 0; i < 2; i++)
                    *(global::VkOffset3D.__Internal*) &((global::VkImageBlit.__Internal*)__Instance)->dstOffsets[i * sizeof(global::VkOffset3D.__Internal)] = *(global::VkOffset3D.__Internal*)value[i].__Instance;
            }
        }
    }
}

public unsafe partial class VkBufferImageCopy : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 56)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal ulong bufferOffset;

        [FieldOffset(8)]
        internal uint bufferRowLength;

        [FieldOffset(12)]
        internal uint bufferImageHeight;

        [FieldOffset(16)]
        internal global::VkImageSubresourceLayers.__Internal imageSubresource;

        [FieldOffset(32)]
        internal global::VkOffset3D.__Internal imageOffset;

        [FieldOffset(44)]
        internal global::VkExtent3D.__Internal imageExtent;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkBufferImageCopy> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkBufferImageCopy>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkBufferImageCopy __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkBufferImageCopy(native.ToPointer(), skipVTables);
    }

    internal static global::VkBufferImageCopy __CreateInstance(global::VkBufferImageCopy.__Internal native, bool skipVTables = false)
    {
        return new global::VkBufferImageCopy(native, skipVTables);
    }

    private static void* __CopyValue(global::VkBufferImageCopy.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkBufferImageCopy.__Internal));
        *(global::VkBufferImageCopy.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkBufferImageCopy(global::VkBufferImageCopy.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkBufferImageCopy(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkBufferImageCopy()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkBufferImageCopy __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public ulong BufferOffset
    {
        get
        {
            return ((global::VkBufferImageCopy.__Internal*) __Instance)->bufferOffset;
        }

        set
        {
            ((global::VkBufferImageCopy.__Internal*)__Instance)->bufferOffset = value;
        }
    }

    public uint BufferRowLength
    {
        get
        {
            return ((global::VkBufferImageCopy.__Internal*) __Instance)->bufferRowLength;
        }

        set
        {
            ((global::VkBufferImageCopy.__Internal*)__Instance)->bufferRowLength = value;
        }
    }

    public uint BufferImageHeight
    {
        get
        {
            return ((global::VkBufferImageCopy.__Internal*) __Instance)->bufferImageHeight;
        }

        set
        {
            ((global::VkBufferImageCopy.__Internal*)__Instance)->bufferImageHeight = value;
        }
    }

    public global::VkImageSubresourceLayers ImageSubresource
    {
        get
        {
            return global::VkImageSubresourceLayers.__CreateInstance(new global::System.IntPtr(&((global::VkBufferImageCopy.__Internal*) __Instance)->imageSubresource));
        }

        set
        {
            ((global::VkBufferImageCopy.__Internal*)__Instance)->imageSubresource = ReferenceEquals(value, null) ? new global::VkImageSubresourceLayers.__Internal() : *(global::VkImageSubresourceLayers.__Internal*) value.__Instance;
        }
    }

    public global::VkOffset3D ImageOffset
    {
        get
        {
            return global::VkOffset3D.__CreateInstance(new global::System.IntPtr(&((global::VkBufferImageCopy.__Internal*) __Instance)->imageOffset));
        }

        set
        {
            ((global::VkBufferImageCopy.__Internal*)__Instance)->imageOffset = ReferenceEquals(value, null) ? new global::VkOffset3D.__Internal() : *(global::VkOffset3D.__Internal*) value.__Instance;
        }
    }

    public global::VkExtent3D ImageExtent
    {
        get
        {
            return global::VkExtent3D.__CreateInstance(new global::System.IntPtr(&((global::VkBufferImageCopy.__Internal*) __Instance)->imageExtent));
        }

        set
        {
            ((global::VkBufferImageCopy.__Internal*)__Instance)->imageExtent = ReferenceEquals(value, null) ? new global::VkExtent3D.__Internal() : *(global::VkExtent3D.__Internal*) value.__Instance;
        }
    }
}

public unsafe partial struct VkClearColorValue
{
    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal fixed float float32[4];

        [FieldOffset(0)]
        internal fixed int int32[4];

        [FieldOffset(0)]
        internal fixed uint uint32[4];
    }

    private VkClearColorValue.__Internal __instance;
    internal VkClearColorValue.__Internal __Instance { get { return __instance; } }

    internal static global::VkClearColorValue __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkClearColorValue(native.ToPointer(), skipVTables);
    }

    internal static global::VkClearColorValue __CreateInstance(global::VkClearColorValue.__Internal native, bool skipVTables = false)
    {
        return new global::VkClearColorValue(native, skipVTables);
    }

    private VkClearColorValue(global::VkClearColorValue.__Internal native, bool skipVTables = false)
        : this()
    {
        __instance = native;
    }

    private VkClearColorValue(void* native, bool skipVTables = false) : this()
    {
        __instance = *(global::VkClearColorValue.__Internal*) native;
    }

    public float[] Float32
    {
        get
        {
            fixed (float* __arrPtr = __instance.float32)
            {
                float[] __value = null;
                if (__arrPtr != null)
                {
                    __value = new float[4];
                    for (int i = 0; i < 4; i++)
                        __value[i] = __arrPtr[i];
                }
                return __value;
            }
        }

        set
        {
            fixed (float* __arrPtr = __instance.float32)
            {
                if (value != null)
                {
                    for (int i = 0; i < 4; i++)
                        __arrPtr[i] = value[i];
                }
            }
        }
    }

    public int[] Int32
    {
        get
        {
            fixed (int* __arrPtr = __instance.int32)
            {
                int[] __value = null;
                if (__arrPtr != null)
                {
                    __value = new int[4];
                    for (int i = 0; i < 4; i++)
                        __value[i] = __arrPtr[i];
                }
                return __value;
            }
        }

        set
        {
            fixed (int* __arrPtr = __instance.int32)
            {
                if (value != null)
                {
                    for (int i = 0; i < 4; i++)
                        __arrPtr[i] = value[i];
                }
            }
        }
    }

    public uint[] Uint32
    {
        get
        {
            fixed (uint* __arrPtr = __instance.uint32)
            {
                uint[] __value = null;
                if (__arrPtr != null)
                {
                    __value = new uint[4];
                    for (int i = 0; i < 4; i++)
                        __value[i] = __arrPtr[i];
                }
                return __value;
            }
        }

        set
        {
            fixed (uint* __arrPtr = __instance.uint32)
            {
                if (value != null)
                {
                    for (int i = 0; i < 4; i++)
                        __arrPtr[i] = value[i];
                }
            }
        }
    }
}

public unsafe partial class VkClearDepthStencilValue : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal float depth;

        [FieldOffset(4)]
        internal uint stencil;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkClearDepthStencilValue> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkClearDepthStencilValue>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkClearDepthStencilValue __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkClearDepthStencilValue(native.ToPointer(), skipVTables);
    }

    internal static global::VkClearDepthStencilValue __CreateInstance(global::VkClearDepthStencilValue.__Internal native, bool skipVTables = false)
    {
        return new global::VkClearDepthStencilValue(native, skipVTables);
    }

    private static void* __CopyValue(global::VkClearDepthStencilValue.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkClearDepthStencilValue.__Internal));
        *(global::VkClearDepthStencilValue.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkClearDepthStencilValue(global::VkClearDepthStencilValue.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkClearDepthStencilValue(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkClearDepthStencilValue()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkClearDepthStencilValue __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public float Depth
    {
        get
        {
            return ((global::VkClearDepthStencilValue.__Internal*) __Instance)->depth;
        }

        set
        {
            ((global::VkClearDepthStencilValue.__Internal*)__Instance)->depth = value;
        }
    }

    public uint Stencil
    {
        get
        {
            return ((global::VkClearDepthStencilValue.__Internal*) __Instance)->stencil;
        }

        set
        {
            ((global::VkClearDepthStencilValue.__Internal*)__Instance)->stencil = value;
        }
    }
}

public unsafe partial struct VkClearValue
{
    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkClearColorValue.__Internal color;

        [FieldOffset(0)]
        internal global::VkClearDepthStencilValue.__Internal depthStencil;
    }

    private VkClearValue.__Internal __instance;
    internal VkClearValue.__Internal __Instance { get { return __instance; } }

    internal static global::VkClearValue __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkClearValue(native.ToPointer(), skipVTables);
    }

    internal static global::VkClearValue __CreateInstance(global::VkClearValue.__Internal native, bool skipVTables = false)
    {
        return new global::VkClearValue(native, skipVTables);
    }

    private VkClearValue(global::VkClearValue.__Internal native, bool skipVTables = false)
        : this()
    {
        __instance = native;
    }

    private VkClearValue(void* native, bool skipVTables = false) : this()
    {
        __instance = *(global::VkClearValue.__Internal*) native;
    }

    public global::VkClearColorValue Color;

    public global::VkClearDepthStencilValue DepthStencil
    {
        get
        {
            return global::VkClearDepthStencilValue.__CreateInstance(__instance.depthStencil);
        }

        set
        {
            __instance.depthStencil = ReferenceEquals(value, null) ? new global::VkClearDepthStencilValue.__Internal() : *(global::VkClearDepthStencilValue.__Internal*) value.__Instance;
        }
    }
}

public unsafe partial class VkClearAttachment : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint aspectMask;

        [FieldOffset(4)]
        internal uint colorAttachment;

        [FieldOffset(8)]
        internal global::VkClearValue.__Internal clearValue;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkClearAttachment> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkClearAttachment>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkClearAttachment __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkClearAttachment(native.ToPointer(), skipVTables);
    }

    internal static global::VkClearAttachment __CreateInstance(global::VkClearAttachment.__Internal native, bool skipVTables = false)
    {
        return new global::VkClearAttachment(native, skipVTables);
    }

    private static void* __CopyValue(global::VkClearAttachment.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkClearAttachment.__Internal));
        *(global::VkClearAttachment.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkClearAttachment(global::VkClearAttachment.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkClearAttachment(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkClearAttachment()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkClearAttachment __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint AspectMask
    {
        get
        {
            return ((global::VkClearAttachment.__Internal*) __Instance)->aspectMask;
        }

        set
        {
            ((global::VkClearAttachment.__Internal*)__Instance)->aspectMask = value;
        }
    }

    public uint ColorAttachment
    {
        get
        {
            return ((global::VkClearAttachment.__Internal*) __Instance)->colorAttachment;
        }

        set
        {
            ((global::VkClearAttachment.__Internal*)__Instance)->colorAttachment = value;
        }
    }

    public global::VkClearValue ClearValue
    {
        get
        {
            return global::VkClearValue.__CreateInstance(((global::VkClearAttachment.__Internal*) __Instance)->clearValue);
        }

        set
        {
            ((global::VkClearAttachment.__Internal*)__Instance)->clearValue = value.__Instance;
        }
    }
}

public unsafe partial class VkClearRect : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkRect2D.__Internal rect;

        [FieldOffset(16)]
        internal uint baseArrayLayer;

        [FieldOffset(20)]
        internal uint layerCount;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkClearRect> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkClearRect>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkClearRect __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkClearRect(native.ToPointer(), skipVTables);
    }

    internal static global::VkClearRect __CreateInstance(global::VkClearRect.__Internal native, bool skipVTables = false)
    {
        return new global::VkClearRect(native, skipVTables);
    }

    private static void* __CopyValue(global::VkClearRect.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkClearRect.__Internal));
        *(global::VkClearRect.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkClearRect(global::VkClearRect.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkClearRect(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkClearRect()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkClearRect __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkRect2D Rect
    {
        get
        {
            return global::VkRect2D.__CreateInstance(new global::System.IntPtr(&((global::VkClearRect.__Internal*) __Instance)->rect));
        }

        set
        {
            ((global::VkClearRect.__Internal*)__Instance)->rect = ReferenceEquals(value, null) ? new global::VkRect2D.__Internal() : *(global::VkRect2D.__Internal*) value.__Instance;
        }
    }

    public uint BaseArrayLayer
    {
        get
        {
            return ((global::VkClearRect.__Internal*) __Instance)->baseArrayLayer;
        }

        set
        {
            ((global::VkClearRect.__Internal*)__Instance)->baseArrayLayer = value;
        }
    }

    public uint LayerCount
    {
        get
        {
            return ((global::VkClearRect.__Internal*) __Instance)->layerCount;
        }

        set
        {
            ((global::VkClearRect.__Internal*)__Instance)->layerCount = value;
        }
    }
}

public unsafe partial class VkImageResolve : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 68)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkImageSubresourceLayers.__Internal srcSubresource;

        [FieldOffset(16)]
        internal global::VkOffset3D.__Internal srcOffset;

        [FieldOffset(28)]
        internal global::VkImageSubresourceLayers.__Internal dstSubresource;

        [FieldOffset(44)]
        internal global::VkOffset3D.__Internal dstOffset;

        [FieldOffset(56)]
        internal global::VkExtent3D.__Internal extent;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageResolve> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageResolve>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkImageResolve __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkImageResolve(native.ToPointer(), skipVTables);
    }

    internal static global::VkImageResolve __CreateInstance(global::VkImageResolve.__Internal native, bool skipVTables = false)
    {
        return new global::VkImageResolve(native, skipVTables);
    }

    private static void* __CopyValue(global::VkImageResolve.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkImageResolve.__Internal));
        *(global::VkImageResolve.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkImageResolve(global::VkImageResolve.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkImageResolve(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkImageResolve()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkImageResolve __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkImageSubresourceLayers SrcSubresource
    {
        get
        {
            return global::VkImageSubresourceLayers.__CreateInstance(new global::System.IntPtr(&((global::VkImageResolve.__Internal*) __Instance)->srcSubresource));
        }

        set
        {
            ((global::VkImageResolve.__Internal*)__Instance)->srcSubresource = ReferenceEquals(value, null) ? new global::VkImageSubresourceLayers.__Internal() : *(global::VkImageSubresourceLayers.__Internal*) value.__Instance;
        }
    }

    public global::VkOffset3D SrcOffset
    {
        get
        {
            return global::VkOffset3D.__CreateInstance(new global::System.IntPtr(&((global::VkImageResolve.__Internal*) __Instance)->srcOffset));
        }

        set
        {
            ((global::VkImageResolve.__Internal*)__Instance)->srcOffset = ReferenceEquals(value, null) ? new global::VkOffset3D.__Internal() : *(global::VkOffset3D.__Internal*) value.__Instance;
        }
    }

    public global::VkImageSubresourceLayers DstSubresource
    {
        get
        {
            return global::VkImageSubresourceLayers.__CreateInstance(new global::System.IntPtr(&((global::VkImageResolve.__Internal*) __Instance)->dstSubresource));
        }

        set
        {
            ((global::VkImageResolve.__Internal*)__Instance)->dstSubresource = ReferenceEquals(value, null) ? new global::VkImageSubresourceLayers.__Internal() : *(global::VkImageSubresourceLayers.__Internal*) value.__Instance;
        }
    }

    public global::VkOffset3D DstOffset
    {
        get
        {
            return global::VkOffset3D.__CreateInstance(new global::System.IntPtr(&((global::VkImageResolve.__Internal*) __Instance)->dstOffset));
        }

        set
        {
            ((global::VkImageResolve.__Internal*)__Instance)->dstOffset = ReferenceEquals(value, null) ? new global::VkOffset3D.__Internal() : *(global::VkOffset3D.__Internal*) value.__Instance;
        }
    }

    public global::VkExtent3D Extent
    {
        get
        {
            return global::VkExtent3D.__CreateInstance(new global::System.IntPtr(&((global::VkImageResolve.__Internal*) __Instance)->extent));
        }

        set
        {
            ((global::VkImageResolve.__Internal*)__Instance)->extent = ReferenceEquals(value, null) ? new global::VkExtent3D.__Internal() : *(global::VkExtent3D.__Internal*) value.__Instance;
        }
    }
}

public unsafe partial class VkMemoryBarrier : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint srcAccessMask;

        [FieldOffset(20)]
        internal uint dstAccessMask;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkMemoryBarrier> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkMemoryBarrier>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkMemoryBarrier __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkMemoryBarrier(native.ToPointer(), skipVTables);
    }

    internal static global::VkMemoryBarrier __CreateInstance(global::VkMemoryBarrier.__Internal native, bool skipVTables = false)
    {
        return new global::VkMemoryBarrier(native, skipVTables);
    }

    private static void* __CopyValue(global::VkMemoryBarrier.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkMemoryBarrier.__Internal));
        *(global::VkMemoryBarrier.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkMemoryBarrier(global::VkMemoryBarrier.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkMemoryBarrier(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkMemoryBarrier()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkMemoryBarrier __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkMemoryBarrier.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkMemoryBarrier.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkMemoryBarrier.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkMemoryBarrier.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint SrcAccessMask
    {
        get
        {
            return ((global::VkMemoryBarrier.__Internal*) __Instance)->srcAccessMask;
        }

        set
        {
            ((global::VkMemoryBarrier.__Internal*)__Instance)->srcAccessMask = value;
        }
    }

    public uint DstAccessMask
    {
        get
        {
            return ((global::VkMemoryBarrier.__Internal*) __Instance)->dstAccessMask;
        }

        set
        {
            ((global::VkMemoryBarrier.__Internal*)__Instance)->dstAccessMask = value;
        }
    }
}

public unsafe partial class VkBufferMemoryBarrier : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 56)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint srcAccessMask;

        [FieldOffset(20)]
        internal uint dstAccessMask;

        [FieldOffset(24)]
        internal uint srcQueueFamilyIndex;

        [FieldOffset(28)]
        internal uint dstQueueFamilyIndex;

        [FieldOffset(32)]
        internal global::System.IntPtr buffer;

        [FieldOffset(40)]
        internal ulong offset;

        [FieldOffset(48)]
        internal ulong size;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkBufferMemoryBarrier> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkBufferMemoryBarrier>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkBufferMemoryBarrier __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkBufferMemoryBarrier(native.ToPointer(), skipVTables);
    }

    internal static global::VkBufferMemoryBarrier __CreateInstance(global::VkBufferMemoryBarrier.__Internal native, bool skipVTables = false)
    {
        return new global::VkBufferMemoryBarrier(native, skipVTables);
    }

    private static void* __CopyValue(global::VkBufferMemoryBarrier.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkBufferMemoryBarrier.__Internal));
        *(global::VkBufferMemoryBarrier.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkBufferMemoryBarrier(global::VkBufferMemoryBarrier.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkBufferMemoryBarrier(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkBufferMemoryBarrier()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkBufferMemoryBarrier __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkBufferMemoryBarrier.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkBufferMemoryBarrier.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkBufferMemoryBarrier.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkBufferMemoryBarrier.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint SrcAccessMask
    {
        get
        {
            return ((global::VkBufferMemoryBarrier.__Internal*) __Instance)->srcAccessMask;
        }

        set
        {
            ((global::VkBufferMemoryBarrier.__Internal*)__Instance)->srcAccessMask = value;
        }
    }

    public uint DstAccessMask
    {
        get
        {
            return ((global::VkBufferMemoryBarrier.__Internal*) __Instance)->dstAccessMask;
        }

        set
        {
            ((global::VkBufferMemoryBarrier.__Internal*)__Instance)->dstAccessMask = value;
        }
    }

    public uint SrcQueueFamilyIndex
    {
        get
        {
            return ((global::VkBufferMemoryBarrier.__Internal*) __Instance)->srcQueueFamilyIndex;
        }

        set
        {
            ((global::VkBufferMemoryBarrier.__Internal*)__Instance)->srcQueueFamilyIndex = value;
        }
    }

    public uint DstQueueFamilyIndex
    {
        get
        {
            return ((global::VkBufferMemoryBarrier.__Internal*) __Instance)->dstQueueFamilyIndex;
        }

        set
        {
            ((global::VkBufferMemoryBarrier.__Internal*)__Instance)->dstQueueFamilyIndex = value;
        }
    }

    public global::VkBufferT Buffer
    {
        get
        {
            global::VkBufferT __result0;
            if (((global::VkBufferMemoryBarrier.__Internal*) __Instance)->buffer == IntPtr.Zero) __result0 = null;
            else if (global::VkBufferT.NativeToManagedMap.ContainsKey(((global::VkBufferMemoryBarrier.__Internal*) __Instance)->buffer))
                __result0 = (global::VkBufferT) global::VkBufferT.NativeToManagedMap[((global::VkBufferMemoryBarrier.__Internal*) __Instance)->buffer];
            else __result0 = global::VkBufferT.__CreateInstance(((global::VkBufferMemoryBarrier.__Internal*) __Instance)->buffer);
            return __result0;
        }

        set
        {
            ((global::VkBufferMemoryBarrier.__Internal*)__Instance)->buffer = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public ulong Offset
    {
        get
        {
            return ((global::VkBufferMemoryBarrier.__Internal*) __Instance)->offset;
        }

        set
        {
            ((global::VkBufferMemoryBarrier.__Internal*)__Instance)->offset = value;
        }
    }

    public ulong Size
    {
        get
        {
            return ((global::VkBufferMemoryBarrier.__Internal*) __Instance)->size;
        }

        set
        {
            ((global::VkBufferMemoryBarrier.__Internal*)__Instance)->size = value;
        }
    }
}

public unsafe partial class VkImageMemoryBarrier : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 72)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint srcAccessMask;

        [FieldOffset(20)]
        internal uint dstAccessMask;

        [FieldOffset(24)]
        internal global::VkImageLayout oldLayout;

        [FieldOffset(28)]
        internal global::VkImageLayout newLayout;

        [FieldOffset(32)]
        internal uint srcQueueFamilyIndex;

        [FieldOffset(36)]
        internal uint dstQueueFamilyIndex;

        [FieldOffset(40)]
        internal global::System.IntPtr image;

        [FieldOffset(48)]
        internal global::VkImageSubresourceRange.__Internal subresourceRange;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageMemoryBarrier> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageMemoryBarrier>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkImageMemoryBarrier __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkImageMemoryBarrier(native.ToPointer(), skipVTables);
    }

    internal static global::VkImageMemoryBarrier __CreateInstance(global::VkImageMemoryBarrier.__Internal native, bool skipVTables = false)
    {
        return new global::VkImageMemoryBarrier(native, skipVTables);
    }

    private static void* __CopyValue(global::VkImageMemoryBarrier.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkImageMemoryBarrier.__Internal));
        *(global::VkImageMemoryBarrier.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkImageMemoryBarrier(global::VkImageMemoryBarrier.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkImageMemoryBarrier(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkImageMemoryBarrier()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkImageMemoryBarrier __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkImageMemoryBarrier.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkImageMemoryBarrier.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkImageMemoryBarrier.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkImageMemoryBarrier.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint SrcAccessMask
    {
        get
        {
            return ((global::VkImageMemoryBarrier.__Internal*) __Instance)->srcAccessMask;
        }

        set
        {
            ((global::VkImageMemoryBarrier.__Internal*)__Instance)->srcAccessMask = value;
        }
    }

    public uint DstAccessMask
    {
        get
        {
            return ((global::VkImageMemoryBarrier.__Internal*) __Instance)->dstAccessMask;
        }

        set
        {
            ((global::VkImageMemoryBarrier.__Internal*)__Instance)->dstAccessMask = value;
        }
    }

    public global::VkImageLayout OldLayout
    {
        get
        {
            return ((global::VkImageMemoryBarrier.__Internal*) __Instance)->oldLayout;
        }

        set
        {
            ((global::VkImageMemoryBarrier.__Internal*)__Instance)->oldLayout = value;
        }
    }

    public global::VkImageLayout NewLayout
    {
        get
        {
            return ((global::VkImageMemoryBarrier.__Internal*) __Instance)->newLayout;
        }

        set
        {
            ((global::VkImageMemoryBarrier.__Internal*)__Instance)->newLayout = value;
        }
    }

    public uint SrcQueueFamilyIndex
    {
        get
        {
            return ((global::VkImageMemoryBarrier.__Internal*) __Instance)->srcQueueFamilyIndex;
        }

        set
        {
            ((global::VkImageMemoryBarrier.__Internal*)__Instance)->srcQueueFamilyIndex = value;
        }
    }

    public uint DstQueueFamilyIndex
    {
        get
        {
            return ((global::VkImageMemoryBarrier.__Internal*) __Instance)->dstQueueFamilyIndex;
        }

        set
        {
            ((global::VkImageMemoryBarrier.__Internal*)__Instance)->dstQueueFamilyIndex = value;
        }
    }

    public global::VkImageT Image
    {
        get
        {
            global::VkImageT __result0;
            if (((global::VkImageMemoryBarrier.__Internal*) __Instance)->image == IntPtr.Zero) __result0 = null;
            else if (global::VkImageT.NativeToManagedMap.ContainsKey(((global::VkImageMemoryBarrier.__Internal*) __Instance)->image))
                __result0 = (global::VkImageT) global::VkImageT.NativeToManagedMap[((global::VkImageMemoryBarrier.__Internal*) __Instance)->image];
            else __result0 = global::VkImageT.__CreateInstance(((global::VkImageMemoryBarrier.__Internal*) __Instance)->image);
            return __result0;
        }

        set
        {
            ((global::VkImageMemoryBarrier.__Internal*)__Instance)->image = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkImageSubresourceRange SubresourceRange
    {
        get
        {
            return global::VkImageSubresourceRange.__CreateInstance(new global::System.IntPtr(&((global::VkImageMemoryBarrier.__Internal*) __Instance)->subresourceRange));
        }

        set
        {
            ((global::VkImageMemoryBarrier.__Internal*)__Instance)->subresourceRange = ReferenceEquals(value, null) ? new global::VkImageSubresourceRange.__Internal() : *(global::VkImageSubresourceRange.__Internal*) value.__Instance;
        }
    }
}

public unsafe partial class VkRenderPassBeginInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 64)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::System.IntPtr renderPass;

        [FieldOffset(24)]
        internal global::System.IntPtr framebuffer;

        [FieldOffset(32)]
        internal global::VkRect2D.__Internal renderArea;

        [FieldOffset(48)]
        internal uint clearValueCount;

        [FieldOffset(56)]
        internal global::System.IntPtr pClearValues;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkRenderPassBeginInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkRenderPassBeginInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkRenderPassBeginInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkRenderPassBeginInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkRenderPassBeginInfo __CreateInstance(global::VkRenderPassBeginInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkRenderPassBeginInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkRenderPassBeginInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkRenderPassBeginInfo.__Internal));
        *(global::VkRenderPassBeginInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkRenderPassBeginInfo(global::VkRenderPassBeginInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkRenderPassBeginInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkRenderPassBeginInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkRenderPassBeginInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkRenderPassBeginInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkRenderPassBeginInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkRenderPassBeginInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkRenderPassBeginInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkRenderPassT RenderPass
    {
        get
        {
            global::VkRenderPassT __result0;
            if (((global::VkRenderPassBeginInfo.__Internal*) __Instance)->renderPass == IntPtr.Zero) __result0 = null;
            else if (global::VkRenderPassT.NativeToManagedMap.ContainsKey(((global::VkRenderPassBeginInfo.__Internal*) __Instance)->renderPass))
                __result0 = (global::VkRenderPassT) global::VkRenderPassT.NativeToManagedMap[((global::VkRenderPassBeginInfo.__Internal*) __Instance)->renderPass];
            else __result0 = global::VkRenderPassT.__CreateInstance(((global::VkRenderPassBeginInfo.__Internal*) __Instance)->renderPass);
            return __result0;
        }

        set
        {
            ((global::VkRenderPassBeginInfo.__Internal*)__Instance)->renderPass = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkFramebufferT Framebuffer
    {
        get
        {
            global::VkFramebufferT __result0;
            if (((global::VkRenderPassBeginInfo.__Internal*) __Instance)->framebuffer == IntPtr.Zero) __result0 = null;
            else if (global::VkFramebufferT.NativeToManagedMap.ContainsKey(((global::VkRenderPassBeginInfo.__Internal*) __Instance)->framebuffer))
                __result0 = (global::VkFramebufferT) global::VkFramebufferT.NativeToManagedMap[((global::VkRenderPassBeginInfo.__Internal*) __Instance)->framebuffer];
            else __result0 = global::VkFramebufferT.__CreateInstance(((global::VkRenderPassBeginInfo.__Internal*) __Instance)->framebuffer);
            return __result0;
        }

        set
        {
            ((global::VkRenderPassBeginInfo.__Internal*)__Instance)->framebuffer = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkRect2D RenderArea
    {
        get
        {
            return global::VkRect2D.__CreateInstance(new global::System.IntPtr(&((global::VkRenderPassBeginInfo.__Internal*) __Instance)->renderArea));
        }

        set
        {
            ((global::VkRenderPassBeginInfo.__Internal*)__Instance)->renderArea = ReferenceEquals(value, null) ? new global::VkRect2D.__Internal() : *(global::VkRect2D.__Internal*) value.__Instance;
        }
    }

    public uint ClearValueCount
    {
        get
        {
            return ((global::VkRenderPassBeginInfo.__Internal*) __Instance)->clearValueCount;
        }

        set
        {
            ((global::VkRenderPassBeginInfo.__Internal*)__Instance)->clearValueCount = value;
        }
    }

    public global::VkClearValue PClearValues
    {
        get
        {
            global::VkClearValue __result0;
            if (((global::VkRenderPassBeginInfo.__Internal*) __Instance)->pClearValues == IntPtr.Zero) __result0 = new global::VkClearValue();
            else __result0 = global::VkClearValue.__CreateInstance(((global::VkRenderPassBeginInfo.__Internal*) __Instance)->pClearValues);
            return __result0;
        }

        set
        {
            var __value = value.__Instance;
            ((global::VkRenderPassBeginInfo.__Internal*)__Instance)->pClearValues = new global::System.IntPtr(&__value);
        }
    }
}

public unsafe partial class VkDispatchIndirectCommand : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 12)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint x;

        [FieldOffset(4)]
        internal uint y;

        [FieldOffset(8)]
        internal uint z;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDispatchIndirectCommand> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDispatchIndirectCommand>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDispatchIndirectCommand __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDispatchIndirectCommand(native.ToPointer(), skipVTables);
    }

    internal static global::VkDispatchIndirectCommand __CreateInstance(global::VkDispatchIndirectCommand.__Internal native, bool skipVTables = false)
    {
        return new global::VkDispatchIndirectCommand(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDispatchIndirectCommand.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDispatchIndirectCommand.__Internal));
        *(global::VkDispatchIndirectCommand.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDispatchIndirectCommand(global::VkDispatchIndirectCommand.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDispatchIndirectCommand(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDispatchIndirectCommand()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDispatchIndirectCommand __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint X
    {
        get
        {
            return ((global::VkDispatchIndirectCommand.__Internal*) __Instance)->x;
        }

        set
        {
            ((global::VkDispatchIndirectCommand.__Internal*)__Instance)->x = value;
        }
    }

    public uint Y
    {
        get
        {
            return ((global::VkDispatchIndirectCommand.__Internal*) __Instance)->y;
        }

        set
        {
            ((global::VkDispatchIndirectCommand.__Internal*)__Instance)->y = value;
        }
    }

    public uint Z
    {
        get
        {
            return ((global::VkDispatchIndirectCommand.__Internal*) __Instance)->z;
        }

        set
        {
            ((global::VkDispatchIndirectCommand.__Internal*)__Instance)->z = value;
        }
    }
}

public unsafe partial class VkDrawIndexedIndirectCommand : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 20)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint indexCount;

        [FieldOffset(4)]
        internal uint instanceCount;

        [FieldOffset(8)]
        internal uint firstIndex;

        [FieldOffset(12)]
        internal int vertexOffset;

        [FieldOffset(16)]
        internal uint firstInstance;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDrawIndexedIndirectCommand> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDrawIndexedIndirectCommand>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDrawIndexedIndirectCommand __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDrawIndexedIndirectCommand(native.ToPointer(), skipVTables);
    }

    internal static global::VkDrawIndexedIndirectCommand __CreateInstance(global::VkDrawIndexedIndirectCommand.__Internal native, bool skipVTables = false)
    {
        return new global::VkDrawIndexedIndirectCommand(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDrawIndexedIndirectCommand.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDrawIndexedIndirectCommand.__Internal));
        *(global::VkDrawIndexedIndirectCommand.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDrawIndexedIndirectCommand(global::VkDrawIndexedIndirectCommand.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDrawIndexedIndirectCommand(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDrawIndexedIndirectCommand()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDrawIndexedIndirectCommand __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint IndexCount
    {
        get
        {
            return ((global::VkDrawIndexedIndirectCommand.__Internal*) __Instance)->indexCount;
        }

        set
        {
            ((global::VkDrawIndexedIndirectCommand.__Internal*)__Instance)->indexCount = value;
        }
    }

    public uint InstanceCount
    {
        get
        {
            return ((global::VkDrawIndexedIndirectCommand.__Internal*) __Instance)->instanceCount;
        }

        set
        {
            ((global::VkDrawIndexedIndirectCommand.__Internal*)__Instance)->instanceCount = value;
        }
    }

    public uint FirstIndex
    {
        get
        {
            return ((global::VkDrawIndexedIndirectCommand.__Internal*) __Instance)->firstIndex;
        }

        set
        {
            ((global::VkDrawIndexedIndirectCommand.__Internal*)__Instance)->firstIndex = value;
        }
    }

    public int VertexOffset
    {
        get
        {
            return ((global::VkDrawIndexedIndirectCommand.__Internal*) __Instance)->vertexOffset;
        }

        set
        {
            ((global::VkDrawIndexedIndirectCommand.__Internal*)__Instance)->vertexOffset = value;
        }
    }

    public uint FirstInstance
    {
        get
        {
            return ((global::VkDrawIndexedIndirectCommand.__Internal*) __Instance)->firstInstance;
        }

        set
        {
            ((global::VkDrawIndexedIndirectCommand.__Internal*)__Instance)->firstInstance = value;
        }
    }
}

public unsafe partial class VkDrawIndirectCommand : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint vertexCount;

        [FieldOffset(4)]
        internal uint instanceCount;

        [FieldOffset(8)]
        internal uint firstVertex;

        [FieldOffset(12)]
        internal uint firstInstance;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDrawIndirectCommand> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDrawIndirectCommand>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDrawIndirectCommand __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDrawIndirectCommand(native.ToPointer(), skipVTables);
    }

    internal static global::VkDrawIndirectCommand __CreateInstance(global::VkDrawIndirectCommand.__Internal native, bool skipVTables = false)
    {
        return new global::VkDrawIndirectCommand(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDrawIndirectCommand.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDrawIndirectCommand.__Internal));
        *(global::VkDrawIndirectCommand.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDrawIndirectCommand(global::VkDrawIndirectCommand.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDrawIndirectCommand(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDrawIndirectCommand()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDrawIndirectCommand __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint VertexCount
    {
        get
        {
            return ((global::VkDrawIndirectCommand.__Internal*) __Instance)->vertexCount;
        }

        set
        {
            ((global::VkDrawIndirectCommand.__Internal*)__Instance)->vertexCount = value;
        }
    }

    public uint InstanceCount
    {
        get
        {
            return ((global::VkDrawIndirectCommand.__Internal*) __Instance)->instanceCount;
        }

        set
        {
            ((global::VkDrawIndirectCommand.__Internal*)__Instance)->instanceCount = value;
        }
    }

    public uint FirstVertex
    {
        get
        {
            return ((global::VkDrawIndirectCommand.__Internal*) __Instance)->firstVertex;
        }

        set
        {
            ((global::VkDrawIndirectCommand.__Internal*)__Instance)->firstVertex = value;
        }
    }

    public uint FirstInstance
    {
        get
        {
            return ((global::VkDrawIndirectCommand.__Internal*) __Instance)->firstInstance;
        }

        set
        {
            ((global::VkDrawIndirectCommand.__Internal*)__Instance)->firstInstance = value;
        }
    }
}

public unsafe partial class VkSamplerYcbcrConversionT
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSamplerYcbcrConversionT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSamplerYcbcrConversionT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSamplerYcbcrConversionT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSamplerYcbcrConversionT(native.ToPointer(), skipVTables);
    }

    internal static global::VkSamplerYcbcrConversionT __CreateInstance(global::VkSamplerYcbcrConversionT.__Internal native, bool skipVTables = false)
    {
        return new global::VkSamplerYcbcrConversionT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSamplerYcbcrConversionT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSamplerYcbcrConversionT.__Internal));
        *(global::VkSamplerYcbcrConversionT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSamplerYcbcrConversionT(global::VkSamplerYcbcrConversionT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSamplerYcbcrConversionT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSamplerYcbcrConversionT()
    {
        Dispose(false);
    }
}

public unsafe partial class VkDescriptorUpdateTemplateT
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorUpdateTemplateT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorUpdateTemplateT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDescriptorUpdateTemplateT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDescriptorUpdateTemplateT(native.ToPointer(), skipVTables);
    }

    internal static global::VkDescriptorUpdateTemplateT __CreateInstance(global::VkDescriptorUpdateTemplateT.__Internal native, bool skipVTables = false)
    {
        return new global::VkDescriptorUpdateTemplateT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDescriptorUpdateTemplateT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDescriptorUpdateTemplateT.__Internal));
        *(global::VkDescriptorUpdateTemplateT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDescriptorUpdateTemplateT(global::VkDescriptorUpdateTemplateT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDescriptorUpdateTemplateT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDescriptorUpdateTemplateT()
    {
        Dispose(false);
    }
}

public unsafe partial class VkPhysicalDeviceSubgroupProperties : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint subgroupSize;

        [FieldOffset(20)]
        internal uint supportedStages;

        [FieldOffset(24)]
        internal uint supportedOperations;

        [FieldOffset(28)]
        internal uint quadOperationsInAllStages;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceSubgroupProperties> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceSubgroupProperties>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceSubgroupProperties __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceSubgroupProperties(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceSubgroupProperties __CreateInstance(global::VkPhysicalDeviceSubgroupProperties.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceSubgroupProperties(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceSubgroupProperties.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceSubgroupProperties.__Internal));
        *(global::VkPhysicalDeviceSubgroupProperties.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceSubgroupProperties(global::VkPhysicalDeviceSubgroupProperties.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceSubgroupProperties(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceSubgroupProperties()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceSubgroupProperties __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDeviceSubgroupProperties.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDeviceSubgroupProperties.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDeviceSubgroupProperties.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDeviceSubgroupProperties.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint SubgroupSize
    {
        get
        {
            return ((global::VkPhysicalDeviceSubgroupProperties.__Internal*) __Instance)->subgroupSize;
        }

        set
        {
            ((global::VkPhysicalDeviceSubgroupProperties.__Internal*)__Instance)->subgroupSize = value;
        }
    }

    public uint SupportedStages
    {
        get
        {
            return ((global::VkPhysicalDeviceSubgroupProperties.__Internal*) __Instance)->supportedStages;
        }

        set
        {
            ((global::VkPhysicalDeviceSubgroupProperties.__Internal*)__Instance)->supportedStages = value;
        }
    }

    public uint SupportedOperations
    {
        get
        {
            return ((global::VkPhysicalDeviceSubgroupProperties.__Internal*) __Instance)->supportedOperations;
        }

        set
        {
            ((global::VkPhysicalDeviceSubgroupProperties.__Internal*)__Instance)->supportedOperations = value;
        }
    }

    public uint QuadOperationsInAllStages
    {
        get
        {
            return ((global::VkPhysicalDeviceSubgroupProperties.__Internal*) __Instance)->quadOperationsInAllStages;
        }

        set
        {
            ((global::VkPhysicalDeviceSubgroupProperties.__Internal*)__Instance)->quadOperationsInAllStages = value;
        }
    }
}

public unsafe partial class VkBindBufferMemoryInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::System.IntPtr buffer;

        [FieldOffset(24)]
        internal global::System.IntPtr memory;

        [FieldOffset(32)]
        internal ulong memoryOffset;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkBindBufferMemoryInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkBindBufferMemoryInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkBindBufferMemoryInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkBindBufferMemoryInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkBindBufferMemoryInfo __CreateInstance(global::VkBindBufferMemoryInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkBindBufferMemoryInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkBindBufferMemoryInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkBindBufferMemoryInfo.__Internal));
        *(global::VkBindBufferMemoryInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkBindBufferMemoryInfo(global::VkBindBufferMemoryInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkBindBufferMemoryInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkBindBufferMemoryInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkBindBufferMemoryInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkBindBufferMemoryInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkBindBufferMemoryInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkBindBufferMemoryInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkBindBufferMemoryInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkBufferT Buffer
    {
        get
        {
            global::VkBufferT __result0;
            if (((global::VkBindBufferMemoryInfo.__Internal*) __Instance)->buffer == IntPtr.Zero) __result0 = null;
            else if (global::VkBufferT.NativeToManagedMap.ContainsKey(((global::VkBindBufferMemoryInfo.__Internal*) __Instance)->buffer))
                __result0 = (global::VkBufferT) global::VkBufferT.NativeToManagedMap[((global::VkBindBufferMemoryInfo.__Internal*) __Instance)->buffer];
            else __result0 = global::VkBufferT.__CreateInstance(((global::VkBindBufferMemoryInfo.__Internal*) __Instance)->buffer);
            return __result0;
        }

        set
        {
            ((global::VkBindBufferMemoryInfo.__Internal*)__Instance)->buffer = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkDeviceMemoryT Memory
    {
        get
        {
            global::VkDeviceMemoryT __result0;
            if (((global::VkBindBufferMemoryInfo.__Internal*) __Instance)->memory == IntPtr.Zero) __result0 = null;
            else if (global::VkDeviceMemoryT.NativeToManagedMap.ContainsKey(((global::VkBindBufferMemoryInfo.__Internal*) __Instance)->memory))
                __result0 = (global::VkDeviceMemoryT) global::VkDeviceMemoryT.NativeToManagedMap[((global::VkBindBufferMemoryInfo.__Internal*) __Instance)->memory];
            else __result0 = global::VkDeviceMemoryT.__CreateInstance(((global::VkBindBufferMemoryInfo.__Internal*) __Instance)->memory);
            return __result0;
        }

        set
        {
            ((global::VkBindBufferMemoryInfo.__Internal*)__Instance)->memory = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public ulong MemoryOffset
    {
        get
        {
            return ((global::VkBindBufferMemoryInfo.__Internal*) __Instance)->memoryOffset;
        }

        set
        {
            ((global::VkBindBufferMemoryInfo.__Internal*)__Instance)->memoryOffset = value;
        }
    }
}

public unsafe partial class VkBindImageMemoryInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::System.IntPtr image;

        [FieldOffset(24)]
        internal global::System.IntPtr memory;

        [FieldOffset(32)]
        internal ulong memoryOffset;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkBindImageMemoryInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkBindImageMemoryInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkBindImageMemoryInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkBindImageMemoryInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkBindImageMemoryInfo __CreateInstance(global::VkBindImageMemoryInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkBindImageMemoryInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkBindImageMemoryInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkBindImageMemoryInfo.__Internal));
        *(global::VkBindImageMemoryInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkBindImageMemoryInfo(global::VkBindImageMemoryInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkBindImageMemoryInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkBindImageMemoryInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkBindImageMemoryInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkBindImageMemoryInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkBindImageMemoryInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkBindImageMemoryInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkBindImageMemoryInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkImageT Image
    {
        get
        {
            global::VkImageT __result0;
            if (((global::VkBindImageMemoryInfo.__Internal*) __Instance)->image == IntPtr.Zero) __result0 = null;
            else if (global::VkImageT.NativeToManagedMap.ContainsKey(((global::VkBindImageMemoryInfo.__Internal*) __Instance)->image))
                __result0 = (global::VkImageT) global::VkImageT.NativeToManagedMap[((global::VkBindImageMemoryInfo.__Internal*) __Instance)->image];
            else __result0 = global::VkImageT.__CreateInstance(((global::VkBindImageMemoryInfo.__Internal*) __Instance)->image);
            return __result0;
        }

        set
        {
            ((global::VkBindImageMemoryInfo.__Internal*)__Instance)->image = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkDeviceMemoryT Memory
    {
        get
        {
            global::VkDeviceMemoryT __result0;
            if (((global::VkBindImageMemoryInfo.__Internal*) __Instance)->memory == IntPtr.Zero) __result0 = null;
            else if (global::VkDeviceMemoryT.NativeToManagedMap.ContainsKey(((global::VkBindImageMemoryInfo.__Internal*) __Instance)->memory))
                __result0 = (global::VkDeviceMemoryT) global::VkDeviceMemoryT.NativeToManagedMap[((global::VkBindImageMemoryInfo.__Internal*) __Instance)->memory];
            else __result0 = global::VkDeviceMemoryT.__CreateInstance(((global::VkBindImageMemoryInfo.__Internal*) __Instance)->memory);
            return __result0;
        }

        set
        {
            ((global::VkBindImageMemoryInfo.__Internal*)__Instance)->memory = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public ulong MemoryOffset
    {
        get
        {
            return ((global::VkBindImageMemoryInfo.__Internal*) __Instance)->memoryOffset;
        }

        set
        {
            ((global::VkBindImageMemoryInfo.__Internal*)__Instance)->memoryOffset = value;
        }
    }
}

public unsafe partial class VkPhysicalDevice16BitStorageFeatures : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint storageBuffer16BitAccess;

        [FieldOffset(20)]
        internal uint uniformAndStorageBuffer16BitAccess;

        [FieldOffset(24)]
        internal uint storagePushConstant16;

        [FieldOffset(28)]
        internal uint storageInputOutput16;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDevice16BitStorageFeatures> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDevice16BitStorageFeatures>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDevice16BitStorageFeatures __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDevice16BitStorageFeatures(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDevice16BitStorageFeatures __CreateInstance(global::VkPhysicalDevice16BitStorageFeatures.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDevice16BitStorageFeatures(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDevice16BitStorageFeatures.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDevice16BitStorageFeatures.__Internal));
        *(global::VkPhysicalDevice16BitStorageFeatures.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDevice16BitStorageFeatures(global::VkPhysicalDevice16BitStorageFeatures.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDevice16BitStorageFeatures(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDevice16BitStorageFeatures()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDevice16BitStorageFeatures __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDevice16BitStorageFeatures.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDevice16BitStorageFeatures.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDevice16BitStorageFeatures.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDevice16BitStorageFeatures.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint StorageBuffer16BitAccess
    {
        get
        {
            return ((global::VkPhysicalDevice16BitStorageFeatures.__Internal*) __Instance)->storageBuffer16BitAccess;
        }

        set
        {
            ((global::VkPhysicalDevice16BitStorageFeatures.__Internal*)__Instance)->storageBuffer16BitAccess = value;
        }
    }

    public uint UniformAndStorageBuffer16BitAccess
    {
        get
        {
            return ((global::VkPhysicalDevice16BitStorageFeatures.__Internal*) __Instance)->uniformAndStorageBuffer16BitAccess;
        }

        set
        {
            ((global::VkPhysicalDevice16BitStorageFeatures.__Internal*)__Instance)->uniformAndStorageBuffer16BitAccess = value;
        }
    }

    public uint StoragePushConstant16
    {
        get
        {
            return ((global::VkPhysicalDevice16BitStorageFeatures.__Internal*) __Instance)->storagePushConstant16;
        }

        set
        {
            ((global::VkPhysicalDevice16BitStorageFeatures.__Internal*)__Instance)->storagePushConstant16 = value;
        }
    }

    public uint StorageInputOutput16
    {
        get
        {
            return ((global::VkPhysicalDevice16BitStorageFeatures.__Internal*) __Instance)->storageInputOutput16;
        }

        set
        {
            ((global::VkPhysicalDevice16BitStorageFeatures.__Internal*)__Instance)->storageInputOutput16 = value;
        }
    }
}

public unsafe partial class VkMemoryDedicatedRequirements : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint prefersDedicatedAllocation;

        [FieldOffset(20)]
        internal uint requiresDedicatedAllocation;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkMemoryDedicatedRequirements> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkMemoryDedicatedRequirements>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkMemoryDedicatedRequirements __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkMemoryDedicatedRequirements(native.ToPointer(), skipVTables);
    }

    internal static global::VkMemoryDedicatedRequirements __CreateInstance(global::VkMemoryDedicatedRequirements.__Internal native, bool skipVTables = false)
    {
        return new global::VkMemoryDedicatedRequirements(native, skipVTables);
    }

    private static void* __CopyValue(global::VkMemoryDedicatedRequirements.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkMemoryDedicatedRequirements.__Internal));
        *(global::VkMemoryDedicatedRequirements.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkMemoryDedicatedRequirements(global::VkMemoryDedicatedRequirements.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkMemoryDedicatedRequirements(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkMemoryDedicatedRequirements()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkMemoryDedicatedRequirements __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkMemoryDedicatedRequirements.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkMemoryDedicatedRequirements.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkMemoryDedicatedRequirements.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkMemoryDedicatedRequirements.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint PrefersDedicatedAllocation
    {
        get
        {
            return ((global::VkMemoryDedicatedRequirements.__Internal*) __Instance)->prefersDedicatedAllocation;
        }

        set
        {
            ((global::VkMemoryDedicatedRequirements.__Internal*)__Instance)->prefersDedicatedAllocation = value;
        }
    }

    public uint RequiresDedicatedAllocation
    {
        get
        {
            return ((global::VkMemoryDedicatedRequirements.__Internal*) __Instance)->requiresDedicatedAllocation;
        }

        set
        {
            ((global::VkMemoryDedicatedRequirements.__Internal*)__Instance)->requiresDedicatedAllocation = value;
        }
    }
}

public unsafe partial class VkMemoryDedicatedAllocateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::System.IntPtr image;

        [FieldOffset(24)]
        internal global::System.IntPtr buffer;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkMemoryDedicatedAllocateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkMemoryDedicatedAllocateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkMemoryDedicatedAllocateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkMemoryDedicatedAllocateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkMemoryDedicatedAllocateInfo __CreateInstance(global::VkMemoryDedicatedAllocateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkMemoryDedicatedAllocateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkMemoryDedicatedAllocateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkMemoryDedicatedAllocateInfo.__Internal));
        *(global::VkMemoryDedicatedAllocateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkMemoryDedicatedAllocateInfo(global::VkMemoryDedicatedAllocateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkMemoryDedicatedAllocateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkMemoryDedicatedAllocateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkMemoryDedicatedAllocateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkMemoryDedicatedAllocateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkMemoryDedicatedAllocateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkMemoryDedicatedAllocateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkMemoryDedicatedAllocateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkImageT Image
    {
        get
        {
            global::VkImageT __result0;
            if (((global::VkMemoryDedicatedAllocateInfo.__Internal*) __Instance)->image == IntPtr.Zero) __result0 = null;
            else if (global::VkImageT.NativeToManagedMap.ContainsKey(((global::VkMemoryDedicatedAllocateInfo.__Internal*) __Instance)->image))
                __result0 = (global::VkImageT) global::VkImageT.NativeToManagedMap[((global::VkMemoryDedicatedAllocateInfo.__Internal*) __Instance)->image];
            else __result0 = global::VkImageT.__CreateInstance(((global::VkMemoryDedicatedAllocateInfo.__Internal*) __Instance)->image);
            return __result0;
        }

        set
        {
            ((global::VkMemoryDedicatedAllocateInfo.__Internal*)__Instance)->image = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkBufferT Buffer
    {
        get
        {
            global::VkBufferT __result0;
            if (((global::VkMemoryDedicatedAllocateInfo.__Internal*) __Instance)->buffer == IntPtr.Zero) __result0 = null;
            else if (global::VkBufferT.NativeToManagedMap.ContainsKey(((global::VkMemoryDedicatedAllocateInfo.__Internal*) __Instance)->buffer))
                __result0 = (global::VkBufferT) global::VkBufferT.NativeToManagedMap[((global::VkMemoryDedicatedAllocateInfo.__Internal*) __Instance)->buffer];
            else __result0 = global::VkBufferT.__CreateInstance(((global::VkMemoryDedicatedAllocateInfo.__Internal*) __Instance)->buffer);
            return __result0;
        }

        set
        {
            ((global::VkMemoryDedicatedAllocateInfo.__Internal*)__Instance)->buffer = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkMemoryAllocateFlagsInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(20)]
        internal uint deviceMask;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkMemoryAllocateFlagsInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkMemoryAllocateFlagsInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkMemoryAllocateFlagsInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkMemoryAllocateFlagsInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkMemoryAllocateFlagsInfo __CreateInstance(global::VkMemoryAllocateFlagsInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkMemoryAllocateFlagsInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkMemoryAllocateFlagsInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkMemoryAllocateFlagsInfo.__Internal));
        *(global::VkMemoryAllocateFlagsInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkMemoryAllocateFlagsInfo(global::VkMemoryAllocateFlagsInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkMemoryAllocateFlagsInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkMemoryAllocateFlagsInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkMemoryAllocateFlagsInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkMemoryAllocateFlagsInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkMemoryAllocateFlagsInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkMemoryAllocateFlagsInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkMemoryAllocateFlagsInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkMemoryAllocateFlagsInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkMemoryAllocateFlagsInfo.__Internal*)__Instance)->flags = value;
        }
    }

    public uint DeviceMask
    {
        get
        {
            return ((global::VkMemoryAllocateFlagsInfo.__Internal*) __Instance)->deviceMask;
        }

        set
        {
            ((global::VkMemoryAllocateFlagsInfo.__Internal*)__Instance)->deviceMask = value;
        }
    }
}

public unsafe partial class VkDeviceGroupRenderPassBeginInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint deviceMask;

        [FieldOffset(20)]
        internal uint deviceRenderAreaCount;

        [FieldOffset(24)]
        internal global::System.IntPtr pDeviceRenderAreas;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceGroupRenderPassBeginInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceGroupRenderPassBeginInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDeviceGroupRenderPassBeginInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDeviceGroupRenderPassBeginInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkDeviceGroupRenderPassBeginInfo __CreateInstance(global::VkDeviceGroupRenderPassBeginInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkDeviceGroupRenderPassBeginInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDeviceGroupRenderPassBeginInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDeviceGroupRenderPassBeginInfo.__Internal));
        *(global::VkDeviceGroupRenderPassBeginInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDeviceGroupRenderPassBeginInfo(global::VkDeviceGroupRenderPassBeginInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDeviceGroupRenderPassBeginInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDeviceGroupRenderPassBeginInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDeviceGroupRenderPassBeginInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDeviceGroupRenderPassBeginInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDeviceGroupRenderPassBeginInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDeviceGroupRenderPassBeginInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDeviceGroupRenderPassBeginInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint DeviceMask
    {
        get
        {
            return ((global::VkDeviceGroupRenderPassBeginInfo.__Internal*) __Instance)->deviceMask;
        }

        set
        {
            ((global::VkDeviceGroupRenderPassBeginInfo.__Internal*)__Instance)->deviceMask = value;
        }
    }

    public uint DeviceRenderAreaCount
    {
        get
        {
            return ((global::VkDeviceGroupRenderPassBeginInfo.__Internal*) __Instance)->deviceRenderAreaCount;
        }

        set
        {
            ((global::VkDeviceGroupRenderPassBeginInfo.__Internal*)__Instance)->deviceRenderAreaCount = value;
        }
    }

    public global::VkRect2D PDeviceRenderAreas
    {
        get
        {
            global::VkRect2D __result0;
            if (((global::VkDeviceGroupRenderPassBeginInfo.__Internal*) __Instance)->pDeviceRenderAreas == IntPtr.Zero) __result0 = null;
            else if (global::VkRect2D.NativeToManagedMap.ContainsKey(((global::VkDeviceGroupRenderPassBeginInfo.__Internal*) __Instance)->pDeviceRenderAreas))
                __result0 = (global::VkRect2D) global::VkRect2D.NativeToManagedMap[((global::VkDeviceGroupRenderPassBeginInfo.__Internal*) __Instance)->pDeviceRenderAreas];
            else __result0 = global::VkRect2D.__CreateInstance(((global::VkDeviceGroupRenderPassBeginInfo.__Internal*) __Instance)->pDeviceRenderAreas);
            return __result0;
        }

        set
        {
            ((global::VkDeviceGroupRenderPassBeginInfo.__Internal*)__Instance)->pDeviceRenderAreas = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkDeviceGroupCommandBufferBeginInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint deviceMask;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceGroupCommandBufferBeginInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceGroupCommandBufferBeginInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDeviceGroupCommandBufferBeginInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDeviceGroupCommandBufferBeginInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkDeviceGroupCommandBufferBeginInfo __CreateInstance(global::VkDeviceGroupCommandBufferBeginInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkDeviceGroupCommandBufferBeginInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDeviceGroupCommandBufferBeginInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDeviceGroupCommandBufferBeginInfo.__Internal));
        *(global::VkDeviceGroupCommandBufferBeginInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDeviceGroupCommandBufferBeginInfo(global::VkDeviceGroupCommandBufferBeginInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDeviceGroupCommandBufferBeginInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDeviceGroupCommandBufferBeginInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDeviceGroupCommandBufferBeginInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDeviceGroupCommandBufferBeginInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDeviceGroupCommandBufferBeginInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDeviceGroupCommandBufferBeginInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDeviceGroupCommandBufferBeginInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint DeviceMask
    {
        get
        {
            return ((global::VkDeviceGroupCommandBufferBeginInfo.__Internal*) __Instance)->deviceMask;
        }

        set
        {
            ((global::VkDeviceGroupCommandBufferBeginInfo.__Internal*)__Instance)->deviceMask = value;
        }
    }
}

public unsafe partial class VkDeviceGroupSubmitInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 64)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint waitSemaphoreCount;

        [FieldOffset(24)]
        internal global::System.IntPtr pWaitSemaphoreDeviceIndices;

        [FieldOffset(32)]
        internal uint commandBufferCount;

        [FieldOffset(40)]
        internal global::System.IntPtr pCommandBufferDeviceMasks;

        [FieldOffset(48)]
        internal uint signalSemaphoreCount;

        [FieldOffset(56)]
        internal global::System.IntPtr pSignalSemaphoreDeviceIndices;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceGroupSubmitInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceGroupSubmitInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDeviceGroupSubmitInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDeviceGroupSubmitInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkDeviceGroupSubmitInfo __CreateInstance(global::VkDeviceGroupSubmitInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkDeviceGroupSubmitInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDeviceGroupSubmitInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDeviceGroupSubmitInfo.__Internal));
        *(global::VkDeviceGroupSubmitInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDeviceGroupSubmitInfo(global::VkDeviceGroupSubmitInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDeviceGroupSubmitInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDeviceGroupSubmitInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDeviceGroupSubmitInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDeviceGroupSubmitInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDeviceGroupSubmitInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDeviceGroupSubmitInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDeviceGroupSubmitInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint WaitSemaphoreCount
    {
        get
        {
            return ((global::VkDeviceGroupSubmitInfo.__Internal*) __Instance)->waitSemaphoreCount;
        }

        set
        {
            ((global::VkDeviceGroupSubmitInfo.__Internal*)__Instance)->waitSemaphoreCount = value;
        }
    }

    public uint* PWaitSemaphoreDeviceIndices
    {
        get
        {
            return (uint*) ((global::VkDeviceGroupSubmitInfo.__Internal*) __Instance)->pWaitSemaphoreDeviceIndices;
        }

        set
        {
            ((global::VkDeviceGroupSubmitInfo.__Internal*)__Instance)->pWaitSemaphoreDeviceIndices = (global::System.IntPtr) value;
        }
    }

    public uint CommandBufferCount
    {
        get
        {
            return ((global::VkDeviceGroupSubmitInfo.__Internal*) __Instance)->commandBufferCount;
        }

        set
        {
            ((global::VkDeviceGroupSubmitInfo.__Internal*)__Instance)->commandBufferCount = value;
        }
    }

    public uint* PCommandBufferDeviceMasks
    {
        get
        {
            return (uint*) ((global::VkDeviceGroupSubmitInfo.__Internal*) __Instance)->pCommandBufferDeviceMasks;
        }

        set
        {
            ((global::VkDeviceGroupSubmitInfo.__Internal*)__Instance)->pCommandBufferDeviceMasks = (global::System.IntPtr) value;
        }
    }

    public uint SignalSemaphoreCount
    {
        get
        {
            return ((global::VkDeviceGroupSubmitInfo.__Internal*) __Instance)->signalSemaphoreCount;
        }

        set
        {
            ((global::VkDeviceGroupSubmitInfo.__Internal*)__Instance)->signalSemaphoreCount = value;
        }
    }

    public uint* PSignalSemaphoreDeviceIndices
    {
        get
        {
            return (uint*) ((global::VkDeviceGroupSubmitInfo.__Internal*) __Instance)->pSignalSemaphoreDeviceIndices;
        }

        set
        {
            ((global::VkDeviceGroupSubmitInfo.__Internal*)__Instance)->pSignalSemaphoreDeviceIndices = (global::System.IntPtr) value;
        }
    }
}

public unsafe partial class VkDeviceGroupBindSparseInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint resourceDeviceIndex;

        [FieldOffset(20)]
        internal uint memoryDeviceIndex;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceGroupBindSparseInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceGroupBindSparseInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDeviceGroupBindSparseInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDeviceGroupBindSparseInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkDeviceGroupBindSparseInfo __CreateInstance(global::VkDeviceGroupBindSparseInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkDeviceGroupBindSparseInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDeviceGroupBindSparseInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDeviceGroupBindSparseInfo.__Internal));
        *(global::VkDeviceGroupBindSparseInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDeviceGroupBindSparseInfo(global::VkDeviceGroupBindSparseInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDeviceGroupBindSparseInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDeviceGroupBindSparseInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDeviceGroupBindSparseInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDeviceGroupBindSparseInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDeviceGroupBindSparseInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDeviceGroupBindSparseInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDeviceGroupBindSparseInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint ResourceDeviceIndex
    {
        get
        {
            return ((global::VkDeviceGroupBindSparseInfo.__Internal*) __Instance)->resourceDeviceIndex;
        }

        set
        {
            ((global::VkDeviceGroupBindSparseInfo.__Internal*)__Instance)->resourceDeviceIndex = value;
        }
    }

    public uint MemoryDeviceIndex
    {
        get
        {
            return ((global::VkDeviceGroupBindSparseInfo.__Internal*) __Instance)->memoryDeviceIndex;
        }

        set
        {
            ((global::VkDeviceGroupBindSparseInfo.__Internal*)__Instance)->memoryDeviceIndex = value;
        }
    }
}

public unsafe partial class VkBindBufferMemoryDeviceGroupInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint deviceIndexCount;

        [FieldOffset(24)]
        internal global::System.IntPtr pDeviceIndices;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkBindBufferMemoryDeviceGroupInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkBindBufferMemoryDeviceGroupInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkBindBufferMemoryDeviceGroupInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkBindBufferMemoryDeviceGroupInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkBindBufferMemoryDeviceGroupInfo __CreateInstance(global::VkBindBufferMemoryDeviceGroupInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkBindBufferMemoryDeviceGroupInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkBindBufferMemoryDeviceGroupInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkBindBufferMemoryDeviceGroupInfo.__Internal));
        *(global::VkBindBufferMemoryDeviceGroupInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkBindBufferMemoryDeviceGroupInfo(global::VkBindBufferMemoryDeviceGroupInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkBindBufferMemoryDeviceGroupInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkBindBufferMemoryDeviceGroupInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkBindBufferMemoryDeviceGroupInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkBindBufferMemoryDeviceGroupInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkBindBufferMemoryDeviceGroupInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkBindBufferMemoryDeviceGroupInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkBindBufferMemoryDeviceGroupInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint DeviceIndexCount
    {
        get
        {
            return ((global::VkBindBufferMemoryDeviceGroupInfo.__Internal*) __Instance)->deviceIndexCount;
        }

        set
        {
            ((global::VkBindBufferMemoryDeviceGroupInfo.__Internal*)__Instance)->deviceIndexCount = value;
        }
    }

    public uint* PDeviceIndices
    {
        get
        {
            return (uint*) ((global::VkBindBufferMemoryDeviceGroupInfo.__Internal*) __Instance)->pDeviceIndices;
        }

        set
        {
            ((global::VkBindBufferMemoryDeviceGroupInfo.__Internal*)__Instance)->pDeviceIndices = (global::System.IntPtr) value;
        }
    }
}

public unsafe partial class VkBindImageMemoryDeviceGroupInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 48)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint deviceIndexCount;

        [FieldOffset(24)]
        internal global::System.IntPtr pDeviceIndices;

        [FieldOffset(32)]
        internal uint splitInstanceBindRegionCount;

        [FieldOffset(40)]
        internal global::System.IntPtr pSplitInstanceBindRegions;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkBindImageMemoryDeviceGroupInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkBindImageMemoryDeviceGroupInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkBindImageMemoryDeviceGroupInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkBindImageMemoryDeviceGroupInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkBindImageMemoryDeviceGroupInfo __CreateInstance(global::VkBindImageMemoryDeviceGroupInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkBindImageMemoryDeviceGroupInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkBindImageMemoryDeviceGroupInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkBindImageMemoryDeviceGroupInfo.__Internal));
        *(global::VkBindImageMemoryDeviceGroupInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkBindImageMemoryDeviceGroupInfo(global::VkBindImageMemoryDeviceGroupInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkBindImageMemoryDeviceGroupInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkBindImageMemoryDeviceGroupInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkBindImageMemoryDeviceGroupInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkBindImageMemoryDeviceGroupInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkBindImageMemoryDeviceGroupInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkBindImageMemoryDeviceGroupInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkBindImageMemoryDeviceGroupInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint DeviceIndexCount
    {
        get
        {
            return ((global::VkBindImageMemoryDeviceGroupInfo.__Internal*) __Instance)->deviceIndexCount;
        }

        set
        {
            ((global::VkBindImageMemoryDeviceGroupInfo.__Internal*)__Instance)->deviceIndexCount = value;
        }
    }

    public uint* PDeviceIndices
    {
        get
        {
            return (uint*) ((global::VkBindImageMemoryDeviceGroupInfo.__Internal*) __Instance)->pDeviceIndices;
        }

        set
        {
            ((global::VkBindImageMemoryDeviceGroupInfo.__Internal*)__Instance)->pDeviceIndices = (global::System.IntPtr) value;
        }
    }

    public uint SplitInstanceBindRegionCount
    {
        get
        {
            return ((global::VkBindImageMemoryDeviceGroupInfo.__Internal*) __Instance)->splitInstanceBindRegionCount;
        }

        set
        {
            ((global::VkBindImageMemoryDeviceGroupInfo.__Internal*)__Instance)->splitInstanceBindRegionCount = value;
        }
    }

    public global::VkRect2D PSplitInstanceBindRegions
    {
        get
        {
            global::VkRect2D __result0;
            if (((global::VkBindImageMemoryDeviceGroupInfo.__Internal*) __Instance)->pSplitInstanceBindRegions == IntPtr.Zero) __result0 = null;
            else if (global::VkRect2D.NativeToManagedMap.ContainsKey(((global::VkBindImageMemoryDeviceGroupInfo.__Internal*) __Instance)->pSplitInstanceBindRegions))
                __result0 = (global::VkRect2D) global::VkRect2D.NativeToManagedMap[((global::VkBindImageMemoryDeviceGroupInfo.__Internal*) __Instance)->pSplitInstanceBindRegions];
            else __result0 = global::VkRect2D.__CreateInstance(((global::VkBindImageMemoryDeviceGroupInfo.__Internal*) __Instance)->pSplitInstanceBindRegions);
            return __result0;
        }

        set
        {
            ((global::VkBindImageMemoryDeviceGroupInfo.__Internal*)__Instance)->pSplitInstanceBindRegions = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkPhysicalDeviceGroupProperties : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 288)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint physicalDeviceCount;

        [FieldOffset(24)]
        internal fixed long physicalDevices[32];

        [FieldOffset(280)]
        internal uint subsetAllocation;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceGroupProperties> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceGroupProperties>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceGroupProperties __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceGroupProperties(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceGroupProperties __CreateInstance(global::VkPhysicalDeviceGroupProperties.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceGroupProperties(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceGroupProperties.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceGroupProperties.__Internal));
        *(global::VkPhysicalDeviceGroupProperties.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceGroupProperties(global::VkPhysicalDeviceGroupProperties.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceGroupProperties(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceGroupProperties()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceGroupProperties __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDeviceGroupProperties.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDeviceGroupProperties.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDeviceGroupProperties.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDeviceGroupProperties.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint PhysicalDeviceCount
    {
        get
        {
            return ((global::VkPhysicalDeviceGroupProperties.__Internal*) __Instance)->physicalDeviceCount;
        }

        set
        {
            ((global::VkPhysicalDeviceGroupProperties.__Internal*)__Instance)->physicalDeviceCount = value;
        }
    }

    public global::VkPhysicalDeviceT[] PhysicalDevices
    {
        get
        {
            global::VkPhysicalDeviceT[] __value = null;
            if (((global::VkPhysicalDeviceGroupProperties.__Internal*) __Instance)->physicalDevices != null)
            {
                __value = new global::VkPhysicalDeviceT[32];
                for (int i = 0; i < 32; i++)
                    __value[i] = global::VkPhysicalDeviceT.__CreateInstance((global::System.IntPtr) ((global::VkPhysicalDeviceGroupProperties.__Internal*) __Instance)->physicalDevices[i]);
            }
            return __value;
        }

        set
        {
            if (value != null)
            {
                if (value.Length != 32)
                    throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                for (int i = 0; i < 32; i++)
                    ((global::VkPhysicalDeviceGroupProperties.__Internal*)__Instance)->physicalDevices[i] = (long) value[i].__Instance;
            }
        }
    }

    public uint SubsetAllocation
    {
        get
        {
            return ((global::VkPhysicalDeviceGroupProperties.__Internal*) __Instance)->subsetAllocation;
        }

        set
        {
            ((global::VkPhysicalDeviceGroupProperties.__Internal*)__Instance)->subsetAllocation = value;
        }
    }
}

public unsafe partial class VkDeviceGroupDeviceCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint physicalDeviceCount;

        [FieldOffset(24)]
        internal global::System.IntPtr pPhysicalDevices;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceGroupDeviceCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceGroupDeviceCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDeviceGroupDeviceCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDeviceGroupDeviceCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkDeviceGroupDeviceCreateInfo __CreateInstance(global::VkDeviceGroupDeviceCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkDeviceGroupDeviceCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDeviceGroupDeviceCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDeviceGroupDeviceCreateInfo.__Internal));
        *(global::VkDeviceGroupDeviceCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDeviceGroupDeviceCreateInfo(global::VkDeviceGroupDeviceCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDeviceGroupDeviceCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDeviceGroupDeviceCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDeviceGroupDeviceCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDeviceGroupDeviceCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDeviceGroupDeviceCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDeviceGroupDeviceCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDeviceGroupDeviceCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint PhysicalDeviceCount
    {
        get
        {
            return ((global::VkDeviceGroupDeviceCreateInfo.__Internal*) __Instance)->physicalDeviceCount;
        }

        set
        {
            ((global::VkDeviceGroupDeviceCreateInfo.__Internal*)__Instance)->physicalDeviceCount = value;
        }
    }

    public global::VkPhysicalDeviceT PPhysicalDevices
    {
        get
        {
            global::VkPhysicalDeviceT __result0;
            if (((global::VkDeviceGroupDeviceCreateInfo.__Internal*) __Instance)->pPhysicalDevices == IntPtr.Zero) __result0 = null;
            else if (global::VkPhysicalDeviceT.NativeToManagedMap.ContainsKey(((global::VkDeviceGroupDeviceCreateInfo.__Internal*) __Instance)->pPhysicalDevices))
                __result0 = (global::VkPhysicalDeviceT) global::VkPhysicalDeviceT.NativeToManagedMap[((global::VkDeviceGroupDeviceCreateInfo.__Internal*) __Instance)->pPhysicalDevices];
            else __result0 = global::VkPhysicalDeviceT.__CreateInstance(((global::VkDeviceGroupDeviceCreateInfo.__Internal*) __Instance)->pPhysicalDevices);
            return __result0;
        }

        set
        {
            ((global::VkDeviceGroupDeviceCreateInfo.__Internal*)__Instance)->pPhysicalDevices = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkBufferMemoryRequirementsInfo2 : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::System.IntPtr buffer;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkBufferMemoryRequirementsInfo2> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkBufferMemoryRequirementsInfo2>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkBufferMemoryRequirementsInfo2 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkBufferMemoryRequirementsInfo2(native.ToPointer(), skipVTables);
    }

    internal static global::VkBufferMemoryRequirementsInfo2 __CreateInstance(global::VkBufferMemoryRequirementsInfo2.__Internal native, bool skipVTables = false)
    {
        return new global::VkBufferMemoryRequirementsInfo2(native, skipVTables);
    }

    private static void* __CopyValue(global::VkBufferMemoryRequirementsInfo2.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkBufferMemoryRequirementsInfo2.__Internal));
        *(global::VkBufferMemoryRequirementsInfo2.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkBufferMemoryRequirementsInfo2(global::VkBufferMemoryRequirementsInfo2.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkBufferMemoryRequirementsInfo2(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkBufferMemoryRequirementsInfo2()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkBufferMemoryRequirementsInfo2 __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkBufferMemoryRequirementsInfo2.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkBufferMemoryRequirementsInfo2.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkBufferMemoryRequirementsInfo2.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkBufferMemoryRequirementsInfo2.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkBufferT Buffer
    {
        get
        {
            global::VkBufferT __result0;
            if (((global::VkBufferMemoryRequirementsInfo2.__Internal*) __Instance)->buffer == IntPtr.Zero) __result0 = null;
            else if (global::VkBufferT.NativeToManagedMap.ContainsKey(((global::VkBufferMemoryRequirementsInfo2.__Internal*) __Instance)->buffer))
                __result0 = (global::VkBufferT) global::VkBufferT.NativeToManagedMap[((global::VkBufferMemoryRequirementsInfo2.__Internal*) __Instance)->buffer];
            else __result0 = global::VkBufferT.__CreateInstance(((global::VkBufferMemoryRequirementsInfo2.__Internal*) __Instance)->buffer);
            return __result0;
        }

        set
        {
            ((global::VkBufferMemoryRequirementsInfo2.__Internal*)__Instance)->buffer = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkImageMemoryRequirementsInfo2 : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::System.IntPtr image;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageMemoryRequirementsInfo2> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageMemoryRequirementsInfo2>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkImageMemoryRequirementsInfo2 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkImageMemoryRequirementsInfo2(native.ToPointer(), skipVTables);
    }

    internal static global::VkImageMemoryRequirementsInfo2 __CreateInstance(global::VkImageMemoryRequirementsInfo2.__Internal native, bool skipVTables = false)
    {
        return new global::VkImageMemoryRequirementsInfo2(native, skipVTables);
    }

    private static void* __CopyValue(global::VkImageMemoryRequirementsInfo2.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkImageMemoryRequirementsInfo2.__Internal));
        *(global::VkImageMemoryRequirementsInfo2.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkImageMemoryRequirementsInfo2(global::VkImageMemoryRequirementsInfo2.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkImageMemoryRequirementsInfo2(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkImageMemoryRequirementsInfo2()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkImageMemoryRequirementsInfo2 __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkImageMemoryRequirementsInfo2.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkImageMemoryRequirementsInfo2.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkImageMemoryRequirementsInfo2.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkImageMemoryRequirementsInfo2.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkImageT Image
    {
        get
        {
            global::VkImageT __result0;
            if (((global::VkImageMemoryRequirementsInfo2.__Internal*) __Instance)->image == IntPtr.Zero) __result0 = null;
            else if (global::VkImageT.NativeToManagedMap.ContainsKey(((global::VkImageMemoryRequirementsInfo2.__Internal*) __Instance)->image))
                __result0 = (global::VkImageT) global::VkImageT.NativeToManagedMap[((global::VkImageMemoryRequirementsInfo2.__Internal*) __Instance)->image];
            else __result0 = global::VkImageT.__CreateInstance(((global::VkImageMemoryRequirementsInfo2.__Internal*) __Instance)->image);
            return __result0;
        }

        set
        {
            ((global::VkImageMemoryRequirementsInfo2.__Internal*)__Instance)->image = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkImageSparseMemoryRequirementsInfo2 : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::System.IntPtr image;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageSparseMemoryRequirementsInfo2> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageSparseMemoryRequirementsInfo2>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkImageSparseMemoryRequirementsInfo2 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkImageSparseMemoryRequirementsInfo2(native.ToPointer(), skipVTables);
    }

    internal static global::VkImageSparseMemoryRequirementsInfo2 __CreateInstance(global::VkImageSparseMemoryRequirementsInfo2.__Internal native, bool skipVTables = false)
    {
        return new global::VkImageSparseMemoryRequirementsInfo2(native, skipVTables);
    }

    private static void* __CopyValue(global::VkImageSparseMemoryRequirementsInfo2.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkImageSparseMemoryRequirementsInfo2.__Internal));
        *(global::VkImageSparseMemoryRequirementsInfo2.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkImageSparseMemoryRequirementsInfo2(global::VkImageSparseMemoryRequirementsInfo2.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkImageSparseMemoryRequirementsInfo2(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkImageSparseMemoryRequirementsInfo2()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkImageSparseMemoryRequirementsInfo2 __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkImageSparseMemoryRequirementsInfo2.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkImageSparseMemoryRequirementsInfo2.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkImageSparseMemoryRequirementsInfo2.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkImageSparseMemoryRequirementsInfo2.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkImageT Image
    {
        get
        {
            global::VkImageT __result0;
            if (((global::VkImageSparseMemoryRequirementsInfo2.__Internal*) __Instance)->image == IntPtr.Zero) __result0 = null;
            else if (global::VkImageT.NativeToManagedMap.ContainsKey(((global::VkImageSparseMemoryRequirementsInfo2.__Internal*) __Instance)->image))
                __result0 = (global::VkImageT) global::VkImageT.NativeToManagedMap[((global::VkImageSparseMemoryRequirementsInfo2.__Internal*) __Instance)->image];
            else __result0 = global::VkImageT.__CreateInstance(((global::VkImageSparseMemoryRequirementsInfo2.__Internal*) __Instance)->image);
            return __result0;
        }

        set
        {
            ((global::VkImageSparseMemoryRequirementsInfo2.__Internal*)__Instance)->image = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkMemoryRequirements2 : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkMemoryRequirements.__Internal memoryRequirements;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkMemoryRequirements2> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkMemoryRequirements2>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkMemoryRequirements2 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkMemoryRequirements2(native.ToPointer(), skipVTables);
    }

    internal static global::VkMemoryRequirements2 __CreateInstance(global::VkMemoryRequirements2.__Internal native, bool skipVTables = false)
    {
        return new global::VkMemoryRequirements2(native, skipVTables);
    }

    private static void* __CopyValue(global::VkMemoryRequirements2.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkMemoryRequirements2.__Internal));
        *(global::VkMemoryRequirements2.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkMemoryRequirements2(global::VkMemoryRequirements2.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkMemoryRequirements2(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkMemoryRequirements2()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkMemoryRequirements2 __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkMemoryRequirements2.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkMemoryRequirements2.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkMemoryRequirements2.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkMemoryRequirements2.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkMemoryRequirements MemoryRequirements
    {
        get
        {
            return global::VkMemoryRequirements.__CreateInstance(new global::System.IntPtr(&((global::VkMemoryRequirements2.__Internal*) __Instance)->memoryRequirements));
        }

        set
        {
            ((global::VkMemoryRequirements2.__Internal*)__Instance)->memoryRequirements = ReferenceEquals(value, null) ? new global::VkMemoryRequirements.__Internal() : *(global::VkMemoryRequirements.__Internal*) value.__Instance;
        }
    }
}

public unsafe partial class VkSparseImageMemoryRequirements2 : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 64)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkSparseImageMemoryRequirements.__Internal memoryRequirements;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSparseImageMemoryRequirements2> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSparseImageMemoryRequirements2>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSparseImageMemoryRequirements2 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSparseImageMemoryRequirements2(native.ToPointer(), skipVTables);
    }

    internal static global::VkSparseImageMemoryRequirements2 __CreateInstance(global::VkSparseImageMemoryRequirements2.__Internal native, bool skipVTables = false)
    {
        return new global::VkSparseImageMemoryRequirements2(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSparseImageMemoryRequirements2.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSparseImageMemoryRequirements2.__Internal));
        *(global::VkSparseImageMemoryRequirements2.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSparseImageMemoryRequirements2(global::VkSparseImageMemoryRequirements2.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSparseImageMemoryRequirements2(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSparseImageMemoryRequirements2()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkSparseImageMemoryRequirements2 __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkSparseImageMemoryRequirements2.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkSparseImageMemoryRequirements2.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkSparseImageMemoryRequirements2.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkSparseImageMemoryRequirements2.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkSparseImageMemoryRequirements MemoryRequirements
    {
        get
        {
            return global::VkSparseImageMemoryRequirements.__CreateInstance(new global::System.IntPtr(&((global::VkSparseImageMemoryRequirements2.__Internal*) __Instance)->memoryRequirements));
        }

        set
        {
            ((global::VkSparseImageMemoryRequirements2.__Internal*)__Instance)->memoryRequirements = ReferenceEquals(value, null) ? new global::VkSparseImageMemoryRequirements.__Internal() : *(global::VkSparseImageMemoryRequirements.__Internal*) value.__Instance;
        }
    }
}

public unsafe partial class VkPhysicalDeviceFeatures2 : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 240)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkPhysicalDeviceFeatures.__Internal features;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceFeatures2> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceFeatures2>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceFeatures2 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceFeatures2(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceFeatures2 __CreateInstance(global::VkPhysicalDeviceFeatures2.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceFeatures2(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceFeatures2.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceFeatures2.__Internal));
        *(global::VkPhysicalDeviceFeatures2.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceFeatures2(global::VkPhysicalDeviceFeatures2.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceFeatures2(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceFeatures2()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceFeatures2 __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures2.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures2.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDeviceFeatures2.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures2.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkPhysicalDeviceFeatures Features
    {
        get
        {
            return global::VkPhysicalDeviceFeatures.__CreateInstance(new global::System.IntPtr(&((global::VkPhysicalDeviceFeatures2.__Internal*) __Instance)->features));
        }

        set
        {
            ((global::VkPhysicalDeviceFeatures2.__Internal*)__Instance)->features = ReferenceEquals(value, null) ? new global::VkPhysicalDeviceFeatures.__Internal() : *(global::VkPhysicalDeviceFeatures.__Internal*) value.__Instance;
        }
    }
}

public unsafe partial class VkPhysicalDeviceProperties2 : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 840)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkPhysicalDeviceProperties.__Internal properties;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceProperties2> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceProperties2>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceProperties2 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceProperties2(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceProperties2 __CreateInstance(global::VkPhysicalDeviceProperties2.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceProperties2(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceProperties2.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceProperties2.__Internal));
        *(global::VkPhysicalDeviceProperties2.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceProperties2(global::VkPhysicalDeviceProperties2.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceProperties2(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceProperties2()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceProperties2 __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDeviceProperties2.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDeviceProperties2.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDeviceProperties2.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDeviceProperties2.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkPhysicalDeviceProperties Properties
    {
        get
        {
            return global::VkPhysicalDeviceProperties.__CreateInstance(new global::System.IntPtr(&((global::VkPhysicalDeviceProperties2.__Internal*) __Instance)->properties));
        }

        set
        {
            ((global::VkPhysicalDeviceProperties2.__Internal*)__Instance)->properties = ReferenceEquals(value, null) ? new global::VkPhysicalDeviceProperties.__Internal() : *(global::VkPhysicalDeviceProperties.__Internal*) value.__Instance;
        }
    }
}

public unsafe partial class VkFormatProperties2 : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkFormatProperties.__Internal formatProperties;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkFormatProperties2> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkFormatProperties2>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkFormatProperties2 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkFormatProperties2(native.ToPointer(), skipVTables);
    }

    internal static global::VkFormatProperties2 __CreateInstance(global::VkFormatProperties2.__Internal native, bool skipVTables = false)
    {
        return new global::VkFormatProperties2(native, skipVTables);
    }

    private static void* __CopyValue(global::VkFormatProperties2.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkFormatProperties2.__Internal));
        *(global::VkFormatProperties2.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkFormatProperties2(global::VkFormatProperties2.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkFormatProperties2(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkFormatProperties2()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkFormatProperties2 __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkFormatProperties2.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkFormatProperties2.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkFormatProperties2.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkFormatProperties2.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkFormatProperties FormatProperties
    {
        get
        {
            return global::VkFormatProperties.__CreateInstance(new global::System.IntPtr(&((global::VkFormatProperties2.__Internal*) __Instance)->formatProperties));
        }

        set
        {
            ((global::VkFormatProperties2.__Internal*)__Instance)->formatProperties = ReferenceEquals(value, null) ? new global::VkFormatProperties.__Internal() : *(global::VkFormatProperties.__Internal*) value.__Instance;
        }
    }
}

public unsafe partial class VkImageFormatProperties2 : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 48)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkImageFormatProperties.__Internal imageFormatProperties;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageFormatProperties2> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageFormatProperties2>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkImageFormatProperties2 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkImageFormatProperties2(native.ToPointer(), skipVTables);
    }

    internal static global::VkImageFormatProperties2 __CreateInstance(global::VkImageFormatProperties2.__Internal native, bool skipVTables = false)
    {
        return new global::VkImageFormatProperties2(native, skipVTables);
    }

    private static void* __CopyValue(global::VkImageFormatProperties2.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkImageFormatProperties2.__Internal));
        *(global::VkImageFormatProperties2.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkImageFormatProperties2(global::VkImageFormatProperties2.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkImageFormatProperties2(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkImageFormatProperties2()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkImageFormatProperties2 __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkImageFormatProperties2.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkImageFormatProperties2.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkImageFormatProperties2.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkImageFormatProperties2.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkImageFormatProperties ImageFormatProperties
    {
        get
        {
            return global::VkImageFormatProperties.__CreateInstance(new global::System.IntPtr(&((global::VkImageFormatProperties2.__Internal*) __Instance)->imageFormatProperties));
        }

        set
        {
            ((global::VkImageFormatProperties2.__Internal*)__Instance)->imageFormatProperties = ReferenceEquals(value, null) ? new global::VkImageFormatProperties.__Internal() : *(global::VkImageFormatProperties.__Internal*) value.__Instance;
        }
    }
}

public unsafe partial class VkPhysicalDeviceImageFormatInfo2 : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkFormat format;

        [FieldOffset(20)]
        internal global::VkImageType type;

        [FieldOffset(24)]
        internal global::VkImageTiling tiling;

        [FieldOffset(28)]
        internal uint usage;

        [FieldOffset(32)]
        internal uint flags;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceImageFormatInfo2> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceImageFormatInfo2>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceImageFormatInfo2 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceImageFormatInfo2(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceImageFormatInfo2 __CreateInstance(global::VkPhysicalDeviceImageFormatInfo2.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceImageFormatInfo2(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceImageFormatInfo2.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceImageFormatInfo2.__Internal));
        *(global::VkPhysicalDeviceImageFormatInfo2.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceImageFormatInfo2(global::VkPhysicalDeviceImageFormatInfo2.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceImageFormatInfo2(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceImageFormatInfo2()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceImageFormatInfo2 __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDeviceImageFormatInfo2.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDeviceImageFormatInfo2.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDeviceImageFormatInfo2.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDeviceImageFormatInfo2.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkFormat Format
    {
        get
        {
            return ((global::VkPhysicalDeviceImageFormatInfo2.__Internal*) __Instance)->format;
        }

        set
        {
            ((global::VkPhysicalDeviceImageFormatInfo2.__Internal*)__Instance)->format = value;
        }
    }

    public global::VkImageType Type
    {
        get
        {
            return ((global::VkPhysicalDeviceImageFormatInfo2.__Internal*) __Instance)->type;
        }

        set
        {
            ((global::VkPhysicalDeviceImageFormatInfo2.__Internal*)__Instance)->type = value;
        }
    }

    public global::VkImageTiling Tiling
    {
        get
        {
            return ((global::VkPhysicalDeviceImageFormatInfo2.__Internal*) __Instance)->tiling;
        }

        set
        {
            ((global::VkPhysicalDeviceImageFormatInfo2.__Internal*)__Instance)->tiling = value;
        }
    }

    public uint Usage
    {
        get
        {
            return ((global::VkPhysicalDeviceImageFormatInfo2.__Internal*) __Instance)->usage;
        }

        set
        {
            ((global::VkPhysicalDeviceImageFormatInfo2.__Internal*)__Instance)->usage = value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkPhysicalDeviceImageFormatInfo2.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkPhysicalDeviceImageFormatInfo2.__Internal*)__Instance)->flags = value;
        }
    }
}

public unsafe partial class VkQueueFamilyProperties2 : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkQueueFamilyProperties.__Internal queueFamilyProperties;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkQueueFamilyProperties2> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkQueueFamilyProperties2>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkQueueFamilyProperties2 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkQueueFamilyProperties2(native.ToPointer(), skipVTables);
    }

    internal static global::VkQueueFamilyProperties2 __CreateInstance(global::VkQueueFamilyProperties2.__Internal native, bool skipVTables = false)
    {
        return new global::VkQueueFamilyProperties2(native, skipVTables);
    }

    private static void* __CopyValue(global::VkQueueFamilyProperties2.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkQueueFamilyProperties2.__Internal));
        *(global::VkQueueFamilyProperties2.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkQueueFamilyProperties2(global::VkQueueFamilyProperties2.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkQueueFamilyProperties2(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkQueueFamilyProperties2()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkQueueFamilyProperties2 __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkQueueFamilyProperties2.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkQueueFamilyProperties2.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkQueueFamilyProperties2.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkQueueFamilyProperties2.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkQueueFamilyProperties QueueFamilyProperties
    {
        get
        {
            return global::VkQueueFamilyProperties.__CreateInstance(new global::System.IntPtr(&((global::VkQueueFamilyProperties2.__Internal*) __Instance)->queueFamilyProperties));
        }

        set
        {
            ((global::VkQueueFamilyProperties2.__Internal*)__Instance)->queueFamilyProperties = ReferenceEquals(value, null) ? new global::VkQueueFamilyProperties.__Internal() : *(global::VkQueueFamilyProperties.__Internal*) value.__Instance;
        }
    }
}

public unsafe partial class VkPhysicalDeviceMemoryProperties2 : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 536)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkPhysicalDeviceMemoryProperties.__Internal memoryProperties;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceMemoryProperties2> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceMemoryProperties2>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceMemoryProperties2 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceMemoryProperties2(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceMemoryProperties2 __CreateInstance(global::VkPhysicalDeviceMemoryProperties2.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceMemoryProperties2(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceMemoryProperties2.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceMemoryProperties2.__Internal));
        *(global::VkPhysicalDeviceMemoryProperties2.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceMemoryProperties2(global::VkPhysicalDeviceMemoryProperties2.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceMemoryProperties2(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceMemoryProperties2()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceMemoryProperties2 __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDeviceMemoryProperties2.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDeviceMemoryProperties2.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDeviceMemoryProperties2.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDeviceMemoryProperties2.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkPhysicalDeviceMemoryProperties MemoryProperties
    {
        get
        {
            return global::VkPhysicalDeviceMemoryProperties.__CreateInstance(new global::System.IntPtr(&((global::VkPhysicalDeviceMemoryProperties2.__Internal*) __Instance)->memoryProperties));
        }

        set
        {
            ((global::VkPhysicalDeviceMemoryProperties2.__Internal*)__Instance)->memoryProperties = ReferenceEquals(value, null) ? new global::VkPhysicalDeviceMemoryProperties.__Internal() : *(global::VkPhysicalDeviceMemoryProperties.__Internal*) value.__Instance;
        }
    }
}

public unsafe partial class VkSparseImageFormatProperties2 : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkSparseImageFormatProperties.__Internal properties;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSparseImageFormatProperties2> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSparseImageFormatProperties2>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSparseImageFormatProperties2 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSparseImageFormatProperties2(native.ToPointer(), skipVTables);
    }

    internal static global::VkSparseImageFormatProperties2 __CreateInstance(global::VkSparseImageFormatProperties2.__Internal native, bool skipVTables = false)
    {
        return new global::VkSparseImageFormatProperties2(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSparseImageFormatProperties2.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSparseImageFormatProperties2.__Internal));
        *(global::VkSparseImageFormatProperties2.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSparseImageFormatProperties2(global::VkSparseImageFormatProperties2.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSparseImageFormatProperties2(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSparseImageFormatProperties2()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkSparseImageFormatProperties2 __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkSparseImageFormatProperties2.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkSparseImageFormatProperties2.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkSparseImageFormatProperties2.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkSparseImageFormatProperties2.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkSparseImageFormatProperties Properties
    {
        get
        {
            return global::VkSparseImageFormatProperties.__CreateInstance(new global::System.IntPtr(&((global::VkSparseImageFormatProperties2.__Internal*) __Instance)->properties));
        }

        set
        {
            ((global::VkSparseImageFormatProperties2.__Internal*)__Instance)->properties = ReferenceEquals(value, null) ? new global::VkSparseImageFormatProperties.__Internal() : *(global::VkSparseImageFormatProperties.__Internal*) value.__Instance;
        }
    }
}

public unsafe partial class VkPhysicalDeviceSparseImageFormatInfo2 : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkFormat format;

        [FieldOffset(20)]
        internal global::VkImageType type;

        [FieldOffset(24)]
        internal global::VkSampleCountFlagBits samples;

        [FieldOffset(28)]
        internal uint usage;

        [FieldOffset(32)]
        internal global::VkImageTiling tiling;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceSparseImageFormatInfo2> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceSparseImageFormatInfo2>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceSparseImageFormatInfo2 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceSparseImageFormatInfo2(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceSparseImageFormatInfo2 __CreateInstance(global::VkPhysicalDeviceSparseImageFormatInfo2.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceSparseImageFormatInfo2(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceSparseImageFormatInfo2.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceSparseImageFormatInfo2.__Internal));
        *(global::VkPhysicalDeviceSparseImageFormatInfo2.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceSparseImageFormatInfo2(global::VkPhysicalDeviceSparseImageFormatInfo2.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceSparseImageFormatInfo2(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceSparseImageFormatInfo2()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceSparseImageFormatInfo2 __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDeviceSparseImageFormatInfo2.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDeviceSparseImageFormatInfo2.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDeviceSparseImageFormatInfo2.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDeviceSparseImageFormatInfo2.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkFormat Format
    {
        get
        {
            return ((global::VkPhysicalDeviceSparseImageFormatInfo2.__Internal*) __Instance)->format;
        }

        set
        {
            ((global::VkPhysicalDeviceSparseImageFormatInfo2.__Internal*)__Instance)->format = value;
        }
    }

    public global::VkImageType Type
    {
        get
        {
            return ((global::VkPhysicalDeviceSparseImageFormatInfo2.__Internal*) __Instance)->type;
        }

        set
        {
            ((global::VkPhysicalDeviceSparseImageFormatInfo2.__Internal*)__Instance)->type = value;
        }
    }

    public global::VkSampleCountFlagBits Samples
    {
        get
        {
            return ((global::VkPhysicalDeviceSparseImageFormatInfo2.__Internal*) __Instance)->samples;
        }

        set
        {
            ((global::VkPhysicalDeviceSparseImageFormatInfo2.__Internal*)__Instance)->samples = value;
        }
    }

    public uint Usage
    {
        get
        {
            return ((global::VkPhysicalDeviceSparseImageFormatInfo2.__Internal*) __Instance)->usage;
        }

        set
        {
            ((global::VkPhysicalDeviceSparseImageFormatInfo2.__Internal*)__Instance)->usage = value;
        }
    }

    public global::VkImageTiling Tiling
    {
        get
        {
            return ((global::VkPhysicalDeviceSparseImageFormatInfo2.__Internal*) __Instance)->tiling;
        }

        set
        {
            ((global::VkPhysicalDeviceSparseImageFormatInfo2.__Internal*)__Instance)->tiling = value;
        }
    }
}

public unsafe partial class VkPhysicalDevicePointClippingProperties : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkPointClippingBehavior pointClippingBehavior;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDevicePointClippingProperties> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDevicePointClippingProperties>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDevicePointClippingProperties __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDevicePointClippingProperties(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDevicePointClippingProperties __CreateInstance(global::VkPhysicalDevicePointClippingProperties.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDevicePointClippingProperties(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDevicePointClippingProperties.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDevicePointClippingProperties.__Internal));
        *(global::VkPhysicalDevicePointClippingProperties.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDevicePointClippingProperties(global::VkPhysicalDevicePointClippingProperties.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDevicePointClippingProperties(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDevicePointClippingProperties()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDevicePointClippingProperties __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDevicePointClippingProperties.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDevicePointClippingProperties.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDevicePointClippingProperties.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDevicePointClippingProperties.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkPointClippingBehavior PointClippingBehavior
    {
        get
        {
            return ((global::VkPhysicalDevicePointClippingProperties.__Internal*) __Instance)->pointClippingBehavior;
        }

        set
        {
            ((global::VkPhysicalDevicePointClippingProperties.__Internal*)__Instance)->pointClippingBehavior = value;
        }
    }
}

public unsafe partial class VkInputAttachmentAspectReference : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 12)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint subpass;

        [FieldOffset(4)]
        internal uint inputAttachmentIndex;

        [FieldOffset(8)]
        internal uint aspectMask;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkInputAttachmentAspectReference> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkInputAttachmentAspectReference>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkInputAttachmentAspectReference __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkInputAttachmentAspectReference(native.ToPointer(), skipVTables);
    }

    internal static global::VkInputAttachmentAspectReference __CreateInstance(global::VkInputAttachmentAspectReference.__Internal native, bool skipVTables = false)
    {
        return new global::VkInputAttachmentAspectReference(native, skipVTables);
    }

    private static void* __CopyValue(global::VkInputAttachmentAspectReference.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkInputAttachmentAspectReference.__Internal));
        *(global::VkInputAttachmentAspectReference.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkInputAttachmentAspectReference(global::VkInputAttachmentAspectReference.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkInputAttachmentAspectReference(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkInputAttachmentAspectReference()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkInputAttachmentAspectReference __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint Subpass
    {
        get
        {
            return ((global::VkInputAttachmentAspectReference.__Internal*) __Instance)->subpass;
        }

        set
        {
            ((global::VkInputAttachmentAspectReference.__Internal*)__Instance)->subpass = value;
        }
    }

    public uint InputAttachmentIndex
    {
        get
        {
            return ((global::VkInputAttachmentAspectReference.__Internal*) __Instance)->inputAttachmentIndex;
        }

        set
        {
            ((global::VkInputAttachmentAspectReference.__Internal*)__Instance)->inputAttachmentIndex = value;
        }
    }

    public uint AspectMask
    {
        get
        {
            return ((global::VkInputAttachmentAspectReference.__Internal*) __Instance)->aspectMask;
        }

        set
        {
            ((global::VkInputAttachmentAspectReference.__Internal*)__Instance)->aspectMask = value;
        }
    }
}

public unsafe partial class VkRenderPassInputAttachmentAspectCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint aspectReferenceCount;

        [FieldOffset(24)]
        internal global::System.IntPtr pAspectReferences;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkRenderPassInputAttachmentAspectCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkRenderPassInputAttachmentAspectCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkRenderPassInputAttachmentAspectCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkRenderPassInputAttachmentAspectCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkRenderPassInputAttachmentAspectCreateInfo __CreateInstance(global::VkRenderPassInputAttachmentAspectCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkRenderPassInputAttachmentAspectCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkRenderPassInputAttachmentAspectCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkRenderPassInputAttachmentAspectCreateInfo.__Internal));
        *(global::VkRenderPassInputAttachmentAspectCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkRenderPassInputAttachmentAspectCreateInfo(global::VkRenderPassInputAttachmentAspectCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkRenderPassInputAttachmentAspectCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkRenderPassInputAttachmentAspectCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkRenderPassInputAttachmentAspectCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkRenderPassInputAttachmentAspectCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkRenderPassInputAttachmentAspectCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkRenderPassInputAttachmentAspectCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkRenderPassInputAttachmentAspectCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint AspectReferenceCount
    {
        get
        {
            return ((global::VkRenderPassInputAttachmentAspectCreateInfo.__Internal*) __Instance)->aspectReferenceCount;
        }

        set
        {
            ((global::VkRenderPassInputAttachmentAspectCreateInfo.__Internal*)__Instance)->aspectReferenceCount = value;
        }
    }

    public global::VkInputAttachmentAspectReference PAspectReferences
    {
        get
        {
            global::VkInputAttachmentAspectReference __result0;
            if (((global::VkRenderPassInputAttachmentAspectCreateInfo.__Internal*) __Instance)->pAspectReferences == IntPtr.Zero) __result0 = null;
            else if (global::VkInputAttachmentAspectReference.NativeToManagedMap.ContainsKey(((global::VkRenderPassInputAttachmentAspectCreateInfo.__Internal*) __Instance)->pAspectReferences))
                __result0 = (global::VkInputAttachmentAspectReference) global::VkInputAttachmentAspectReference.NativeToManagedMap[((global::VkRenderPassInputAttachmentAspectCreateInfo.__Internal*) __Instance)->pAspectReferences];
            else __result0 = global::VkInputAttachmentAspectReference.__CreateInstance(((global::VkRenderPassInputAttachmentAspectCreateInfo.__Internal*) __Instance)->pAspectReferences);
            return __result0;
        }

        set
        {
            ((global::VkRenderPassInputAttachmentAspectCreateInfo.__Internal*)__Instance)->pAspectReferences = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkImageViewUsageCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint usage;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageViewUsageCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageViewUsageCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkImageViewUsageCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkImageViewUsageCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkImageViewUsageCreateInfo __CreateInstance(global::VkImageViewUsageCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkImageViewUsageCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkImageViewUsageCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkImageViewUsageCreateInfo.__Internal));
        *(global::VkImageViewUsageCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkImageViewUsageCreateInfo(global::VkImageViewUsageCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkImageViewUsageCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkImageViewUsageCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkImageViewUsageCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkImageViewUsageCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkImageViewUsageCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkImageViewUsageCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkImageViewUsageCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Usage
    {
        get
        {
            return ((global::VkImageViewUsageCreateInfo.__Internal*) __Instance)->usage;
        }

        set
        {
            ((global::VkImageViewUsageCreateInfo.__Internal*)__Instance)->usage = value;
        }
    }
}

public unsafe partial class VkPipelineTessellationDomainOriginStateCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkTessellationDomainOrigin domainOrigin;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineTessellationDomainOriginStateCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineTessellationDomainOriginStateCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPipelineTessellationDomainOriginStateCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPipelineTessellationDomainOriginStateCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkPipelineTessellationDomainOriginStateCreateInfo __CreateInstance(global::VkPipelineTessellationDomainOriginStateCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkPipelineTessellationDomainOriginStateCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPipelineTessellationDomainOriginStateCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPipelineTessellationDomainOriginStateCreateInfo.__Internal));
        *(global::VkPipelineTessellationDomainOriginStateCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPipelineTessellationDomainOriginStateCreateInfo(global::VkPipelineTessellationDomainOriginStateCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPipelineTessellationDomainOriginStateCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPipelineTessellationDomainOriginStateCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPipelineTessellationDomainOriginStateCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPipelineTessellationDomainOriginStateCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPipelineTessellationDomainOriginStateCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPipelineTessellationDomainOriginStateCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPipelineTessellationDomainOriginStateCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkTessellationDomainOrigin DomainOrigin
    {
        get
        {
            return ((global::VkPipelineTessellationDomainOriginStateCreateInfo.__Internal*) __Instance)->domainOrigin;
        }

        set
        {
            ((global::VkPipelineTessellationDomainOriginStateCreateInfo.__Internal*)__Instance)->domainOrigin = value;
        }
    }
}

public unsafe partial class VkRenderPassMultiviewCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 64)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint subpassCount;

        [FieldOffset(24)]
        internal global::System.IntPtr pViewMasks;

        [FieldOffset(32)]
        internal uint dependencyCount;

        [FieldOffset(40)]
        internal global::System.IntPtr pViewOffsets;

        [FieldOffset(48)]
        internal uint correlationMaskCount;

        [FieldOffset(56)]
        internal global::System.IntPtr pCorrelationMasks;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkRenderPassMultiviewCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkRenderPassMultiviewCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkRenderPassMultiviewCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkRenderPassMultiviewCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkRenderPassMultiviewCreateInfo __CreateInstance(global::VkRenderPassMultiviewCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkRenderPassMultiviewCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkRenderPassMultiviewCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkRenderPassMultiviewCreateInfo.__Internal));
        *(global::VkRenderPassMultiviewCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkRenderPassMultiviewCreateInfo(global::VkRenderPassMultiviewCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkRenderPassMultiviewCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkRenderPassMultiviewCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkRenderPassMultiviewCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkRenderPassMultiviewCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkRenderPassMultiviewCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkRenderPassMultiviewCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkRenderPassMultiviewCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint SubpassCount
    {
        get
        {
            return ((global::VkRenderPassMultiviewCreateInfo.__Internal*) __Instance)->subpassCount;
        }

        set
        {
            ((global::VkRenderPassMultiviewCreateInfo.__Internal*)__Instance)->subpassCount = value;
        }
    }

    public uint* PViewMasks
    {
        get
        {
            return (uint*) ((global::VkRenderPassMultiviewCreateInfo.__Internal*) __Instance)->pViewMasks;
        }

        set
        {
            ((global::VkRenderPassMultiviewCreateInfo.__Internal*)__Instance)->pViewMasks = (global::System.IntPtr) value;
        }
    }

    public uint DependencyCount
    {
        get
        {
            return ((global::VkRenderPassMultiviewCreateInfo.__Internal*) __Instance)->dependencyCount;
        }

        set
        {
            ((global::VkRenderPassMultiviewCreateInfo.__Internal*)__Instance)->dependencyCount = value;
        }
    }

    public int* PViewOffsets
    {
        get
        {
            return (int*) ((global::VkRenderPassMultiviewCreateInfo.__Internal*) __Instance)->pViewOffsets;
        }

        set
        {
            ((global::VkRenderPassMultiviewCreateInfo.__Internal*)__Instance)->pViewOffsets = (global::System.IntPtr) value;
        }
    }

    public uint CorrelationMaskCount
    {
        get
        {
            return ((global::VkRenderPassMultiviewCreateInfo.__Internal*) __Instance)->correlationMaskCount;
        }

        set
        {
            ((global::VkRenderPassMultiviewCreateInfo.__Internal*)__Instance)->correlationMaskCount = value;
        }
    }

    public uint* PCorrelationMasks
    {
        get
        {
            return (uint*) ((global::VkRenderPassMultiviewCreateInfo.__Internal*) __Instance)->pCorrelationMasks;
        }

        set
        {
            ((global::VkRenderPassMultiviewCreateInfo.__Internal*)__Instance)->pCorrelationMasks = (global::System.IntPtr) value;
        }
    }
}

public unsafe partial class VkPhysicalDeviceMultiviewFeatures : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint multiview;

        [FieldOffset(20)]
        internal uint multiviewGeometryShader;

        [FieldOffset(24)]
        internal uint multiviewTessellationShader;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceMultiviewFeatures> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceMultiviewFeatures>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceMultiviewFeatures __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceMultiviewFeatures(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceMultiviewFeatures __CreateInstance(global::VkPhysicalDeviceMultiviewFeatures.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceMultiviewFeatures(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceMultiviewFeatures.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceMultiviewFeatures.__Internal));
        *(global::VkPhysicalDeviceMultiviewFeatures.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceMultiviewFeatures(global::VkPhysicalDeviceMultiviewFeatures.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceMultiviewFeatures(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceMultiviewFeatures()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceMultiviewFeatures __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDeviceMultiviewFeatures.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDeviceMultiviewFeatures.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDeviceMultiviewFeatures.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDeviceMultiviewFeatures.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Multiview
    {
        get
        {
            return ((global::VkPhysicalDeviceMultiviewFeatures.__Internal*) __Instance)->multiview;
        }

        set
        {
            ((global::VkPhysicalDeviceMultiviewFeatures.__Internal*)__Instance)->multiview = value;
        }
    }

    public uint MultiviewGeometryShader
    {
        get
        {
            return ((global::VkPhysicalDeviceMultiviewFeatures.__Internal*) __Instance)->multiviewGeometryShader;
        }

        set
        {
            ((global::VkPhysicalDeviceMultiviewFeatures.__Internal*)__Instance)->multiviewGeometryShader = value;
        }
    }

    public uint MultiviewTessellationShader
    {
        get
        {
            return ((global::VkPhysicalDeviceMultiviewFeatures.__Internal*) __Instance)->multiviewTessellationShader;
        }

        set
        {
            ((global::VkPhysicalDeviceMultiviewFeatures.__Internal*)__Instance)->multiviewTessellationShader = value;
        }
    }
}

public unsafe partial class VkPhysicalDeviceMultiviewProperties : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint maxMultiviewViewCount;

        [FieldOffset(20)]
        internal uint maxMultiviewInstanceIndex;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceMultiviewProperties> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceMultiviewProperties>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceMultiviewProperties __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceMultiviewProperties(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceMultiviewProperties __CreateInstance(global::VkPhysicalDeviceMultiviewProperties.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceMultiviewProperties(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceMultiviewProperties.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceMultiviewProperties.__Internal));
        *(global::VkPhysicalDeviceMultiviewProperties.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceMultiviewProperties(global::VkPhysicalDeviceMultiviewProperties.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceMultiviewProperties(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceMultiviewProperties()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceMultiviewProperties __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDeviceMultiviewProperties.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDeviceMultiviewProperties.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDeviceMultiviewProperties.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDeviceMultiviewProperties.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint MaxMultiviewViewCount
    {
        get
        {
            return ((global::VkPhysicalDeviceMultiviewProperties.__Internal*) __Instance)->maxMultiviewViewCount;
        }

        set
        {
            ((global::VkPhysicalDeviceMultiviewProperties.__Internal*)__Instance)->maxMultiviewViewCount = value;
        }
    }

    public uint MaxMultiviewInstanceIndex
    {
        get
        {
            return ((global::VkPhysicalDeviceMultiviewProperties.__Internal*) __Instance)->maxMultiviewInstanceIndex;
        }

        set
        {
            ((global::VkPhysicalDeviceMultiviewProperties.__Internal*)__Instance)->maxMultiviewInstanceIndex = value;
        }
    }
}

public unsafe partial class VkPhysicalDeviceVariablePointerFeatures : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint variablePointersStorageBuffer;

        [FieldOffset(20)]
        internal uint variablePointers;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceVariablePointerFeatures> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceVariablePointerFeatures>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceVariablePointerFeatures __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceVariablePointerFeatures(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceVariablePointerFeatures __CreateInstance(global::VkPhysicalDeviceVariablePointerFeatures.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceVariablePointerFeatures(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceVariablePointerFeatures.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceVariablePointerFeatures.__Internal));
        *(global::VkPhysicalDeviceVariablePointerFeatures.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceVariablePointerFeatures(global::VkPhysicalDeviceVariablePointerFeatures.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceVariablePointerFeatures(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceVariablePointerFeatures()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceVariablePointerFeatures __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDeviceVariablePointerFeatures.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDeviceVariablePointerFeatures.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDeviceVariablePointerFeatures.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDeviceVariablePointerFeatures.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint VariablePointersStorageBuffer
    {
        get
        {
            return ((global::VkPhysicalDeviceVariablePointerFeatures.__Internal*) __Instance)->variablePointersStorageBuffer;
        }

        set
        {
            ((global::VkPhysicalDeviceVariablePointerFeatures.__Internal*)__Instance)->variablePointersStorageBuffer = value;
        }
    }

    public uint VariablePointers
    {
        get
        {
            return ((global::VkPhysicalDeviceVariablePointerFeatures.__Internal*) __Instance)->variablePointers;
        }

        set
        {
            ((global::VkPhysicalDeviceVariablePointerFeatures.__Internal*)__Instance)->variablePointers = value;
        }
    }
}

public unsafe partial class VkPhysicalDeviceProtectedMemoryFeatures : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint protectedMemory;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceProtectedMemoryFeatures> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceProtectedMemoryFeatures>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceProtectedMemoryFeatures __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceProtectedMemoryFeatures(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceProtectedMemoryFeatures __CreateInstance(global::VkPhysicalDeviceProtectedMemoryFeatures.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceProtectedMemoryFeatures(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceProtectedMemoryFeatures.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceProtectedMemoryFeatures.__Internal));
        *(global::VkPhysicalDeviceProtectedMemoryFeatures.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceProtectedMemoryFeatures(global::VkPhysicalDeviceProtectedMemoryFeatures.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceProtectedMemoryFeatures(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceProtectedMemoryFeatures()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceProtectedMemoryFeatures __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDeviceProtectedMemoryFeatures.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDeviceProtectedMemoryFeatures.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDeviceProtectedMemoryFeatures.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDeviceProtectedMemoryFeatures.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint ProtectedMemory
    {
        get
        {
            return ((global::VkPhysicalDeviceProtectedMemoryFeatures.__Internal*) __Instance)->protectedMemory;
        }

        set
        {
            ((global::VkPhysicalDeviceProtectedMemoryFeatures.__Internal*)__Instance)->protectedMemory = value;
        }
    }
}

public unsafe partial class VkPhysicalDeviceProtectedMemoryProperties : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint protectedNoFault;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceProtectedMemoryProperties> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceProtectedMemoryProperties>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceProtectedMemoryProperties __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceProtectedMemoryProperties(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceProtectedMemoryProperties __CreateInstance(global::VkPhysicalDeviceProtectedMemoryProperties.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceProtectedMemoryProperties(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceProtectedMemoryProperties.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceProtectedMemoryProperties.__Internal));
        *(global::VkPhysicalDeviceProtectedMemoryProperties.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceProtectedMemoryProperties(global::VkPhysicalDeviceProtectedMemoryProperties.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceProtectedMemoryProperties(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceProtectedMemoryProperties()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceProtectedMemoryProperties __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDeviceProtectedMemoryProperties.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDeviceProtectedMemoryProperties.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDeviceProtectedMemoryProperties.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDeviceProtectedMemoryProperties.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint ProtectedNoFault
    {
        get
        {
            return ((global::VkPhysicalDeviceProtectedMemoryProperties.__Internal*) __Instance)->protectedNoFault;
        }

        set
        {
            ((global::VkPhysicalDeviceProtectedMemoryProperties.__Internal*)__Instance)->protectedNoFault = value;
        }
    }
}

public unsafe partial class VkDeviceQueueInfo2 : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(20)]
        internal uint queueFamilyIndex;

        [FieldOffset(24)]
        internal uint queueIndex;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceQueueInfo2> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceQueueInfo2>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDeviceQueueInfo2 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDeviceQueueInfo2(native.ToPointer(), skipVTables);
    }

    internal static global::VkDeviceQueueInfo2 __CreateInstance(global::VkDeviceQueueInfo2.__Internal native, bool skipVTables = false)
    {
        return new global::VkDeviceQueueInfo2(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDeviceQueueInfo2.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDeviceQueueInfo2.__Internal));
        *(global::VkDeviceQueueInfo2.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDeviceQueueInfo2(global::VkDeviceQueueInfo2.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDeviceQueueInfo2(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDeviceQueueInfo2()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDeviceQueueInfo2 __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDeviceQueueInfo2.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDeviceQueueInfo2.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDeviceQueueInfo2.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDeviceQueueInfo2.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkDeviceQueueInfo2.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkDeviceQueueInfo2.__Internal*)__Instance)->flags = value;
        }
    }

    public uint QueueFamilyIndex
    {
        get
        {
            return ((global::VkDeviceQueueInfo2.__Internal*) __Instance)->queueFamilyIndex;
        }

        set
        {
            ((global::VkDeviceQueueInfo2.__Internal*)__Instance)->queueFamilyIndex = value;
        }
    }

    public uint QueueIndex
    {
        get
        {
            return ((global::VkDeviceQueueInfo2.__Internal*) __Instance)->queueIndex;
        }

        set
        {
            ((global::VkDeviceQueueInfo2.__Internal*)__Instance)->queueIndex = value;
        }
    }
}

public unsafe partial class VkProtectedSubmitInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint protectedSubmit;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkProtectedSubmitInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkProtectedSubmitInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkProtectedSubmitInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkProtectedSubmitInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkProtectedSubmitInfo __CreateInstance(global::VkProtectedSubmitInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkProtectedSubmitInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkProtectedSubmitInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkProtectedSubmitInfo.__Internal));
        *(global::VkProtectedSubmitInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkProtectedSubmitInfo(global::VkProtectedSubmitInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkProtectedSubmitInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkProtectedSubmitInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkProtectedSubmitInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkProtectedSubmitInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkProtectedSubmitInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkProtectedSubmitInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkProtectedSubmitInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint ProtectedSubmit
    {
        get
        {
            return ((global::VkProtectedSubmitInfo.__Internal*) __Instance)->protectedSubmit;
        }

        set
        {
            ((global::VkProtectedSubmitInfo.__Internal*)__Instance)->protectedSubmit = value;
        }
    }
}

public unsafe partial class VkSamplerYcbcrConversionCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 64)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkFormat format;

        [FieldOffset(20)]
        internal global::VkSamplerYcbcrModelConversion ycbcrModel;

        [FieldOffset(24)]
        internal global::VkSamplerYcbcrRange ycbcrRange;

        [FieldOffset(28)]
        internal global::VkComponentMapping.__Internal components;

        [FieldOffset(44)]
        internal global::VkChromaLocation xChromaOffset;

        [FieldOffset(48)]
        internal global::VkChromaLocation yChromaOffset;

        [FieldOffset(52)]
        internal global::VkFilter chromaFilter;

        [FieldOffset(56)]
        internal uint forceExplicitReconstruction;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSamplerYcbcrConversionCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSamplerYcbcrConversionCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSamplerYcbcrConversionCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSamplerYcbcrConversionCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkSamplerYcbcrConversionCreateInfo __CreateInstance(global::VkSamplerYcbcrConversionCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkSamplerYcbcrConversionCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSamplerYcbcrConversionCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSamplerYcbcrConversionCreateInfo.__Internal));
        *(global::VkSamplerYcbcrConversionCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSamplerYcbcrConversionCreateInfo(global::VkSamplerYcbcrConversionCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSamplerYcbcrConversionCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSamplerYcbcrConversionCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkSamplerYcbcrConversionCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkSamplerYcbcrConversionCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkSamplerYcbcrConversionCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkSamplerYcbcrConversionCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkSamplerYcbcrConversionCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkFormat Format
    {
        get
        {
            return ((global::VkSamplerYcbcrConversionCreateInfo.__Internal*) __Instance)->format;
        }

        set
        {
            ((global::VkSamplerYcbcrConversionCreateInfo.__Internal*)__Instance)->format = value;
        }
    }

    public global::VkSamplerYcbcrModelConversion YcbcrModel
    {
        get
        {
            return ((global::VkSamplerYcbcrConversionCreateInfo.__Internal*) __Instance)->ycbcrModel;
        }

        set
        {
            ((global::VkSamplerYcbcrConversionCreateInfo.__Internal*)__Instance)->ycbcrModel = value;
        }
    }

    public global::VkSamplerYcbcrRange YcbcrRange
    {
        get
        {
            return ((global::VkSamplerYcbcrConversionCreateInfo.__Internal*) __Instance)->ycbcrRange;
        }

        set
        {
            ((global::VkSamplerYcbcrConversionCreateInfo.__Internal*)__Instance)->ycbcrRange = value;
        }
    }

    public global::VkComponentMapping Components
    {
        get
        {
            return global::VkComponentMapping.__CreateInstance(new global::System.IntPtr(&((global::VkSamplerYcbcrConversionCreateInfo.__Internal*) __Instance)->components));
        }

        set
        {
            ((global::VkSamplerYcbcrConversionCreateInfo.__Internal*)__Instance)->components = ReferenceEquals(value, null) ? new global::VkComponentMapping.__Internal() : *(global::VkComponentMapping.__Internal*) value.__Instance;
        }
    }

    public global::VkChromaLocation XChromaOffset
    {
        get
        {
            return ((global::VkSamplerYcbcrConversionCreateInfo.__Internal*) __Instance)->xChromaOffset;
        }

        set
        {
            ((global::VkSamplerYcbcrConversionCreateInfo.__Internal*)__Instance)->xChromaOffset = value;
        }
    }

    public global::VkChromaLocation YChromaOffset
    {
        get
        {
            return ((global::VkSamplerYcbcrConversionCreateInfo.__Internal*) __Instance)->yChromaOffset;
        }

        set
        {
            ((global::VkSamplerYcbcrConversionCreateInfo.__Internal*)__Instance)->yChromaOffset = value;
        }
    }

    public global::VkFilter ChromaFilter
    {
        get
        {
            return ((global::VkSamplerYcbcrConversionCreateInfo.__Internal*) __Instance)->chromaFilter;
        }

        set
        {
            ((global::VkSamplerYcbcrConversionCreateInfo.__Internal*)__Instance)->chromaFilter = value;
        }
    }

    public uint ForceExplicitReconstruction
    {
        get
        {
            return ((global::VkSamplerYcbcrConversionCreateInfo.__Internal*) __Instance)->forceExplicitReconstruction;
        }

        set
        {
            ((global::VkSamplerYcbcrConversionCreateInfo.__Internal*)__Instance)->forceExplicitReconstruction = value;
        }
    }
}

public unsafe partial class VkSamplerYcbcrConversionInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::System.IntPtr conversion;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSamplerYcbcrConversionInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSamplerYcbcrConversionInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSamplerYcbcrConversionInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSamplerYcbcrConversionInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkSamplerYcbcrConversionInfo __CreateInstance(global::VkSamplerYcbcrConversionInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkSamplerYcbcrConversionInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSamplerYcbcrConversionInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSamplerYcbcrConversionInfo.__Internal));
        *(global::VkSamplerYcbcrConversionInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSamplerYcbcrConversionInfo(global::VkSamplerYcbcrConversionInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSamplerYcbcrConversionInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSamplerYcbcrConversionInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkSamplerYcbcrConversionInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkSamplerYcbcrConversionInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkSamplerYcbcrConversionInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkSamplerYcbcrConversionInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkSamplerYcbcrConversionInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkSamplerYcbcrConversionT Conversion
    {
        get
        {
            global::VkSamplerYcbcrConversionT __result0;
            if (((global::VkSamplerYcbcrConversionInfo.__Internal*) __Instance)->conversion == IntPtr.Zero) __result0 = null;
            else if (global::VkSamplerYcbcrConversionT.NativeToManagedMap.ContainsKey(((global::VkSamplerYcbcrConversionInfo.__Internal*) __Instance)->conversion))
                __result0 = (global::VkSamplerYcbcrConversionT) global::VkSamplerYcbcrConversionT.NativeToManagedMap[((global::VkSamplerYcbcrConversionInfo.__Internal*) __Instance)->conversion];
            else __result0 = global::VkSamplerYcbcrConversionT.__CreateInstance(((global::VkSamplerYcbcrConversionInfo.__Internal*) __Instance)->conversion);
            return __result0;
        }

        set
        {
            ((global::VkSamplerYcbcrConversionInfo.__Internal*)__Instance)->conversion = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkBindImagePlaneMemoryInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkImageAspectFlagBits planeAspect;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkBindImagePlaneMemoryInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkBindImagePlaneMemoryInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkBindImagePlaneMemoryInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkBindImagePlaneMemoryInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkBindImagePlaneMemoryInfo __CreateInstance(global::VkBindImagePlaneMemoryInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkBindImagePlaneMemoryInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkBindImagePlaneMemoryInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkBindImagePlaneMemoryInfo.__Internal));
        *(global::VkBindImagePlaneMemoryInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkBindImagePlaneMemoryInfo(global::VkBindImagePlaneMemoryInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkBindImagePlaneMemoryInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkBindImagePlaneMemoryInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkBindImagePlaneMemoryInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkBindImagePlaneMemoryInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkBindImagePlaneMemoryInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkBindImagePlaneMemoryInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkBindImagePlaneMemoryInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkImageAspectFlagBits PlaneAspect
    {
        get
        {
            return ((global::VkBindImagePlaneMemoryInfo.__Internal*) __Instance)->planeAspect;
        }

        set
        {
            ((global::VkBindImagePlaneMemoryInfo.__Internal*)__Instance)->planeAspect = value;
        }
    }
}

public unsafe partial class VkImagePlaneMemoryRequirementsInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkImageAspectFlagBits planeAspect;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImagePlaneMemoryRequirementsInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImagePlaneMemoryRequirementsInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkImagePlaneMemoryRequirementsInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkImagePlaneMemoryRequirementsInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkImagePlaneMemoryRequirementsInfo __CreateInstance(global::VkImagePlaneMemoryRequirementsInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkImagePlaneMemoryRequirementsInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkImagePlaneMemoryRequirementsInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkImagePlaneMemoryRequirementsInfo.__Internal));
        *(global::VkImagePlaneMemoryRequirementsInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkImagePlaneMemoryRequirementsInfo(global::VkImagePlaneMemoryRequirementsInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkImagePlaneMemoryRequirementsInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkImagePlaneMemoryRequirementsInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkImagePlaneMemoryRequirementsInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkImagePlaneMemoryRequirementsInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkImagePlaneMemoryRequirementsInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkImagePlaneMemoryRequirementsInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkImagePlaneMemoryRequirementsInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkImageAspectFlagBits PlaneAspect
    {
        get
        {
            return ((global::VkImagePlaneMemoryRequirementsInfo.__Internal*) __Instance)->planeAspect;
        }

        set
        {
            ((global::VkImagePlaneMemoryRequirementsInfo.__Internal*)__Instance)->planeAspect = value;
        }
    }
}

public unsafe partial class VkPhysicalDeviceSamplerYcbcrConversionFeatures : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint samplerYcbcrConversion;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceSamplerYcbcrConversionFeatures> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceSamplerYcbcrConversionFeatures>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceSamplerYcbcrConversionFeatures __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceSamplerYcbcrConversionFeatures(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceSamplerYcbcrConversionFeatures __CreateInstance(global::VkPhysicalDeviceSamplerYcbcrConversionFeatures.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceSamplerYcbcrConversionFeatures(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceSamplerYcbcrConversionFeatures.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceSamplerYcbcrConversionFeatures.__Internal));
        *(global::VkPhysicalDeviceSamplerYcbcrConversionFeatures.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceSamplerYcbcrConversionFeatures(global::VkPhysicalDeviceSamplerYcbcrConversionFeatures.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceSamplerYcbcrConversionFeatures(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceSamplerYcbcrConversionFeatures()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceSamplerYcbcrConversionFeatures __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDeviceSamplerYcbcrConversionFeatures.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDeviceSamplerYcbcrConversionFeatures.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDeviceSamplerYcbcrConversionFeatures.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDeviceSamplerYcbcrConversionFeatures.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint SamplerYcbcrConversion
    {
        get
        {
            return ((global::VkPhysicalDeviceSamplerYcbcrConversionFeatures.__Internal*) __Instance)->samplerYcbcrConversion;
        }

        set
        {
            ((global::VkPhysicalDeviceSamplerYcbcrConversionFeatures.__Internal*)__Instance)->samplerYcbcrConversion = value;
        }
    }
}

public unsafe partial class VkSamplerYcbcrConversionImageFormatProperties : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint combinedImageSamplerDescriptorCount;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSamplerYcbcrConversionImageFormatProperties> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSamplerYcbcrConversionImageFormatProperties>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSamplerYcbcrConversionImageFormatProperties __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSamplerYcbcrConversionImageFormatProperties(native.ToPointer(), skipVTables);
    }

    internal static global::VkSamplerYcbcrConversionImageFormatProperties __CreateInstance(global::VkSamplerYcbcrConversionImageFormatProperties.__Internal native, bool skipVTables = false)
    {
        return new global::VkSamplerYcbcrConversionImageFormatProperties(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSamplerYcbcrConversionImageFormatProperties.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSamplerYcbcrConversionImageFormatProperties.__Internal));
        *(global::VkSamplerYcbcrConversionImageFormatProperties.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSamplerYcbcrConversionImageFormatProperties(global::VkSamplerYcbcrConversionImageFormatProperties.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSamplerYcbcrConversionImageFormatProperties(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSamplerYcbcrConversionImageFormatProperties()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkSamplerYcbcrConversionImageFormatProperties __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkSamplerYcbcrConversionImageFormatProperties.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkSamplerYcbcrConversionImageFormatProperties.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkSamplerYcbcrConversionImageFormatProperties.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkSamplerYcbcrConversionImageFormatProperties.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint CombinedImageSamplerDescriptorCount
    {
        get
        {
            return ((global::VkSamplerYcbcrConversionImageFormatProperties.__Internal*) __Instance)->combinedImageSamplerDescriptorCount;
        }

        set
        {
            ((global::VkSamplerYcbcrConversionImageFormatProperties.__Internal*)__Instance)->combinedImageSamplerDescriptorCount = value;
        }
    }
}

public unsafe partial class VkDescriptorUpdateTemplateEntry : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint dstBinding;

        [FieldOffset(4)]
        internal uint dstArrayElement;

        [FieldOffset(8)]
        internal uint descriptorCount;

        [FieldOffset(12)]
        internal global::VkDescriptorType descriptorType;

        [FieldOffset(16)]
        internal ulong offset;

        [FieldOffset(24)]
        internal ulong stride;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorUpdateTemplateEntry> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorUpdateTemplateEntry>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDescriptorUpdateTemplateEntry __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDescriptorUpdateTemplateEntry(native.ToPointer(), skipVTables);
    }

    internal static global::VkDescriptorUpdateTemplateEntry __CreateInstance(global::VkDescriptorUpdateTemplateEntry.__Internal native, bool skipVTables = false)
    {
        return new global::VkDescriptorUpdateTemplateEntry(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDescriptorUpdateTemplateEntry.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDescriptorUpdateTemplateEntry.__Internal));
        *(global::VkDescriptorUpdateTemplateEntry.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDescriptorUpdateTemplateEntry(global::VkDescriptorUpdateTemplateEntry.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDescriptorUpdateTemplateEntry(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDescriptorUpdateTemplateEntry()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDescriptorUpdateTemplateEntry __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint DstBinding
    {
        get
        {
            return ((global::VkDescriptorUpdateTemplateEntry.__Internal*) __Instance)->dstBinding;
        }

        set
        {
            ((global::VkDescriptorUpdateTemplateEntry.__Internal*)__Instance)->dstBinding = value;
        }
    }

    public uint DstArrayElement
    {
        get
        {
            return ((global::VkDescriptorUpdateTemplateEntry.__Internal*) __Instance)->dstArrayElement;
        }

        set
        {
            ((global::VkDescriptorUpdateTemplateEntry.__Internal*)__Instance)->dstArrayElement = value;
        }
    }

    public uint DescriptorCount
    {
        get
        {
            return ((global::VkDescriptorUpdateTemplateEntry.__Internal*) __Instance)->descriptorCount;
        }

        set
        {
            ((global::VkDescriptorUpdateTemplateEntry.__Internal*)__Instance)->descriptorCount = value;
        }
    }

    public global::VkDescriptorType DescriptorType
    {
        get
        {
            return ((global::VkDescriptorUpdateTemplateEntry.__Internal*) __Instance)->descriptorType;
        }

        set
        {
            ((global::VkDescriptorUpdateTemplateEntry.__Internal*)__Instance)->descriptorType = value;
        }
    }

    public ulong Offset
    {
        get
        {
            return ((global::VkDescriptorUpdateTemplateEntry.__Internal*) __Instance)->offset;
        }

        set
        {
            ((global::VkDescriptorUpdateTemplateEntry.__Internal*)__Instance)->offset = value;
        }
    }

    public ulong Stride
    {
        get
        {
            return ((global::VkDescriptorUpdateTemplateEntry.__Internal*) __Instance)->stride;
        }

        set
        {
            ((global::VkDescriptorUpdateTemplateEntry.__Internal*)__Instance)->stride = value;
        }
    }
}

public unsafe partial class VkDescriptorUpdateTemplateCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 72)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(20)]
        internal uint descriptorUpdateEntryCount;

        [FieldOffset(24)]
        internal global::System.IntPtr pDescriptorUpdateEntries;

        [FieldOffset(32)]
        internal global::VkDescriptorUpdateTemplateType templateType;

        [FieldOffset(40)]
        internal global::System.IntPtr descriptorSetLayout;

        [FieldOffset(48)]
        internal global::VkPipelineBindPoint pipelineBindPoint;

        [FieldOffset(56)]
        internal global::System.IntPtr pipelineLayout;

        [FieldOffset(64)]
        internal uint set;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorUpdateTemplateCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorUpdateTemplateCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDescriptorUpdateTemplateCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDescriptorUpdateTemplateCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkDescriptorUpdateTemplateCreateInfo __CreateInstance(global::VkDescriptorUpdateTemplateCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkDescriptorUpdateTemplateCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDescriptorUpdateTemplateCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDescriptorUpdateTemplateCreateInfo.__Internal));
        *(global::VkDescriptorUpdateTemplateCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDescriptorUpdateTemplateCreateInfo(global::VkDescriptorUpdateTemplateCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDescriptorUpdateTemplateCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDescriptorUpdateTemplateCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDescriptorUpdateTemplateCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDescriptorUpdateTemplateCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDescriptorUpdateTemplateCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDescriptorUpdateTemplateCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDescriptorUpdateTemplateCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkDescriptorUpdateTemplateCreateInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkDescriptorUpdateTemplateCreateInfo.__Internal*)__Instance)->flags = value;
        }
    }

    public uint DescriptorUpdateEntryCount
    {
        get
        {
            return ((global::VkDescriptorUpdateTemplateCreateInfo.__Internal*) __Instance)->descriptorUpdateEntryCount;
        }

        set
        {
            ((global::VkDescriptorUpdateTemplateCreateInfo.__Internal*)__Instance)->descriptorUpdateEntryCount = value;
        }
    }

    public global::VkDescriptorUpdateTemplateEntry PDescriptorUpdateEntries
    {
        get
        {
            global::VkDescriptorUpdateTemplateEntry __result0;
            if (((global::VkDescriptorUpdateTemplateCreateInfo.__Internal*) __Instance)->pDescriptorUpdateEntries == IntPtr.Zero) __result0 = null;
            else if (global::VkDescriptorUpdateTemplateEntry.NativeToManagedMap.ContainsKey(((global::VkDescriptorUpdateTemplateCreateInfo.__Internal*) __Instance)->pDescriptorUpdateEntries))
                __result0 = (global::VkDescriptorUpdateTemplateEntry) global::VkDescriptorUpdateTemplateEntry.NativeToManagedMap[((global::VkDescriptorUpdateTemplateCreateInfo.__Internal*) __Instance)->pDescriptorUpdateEntries];
            else __result0 = global::VkDescriptorUpdateTemplateEntry.__CreateInstance(((global::VkDescriptorUpdateTemplateCreateInfo.__Internal*) __Instance)->pDescriptorUpdateEntries);
            return __result0;
        }

        set
        {
            ((global::VkDescriptorUpdateTemplateCreateInfo.__Internal*)__Instance)->pDescriptorUpdateEntries = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkDescriptorUpdateTemplateType TemplateType
    {
        get
        {
            return ((global::VkDescriptorUpdateTemplateCreateInfo.__Internal*) __Instance)->templateType;
        }

        set
        {
            ((global::VkDescriptorUpdateTemplateCreateInfo.__Internal*)__Instance)->templateType = value;
        }
    }

    public global::VkDescriptorSetLayoutT DescriptorSetLayout
    {
        get
        {
            global::VkDescriptorSetLayoutT __result0;
            if (((global::VkDescriptorUpdateTemplateCreateInfo.__Internal*) __Instance)->descriptorSetLayout == IntPtr.Zero) __result0 = null;
            else if (global::VkDescriptorSetLayoutT.NativeToManagedMap.ContainsKey(((global::VkDescriptorUpdateTemplateCreateInfo.__Internal*) __Instance)->descriptorSetLayout))
                __result0 = (global::VkDescriptorSetLayoutT) global::VkDescriptorSetLayoutT.NativeToManagedMap[((global::VkDescriptorUpdateTemplateCreateInfo.__Internal*) __Instance)->descriptorSetLayout];
            else __result0 = global::VkDescriptorSetLayoutT.__CreateInstance(((global::VkDescriptorUpdateTemplateCreateInfo.__Internal*) __Instance)->descriptorSetLayout);
            return __result0;
        }

        set
        {
            ((global::VkDescriptorUpdateTemplateCreateInfo.__Internal*)__Instance)->descriptorSetLayout = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkPipelineBindPoint PipelineBindPoint
    {
        get
        {
            return ((global::VkDescriptorUpdateTemplateCreateInfo.__Internal*) __Instance)->pipelineBindPoint;
        }

        set
        {
            ((global::VkDescriptorUpdateTemplateCreateInfo.__Internal*)__Instance)->pipelineBindPoint = value;
        }
    }

    public global::VkPipelineLayoutT PipelineLayout
    {
        get
        {
            global::VkPipelineLayoutT __result0;
            if (((global::VkDescriptorUpdateTemplateCreateInfo.__Internal*) __Instance)->pipelineLayout == IntPtr.Zero) __result0 = null;
            else if (global::VkPipelineLayoutT.NativeToManagedMap.ContainsKey(((global::VkDescriptorUpdateTemplateCreateInfo.__Internal*) __Instance)->pipelineLayout))
                __result0 = (global::VkPipelineLayoutT) global::VkPipelineLayoutT.NativeToManagedMap[((global::VkDescriptorUpdateTemplateCreateInfo.__Internal*) __Instance)->pipelineLayout];
            else __result0 = global::VkPipelineLayoutT.__CreateInstance(((global::VkDescriptorUpdateTemplateCreateInfo.__Internal*) __Instance)->pipelineLayout);
            return __result0;
        }

        set
        {
            ((global::VkDescriptorUpdateTemplateCreateInfo.__Internal*)__Instance)->pipelineLayout = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint Set
    {
        get
        {
            return ((global::VkDescriptorUpdateTemplateCreateInfo.__Internal*) __Instance)->set;
        }

        set
        {
            ((global::VkDescriptorUpdateTemplateCreateInfo.__Internal*)__Instance)->set = value;
        }
    }
}

public unsafe partial class VkExternalMemoryProperties : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 12)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint externalMemoryFeatures;

        [FieldOffset(4)]
        internal uint exportFromImportedHandleTypes;

        [FieldOffset(8)]
        internal uint compatibleHandleTypes;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkExternalMemoryProperties> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkExternalMemoryProperties>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkExternalMemoryProperties __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkExternalMemoryProperties(native.ToPointer(), skipVTables);
    }

    internal static global::VkExternalMemoryProperties __CreateInstance(global::VkExternalMemoryProperties.__Internal native, bool skipVTables = false)
    {
        return new global::VkExternalMemoryProperties(native, skipVTables);
    }

    private static void* __CopyValue(global::VkExternalMemoryProperties.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkExternalMemoryProperties.__Internal));
        *(global::VkExternalMemoryProperties.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkExternalMemoryProperties(global::VkExternalMemoryProperties.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkExternalMemoryProperties(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkExternalMemoryProperties()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkExternalMemoryProperties __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint ExternalMemoryFeatures
    {
        get
        {
            return ((global::VkExternalMemoryProperties.__Internal*) __Instance)->externalMemoryFeatures;
        }

        set
        {
            ((global::VkExternalMemoryProperties.__Internal*)__Instance)->externalMemoryFeatures = value;
        }
    }

    public uint ExportFromImportedHandleTypes
    {
        get
        {
            return ((global::VkExternalMemoryProperties.__Internal*) __Instance)->exportFromImportedHandleTypes;
        }

        set
        {
            ((global::VkExternalMemoryProperties.__Internal*)__Instance)->exportFromImportedHandleTypes = value;
        }
    }

    public uint CompatibleHandleTypes
    {
        get
        {
            return ((global::VkExternalMemoryProperties.__Internal*) __Instance)->compatibleHandleTypes;
        }

        set
        {
            ((global::VkExternalMemoryProperties.__Internal*)__Instance)->compatibleHandleTypes = value;
        }
    }
}

public unsafe partial class VkPhysicalDeviceExternalImageFormatInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkExternalMemoryHandleTypeFlagBits handleType;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceExternalImageFormatInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceExternalImageFormatInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceExternalImageFormatInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceExternalImageFormatInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceExternalImageFormatInfo __CreateInstance(global::VkPhysicalDeviceExternalImageFormatInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceExternalImageFormatInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceExternalImageFormatInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceExternalImageFormatInfo.__Internal));
        *(global::VkPhysicalDeviceExternalImageFormatInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceExternalImageFormatInfo(global::VkPhysicalDeviceExternalImageFormatInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceExternalImageFormatInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceExternalImageFormatInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceExternalImageFormatInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDeviceExternalImageFormatInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDeviceExternalImageFormatInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDeviceExternalImageFormatInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDeviceExternalImageFormatInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkExternalMemoryHandleTypeFlagBits HandleType
    {
        get
        {
            return ((global::VkPhysicalDeviceExternalImageFormatInfo.__Internal*) __Instance)->handleType;
        }

        set
        {
            ((global::VkPhysicalDeviceExternalImageFormatInfo.__Internal*)__Instance)->handleType = value;
        }
    }
}

public unsafe partial class VkExternalImageFormatProperties : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkExternalMemoryProperties.__Internal externalMemoryProperties;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkExternalImageFormatProperties> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkExternalImageFormatProperties>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkExternalImageFormatProperties __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkExternalImageFormatProperties(native.ToPointer(), skipVTables);
    }

    internal static global::VkExternalImageFormatProperties __CreateInstance(global::VkExternalImageFormatProperties.__Internal native, bool skipVTables = false)
    {
        return new global::VkExternalImageFormatProperties(native, skipVTables);
    }

    private static void* __CopyValue(global::VkExternalImageFormatProperties.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkExternalImageFormatProperties.__Internal));
        *(global::VkExternalImageFormatProperties.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkExternalImageFormatProperties(global::VkExternalImageFormatProperties.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkExternalImageFormatProperties(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkExternalImageFormatProperties()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkExternalImageFormatProperties __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkExternalImageFormatProperties.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkExternalImageFormatProperties.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkExternalImageFormatProperties.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkExternalImageFormatProperties.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkExternalMemoryProperties ExternalMemoryProperties
    {
        get
        {
            return global::VkExternalMemoryProperties.__CreateInstance(new global::System.IntPtr(&((global::VkExternalImageFormatProperties.__Internal*) __Instance)->externalMemoryProperties));
        }

        set
        {
            ((global::VkExternalImageFormatProperties.__Internal*)__Instance)->externalMemoryProperties = ReferenceEquals(value, null) ? new global::VkExternalMemoryProperties.__Internal() : *(global::VkExternalMemoryProperties.__Internal*) value.__Instance;
        }
    }
}

public unsafe partial class VkPhysicalDeviceExternalBufferInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(20)]
        internal uint usage;

        [FieldOffset(24)]
        internal global::VkExternalMemoryHandleTypeFlagBits handleType;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceExternalBufferInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceExternalBufferInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceExternalBufferInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceExternalBufferInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceExternalBufferInfo __CreateInstance(global::VkPhysicalDeviceExternalBufferInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceExternalBufferInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceExternalBufferInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceExternalBufferInfo.__Internal));
        *(global::VkPhysicalDeviceExternalBufferInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceExternalBufferInfo(global::VkPhysicalDeviceExternalBufferInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceExternalBufferInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceExternalBufferInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceExternalBufferInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDeviceExternalBufferInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDeviceExternalBufferInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDeviceExternalBufferInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDeviceExternalBufferInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkPhysicalDeviceExternalBufferInfo.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkPhysicalDeviceExternalBufferInfo.__Internal*)__Instance)->flags = value;
        }
    }

    public uint Usage
    {
        get
        {
            return ((global::VkPhysicalDeviceExternalBufferInfo.__Internal*) __Instance)->usage;
        }

        set
        {
            ((global::VkPhysicalDeviceExternalBufferInfo.__Internal*)__Instance)->usage = value;
        }
    }

    public global::VkExternalMemoryHandleTypeFlagBits HandleType
    {
        get
        {
            return ((global::VkPhysicalDeviceExternalBufferInfo.__Internal*) __Instance)->handleType;
        }

        set
        {
            ((global::VkPhysicalDeviceExternalBufferInfo.__Internal*)__Instance)->handleType = value;
        }
    }
}

public unsafe partial class VkExternalBufferProperties : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkExternalMemoryProperties.__Internal externalMemoryProperties;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkExternalBufferProperties> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkExternalBufferProperties>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkExternalBufferProperties __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkExternalBufferProperties(native.ToPointer(), skipVTables);
    }

    internal static global::VkExternalBufferProperties __CreateInstance(global::VkExternalBufferProperties.__Internal native, bool skipVTables = false)
    {
        return new global::VkExternalBufferProperties(native, skipVTables);
    }

    private static void* __CopyValue(global::VkExternalBufferProperties.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkExternalBufferProperties.__Internal));
        *(global::VkExternalBufferProperties.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkExternalBufferProperties(global::VkExternalBufferProperties.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkExternalBufferProperties(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkExternalBufferProperties()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkExternalBufferProperties __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkExternalBufferProperties.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkExternalBufferProperties.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkExternalBufferProperties.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkExternalBufferProperties.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkExternalMemoryProperties ExternalMemoryProperties
    {
        get
        {
            return global::VkExternalMemoryProperties.__CreateInstance(new global::System.IntPtr(&((global::VkExternalBufferProperties.__Internal*) __Instance)->externalMemoryProperties));
        }

        set
        {
            ((global::VkExternalBufferProperties.__Internal*)__Instance)->externalMemoryProperties = ReferenceEquals(value, null) ? new global::VkExternalMemoryProperties.__Internal() : *(global::VkExternalMemoryProperties.__Internal*) value.__Instance;
        }
    }
}

public unsafe partial class VkPhysicalDeviceIDProperties : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 64)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal fixed byte deviceUUID[16];

        [FieldOffset(32)]
        internal fixed byte driverUUID[16];

        [FieldOffset(48)]
        internal fixed byte deviceLUID[8];

        [FieldOffset(56)]
        internal uint deviceNodeMask;

        [FieldOffset(60)]
        internal uint deviceLUIDValid;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceIDProperties> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceIDProperties>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceIDProperties __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceIDProperties(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceIDProperties __CreateInstance(global::VkPhysicalDeviceIDProperties.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceIDProperties(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceIDProperties.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceIDProperties.__Internal));
        *(global::VkPhysicalDeviceIDProperties.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceIDProperties(global::VkPhysicalDeviceIDProperties.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceIDProperties(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceIDProperties()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceIDProperties __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDeviceIDProperties.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDeviceIDProperties.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDeviceIDProperties.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDeviceIDProperties.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public byte[] DeviceUUID
    {
        get
        {
            byte[] __value = null;
            if (((global::VkPhysicalDeviceIDProperties.__Internal*) __Instance)->deviceUUID != null)
            {
                __value = new byte[16];
                for (int i = 0; i < 16; i++)
                    __value[i] = ((global::VkPhysicalDeviceIDProperties.__Internal*) __Instance)->deviceUUID[i];
            }
            return __value;
        }

        set
        {
            if (value != null)
            {
                for (int i = 0; i < 16; i++)
                    ((global::VkPhysicalDeviceIDProperties.__Internal*)__Instance)->deviceUUID[i] = value[i];
            }
        }
    }

    public byte[] DriverUUID
    {
        get
        {
            byte[] __value = null;
            if (((global::VkPhysicalDeviceIDProperties.__Internal*) __Instance)->driverUUID != null)
            {
                __value = new byte[16];
                for (int i = 0; i < 16; i++)
                    __value[i] = ((global::VkPhysicalDeviceIDProperties.__Internal*) __Instance)->driverUUID[i];
            }
            return __value;
        }

        set
        {
            if (value != null)
            {
                for (int i = 0; i < 16; i++)
                    ((global::VkPhysicalDeviceIDProperties.__Internal*)__Instance)->driverUUID[i] = value[i];
            }
        }
    }

    public byte[] DeviceLUID
    {
        get
        {
            byte[] __value = null;
            if (((global::VkPhysicalDeviceIDProperties.__Internal*) __Instance)->deviceLUID != null)
            {
                __value = new byte[8];
                for (int i = 0; i < 8; i++)
                    __value[i] = ((global::VkPhysicalDeviceIDProperties.__Internal*) __Instance)->deviceLUID[i];
            }
            return __value;
        }

        set
        {
            if (value != null)
            {
                for (int i = 0; i < 8; i++)
                    ((global::VkPhysicalDeviceIDProperties.__Internal*)__Instance)->deviceLUID[i] = value[i];
            }
        }
    }

    public uint DeviceNodeMask
    {
        get
        {
            return ((global::VkPhysicalDeviceIDProperties.__Internal*) __Instance)->deviceNodeMask;
        }

        set
        {
            ((global::VkPhysicalDeviceIDProperties.__Internal*)__Instance)->deviceNodeMask = value;
        }
    }

    public uint DeviceLUIDValid
    {
        get
        {
            return ((global::VkPhysicalDeviceIDProperties.__Internal*) __Instance)->deviceLUIDValid;
        }

        set
        {
            ((global::VkPhysicalDeviceIDProperties.__Internal*)__Instance)->deviceLUIDValid = value;
        }
    }
}

public unsafe partial class VkExternalMemoryImageCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint handleTypes;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkExternalMemoryImageCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkExternalMemoryImageCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkExternalMemoryImageCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkExternalMemoryImageCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkExternalMemoryImageCreateInfo __CreateInstance(global::VkExternalMemoryImageCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkExternalMemoryImageCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkExternalMemoryImageCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkExternalMemoryImageCreateInfo.__Internal));
        *(global::VkExternalMemoryImageCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkExternalMemoryImageCreateInfo(global::VkExternalMemoryImageCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkExternalMemoryImageCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkExternalMemoryImageCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkExternalMemoryImageCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkExternalMemoryImageCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkExternalMemoryImageCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkExternalMemoryImageCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkExternalMemoryImageCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint HandleTypes
    {
        get
        {
            return ((global::VkExternalMemoryImageCreateInfo.__Internal*) __Instance)->handleTypes;
        }

        set
        {
            ((global::VkExternalMemoryImageCreateInfo.__Internal*)__Instance)->handleTypes = value;
        }
    }
}

public unsafe partial class VkExternalMemoryBufferCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint handleTypes;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkExternalMemoryBufferCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkExternalMemoryBufferCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkExternalMemoryBufferCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkExternalMemoryBufferCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkExternalMemoryBufferCreateInfo __CreateInstance(global::VkExternalMemoryBufferCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkExternalMemoryBufferCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkExternalMemoryBufferCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkExternalMemoryBufferCreateInfo.__Internal));
        *(global::VkExternalMemoryBufferCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkExternalMemoryBufferCreateInfo(global::VkExternalMemoryBufferCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkExternalMemoryBufferCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkExternalMemoryBufferCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkExternalMemoryBufferCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkExternalMemoryBufferCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkExternalMemoryBufferCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkExternalMemoryBufferCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkExternalMemoryBufferCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint HandleTypes
    {
        get
        {
            return ((global::VkExternalMemoryBufferCreateInfo.__Internal*) __Instance)->handleTypes;
        }

        set
        {
            ((global::VkExternalMemoryBufferCreateInfo.__Internal*)__Instance)->handleTypes = value;
        }
    }
}

public unsafe partial class VkExportMemoryAllocateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint handleTypes;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkExportMemoryAllocateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkExportMemoryAllocateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkExportMemoryAllocateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkExportMemoryAllocateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkExportMemoryAllocateInfo __CreateInstance(global::VkExportMemoryAllocateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkExportMemoryAllocateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkExportMemoryAllocateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkExportMemoryAllocateInfo.__Internal));
        *(global::VkExportMemoryAllocateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkExportMemoryAllocateInfo(global::VkExportMemoryAllocateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkExportMemoryAllocateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkExportMemoryAllocateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkExportMemoryAllocateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkExportMemoryAllocateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkExportMemoryAllocateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkExportMemoryAllocateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkExportMemoryAllocateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint HandleTypes
    {
        get
        {
            return ((global::VkExportMemoryAllocateInfo.__Internal*) __Instance)->handleTypes;
        }

        set
        {
            ((global::VkExportMemoryAllocateInfo.__Internal*)__Instance)->handleTypes = value;
        }
    }
}

public unsafe partial class VkPhysicalDeviceExternalFenceInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkExternalFenceHandleTypeFlagBits handleType;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceExternalFenceInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceExternalFenceInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceExternalFenceInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceExternalFenceInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceExternalFenceInfo __CreateInstance(global::VkPhysicalDeviceExternalFenceInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceExternalFenceInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceExternalFenceInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceExternalFenceInfo.__Internal));
        *(global::VkPhysicalDeviceExternalFenceInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceExternalFenceInfo(global::VkPhysicalDeviceExternalFenceInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceExternalFenceInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceExternalFenceInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceExternalFenceInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDeviceExternalFenceInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDeviceExternalFenceInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDeviceExternalFenceInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDeviceExternalFenceInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkExternalFenceHandleTypeFlagBits HandleType
    {
        get
        {
            return ((global::VkPhysicalDeviceExternalFenceInfo.__Internal*) __Instance)->handleType;
        }

        set
        {
            ((global::VkPhysicalDeviceExternalFenceInfo.__Internal*)__Instance)->handleType = value;
        }
    }
}

public unsafe partial class VkExternalFenceProperties : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint exportFromImportedHandleTypes;

        [FieldOffset(20)]
        internal uint compatibleHandleTypes;

        [FieldOffset(24)]
        internal uint externalFenceFeatures;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkExternalFenceProperties> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkExternalFenceProperties>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkExternalFenceProperties __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkExternalFenceProperties(native.ToPointer(), skipVTables);
    }

    internal static global::VkExternalFenceProperties __CreateInstance(global::VkExternalFenceProperties.__Internal native, bool skipVTables = false)
    {
        return new global::VkExternalFenceProperties(native, skipVTables);
    }

    private static void* __CopyValue(global::VkExternalFenceProperties.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkExternalFenceProperties.__Internal));
        *(global::VkExternalFenceProperties.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkExternalFenceProperties(global::VkExternalFenceProperties.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkExternalFenceProperties(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkExternalFenceProperties()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkExternalFenceProperties __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkExternalFenceProperties.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkExternalFenceProperties.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkExternalFenceProperties.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkExternalFenceProperties.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint ExportFromImportedHandleTypes
    {
        get
        {
            return ((global::VkExternalFenceProperties.__Internal*) __Instance)->exportFromImportedHandleTypes;
        }

        set
        {
            ((global::VkExternalFenceProperties.__Internal*)__Instance)->exportFromImportedHandleTypes = value;
        }
    }

    public uint CompatibleHandleTypes
    {
        get
        {
            return ((global::VkExternalFenceProperties.__Internal*) __Instance)->compatibleHandleTypes;
        }

        set
        {
            ((global::VkExternalFenceProperties.__Internal*)__Instance)->compatibleHandleTypes = value;
        }
    }

    public uint ExternalFenceFeatures
    {
        get
        {
            return ((global::VkExternalFenceProperties.__Internal*) __Instance)->externalFenceFeatures;
        }

        set
        {
            ((global::VkExternalFenceProperties.__Internal*)__Instance)->externalFenceFeatures = value;
        }
    }
}

public unsafe partial class VkExportFenceCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint handleTypes;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkExportFenceCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkExportFenceCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkExportFenceCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkExportFenceCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkExportFenceCreateInfo __CreateInstance(global::VkExportFenceCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkExportFenceCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkExportFenceCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkExportFenceCreateInfo.__Internal));
        *(global::VkExportFenceCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkExportFenceCreateInfo(global::VkExportFenceCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkExportFenceCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkExportFenceCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkExportFenceCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkExportFenceCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkExportFenceCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkExportFenceCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkExportFenceCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint HandleTypes
    {
        get
        {
            return ((global::VkExportFenceCreateInfo.__Internal*) __Instance)->handleTypes;
        }

        set
        {
            ((global::VkExportFenceCreateInfo.__Internal*)__Instance)->handleTypes = value;
        }
    }
}

public unsafe partial class VkExportSemaphoreCreateInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint handleTypes;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkExportSemaphoreCreateInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkExportSemaphoreCreateInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkExportSemaphoreCreateInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkExportSemaphoreCreateInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkExportSemaphoreCreateInfo __CreateInstance(global::VkExportSemaphoreCreateInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkExportSemaphoreCreateInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkExportSemaphoreCreateInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkExportSemaphoreCreateInfo.__Internal));
        *(global::VkExportSemaphoreCreateInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkExportSemaphoreCreateInfo(global::VkExportSemaphoreCreateInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkExportSemaphoreCreateInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkExportSemaphoreCreateInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkExportSemaphoreCreateInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkExportSemaphoreCreateInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkExportSemaphoreCreateInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkExportSemaphoreCreateInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkExportSemaphoreCreateInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint HandleTypes
    {
        get
        {
            return ((global::VkExportSemaphoreCreateInfo.__Internal*) __Instance)->handleTypes;
        }

        set
        {
            ((global::VkExportSemaphoreCreateInfo.__Internal*)__Instance)->handleTypes = value;
        }
    }
}

public unsafe partial class VkPhysicalDeviceExternalSemaphoreInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkExternalSemaphoreHandleTypeFlagBits handleType;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceExternalSemaphoreInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceExternalSemaphoreInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceExternalSemaphoreInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceExternalSemaphoreInfo(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceExternalSemaphoreInfo __CreateInstance(global::VkPhysicalDeviceExternalSemaphoreInfo.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceExternalSemaphoreInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceExternalSemaphoreInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceExternalSemaphoreInfo.__Internal));
        *(global::VkPhysicalDeviceExternalSemaphoreInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceExternalSemaphoreInfo(global::VkPhysicalDeviceExternalSemaphoreInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceExternalSemaphoreInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceExternalSemaphoreInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceExternalSemaphoreInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDeviceExternalSemaphoreInfo.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDeviceExternalSemaphoreInfo.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDeviceExternalSemaphoreInfo.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDeviceExternalSemaphoreInfo.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkExternalSemaphoreHandleTypeFlagBits HandleType
    {
        get
        {
            return ((global::VkPhysicalDeviceExternalSemaphoreInfo.__Internal*) __Instance)->handleType;
        }

        set
        {
            ((global::VkPhysicalDeviceExternalSemaphoreInfo.__Internal*)__Instance)->handleType = value;
        }
    }
}

public unsafe partial class VkExternalSemaphoreProperties : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint exportFromImportedHandleTypes;

        [FieldOffset(20)]
        internal uint compatibleHandleTypes;

        [FieldOffset(24)]
        internal uint externalSemaphoreFeatures;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkExternalSemaphoreProperties> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkExternalSemaphoreProperties>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkExternalSemaphoreProperties __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkExternalSemaphoreProperties(native.ToPointer(), skipVTables);
    }

    internal static global::VkExternalSemaphoreProperties __CreateInstance(global::VkExternalSemaphoreProperties.__Internal native, bool skipVTables = false)
    {
        return new global::VkExternalSemaphoreProperties(native, skipVTables);
    }

    private static void* __CopyValue(global::VkExternalSemaphoreProperties.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkExternalSemaphoreProperties.__Internal));
        *(global::VkExternalSemaphoreProperties.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkExternalSemaphoreProperties(global::VkExternalSemaphoreProperties.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkExternalSemaphoreProperties(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkExternalSemaphoreProperties()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkExternalSemaphoreProperties __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkExternalSemaphoreProperties.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkExternalSemaphoreProperties.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkExternalSemaphoreProperties.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkExternalSemaphoreProperties.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint ExportFromImportedHandleTypes
    {
        get
        {
            return ((global::VkExternalSemaphoreProperties.__Internal*) __Instance)->exportFromImportedHandleTypes;
        }

        set
        {
            ((global::VkExternalSemaphoreProperties.__Internal*)__Instance)->exportFromImportedHandleTypes = value;
        }
    }

    public uint CompatibleHandleTypes
    {
        get
        {
            return ((global::VkExternalSemaphoreProperties.__Internal*) __Instance)->compatibleHandleTypes;
        }

        set
        {
            ((global::VkExternalSemaphoreProperties.__Internal*)__Instance)->compatibleHandleTypes = value;
        }
    }

    public uint ExternalSemaphoreFeatures
    {
        get
        {
            return ((global::VkExternalSemaphoreProperties.__Internal*) __Instance)->externalSemaphoreFeatures;
        }

        set
        {
            ((global::VkExternalSemaphoreProperties.__Internal*)__Instance)->externalSemaphoreFeatures = value;
        }
    }
}

public unsafe partial class VkPhysicalDeviceMaintenance3Properties : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint maxPerSetDescriptors;

        [FieldOffset(24)]
        internal ulong maxMemoryAllocationSize;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceMaintenance3Properties> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceMaintenance3Properties>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceMaintenance3Properties __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceMaintenance3Properties(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceMaintenance3Properties __CreateInstance(global::VkPhysicalDeviceMaintenance3Properties.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceMaintenance3Properties(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceMaintenance3Properties.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceMaintenance3Properties.__Internal));
        *(global::VkPhysicalDeviceMaintenance3Properties.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceMaintenance3Properties(global::VkPhysicalDeviceMaintenance3Properties.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceMaintenance3Properties(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceMaintenance3Properties()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceMaintenance3Properties __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDeviceMaintenance3Properties.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDeviceMaintenance3Properties.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDeviceMaintenance3Properties.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDeviceMaintenance3Properties.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint MaxPerSetDescriptors
    {
        get
        {
            return ((global::VkPhysicalDeviceMaintenance3Properties.__Internal*) __Instance)->maxPerSetDescriptors;
        }

        set
        {
            ((global::VkPhysicalDeviceMaintenance3Properties.__Internal*)__Instance)->maxPerSetDescriptors = value;
        }
    }

    public ulong MaxMemoryAllocationSize
    {
        get
        {
            return ((global::VkPhysicalDeviceMaintenance3Properties.__Internal*) __Instance)->maxMemoryAllocationSize;
        }

        set
        {
            ((global::VkPhysicalDeviceMaintenance3Properties.__Internal*)__Instance)->maxMemoryAllocationSize = value;
        }
    }
}

public unsafe partial class VkDescriptorSetLayoutSupport : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint supported;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorSetLayoutSupport> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorSetLayoutSupport>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDescriptorSetLayoutSupport __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDescriptorSetLayoutSupport(native.ToPointer(), skipVTables);
    }

    internal static global::VkDescriptorSetLayoutSupport __CreateInstance(global::VkDescriptorSetLayoutSupport.__Internal native, bool skipVTables = false)
    {
        return new global::VkDescriptorSetLayoutSupport(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDescriptorSetLayoutSupport.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDescriptorSetLayoutSupport.__Internal));
        *(global::VkDescriptorSetLayoutSupport.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDescriptorSetLayoutSupport(global::VkDescriptorSetLayoutSupport.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDescriptorSetLayoutSupport(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDescriptorSetLayoutSupport()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDescriptorSetLayoutSupport __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDescriptorSetLayoutSupport.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDescriptorSetLayoutSupport.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDescriptorSetLayoutSupport.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDescriptorSetLayoutSupport.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Supported
    {
        get
        {
            return ((global::VkDescriptorSetLayoutSupport.__Internal*) __Instance)->supported;
        }

        set
        {
            ((global::VkDescriptorSetLayoutSupport.__Internal*)__Instance)->supported = value;
        }
    }
}

public unsafe partial class VkPhysicalDeviceShaderDrawParameterFeatures : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint shaderDrawParameters;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceShaderDrawParameterFeatures> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceShaderDrawParameterFeatures>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceShaderDrawParameterFeatures __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceShaderDrawParameterFeatures(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceShaderDrawParameterFeatures __CreateInstance(global::VkPhysicalDeviceShaderDrawParameterFeatures.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceShaderDrawParameterFeatures(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceShaderDrawParameterFeatures.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceShaderDrawParameterFeatures.__Internal));
        *(global::VkPhysicalDeviceShaderDrawParameterFeatures.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceShaderDrawParameterFeatures(global::VkPhysicalDeviceShaderDrawParameterFeatures.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceShaderDrawParameterFeatures(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceShaderDrawParameterFeatures()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceShaderDrawParameterFeatures __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDeviceShaderDrawParameterFeatures.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDeviceShaderDrawParameterFeatures.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDeviceShaderDrawParameterFeatures.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDeviceShaderDrawParameterFeatures.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint ShaderDrawParameters
    {
        get
        {
            return ((global::VkPhysicalDeviceShaderDrawParameterFeatures.__Internal*) __Instance)->shaderDrawParameters;
        }

        set
        {
            ((global::VkPhysicalDeviceShaderDrawParameterFeatures.__Internal*)__Instance)->shaderDrawParameters = value;
        }
    }
}

public unsafe partial class VkSurfaceKHR_T
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSurfaceKHR_T> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSurfaceKHR_T>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSurfaceKHR_T __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSurfaceKHR_T(native.ToPointer(), skipVTables);
    }

    internal static global::VkSurfaceKHR_T __CreateInstance(global::VkSurfaceKHR_T.__Internal native, bool skipVTables = false)
    {
        return new global::VkSurfaceKHR_T(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSurfaceKHR_T.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSurfaceKHR_T.__Internal));
        *(global::VkSurfaceKHR_T.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSurfaceKHR_T(global::VkSurfaceKHR_T.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSurfaceKHR_T(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSurfaceKHR_T()
    {
        Dispose(false);
    }
}

public unsafe partial class VkSurfaceCapabilitiesKHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 52)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint minImageCount;

        [FieldOffset(4)]
        internal uint maxImageCount;

        [FieldOffset(8)]
        internal global::VkExtent2D.__Internal currentExtent;

        [FieldOffset(16)]
        internal global::VkExtent2D.__Internal minImageExtent;

        [FieldOffset(24)]
        internal global::VkExtent2D.__Internal maxImageExtent;

        [FieldOffset(32)]
        internal uint maxImageArrayLayers;

        [FieldOffset(36)]
        internal uint supportedTransforms;

        [FieldOffset(40)]
        internal global::VkSurfaceTransformFlagBitsKHR currentTransform;

        [FieldOffset(44)]
        internal uint supportedCompositeAlpha;

        [FieldOffset(48)]
        internal uint supportedUsageFlags;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSurfaceCapabilitiesKHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSurfaceCapabilitiesKHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSurfaceCapabilitiesKHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSurfaceCapabilitiesKHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkSurfaceCapabilitiesKHR __CreateInstance(global::VkSurfaceCapabilitiesKHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkSurfaceCapabilitiesKHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSurfaceCapabilitiesKHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSurfaceCapabilitiesKHR.__Internal));
        *(global::VkSurfaceCapabilitiesKHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSurfaceCapabilitiesKHR(global::VkSurfaceCapabilitiesKHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSurfaceCapabilitiesKHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSurfaceCapabilitiesKHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkSurfaceCapabilitiesKHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint MinImageCount
    {
        get
        {
            return ((global::VkSurfaceCapabilitiesKHR.__Internal*) __Instance)->minImageCount;
        }

        set
        {
            ((global::VkSurfaceCapabilitiesKHR.__Internal*)__Instance)->minImageCount = value;
        }
    }

    public uint MaxImageCount
    {
        get
        {
            return ((global::VkSurfaceCapabilitiesKHR.__Internal*) __Instance)->maxImageCount;
        }

        set
        {
            ((global::VkSurfaceCapabilitiesKHR.__Internal*)__Instance)->maxImageCount = value;
        }
    }

    public global::VkExtent2D CurrentExtent
    {
        get
        {
            return global::VkExtent2D.__CreateInstance(new global::System.IntPtr(&((global::VkSurfaceCapabilitiesKHR.__Internal*) __Instance)->currentExtent));
        }

        set
        {
            ((global::VkSurfaceCapabilitiesKHR.__Internal*)__Instance)->currentExtent = ReferenceEquals(value, null) ? new global::VkExtent2D.__Internal() : *(global::VkExtent2D.__Internal*) value.__Instance;
        }
    }

    public global::VkExtent2D MinImageExtent
    {
        get
        {
            return global::VkExtent2D.__CreateInstance(new global::System.IntPtr(&((global::VkSurfaceCapabilitiesKHR.__Internal*) __Instance)->minImageExtent));
        }

        set
        {
            ((global::VkSurfaceCapabilitiesKHR.__Internal*)__Instance)->minImageExtent = ReferenceEquals(value, null) ? new global::VkExtent2D.__Internal() : *(global::VkExtent2D.__Internal*) value.__Instance;
        }
    }

    public global::VkExtent2D MaxImageExtent
    {
        get
        {
            return global::VkExtent2D.__CreateInstance(new global::System.IntPtr(&((global::VkSurfaceCapabilitiesKHR.__Internal*) __Instance)->maxImageExtent));
        }

        set
        {
            ((global::VkSurfaceCapabilitiesKHR.__Internal*)__Instance)->maxImageExtent = ReferenceEquals(value, null) ? new global::VkExtent2D.__Internal() : *(global::VkExtent2D.__Internal*) value.__Instance;
        }
    }

    public uint MaxImageArrayLayers
    {
        get
        {
            return ((global::VkSurfaceCapabilitiesKHR.__Internal*) __Instance)->maxImageArrayLayers;
        }

        set
        {
            ((global::VkSurfaceCapabilitiesKHR.__Internal*)__Instance)->maxImageArrayLayers = value;
        }
    }

    public uint SupportedTransforms
    {
        get
        {
            return ((global::VkSurfaceCapabilitiesKHR.__Internal*) __Instance)->supportedTransforms;
        }

        set
        {
            ((global::VkSurfaceCapabilitiesKHR.__Internal*)__Instance)->supportedTransforms = value;
        }
    }

    public global::VkSurfaceTransformFlagBitsKHR CurrentTransform
    {
        get
        {
            return ((global::VkSurfaceCapabilitiesKHR.__Internal*) __Instance)->currentTransform;
        }

        set
        {
            ((global::VkSurfaceCapabilitiesKHR.__Internal*)__Instance)->currentTransform = value;
        }
    }

    public uint SupportedCompositeAlpha
    {
        get
        {
            return ((global::VkSurfaceCapabilitiesKHR.__Internal*) __Instance)->supportedCompositeAlpha;
        }

        set
        {
            ((global::VkSurfaceCapabilitiesKHR.__Internal*)__Instance)->supportedCompositeAlpha = value;
        }
    }

    public uint SupportedUsageFlags
    {
        get
        {
            return ((global::VkSurfaceCapabilitiesKHR.__Internal*) __Instance)->supportedUsageFlags;
        }

        set
        {
            ((global::VkSurfaceCapabilitiesKHR.__Internal*)__Instance)->supportedUsageFlags = value;
        }
    }
}

public unsafe partial class VkSurfaceFormatKHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkFormat format;

        [FieldOffset(4)]
        internal global::VkColorSpaceKHR colorSpace;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSurfaceFormatKHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSurfaceFormatKHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSurfaceFormatKHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSurfaceFormatKHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkSurfaceFormatKHR __CreateInstance(global::VkSurfaceFormatKHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkSurfaceFormatKHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSurfaceFormatKHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSurfaceFormatKHR.__Internal));
        *(global::VkSurfaceFormatKHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSurfaceFormatKHR(global::VkSurfaceFormatKHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSurfaceFormatKHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSurfaceFormatKHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkSurfaceFormatKHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkFormat Format
    {
        get
        {
            return ((global::VkSurfaceFormatKHR.__Internal*) __Instance)->format;
        }

        set
        {
            ((global::VkSurfaceFormatKHR.__Internal*)__Instance)->format = value;
        }
    }

    public global::VkColorSpaceKHR ColorSpace
    {
        get
        {
            return ((global::VkSurfaceFormatKHR.__Internal*) __Instance)->colorSpace;
        }

        set
        {
            ((global::VkSurfaceFormatKHR.__Internal*)__Instance)->colorSpace = value;
        }
    }
}

public unsafe partial class VkSwapchainKHR_T
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSwapchainKHR_T> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSwapchainKHR_T>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSwapchainKHR_T __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSwapchainKHR_T(native.ToPointer(), skipVTables);
    }

    internal static global::VkSwapchainKHR_T __CreateInstance(global::VkSwapchainKHR_T.__Internal native, bool skipVTables = false)
    {
        return new global::VkSwapchainKHR_T(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSwapchainKHR_T.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSwapchainKHR_T.__Internal));
        *(global::VkSwapchainKHR_T.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSwapchainKHR_T(global::VkSwapchainKHR_T.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSwapchainKHR_T(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSwapchainKHR_T()
    {
        Dispose(false);
    }
}

public unsafe partial class VkSwapchainCreateInfoKHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 104)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(24)]
        internal global::System.IntPtr surface;

        [FieldOffset(32)]
        internal uint minImageCount;

        [FieldOffset(36)]
        internal global::VkFormat imageFormat;

        [FieldOffset(40)]
        internal global::VkColorSpaceKHR imageColorSpace;

        [FieldOffset(44)]
        internal global::VkExtent2D.__Internal imageExtent;

        [FieldOffset(52)]
        internal uint imageArrayLayers;

        [FieldOffset(56)]
        internal uint imageUsage;

        [FieldOffset(60)]
        internal global::VkSharingMode imageSharingMode;

        [FieldOffset(64)]
        internal uint queueFamilyIndexCount;

        [FieldOffset(72)]
        internal global::System.IntPtr pQueueFamilyIndices;

        [FieldOffset(80)]
        internal global::VkSurfaceTransformFlagBitsKHR preTransform;

        [FieldOffset(84)]
        internal global::VkCompositeAlphaFlagBitsKHR compositeAlpha;

        [FieldOffset(88)]
        internal global::VkPresentModeKHR presentMode;

        [FieldOffset(92)]
        internal uint clipped;

        [FieldOffset(96)]
        internal global::System.IntPtr oldSwapchain;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSwapchainCreateInfoKHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSwapchainCreateInfoKHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSwapchainCreateInfoKHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSwapchainCreateInfoKHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkSwapchainCreateInfoKHR __CreateInstance(global::VkSwapchainCreateInfoKHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkSwapchainCreateInfoKHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSwapchainCreateInfoKHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSwapchainCreateInfoKHR.__Internal));
        *(global::VkSwapchainCreateInfoKHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSwapchainCreateInfoKHR(global::VkSwapchainCreateInfoKHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSwapchainCreateInfoKHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSwapchainCreateInfoKHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkSwapchainCreateInfoKHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkSwapchainCreateInfoKHR.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkSwapchainCreateInfoKHR.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkSwapchainCreateInfoKHR.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkSwapchainCreateInfoKHR.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkSwapchainCreateInfoKHR.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkSwapchainCreateInfoKHR.__Internal*)__Instance)->flags = value;
        }
    }

    public global::VkSurfaceKHR_T Surface
    {
        get
        {
            global::VkSurfaceKHR_T __result0;
            if (((global::VkSwapchainCreateInfoKHR.__Internal*) __Instance)->surface == IntPtr.Zero) __result0 = null;
            else if (global::VkSurfaceKHR_T.NativeToManagedMap.ContainsKey(((global::VkSwapchainCreateInfoKHR.__Internal*) __Instance)->surface))
                __result0 = (global::VkSurfaceKHR_T) global::VkSurfaceKHR_T.NativeToManagedMap[((global::VkSwapchainCreateInfoKHR.__Internal*) __Instance)->surface];
            else __result0 = global::VkSurfaceKHR_T.__CreateInstance(((global::VkSwapchainCreateInfoKHR.__Internal*) __Instance)->surface);
            return __result0;
        }

        set
        {
            ((global::VkSwapchainCreateInfoKHR.__Internal*)__Instance)->surface = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint MinImageCount
    {
        get
        {
            return ((global::VkSwapchainCreateInfoKHR.__Internal*) __Instance)->minImageCount;
        }

        set
        {
            ((global::VkSwapchainCreateInfoKHR.__Internal*)__Instance)->minImageCount = value;
        }
    }

    public global::VkFormat ImageFormat
    {
        get
        {
            return ((global::VkSwapchainCreateInfoKHR.__Internal*) __Instance)->imageFormat;
        }

        set
        {
            ((global::VkSwapchainCreateInfoKHR.__Internal*)__Instance)->imageFormat = value;
        }
    }

    public global::VkColorSpaceKHR ImageColorSpace
    {
        get
        {
            return ((global::VkSwapchainCreateInfoKHR.__Internal*) __Instance)->imageColorSpace;
        }

        set
        {
            ((global::VkSwapchainCreateInfoKHR.__Internal*)__Instance)->imageColorSpace = value;
        }
    }

    public global::VkExtent2D ImageExtent
    {
        get
        {
            return global::VkExtent2D.__CreateInstance(new global::System.IntPtr(&((global::VkSwapchainCreateInfoKHR.__Internal*) __Instance)->imageExtent));
        }

        set
        {
            ((global::VkSwapchainCreateInfoKHR.__Internal*)__Instance)->imageExtent = ReferenceEquals(value, null) ? new global::VkExtent2D.__Internal() : *(global::VkExtent2D.__Internal*) value.__Instance;
        }
    }

    public uint ImageArrayLayers
    {
        get
        {
            return ((global::VkSwapchainCreateInfoKHR.__Internal*) __Instance)->imageArrayLayers;
        }

        set
        {
            ((global::VkSwapchainCreateInfoKHR.__Internal*)__Instance)->imageArrayLayers = value;
        }
    }

    public uint ImageUsage
    {
        get
        {
            return ((global::VkSwapchainCreateInfoKHR.__Internal*) __Instance)->imageUsage;
        }

        set
        {
            ((global::VkSwapchainCreateInfoKHR.__Internal*)__Instance)->imageUsage = value;
        }
    }

    public global::VkSharingMode ImageSharingMode
    {
        get
        {
            return ((global::VkSwapchainCreateInfoKHR.__Internal*) __Instance)->imageSharingMode;
        }

        set
        {
            ((global::VkSwapchainCreateInfoKHR.__Internal*)__Instance)->imageSharingMode = value;
        }
    }

    public uint QueueFamilyIndexCount
    {
        get
        {
            return ((global::VkSwapchainCreateInfoKHR.__Internal*) __Instance)->queueFamilyIndexCount;
        }

        set
        {
            ((global::VkSwapchainCreateInfoKHR.__Internal*)__Instance)->queueFamilyIndexCount = value;
        }
    }

    public uint* PQueueFamilyIndices
    {
        get
        {
            return (uint*) ((global::VkSwapchainCreateInfoKHR.__Internal*) __Instance)->pQueueFamilyIndices;
        }

        set
        {
            ((global::VkSwapchainCreateInfoKHR.__Internal*)__Instance)->pQueueFamilyIndices = (global::System.IntPtr) value;
        }
    }

    public global::VkSurfaceTransformFlagBitsKHR PreTransform
    {
        get
        {
            return ((global::VkSwapchainCreateInfoKHR.__Internal*) __Instance)->preTransform;
        }

        set
        {
            ((global::VkSwapchainCreateInfoKHR.__Internal*)__Instance)->preTransform = value;
        }
    }

    public global::VkCompositeAlphaFlagBitsKHR CompositeAlpha
    {
        get
        {
            return ((global::VkSwapchainCreateInfoKHR.__Internal*) __Instance)->compositeAlpha;
        }

        set
        {
            ((global::VkSwapchainCreateInfoKHR.__Internal*)__Instance)->compositeAlpha = value;
        }
    }

    public global::VkPresentModeKHR PresentMode
    {
        get
        {
            return ((global::VkSwapchainCreateInfoKHR.__Internal*) __Instance)->presentMode;
        }

        set
        {
            ((global::VkSwapchainCreateInfoKHR.__Internal*)__Instance)->presentMode = value;
        }
    }

    public uint Clipped
    {
        get
        {
            return ((global::VkSwapchainCreateInfoKHR.__Internal*) __Instance)->clipped;
        }

        set
        {
            ((global::VkSwapchainCreateInfoKHR.__Internal*)__Instance)->clipped = value;
        }
    }

    public global::VkSwapchainKHR_T OldSwapchain
    {
        get
        {
            global::VkSwapchainKHR_T __result0;
            if (((global::VkSwapchainCreateInfoKHR.__Internal*) __Instance)->oldSwapchain == IntPtr.Zero) __result0 = null;
            else if (global::VkSwapchainKHR_T.NativeToManagedMap.ContainsKey(((global::VkSwapchainCreateInfoKHR.__Internal*) __Instance)->oldSwapchain))
                __result0 = (global::VkSwapchainKHR_T) global::VkSwapchainKHR_T.NativeToManagedMap[((global::VkSwapchainCreateInfoKHR.__Internal*) __Instance)->oldSwapchain];
            else __result0 = global::VkSwapchainKHR_T.__CreateInstance(((global::VkSwapchainCreateInfoKHR.__Internal*) __Instance)->oldSwapchain);
            return __result0;
        }

        set
        {
            ((global::VkSwapchainCreateInfoKHR.__Internal*)__Instance)->oldSwapchain = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkPresentInfoKHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 64)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint waitSemaphoreCount;

        [FieldOffset(24)]
        internal global::System.IntPtr pWaitSemaphores;

        [FieldOffset(32)]
        internal uint swapchainCount;

        [FieldOffset(40)]
        internal global::System.IntPtr pSwapchains;

        [FieldOffset(48)]
        internal global::System.IntPtr pImageIndices;

        [FieldOffset(56)]
        internal global::System.IntPtr pResults;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPresentInfoKHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPresentInfoKHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPresentInfoKHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPresentInfoKHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkPresentInfoKHR __CreateInstance(global::VkPresentInfoKHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkPresentInfoKHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPresentInfoKHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPresentInfoKHR.__Internal));
        *(global::VkPresentInfoKHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPresentInfoKHR(global::VkPresentInfoKHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPresentInfoKHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPresentInfoKHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPresentInfoKHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPresentInfoKHR.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPresentInfoKHR.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPresentInfoKHR.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPresentInfoKHR.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint WaitSemaphoreCount
    {
        get
        {
            return ((global::VkPresentInfoKHR.__Internal*) __Instance)->waitSemaphoreCount;
        }

        set
        {
            ((global::VkPresentInfoKHR.__Internal*)__Instance)->waitSemaphoreCount = value;
        }
    }

    public global::VkSemaphoreT PWaitSemaphores
    {
        get
        {
            global::VkSemaphoreT __result0;
            if (((global::VkPresentInfoKHR.__Internal*) __Instance)->pWaitSemaphores == IntPtr.Zero) __result0 = null;
            else if (global::VkSemaphoreT.NativeToManagedMap.ContainsKey(((global::VkPresentInfoKHR.__Internal*) __Instance)->pWaitSemaphores))
                __result0 = (global::VkSemaphoreT) global::VkSemaphoreT.NativeToManagedMap[((global::VkPresentInfoKHR.__Internal*) __Instance)->pWaitSemaphores];
            else __result0 = global::VkSemaphoreT.__CreateInstance(((global::VkPresentInfoKHR.__Internal*) __Instance)->pWaitSemaphores);
            return __result0;
        }

        set
        {
            ((global::VkPresentInfoKHR.__Internal*)__Instance)->pWaitSemaphores = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint SwapchainCount
    {
        get
        {
            return ((global::VkPresentInfoKHR.__Internal*) __Instance)->swapchainCount;
        }

        set
        {
            ((global::VkPresentInfoKHR.__Internal*)__Instance)->swapchainCount = value;
        }
    }

    public global::VkSwapchainKHR_T PSwapchains
    {
        get
        {
            global::VkSwapchainKHR_T __result0;
            if (((global::VkPresentInfoKHR.__Internal*) __Instance)->pSwapchains == IntPtr.Zero) __result0 = null;
            else if (global::VkSwapchainKHR_T.NativeToManagedMap.ContainsKey(((global::VkPresentInfoKHR.__Internal*) __Instance)->pSwapchains))
                __result0 = (global::VkSwapchainKHR_T) global::VkSwapchainKHR_T.NativeToManagedMap[((global::VkPresentInfoKHR.__Internal*) __Instance)->pSwapchains];
            else __result0 = global::VkSwapchainKHR_T.__CreateInstance(((global::VkPresentInfoKHR.__Internal*) __Instance)->pSwapchains);
            return __result0;
        }

        set
        {
            ((global::VkPresentInfoKHR.__Internal*)__Instance)->pSwapchains = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint* PImageIndices
    {
        get
        {
            return (uint*) ((global::VkPresentInfoKHR.__Internal*) __Instance)->pImageIndices;
        }

        set
        {
            ((global::VkPresentInfoKHR.__Internal*)__Instance)->pImageIndices = (global::System.IntPtr) value;
        }
    }

    public global::VkResult* PResults
    {
        get
        {
            return ((global::VkPresentInfoKHR.__Internal*) __Instance)->pResults;
        }

        set
        {
            ((global::VkPresentInfoKHR.__Internal*)__Instance)->pResults = value;
        }
    }
}

public unsafe partial class VkImageSwapchainCreateInfoKHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::System.IntPtr swapchain;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageSwapchainCreateInfoKHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageSwapchainCreateInfoKHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkImageSwapchainCreateInfoKHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkImageSwapchainCreateInfoKHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkImageSwapchainCreateInfoKHR __CreateInstance(global::VkImageSwapchainCreateInfoKHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkImageSwapchainCreateInfoKHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkImageSwapchainCreateInfoKHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkImageSwapchainCreateInfoKHR.__Internal));
        *(global::VkImageSwapchainCreateInfoKHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkImageSwapchainCreateInfoKHR(global::VkImageSwapchainCreateInfoKHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkImageSwapchainCreateInfoKHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkImageSwapchainCreateInfoKHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkImageSwapchainCreateInfoKHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkImageSwapchainCreateInfoKHR.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkImageSwapchainCreateInfoKHR.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkImageSwapchainCreateInfoKHR.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkImageSwapchainCreateInfoKHR.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkSwapchainKHR_T Swapchain
    {
        get
        {
            global::VkSwapchainKHR_T __result0;
            if (((global::VkImageSwapchainCreateInfoKHR.__Internal*) __Instance)->swapchain == IntPtr.Zero) __result0 = null;
            else if (global::VkSwapchainKHR_T.NativeToManagedMap.ContainsKey(((global::VkImageSwapchainCreateInfoKHR.__Internal*) __Instance)->swapchain))
                __result0 = (global::VkSwapchainKHR_T) global::VkSwapchainKHR_T.NativeToManagedMap[((global::VkImageSwapchainCreateInfoKHR.__Internal*) __Instance)->swapchain];
            else __result0 = global::VkSwapchainKHR_T.__CreateInstance(((global::VkImageSwapchainCreateInfoKHR.__Internal*) __Instance)->swapchain);
            return __result0;
        }

        set
        {
            ((global::VkImageSwapchainCreateInfoKHR.__Internal*)__Instance)->swapchain = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkBindImageMemorySwapchainInfoKHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::System.IntPtr swapchain;

        [FieldOffset(24)]
        internal uint imageIndex;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkBindImageMemorySwapchainInfoKHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkBindImageMemorySwapchainInfoKHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkBindImageMemorySwapchainInfoKHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkBindImageMemorySwapchainInfoKHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkBindImageMemorySwapchainInfoKHR __CreateInstance(global::VkBindImageMemorySwapchainInfoKHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkBindImageMemorySwapchainInfoKHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkBindImageMemorySwapchainInfoKHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkBindImageMemorySwapchainInfoKHR.__Internal));
        *(global::VkBindImageMemorySwapchainInfoKHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkBindImageMemorySwapchainInfoKHR(global::VkBindImageMemorySwapchainInfoKHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkBindImageMemorySwapchainInfoKHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkBindImageMemorySwapchainInfoKHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkBindImageMemorySwapchainInfoKHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkBindImageMemorySwapchainInfoKHR.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkBindImageMemorySwapchainInfoKHR.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkBindImageMemorySwapchainInfoKHR.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkBindImageMemorySwapchainInfoKHR.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkSwapchainKHR_T Swapchain
    {
        get
        {
            global::VkSwapchainKHR_T __result0;
            if (((global::VkBindImageMemorySwapchainInfoKHR.__Internal*) __Instance)->swapchain == IntPtr.Zero) __result0 = null;
            else if (global::VkSwapchainKHR_T.NativeToManagedMap.ContainsKey(((global::VkBindImageMemorySwapchainInfoKHR.__Internal*) __Instance)->swapchain))
                __result0 = (global::VkSwapchainKHR_T) global::VkSwapchainKHR_T.NativeToManagedMap[((global::VkBindImageMemorySwapchainInfoKHR.__Internal*) __Instance)->swapchain];
            else __result0 = global::VkSwapchainKHR_T.__CreateInstance(((global::VkBindImageMemorySwapchainInfoKHR.__Internal*) __Instance)->swapchain);
            return __result0;
        }

        set
        {
            ((global::VkBindImageMemorySwapchainInfoKHR.__Internal*)__Instance)->swapchain = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint ImageIndex
    {
        get
        {
            return ((global::VkBindImageMemorySwapchainInfoKHR.__Internal*) __Instance)->imageIndex;
        }

        set
        {
            ((global::VkBindImageMemorySwapchainInfoKHR.__Internal*)__Instance)->imageIndex = value;
        }
    }
}

public unsafe partial class VkAcquireNextImageInfoKHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 56)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::System.IntPtr swapchain;

        [FieldOffset(24)]
        internal ulong timeout;

        [FieldOffset(32)]
        internal global::System.IntPtr semaphore;

        [FieldOffset(40)]
        internal global::System.IntPtr fence;

        [FieldOffset(48)]
        internal uint deviceMask;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkAcquireNextImageInfoKHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkAcquireNextImageInfoKHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkAcquireNextImageInfoKHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkAcquireNextImageInfoKHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkAcquireNextImageInfoKHR __CreateInstance(global::VkAcquireNextImageInfoKHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkAcquireNextImageInfoKHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkAcquireNextImageInfoKHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkAcquireNextImageInfoKHR.__Internal));
        *(global::VkAcquireNextImageInfoKHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkAcquireNextImageInfoKHR(global::VkAcquireNextImageInfoKHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkAcquireNextImageInfoKHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkAcquireNextImageInfoKHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkAcquireNextImageInfoKHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkAcquireNextImageInfoKHR.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkAcquireNextImageInfoKHR.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkAcquireNextImageInfoKHR.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkAcquireNextImageInfoKHR.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkSwapchainKHR_T Swapchain
    {
        get
        {
            global::VkSwapchainKHR_T __result0;
            if (((global::VkAcquireNextImageInfoKHR.__Internal*) __Instance)->swapchain == IntPtr.Zero) __result0 = null;
            else if (global::VkSwapchainKHR_T.NativeToManagedMap.ContainsKey(((global::VkAcquireNextImageInfoKHR.__Internal*) __Instance)->swapchain))
                __result0 = (global::VkSwapchainKHR_T) global::VkSwapchainKHR_T.NativeToManagedMap[((global::VkAcquireNextImageInfoKHR.__Internal*) __Instance)->swapchain];
            else __result0 = global::VkSwapchainKHR_T.__CreateInstance(((global::VkAcquireNextImageInfoKHR.__Internal*) __Instance)->swapchain);
            return __result0;
        }

        set
        {
            ((global::VkAcquireNextImageInfoKHR.__Internal*)__Instance)->swapchain = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public ulong Timeout
    {
        get
        {
            return ((global::VkAcquireNextImageInfoKHR.__Internal*) __Instance)->timeout;
        }

        set
        {
            ((global::VkAcquireNextImageInfoKHR.__Internal*)__Instance)->timeout = value;
        }
    }

    public global::VkSemaphoreT Semaphore
    {
        get
        {
            global::VkSemaphoreT __result0;
            if (((global::VkAcquireNextImageInfoKHR.__Internal*) __Instance)->semaphore == IntPtr.Zero) __result0 = null;
            else if (global::VkSemaphoreT.NativeToManagedMap.ContainsKey(((global::VkAcquireNextImageInfoKHR.__Internal*) __Instance)->semaphore))
                __result0 = (global::VkSemaphoreT) global::VkSemaphoreT.NativeToManagedMap[((global::VkAcquireNextImageInfoKHR.__Internal*) __Instance)->semaphore];
            else __result0 = global::VkSemaphoreT.__CreateInstance(((global::VkAcquireNextImageInfoKHR.__Internal*) __Instance)->semaphore);
            return __result0;
        }

        set
        {
            ((global::VkAcquireNextImageInfoKHR.__Internal*)__Instance)->semaphore = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkFenceT Fence
    {
        get
        {
            global::VkFenceT __result0;
            if (((global::VkAcquireNextImageInfoKHR.__Internal*) __Instance)->fence == IntPtr.Zero) __result0 = null;
            else if (global::VkFenceT.NativeToManagedMap.ContainsKey(((global::VkAcquireNextImageInfoKHR.__Internal*) __Instance)->fence))
                __result0 = (global::VkFenceT) global::VkFenceT.NativeToManagedMap[((global::VkAcquireNextImageInfoKHR.__Internal*) __Instance)->fence];
            else __result0 = global::VkFenceT.__CreateInstance(((global::VkAcquireNextImageInfoKHR.__Internal*) __Instance)->fence);
            return __result0;
        }

        set
        {
            ((global::VkAcquireNextImageInfoKHR.__Internal*)__Instance)->fence = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint DeviceMask
    {
        get
        {
            return ((global::VkAcquireNextImageInfoKHR.__Internal*) __Instance)->deviceMask;
        }

        set
        {
            ((global::VkAcquireNextImageInfoKHR.__Internal*)__Instance)->deviceMask = value;
        }
    }
}

public unsafe partial class VkDeviceGroupPresentCapabilitiesKHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 152)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal fixed uint presentMask[32];

        [FieldOffset(144)]
        internal uint modes;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceGroupPresentCapabilitiesKHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceGroupPresentCapabilitiesKHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDeviceGroupPresentCapabilitiesKHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDeviceGroupPresentCapabilitiesKHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkDeviceGroupPresentCapabilitiesKHR __CreateInstance(global::VkDeviceGroupPresentCapabilitiesKHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkDeviceGroupPresentCapabilitiesKHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDeviceGroupPresentCapabilitiesKHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDeviceGroupPresentCapabilitiesKHR.__Internal));
        *(global::VkDeviceGroupPresentCapabilitiesKHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDeviceGroupPresentCapabilitiesKHR(global::VkDeviceGroupPresentCapabilitiesKHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDeviceGroupPresentCapabilitiesKHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDeviceGroupPresentCapabilitiesKHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDeviceGroupPresentCapabilitiesKHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDeviceGroupPresentCapabilitiesKHR.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDeviceGroupPresentCapabilitiesKHR.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDeviceGroupPresentCapabilitiesKHR.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDeviceGroupPresentCapabilitiesKHR.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint[] PresentMask
    {
        get
        {
            uint[] __value = null;
            if (((global::VkDeviceGroupPresentCapabilitiesKHR.__Internal*) __Instance)->presentMask != null)
            {
                __value = new uint[32];
                for (int i = 0; i < 32; i++)
                    __value[i] = ((global::VkDeviceGroupPresentCapabilitiesKHR.__Internal*) __Instance)->presentMask[i];
            }
            return __value;
        }

        set
        {
            if (value != null)
            {
                for (int i = 0; i < 32; i++)
                    ((global::VkDeviceGroupPresentCapabilitiesKHR.__Internal*)__Instance)->presentMask[i] = value[i];
            }
        }
    }

    public uint Modes
    {
        get
        {
            return ((global::VkDeviceGroupPresentCapabilitiesKHR.__Internal*) __Instance)->modes;
        }

        set
        {
            ((global::VkDeviceGroupPresentCapabilitiesKHR.__Internal*)__Instance)->modes = value;
        }
    }
}

public unsafe partial class VkDeviceGroupPresentInfoKHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint swapchainCount;

        [FieldOffset(24)]
        internal global::System.IntPtr pDeviceMasks;

        [FieldOffset(32)]
        internal global::VkDeviceGroupPresentModeFlagBitsKHR mode;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceGroupPresentInfoKHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceGroupPresentInfoKHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDeviceGroupPresentInfoKHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDeviceGroupPresentInfoKHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkDeviceGroupPresentInfoKHR __CreateInstance(global::VkDeviceGroupPresentInfoKHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkDeviceGroupPresentInfoKHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDeviceGroupPresentInfoKHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDeviceGroupPresentInfoKHR.__Internal));
        *(global::VkDeviceGroupPresentInfoKHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDeviceGroupPresentInfoKHR(global::VkDeviceGroupPresentInfoKHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDeviceGroupPresentInfoKHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDeviceGroupPresentInfoKHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDeviceGroupPresentInfoKHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDeviceGroupPresentInfoKHR.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDeviceGroupPresentInfoKHR.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDeviceGroupPresentInfoKHR.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDeviceGroupPresentInfoKHR.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint SwapchainCount
    {
        get
        {
            return ((global::VkDeviceGroupPresentInfoKHR.__Internal*) __Instance)->swapchainCount;
        }

        set
        {
            ((global::VkDeviceGroupPresentInfoKHR.__Internal*)__Instance)->swapchainCount = value;
        }
    }

    public uint* PDeviceMasks
    {
        get
        {
            return (uint*) ((global::VkDeviceGroupPresentInfoKHR.__Internal*) __Instance)->pDeviceMasks;
        }

        set
        {
            ((global::VkDeviceGroupPresentInfoKHR.__Internal*)__Instance)->pDeviceMasks = (global::System.IntPtr) value;
        }
    }

    public global::VkDeviceGroupPresentModeFlagBitsKHR Mode
    {
        get
        {
            return ((global::VkDeviceGroupPresentInfoKHR.__Internal*) __Instance)->mode;
        }

        set
        {
            ((global::VkDeviceGroupPresentInfoKHR.__Internal*)__Instance)->mode = value;
        }
    }
}

public unsafe partial class VkDeviceGroupSwapchainCreateInfoKHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint modes;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceGroupSwapchainCreateInfoKHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceGroupSwapchainCreateInfoKHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDeviceGroupSwapchainCreateInfoKHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDeviceGroupSwapchainCreateInfoKHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkDeviceGroupSwapchainCreateInfoKHR __CreateInstance(global::VkDeviceGroupSwapchainCreateInfoKHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkDeviceGroupSwapchainCreateInfoKHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDeviceGroupSwapchainCreateInfoKHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDeviceGroupSwapchainCreateInfoKHR.__Internal));
        *(global::VkDeviceGroupSwapchainCreateInfoKHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDeviceGroupSwapchainCreateInfoKHR(global::VkDeviceGroupSwapchainCreateInfoKHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDeviceGroupSwapchainCreateInfoKHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDeviceGroupSwapchainCreateInfoKHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDeviceGroupSwapchainCreateInfoKHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDeviceGroupSwapchainCreateInfoKHR.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDeviceGroupSwapchainCreateInfoKHR.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDeviceGroupSwapchainCreateInfoKHR.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDeviceGroupSwapchainCreateInfoKHR.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Modes
    {
        get
        {
            return ((global::VkDeviceGroupSwapchainCreateInfoKHR.__Internal*) __Instance)->modes;
        }

        set
        {
            ((global::VkDeviceGroupSwapchainCreateInfoKHR.__Internal*)__Instance)->modes = value;
        }
    }
}

public unsafe partial class VkDisplayKHR_T
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDisplayKHR_T> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDisplayKHR_T>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDisplayKHR_T __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDisplayKHR_T(native.ToPointer(), skipVTables);
    }

    internal static global::VkDisplayKHR_T __CreateInstance(global::VkDisplayKHR_T.__Internal native, bool skipVTables = false)
    {
        return new global::VkDisplayKHR_T(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDisplayKHR_T.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDisplayKHR_T.__Internal));
        *(global::VkDisplayKHR_T.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDisplayKHR_T(global::VkDisplayKHR_T.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDisplayKHR_T(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDisplayKHR_T()
    {
        Dispose(false);
    }
}

public unsafe partial class VkDisplayModeKHR_T
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDisplayModeKHR_T> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDisplayModeKHR_T>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDisplayModeKHR_T __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDisplayModeKHR_T(native.ToPointer(), skipVTables);
    }

    internal static global::VkDisplayModeKHR_T __CreateInstance(global::VkDisplayModeKHR_T.__Internal native, bool skipVTables = false)
    {
        return new global::VkDisplayModeKHR_T(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDisplayModeKHR_T.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDisplayModeKHR_T.__Internal));
        *(global::VkDisplayModeKHR_T.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDisplayModeKHR_T(global::VkDisplayModeKHR_T.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDisplayModeKHR_T(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDisplayModeKHR_T()
    {
        Dispose(false);
    }
}

public unsafe partial class VkDisplayPropertiesKHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 48)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::System.IntPtr display;

        [FieldOffset(8)]
        internal global::System.IntPtr displayName;

        [FieldOffset(16)]
        internal global::VkExtent2D.__Internal physicalDimensions;

        [FieldOffset(24)]
        internal global::VkExtent2D.__Internal physicalResolution;

        [FieldOffset(32)]
        internal uint supportedTransforms;

        [FieldOffset(36)]
        internal uint planeReorderPossible;

        [FieldOffset(40)]
        internal uint persistentContent;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDisplayPropertiesKHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDisplayPropertiesKHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDisplayPropertiesKHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDisplayPropertiesKHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkDisplayPropertiesKHR __CreateInstance(global::VkDisplayPropertiesKHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkDisplayPropertiesKHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDisplayPropertiesKHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDisplayPropertiesKHR.__Internal));
        *(global::VkDisplayPropertiesKHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDisplayPropertiesKHR(global::VkDisplayPropertiesKHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDisplayPropertiesKHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDisplayPropertiesKHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDisplayPropertiesKHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkDisplayKHR_T Display
    {
        get
        {
            global::VkDisplayKHR_T __result0;
            if (((global::VkDisplayPropertiesKHR.__Internal*) __Instance)->display == IntPtr.Zero) __result0 = null;
            else if (global::VkDisplayKHR_T.NativeToManagedMap.ContainsKey(((global::VkDisplayPropertiesKHR.__Internal*) __Instance)->display))
                __result0 = (global::VkDisplayKHR_T) global::VkDisplayKHR_T.NativeToManagedMap[((global::VkDisplayPropertiesKHR.__Internal*) __Instance)->display];
            else __result0 = global::VkDisplayKHR_T.__CreateInstance(((global::VkDisplayPropertiesKHR.__Internal*) __Instance)->display);
            return __result0;
        }

        set
        {
            ((global::VkDisplayPropertiesKHR.__Internal*)__Instance)->display = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public string DisplayName
    {
        get
        {
            return Marshal.PtrToStringAnsi(((global::VkDisplayPropertiesKHR.__Internal*) __Instance)->displayName);
        }

        set
        {
            ((global::VkDisplayPropertiesKHR.__Internal*)__Instance)->displayName = Marshal.StringToHGlobalAnsi(value);
        }
    }

    public global::VkExtent2D PhysicalDimensions
    {
        get
        {
            return global::VkExtent2D.__CreateInstance(new global::System.IntPtr(&((global::VkDisplayPropertiesKHR.__Internal*) __Instance)->physicalDimensions));
        }

        set
        {
            ((global::VkDisplayPropertiesKHR.__Internal*)__Instance)->physicalDimensions = ReferenceEquals(value, null) ? new global::VkExtent2D.__Internal() : *(global::VkExtent2D.__Internal*) value.__Instance;
        }
    }

    public global::VkExtent2D PhysicalResolution
    {
        get
        {
            return global::VkExtent2D.__CreateInstance(new global::System.IntPtr(&((global::VkDisplayPropertiesKHR.__Internal*) __Instance)->physicalResolution));
        }

        set
        {
            ((global::VkDisplayPropertiesKHR.__Internal*)__Instance)->physicalResolution = ReferenceEquals(value, null) ? new global::VkExtent2D.__Internal() : *(global::VkExtent2D.__Internal*) value.__Instance;
        }
    }

    public uint SupportedTransforms
    {
        get
        {
            return ((global::VkDisplayPropertiesKHR.__Internal*) __Instance)->supportedTransforms;
        }

        set
        {
            ((global::VkDisplayPropertiesKHR.__Internal*)__Instance)->supportedTransforms = value;
        }
    }

    public uint PlaneReorderPossible
    {
        get
        {
            return ((global::VkDisplayPropertiesKHR.__Internal*) __Instance)->planeReorderPossible;
        }

        set
        {
            ((global::VkDisplayPropertiesKHR.__Internal*)__Instance)->planeReorderPossible = value;
        }
    }

    public uint PersistentContent
    {
        get
        {
            return ((global::VkDisplayPropertiesKHR.__Internal*) __Instance)->persistentContent;
        }

        set
        {
            ((global::VkDisplayPropertiesKHR.__Internal*)__Instance)->persistentContent = value;
        }
    }
}

public unsafe partial class VkDisplayModeParametersKHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 12)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkExtent2D.__Internal visibleRegion;

        [FieldOffset(8)]
        internal uint refreshRate;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDisplayModeParametersKHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDisplayModeParametersKHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDisplayModeParametersKHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDisplayModeParametersKHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkDisplayModeParametersKHR __CreateInstance(global::VkDisplayModeParametersKHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkDisplayModeParametersKHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDisplayModeParametersKHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDisplayModeParametersKHR.__Internal));
        *(global::VkDisplayModeParametersKHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDisplayModeParametersKHR(global::VkDisplayModeParametersKHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDisplayModeParametersKHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDisplayModeParametersKHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDisplayModeParametersKHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkExtent2D VisibleRegion
    {
        get
        {
            return global::VkExtent2D.__CreateInstance(new global::System.IntPtr(&((global::VkDisplayModeParametersKHR.__Internal*) __Instance)->visibleRegion));
        }

        set
        {
            ((global::VkDisplayModeParametersKHR.__Internal*)__Instance)->visibleRegion = ReferenceEquals(value, null) ? new global::VkExtent2D.__Internal() : *(global::VkExtent2D.__Internal*) value.__Instance;
        }
    }

    public uint RefreshRate
    {
        get
        {
            return ((global::VkDisplayModeParametersKHR.__Internal*) __Instance)->refreshRate;
        }

        set
        {
            ((global::VkDisplayModeParametersKHR.__Internal*)__Instance)->refreshRate = value;
        }
    }
}

public unsafe partial class VkDisplayModePropertiesKHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::System.IntPtr displayMode;

        [FieldOffset(8)]
        internal global::VkDisplayModeParametersKHR.__Internal parameters;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDisplayModePropertiesKHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDisplayModePropertiesKHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDisplayModePropertiesKHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDisplayModePropertiesKHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkDisplayModePropertiesKHR __CreateInstance(global::VkDisplayModePropertiesKHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkDisplayModePropertiesKHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDisplayModePropertiesKHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDisplayModePropertiesKHR.__Internal));
        *(global::VkDisplayModePropertiesKHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDisplayModePropertiesKHR(global::VkDisplayModePropertiesKHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDisplayModePropertiesKHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDisplayModePropertiesKHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDisplayModePropertiesKHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkDisplayModeKHR_T DisplayMode
    {
        get
        {
            global::VkDisplayModeKHR_T __result0;
            if (((global::VkDisplayModePropertiesKHR.__Internal*) __Instance)->displayMode == IntPtr.Zero) __result0 = null;
            else if (global::VkDisplayModeKHR_T.NativeToManagedMap.ContainsKey(((global::VkDisplayModePropertiesKHR.__Internal*) __Instance)->displayMode))
                __result0 = (global::VkDisplayModeKHR_T) global::VkDisplayModeKHR_T.NativeToManagedMap[((global::VkDisplayModePropertiesKHR.__Internal*) __Instance)->displayMode];
            else __result0 = global::VkDisplayModeKHR_T.__CreateInstance(((global::VkDisplayModePropertiesKHR.__Internal*) __Instance)->displayMode);
            return __result0;
        }

        set
        {
            ((global::VkDisplayModePropertiesKHR.__Internal*)__Instance)->displayMode = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkDisplayModeParametersKHR Parameters
    {
        get
        {
            return global::VkDisplayModeParametersKHR.__CreateInstance(new global::System.IntPtr(&((global::VkDisplayModePropertiesKHR.__Internal*) __Instance)->parameters));
        }

        set
        {
            ((global::VkDisplayModePropertiesKHR.__Internal*)__Instance)->parameters = ReferenceEquals(value, null) ? new global::VkDisplayModeParametersKHR.__Internal() : *(global::VkDisplayModeParametersKHR.__Internal*) value.__Instance;
        }
    }
}

public unsafe partial class VkDisplayModeCreateInfoKHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(20)]
        internal global::VkDisplayModeParametersKHR.__Internal parameters;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDisplayModeCreateInfoKHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDisplayModeCreateInfoKHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDisplayModeCreateInfoKHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDisplayModeCreateInfoKHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkDisplayModeCreateInfoKHR __CreateInstance(global::VkDisplayModeCreateInfoKHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkDisplayModeCreateInfoKHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDisplayModeCreateInfoKHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDisplayModeCreateInfoKHR.__Internal));
        *(global::VkDisplayModeCreateInfoKHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDisplayModeCreateInfoKHR(global::VkDisplayModeCreateInfoKHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDisplayModeCreateInfoKHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDisplayModeCreateInfoKHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDisplayModeCreateInfoKHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDisplayModeCreateInfoKHR.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDisplayModeCreateInfoKHR.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDisplayModeCreateInfoKHR.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDisplayModeCreateInfoKHR.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkDisplayModeCreateInfoKHR.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkDisplayModeCreateInfoKHR.__Internal*)__Instance)->flags = value;
        }
    }

    public global::VkDisplayModeParametersKHR Parameters
    {
        get
        {
            return global::VkDisplayModeParametersKHR.__CreateInstance(new global::System.IntPtr(&((global::VkDisplayModeCreateInfoKHR.__Internal*) __Instance)->parameters));
        }

        set
        {
            ((global::VkDisplayModeCreateInfoKHR.__Internal*)__Instance)->parameters = ReferenceEquals(value, null) ? new global::VkDisplayModeParametersKHR.__Internal() : *(global::VkDisplayModeParametersKHR.__Internal*) value.__Instance;
        }
    }
}

public unsafe partial class VkDisplayPlaneCapabilitiesKHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 68)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint supportedAlpha;

        [FieldOffset(4)]
        internal global::VkOffset2D.__Internal minSrcPosition;

        [FieldOffset(12)]
        internal global::VkOffset2D.__Internal maxSrcPosition;

        [FieldOffset(20)]
        internal global::VkExtent2D.__Internal minSrcExtent;

        [FieldOffset(28)]
        internal global::VkExtent2D.__Internal maxSrcExtent;

        [FieldOffset(36)]
        internal global::VkOffset2D.__Internal minDstPosition;

        [FieldOffset(44)]
        internal global::VkOffset2D.__Internal maxDstPosition;

        [FieldOffset(52)]
        internal global::VkExtent2D.__Internal minDstExtent;

        [FieldOffset(60)]
        internal global::VkExtent2D.__Internal maxDstExtent;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDisplayPlaneCapabilitiesKHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDisplayPlaneCapabilitiesKHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDisplayPlaneCapabilitiesKHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDisplayPlaneCapabilitiesKHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkDisplayPlaneCapabilitiesKHR __CreateInstance(global::VkDisplayPlaneCapabilitiesKHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkDisplayPlaneCapabilitiesKHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDisplayPlaneCapabilitiesKHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDisplayPlaneCapabilitiesKHR.__Internal));
        *(global::VkDisplayPlaneCapabilitiesKHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDisplayPlaneCapabilitiesKHR(global::VkDisplayPlaneCapabilitiesKHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDisplayPlaneCapabilitiesKHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDisplayPlaneCapabilitiesKHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDisplayPlaneCapabilitiesKHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint SupportedAlpha
    {
        get
        {
            return ((global::VkDisplayPlaneCapabilitiesKHR.__Internal*) __Instance)->supportedAlpha;
        }

        set
        {
            ((global::VkDisplayPlaneCapabilitiesKHR.__Internal*)__Instance)->supportedAlpha = value;
        }
    }

    public global::VkOffset2D MinSrcPosition
    {
        get
        {
            return global::VkOffset2D.__CreateInstance(new global::System.IntPtr(&((global::VkDisplayPlaneCapabilitiesKHR.__Internal*) __Instance)->minSrcPosition));
        }

        set
        {
            ((global::VkDisplayPlaneCapabilitiesKHR.__Internal*)__Instance)->minSrcPosition = ReferenceEquals(value, null) ? new global::VkOffset2D.__Internal() : *(global::VkOffset2D.__Internal*) value.__Instance;
        }
    }

    public global::VkOffset2D MaxSrcPosition
    {
        get
        {
            return global::VkOffset2D.__CreateInstance(new global::System.IntPtr(&((global::VkDisplayPlaneCapabilitiesKHR.__Internal*) __Instance)->maxSrcPosition));
        }

        set
        {
            ((global::VkDisplayPlaneCapabilitiesKHR.__Internal*)__Instance)->maxSrcPosition = ReferenceEquals(value, null) ? new global::VkOffset2D.__Internal() : *(global::VkOffset2D.__Internal*) value.__Instance;
        }
    }

    public global::VkExtent2D MinSrcExtent
    {
        get
        {
            return global::VkExtent2D.__CreateInstance(new global::System.IntPtr(&((global::VkDisplayPlaneCapabilitiesKHR.__Internal*) __Instance)->minSrcExtent));
        }

        set
        {
            ((global::VkDisplayPlaneCapabilitiesKHR.__Internal*)__Instance)->minSrcExtent = ReferenceEquals(value, null) ? new global::VkExtent2D.__Internal() : *(global::VkExtent2D.__Internal*) value.__Instance;
        }
    }

    public global::VkExtent2D MaxSrcExtent
    {
        get
        {
            return global::VkExtent2D.__CreateInstance(new global::System.IntPtr(&((global::VkDisplayPlaneCapabilitiesKHR.__Internal*) __Instance)->maxSrcExtent));
        }

        set
        {
            ((global::VkDisplayPlaneCapabilitiesKHR.__Internal*)__Instance)->maxSrcExtent = ReferenceEquals(value, null) ? new global::VkExtent2D.__Internal() : *(global::VkExtent2D.__Internal*) value.__Instance;
        }
    }

    public global::VkOffset2D MinDstPosition
    {
        get
        {
            return global::VkOffset2D.__CreateInstance(new global::System.IntPtr(&((global::VkDisplayPlaneCapabilitiesKHR.__Internal*) __Instance)->minDstPosition));
        }

        set
        {
            ((global::VkDisplayPlaneCapabilitiesKHR.__Internal*)__Instance)->minDstPosition = ReferenceEquals(value, null) ? new global::VkOffset2D.__Internal() : *(global::VkOffset2D.__Internal*) value.__Instance;
        }
    }

    public global::VkOffset2D MaxDstPosition
    {
        get
        {
            return global::VkOffset2D.__CreateInstance(new global::System.IntPtr(&((global::VkDisplayPlaneCapabilitiesKHR.__Internal*) __Instance)->maxDstPosition));
        }

        set
        {
            ((global::VkDisplayPlaneCapabilitiesKHR.__Internal*)__Instance)->maxDstPosition = ReferenceEquals(value, null) ? new global::VkOffset2D.__Internal() : *(global::VkOffset2D.__Internal*) value.__Instance;
        }
    }

    public global::VkExtent2D MinDstExtent
    {
        get
        {
            return global::VkExtent2D.__CreateInstance(new global::System.IntPtr(&((global::VkDisplayPlaneCapabilitiesKHR.__Internal*) __Instance)->minDstExtent));
        }

        set
        {
            ((global::VkDisplayPlaneCapabilitiesKHR.__Internal*)__Instance)->minDstExtent = ReferenceEquals(value, null) ? new global::VkExtent2D.__Internal() : *(global::VkExtent2D.__Internal*) value.__Instance;
        }
    }

    public global::VkExtent2D MaxDstExtent
    {
        get
        {
            return global::VkExtent2D.__CreateInstance(new global::System.IntPtr(&((global::VkDisplayPlaneCapabilitiesKHR.__Internal*) __Instance)->maxDstExtent));
        }

        set
        {
            ((global::VkDisplayPlaneCapabilitiesKHR.__Internal*)__Instance)->maxDstExtent = ReferenceEquals(value, null) ? new global::VkExtent2D.__Internal() : *(global::VkExtent2D.__Internal*) value.__Instance;
        }
    }
}

public unsafe partial class VkDisplayPlanePropertiesKHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::System.IntPtr currentDisplay;

        [FieldOffset(8)]
        internal uint currentStackIndex;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDisplayPlanePropertiesKHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDisplayPlanePropertiesKHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDisplayPlanePropertiesKHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDisplayPlanePropertiesKHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkDisplayPlanePropertiesKHR __CreateInstance(global::VkDisplayPlanePropertiesKHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkDisplayPlanePropertiesKHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDisplayPlanePropertiesKHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDisplayPlanePropertiesKHR.__Internal));
        *(global::VkDisplayPlanePropertiesKHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDisplayPlanePropertiesKHR(global::VkDisplayPlanePropertiesKHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDisplayPlanePropertiesKHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDisplayPlanePropertiesKHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDisplayPlanePropertiesKHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkDisplayKHR_T CurrentDisplay
    {
        get
        {
            global::VkDisplayKHR_T __result0;
            if (((global::VkDisplayPlanePropertiesKHR.__Internal*) __Instance)->currentDisplay == IntPtr.Zero) __result0 = null;
            else if (global::VkDisplayKHR_T.NativeToManagedMap.ContainsKey(((global::VkDisplayPlanePropertiesKHR.__Internal*) __Instance)->currentDisplay))
                __result0 = (global::VkDisplayKHR_T) global::VkDisplayKHR_T.NativeToManagedMap[((global::VkDisplayPlanePropertiesKHR.__Internal*) __Instance)->currentDisplay];
            else __result0 = global::VkDisplayKHR_T.__CreateInstance(((global::VkDisplayPlanePropertiesKHR.__Internal*) __Instance)->currentDisplay);
            return __result0;
        }

        set
        {
            ((global::VkDisplayPlanePropertiesKHR.__Internal*)__Instance)->currentDisplay = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint CurrentStackIndex
    {
        get
        {
            return ((global::VkDisplayPlanePropertiesKHR.__Internal*) __Instance)->currentStackIndex;
        }

        set
        {
            ((global::VkDisplayPlanePropertiesKHR.__Internal*)__Instance)->currentStackIndex = value;
        }
    }
}

public unsafe partial class VkDisplaySurfaceCreateInfoKHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 64)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(24)]
        internal global::System.IntPtr displayMode;

        [FieldOffset(32)]
        internal uint planeIndex;

        [FieldOffset(36)]
        internal uint planeStackIndex;

        [FieldOffset(40)]
        internal global::VkSurfaceTransformFlagBitsKHR transform;

        [FieldOffset(44)]
        internal float globalAlpha;

        [FieldOffset(48)]
        internal global::VkDisplayPlaneAlphaFlagBitsKHR alphaMode;

        [FieldOffset(52)]
        internal global::VkExtent2D.__Internal imageExtent;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDisplaySurfaceCreateInfoKHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDisplaySurfaceCreateInfoKHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDisplaySurfaceCreateInfoKHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDisplaySurfaceCreateInfoKHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkDisplaySurfaceCreateInfoKHR __CreateInstance(global::VkDisplaySurfaceCreateInfoKHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkDisplaySurfaceCreateInfoKHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDisplaySurfaceCreateInfoKHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDisplaySurfaceCreateInfoKHR.__Internal));
        *(global::VkDisplaySurfaceCreateInfoKHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDisplaySurfaceCreateInfoKHR(global::VkDisplaySurfaceCreateInfoKHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDisplaySurfaceCreateInfoKHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDisplaySurfaceCreateInfoKHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDisplaySurfaceCreateInfoKHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDisplaySurfaceCreateInfoKHR.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDisplaySurfaceCreateInfoKHR.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDisplaySurfaceCreateInfoKHR.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDisplaySurfaceCreateInfoKHR.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkDisplaySurfaceCreateInfoKHR.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkDisplaySurfaceCreateInfoKHR.__Internal*)__Instance)->flags = value;
        }
    }

    public global::VkDisplayModeKHR_T DisplayMode
    {
        get
        {
            global::VkDisplayModeKHR_T __result0;
            if (((global::VkDisplaySurfaceCreateInfoKHR.__Internal*) __Instance)->displayMode == IntPtr.Zero) __result0 = null;
            else if (global::VkDisplayModeKHR_T.NativeToManagedMap.ContainsKey(((global::VkDisplaySurfaceCreateInfoKHR.__Internal*) __Instance)->displayMode))
                __result0 = (global::VkDisplayModeKHR_T) global::VkDisplayModeKHR_T.NativeToManagedMap[((global::VkDisplaySurfaceCreateInfoKHR.__Internal*) __Instance)->displayMode];
            else __result0 = global::VkDisplayModeKHR_T.__CreateInstance(((global::VkDisplaySurfaceCreateInfoKHR.__Internal*) __Instance)->displayMode);
            return __result0;
        }

        set
        {
            ((global::VkDisplaySurfaceCreateInfoKHR.__Internal*)__Instance)->displayMode = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint PlaneIndex
    {
        get
        {
            return ((global::VkDisplaySurfaceCreateInfoKHR.__Internal*) __Instance)->planeIndex;
        }

        set
        {
            ((global::VkDisplaySurfaceCreateInfoKHR.__Internal*)__Instance)->planeIndex = value;
        }
    }

    public uint PlaneStackIndex
    {
        get
        {
            return ((global::VkDisplaySurfaceCreateInfoKHR.__Internal*) __Instance)->planeStackIndex;
        }

        set
        {
            ((global::VkDisplaySurfaceCreateInfoKHR.__Internal*)__Instance)->planeStackIndex = value;
        }
    }

    public global::VkSurfaceTransformFlagBitsKHR Transform
    {
        get
        {
            return ((global::VkDisplaySurfaceCreateInfoKHR.__Internal*) __Instance)->transform;
        }

        set
        {
            ((global::VkDisplaySurfaceCreateInfoKHR.__Internal*)__Instance)->transform = value;
        }
    }

    public float GlobalAlpha
    {
        get
        {
            return ((global::VkDisplaySurfaceCreateInfoKHR.__Internal*) __Instance)->globalAlpha;
        }

        set
        {
            ((global::VkDisplaySurfaceCreateInfoKHR.__Internal*)__Instance)->globalAlpha = value;
        }
    }

    public global::VkDisplayPlaneAlphaFlagBitsKHR AlphaMode
    {
        get
        {
            return ((global::VkDisplaySurfaceCreateInfoKHR.__Internal*) __Instance)->alphaMode;
        }

        set
        {
            ((global::VkDisplaySurfaceCreateInfoKHR.__Internal*)__Instance)->alphaMode = value;
        }
    }

    public global::VkExtent2D ImageExtent
    {
        get
        {
            return global::VkExtent2D.__CreateInstance(new global::System.IntPtr(&((global::VkDisplaySurfaceCreateInfoKHR.__Internal*) __Instance)->imageExtent));
        }

        set
        {
            ((global::VkDisplaySurfaceCreateInfoKHR.__Internal*)__Instance)->imageExtent = ReferenceEquals(value, null) ? new global::VkExtent2D.__Internal() : *(global::VkExtent2D.__Internal*) value.__Instance;
        }
    }
}

public unsafe partial class VkDisplayPresentInfoKHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 56)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkRect2D.__Internal srcRect;

        [FieldOffset(32)]
        internal global::VkRect2D.__Internal dstRect;

        [FieldOffset(48)]
        internal uint persistent;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDisplayPresentInfoKHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDisplayPresentInfoKHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDisplayPresentInfoKHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDisplayPresentInfoKHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkDisplayPresentInfoKHR __CreateInstance(global::VkDisplayPresentInfoKHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkDisplayPresentInfoKHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDisplayPresentInfoKHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDisplayPresentInfoKHR.__Internal));
        *(global::VkDisplayPresentInfoKHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDisplayPresentInfoKHR(global::VkDisplayPresentInfoKHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDisplayPresentInfoKHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDisplayPresentInfoKHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDisplayPresentInfoKHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDisplayPresentInfoKHR.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDisplayPresentInfoKHR.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDisplayPresentInfoKHR.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDisplayPresentInfoKHR.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkRect2D SrcRect
    {
        get
        {
            return global::VkRect2D.__CreateInstance(new global::System.IntPtr(&((global::VkDisplayPresentInfoKHR.__Internal*) __Instance)->srcRect));
        }

        set
        {
            ((global::VkDisplayPresentInfoKHR.__Internal*)__Instance)->srcRect = ReferenceEquals(value, null) ? new global::VkRect2D.__Internal() : *(global::VkRect2D.__Internal*) value.__Instance;
        }
    }

    public global::VkRect2D DstRect
    {
        get
        {
            return global::VkRect2D.__CreateInstance(new global::System.IntPtr(&((global::VkDisplayPresentInfoKHR.__Internal*) __Instance)->dstRect));
        }

        set
        {
            ((global::VkDisplayPresentInfoKHR.__Internal*)__Instance)->dstRect = ReferenceEquals(value, null) ? new global::VkRect2D.__Internal() : *(global::VkRect2D.__Internal*) value.__Instance;
        }
    }

    public uint Persistent
    {
        get
        {
            return ((global::VkDisplayPresentInfoKHR.__Internal*) __Instance)->persistent;
        }

        set
        {
            ((global::VkDisplayPresentInfoKHR.__Internal*)__Instance)->persistent = value;
        }
    }
}

public unsafe partial class VkImportMemoryFdInfoKHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkExternalMemoryHandleTypeFlagBits handleType;

        [FieldOffset(20)]
        internal int fd;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImportMemoryFdInfoKHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImportMemoryFdInfoKHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkImportMemoryFdInfoKHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkImportMemoryFdInfoKHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkImportMemoryFdInfoKHR __CreateInstance(global::VkImportMemoryFdInfoKHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkImportMemoryFdInfoKHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkImportMemoryFdInfoKHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkImportMemoryFdInfoKHR.__Internal));
        *(global::VkImportMemoryFdInfoKHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkImportMemoryFdInfoKHR(global::VkImportMemoryFdInfoKHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkImportMemoryFdInfoKHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkImportMemoryFdInfoKHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkImportMemoryFdInfoKHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkImportMemoryFdInfoKHR.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkImportMemoryFdInfoKHR.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkImportMemoryFdInfoKHR.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkImportMemoryFdInfoKHR.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkExternalMemoryHandleTypeFlagBits HandleType
    {
        get
        {
            return ((global::VkImportMemoryFdInfoKHR.__Internal*) __Instance)->handleType;
        }

        set
        {
            ((global::VkImportMemoryFdInfoKHR.__Internal*)__Instance)->handleType = value;
        }
    }

    public int Fd
    {
        get
        {
            return ((global::VkImportMemoryFdInfoKHR.__Internal*) __Instance)->fd;
        }

        set
        {
            ((global::VkImportMemoryFdInfoKHR.__Internal*)__Instance)->fd = value;
        }
    }
}

public unsafe partial class VkMemoryFdPropertiesKHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint memoryTypeBits;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkMemoryFdPropertiesKHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkMemoryFdPropertiesKHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkMemoryFdPropertiesKHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkMemoryFdPropertiesKHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkMemoryFdPropertiesKHR __CreateInstance(global::VkMemoryFdPropertiesKHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkMemoryFdPropertiesKHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkMemoryFdPropertiesKHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkMemoryFdPropertiesKHR.__Internal));
        *(global::VkMemoryFdPropertiesKHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkMemoryFdPropertiesKHR(global::VkMemoryFdPropertiesKHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkMemoryFdPropertiesKHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkMemoryFdPropertiesKHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkMemoryFdPropertiesKHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkMemoryFdPropertiesKHR.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkMemoryFdPropertiesKHR.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkMemoryFdPropertiesKHR.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkMemoryFdPropertiesKHR.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint MemoryTypeBits
    {
        get
        {
            return ((global::VkMemoryFdPropertiesKHR.__Internal*) __Instance)->memoryTypeBits;
        }

        set
        {
            ((global::VkMemoryFdPropertiesKHR.__Internal*)__Instance)->memoryTypeBits = value;
        }
    }
}

public unsafe partial class VkMemoryGetFdInfoKHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::System.IntPtr memory;

        [FieldOffset(24)]
        internal global::VkExternalMemoryHandleTypeFlagBits handleType;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkMemoryGetFdInfoKHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkMemoryGetFdInfoKHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkMemoryGetFdInfoKHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkMemoryGetFdInfoKHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkMemoryGetFdInfoKHR __CreateInstance(global::VkMemoryGetFdInfoKHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkMemoryGetFdInfoKHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkMemoryGetFdInfoKHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkMemoryGetFdInfoKHR.__Internal));
        *(global::VkMemoryGetFdInfoKHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkMemoryGetFdInfoKHR(global::VkMemoryGetFdInfoKHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkMemoryGetFdInfoKHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkMemoryGetFdInfoKHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkMemoryGetFdInfoKHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkMemoryGetFdInfoKHR.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkMemoryGetFdInfoKHR.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkMemoryGetFdInfoKHR.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkMemoryGetFdInfoKHR.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkDeviceMemoryT Memory
    {
        get
        {
            global::VkDeviceMemoryT __result0;
            if (((global::VkMemoryGetFdInfoKHR.__Internal*) __Instance)->memory == IntPtr.Zero) __result0 = null;
            else if (global::VkDeviceMemoryT.NativeToManagedMap.ContainsKey(((global::VkMemoryGetFdInfoKHR.__Internal*) __Instance)->memory))
                __result0 = (global::VkDeviceMemoryT) global::VkDeviceMemoryT.NativeToManagedMap[((global::VkMemoryGetFdInfoKHR.__Internal*) __Instance)->memory];
            else __result0 = global::VkDeviceMemoryT.__CreateInstance(((global::VkMemoryGetFdInfoKHR.__Internal*) __Instance)->memory);
            return __result0;
        }

        set
        {
            ((global::VkMemoryGetFdInfoKHR.__Internal*)__Instance)->memory = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkExternalMemoryHandleTypeFlagBits HandleType
    {
        get
        {
            return ((global::VkMemoryGetFdInfoKHR.__Internal*) __Instance)->handleType;
        }

        set
        {
            ((global::VkMemoryGetFdInfoKHR.__Internal*)__Instance)->handleType = value;
        }
    }
}

public unsafe partial class VkImportSemaphoreFdInfoKHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::System.IntPtr semaphore;

        [FieldOffset(24)]
        internal uint flags;

        [FieldOffset(28)]
        internal global::VkExternalSemaphoreHandleTypeFlagBits handleType;

        [FieldOffset(32)]
        internal int fd;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImportSemaphoreFdInfoKHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImportSemaphoreFdInfoKHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkImportSemaphoreFdInfoKHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkImportSemaphoreFdInfoKHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkImportSemaphoreFdInfoKHR __CreateInstance(global::VkImportSemaphoreFdInfoKHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkImportSemaphoreFdInfoKHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkImportSemaphoreFdInfoKHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkImportSemaphoreFdInfoKHR.__Internal));
        *(global::VkImportSemaphoreFdInfoKHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkImportSemaphoreFdInfoKHR(global::VkImportSemaphoreFdInfoKHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkImportSemaphoreFdInfoKHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkImportSemaphoreFdInfoKHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkImportSemaphoreFdInfoKHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkImportSemaphoreFdInfoKHR.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkImportSemaphoreFdInfoKHR.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkImportSemaphoreFdInfoKHR.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkImportSemaphoreFdInfoKHR.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkSemaphoreT Semaphore
    {
        get
        {
            global::VkSemaphoreT __result0;
            if (((global::VkImportSemaphoreFdInfoKHR.__Internal*) __Instance)->semaphore == IntPtr.Zero) __result0 = null;
            else if (global::VkSemaphoreT.NativeToManagedMap.ContainsKey(((global::VkImportSemaphoreFdInfoKHR.__Internal*) __Instance)->semaphore))
                __result0 = (global::VkSemaphoreT) global::VkSemaphoreT.NativeToManagedMap[((global::VkImportSemaphoreFdInfoKHR.__Internal*) __Instance)->semaphore];
            else __result0 = global::VkSemaphoreT.__CreateInstance(((global::VkImportSemaphoreFdInfoKHR.__Internal*) __Instance)->semaphore);
            return __result0;
        }

        set
        {
            ((global::VkImportSemaphoreFdInfoKHR.__Internal*)__Instance)->semaphore = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkImportSemaphoreFdInfoKHR.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkImportSemaphoreFdInfoKHR.__Internal*)__Instance)->flags = value;
        }
    }

    public global::VkExternalSemaphoreHandleTypeFlagBits HandleType
    {
        get
        {
            return ((global::VkImportSemaphoreFdInfoKHR.__Internal*) __Instance)->handleType;
        }

        set
        {
            ((global::VkImportSemaphoreFdInfoKHR.__Internal*)__Instance)->handleType = value;
        }
    }

    public int Fd
    {
        get
        {
            return ((global::VkImportSemaphoreFdInfoKHR.__Internal*) __Instance)->fd;
        }

        set
        {
            ((global::VkImportSemaphoreFdInfoKHR.__Internal*)__Instance)->fd = value;
        }
    }
}

public unsafe partial class VkSemaphoreGetFdInfoKHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::System.IntPtr semaphore;

        [FieldOffset(24)]
        internal global::VkExternalSemaphoreHandleTypeFlagBits handleType;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSemaphoreGetFdInfoKHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSemaphoreGetFdInfoKHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSemaphoreGetFdInfoKHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSemaphoreGetFdInfoKHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkSemaphoreGetFdInfoKHR __CreateInstance(global::VkSemaphoreGetFdInfoKHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkSemaphoreGetFdInfoKHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSemaphoreGetFdInfoKHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSemaphoreGetFdInfoKHR.__Internal));
        *(global::VkSemaphoreGetFdInfoKHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSemaphoreGetFdInfoKHR(global::VkSemaphoreGetFdInfoKHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSemaphoreGetFdInfoKHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSemaphoreGetFdInfoKHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkSemaphoreGetFdInfoKHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkSemaphoreGetFdInfoKHR.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkSemaphoreGetFdInfoKHR.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkSemaphoreGetFdInfoKHR.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkSemaphoreGetFdInfoKHR.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkSemaphoreT Semaphore
    {
        get
        {
            global::VkSemaphoreT __result0;
            if (((global::VkSemaphoreGetFdInfoKHR.__Internal*) __Instance)->semaphore == IntPtr.Zero) __result0 = null;
            else if (global::VkSemaphoreT.NativeToManagedMap.ContainsKey(((global::VkSemaphoreGetFdInfoKHR.__Internal*) __Instance)->semaphore))
                __result0 = (global::VkSemaphoreT) global::VkSemaphoreT.NativeToManagedMap[((global::VkSemaphoreGetFdInfoKHR.__Internal*) __Instance)->semaphore];
            else __result0 = global::VkSemaphoreT.__CreateInstance(((global::VkSemaphoreGetFdInfoKHR.__Internal*) __Instance)->semaphore);
            return __result0;
        }

        set
        {
            ((global::VkSemaphoreGetFdInfoKHR.__Internal*)__Instance)->semaphore = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkExternalSemaphoreHandleTypeFlagBits HandleType
    {
        get
        {
            return ((global::VkSemaphoreGetFdInfoKHR.__Internal*) __Instance)->handleType;
        }

        set
        {
            ((global::VkSemaphoreGetFdInfoKHR.__Internal*)__Instance)->handleType = value;
        }
    }
}

public unsafe partial class VkPhysicalDevicePushDescriptorPropertiesKHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint maxPushDescriptors;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDevicePushDescriptorPropertiesKHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDevicePushDescriptorPropertiesKHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDevicePushDescriptorPropertiesKHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDevicePushDescriptorPropertiesKHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDevicePushDescriptorPropertiesKHR __CreateInstance(global::VkPhysicalDevicePushDescriptorPropertiesKHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDevicePushDescriptorPropertiesKHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDevicePushDescriptorPropertiesKHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDevicePushDescriptorPropertiesKHR.__Internal));
        *(global::VkPhysicalDevicePushDescriptorPropertiesKHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDevicePushDescriptorPropertiesKHR(global::VkPhysicalDevicePushDescriptorPropertiesKHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDevicePushDescriptorPropertiesKHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDevicePushDescriptorPropertiesKHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDevicePushDescriptorPropertiesKHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDevicePushDescriptorPropertiesKHR.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDevicePushDescriptorPropertiesKHR.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDevicePushDescriptorPropertiesKHR.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDevicePushDescriptorPropertiesKHR.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint MaxPushDescriptors
    {
        get
        {
            return ((global::VkPhysicalDevicePushDescriptorPropertiesKHR.__Internal*) __Instance)->maxPushDescriptors;
        }

        set
        {
            ((global::VkPhysicalDevicePushDescriptorPropertiesKHR.__Internal*)__Instance)->maxPushDescriptors = value;
        }
    }
}

public unsafe partial class VkRectLayerKHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 20)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkOffset2D.__Internal offset;

        [FieldOffset(8)]
        internal global::VkExtent2D.__Internal extent;

        [FieldOffset(16)]
        internal uint layer;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkRectLayerKHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkRectLayerKHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkRectLayerKHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkRectLayerKHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkRectLayerKHR __CreateInstance(global::VkRectLayerKHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkRectLayerKHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkRectLayerKHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkRectLayerKHR.__Internal));
        *(global::VkRectLayerKHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkRectLayerKHR(global::VkRectLayerKHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkRectLayerKHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkRectLayerKHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkRectLayerKHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkOffset2D Offset
    {
        get
        {
            return global::VkOffset2D.__CreateInstance(new global::System.IntPtr(&((global::VkRectLayerKHR.__Internal*) __Instance)->offset));
        }

        set
        {
            ((global::VkRectLayerKHR.__Internal*)__Instance)->offset = ReferenceEquals(value, null) ? new global::VkOffset2D.__Internal() : *(global::VkOffset2D.__Internal*) value.__Instance;
        }
    }

    public global::VkExtent2D Extent
    {
        get
        {
            return global::VkExtent2D.__CreateInstance(new global::System.IntPtr(&((global::VkRectLayerKHR.__Internal*) __Instance)->extent));
        }

        set
        {
            ((global::VkRectLayerKHR.__Internal*)__Instance)->extent = ReferenceEquals(value, null) ? new global::VkExtent2D.__Internal() : *(global::VkExtent2D.__Internal*) value.__Instance;
        }
    }

    public uint Layer
    {
        get
        {
            return ((global::VkRectLayerKHR.__Internal*) __Instance)->layer;
        }

        set
        {
            ((global::VkRectLayerKHR.__Internal*)__Instance)->layer = value;
        }
    }
}

public unsafe partial class VkPresentRegionKHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint rectangleCount;

        [FieldOffset(8)]
        internal global::System.IntPtr pRectangles;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPresentRegionKHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPresentRegionKHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPresentRegionKHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPresentRegionKHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkPresentRegionKHR __CreateInstance(global::VkPresentRegionKHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkPresentRegionKHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPresentRegionKHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPresentRegionKHR.__Internal));
        *(global::VkPresentRegionKHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPresentRegionKHR(global::VkPresentRegionKHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPresentRegionKHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPresentRegionKHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPresentRegionKHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint RectangleCount
    {
        get
        {
            return ((global::VkPresentRegionKHR.__Internal*) __Instance)->rectangleCount;
        }

        set
        {
            ((global::VkPresentRegionKHR.__Internal*)__Instance)->rectangleCount = value;
        }
    }

    public global::VkRectLayerKHR PRectangles
    {
        get
        {
            global::VkRectLayerKHR __result0;
            if (((global::VkPresentRegionKHR.__Internal*) __Instance)->pRectangles == IntPtr.Zero) __result0 = null;
            else if (global::VkRectLayerKHR.NativeToManagedMap.ContainsKey(((global::VkPresentRegionKHR.__Internal*) __Instance)->pRectangles))
                __result0 = (global::VkRectLayerKHR) global::VkRectLayerKHR.NativeToManagedMap[((global::VkPresentRegionKHR.__Internal*) __Instance)->pRectangles];
            else __result0 = global::VkRectLayerKHR.__CreateInstance(((global::VkPresentRegionKHR.__Internal*) __Instance)->pRectangles);
            return __result0;
        }

        set
        {
            ((global::VkPresentRegionKHR.__Internal*)__Instance)->pRectangles = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkPresentRegionsKHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint swapchainCount;

        [FieldOffset(24)]
        internal global::System.IntPtr pRegions;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPresentRegionsKHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPresentRegionsKHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPresentRegionsKHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPresentRegionsKHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkPresentRegionsKHR __CreateInstance(global::VkPresentRegionsKHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkPresentRegionsKHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPresentRegionsKHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPresentRegionsKHR.__Internal));
        *(global::VkPresentRegionsKHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPresentRegionsKHR(global::VkPresentRegionsKHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPresentRegionsKHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPresentRegionsKHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPresentRegionsKHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPresentRegionsKHR.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPresentRegionsKHR.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPresentRegionsKHR.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPresentRegionsKHR.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint SwapchainCount
    {
        get
        {
            return ((global::VkPresentRegionsKHR.__Internal*) __Instance)->swapchainCount;
        }

        set
        {
            ((global::VkPresentRegionsKHR.__Internal*)__Instance)->swapchainCount = value;
        }
    }

    public global::VkPresentRegionKHR PRegions
    {
        get
        {
            global::VkPresentRegionKHR __result0;
            if (((global::VkPresentRegionsKHR.__Internal*) __Instance)->pRegions == IntPtr.Zero) __result0 = null;
            else if (global::VkPresentRegionKHR.NativeToManagedMap.ContainsKey(((global::VkPresentRegionsKHR.__Internal*) __Instance)->pRegions))
                __result0 = (global::VkPresentRegionKHR) global::VkPresentRegionKHR.NativeToManagedMap[((global::VkPresentRegionsKHR.__Internal*) __Instance)->pRegions];
            else __result0 = global::VkPresentRegionKHR.__CreateInstance(((global::VkPresentRegionsKHR.__Internal*) __Instance)->pRegions);
            return __result0;
        }

        set
        {
            ((global::VkPresentRegionsKHR.__Internal*)__Instance)->pRegions = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkSharedPresentSurfaceCapabilitiesKHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint sharedPresentSupportedUsageFlags;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSharedPresentSurfaceCapabilitiesKHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSharedPresentSurfaceCapabilitiesKHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSharedPresentSurfaceCapabilitiesKHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSharedPresentSurfaceCapabilitiesKHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkSharedPresentSurfaceCapabilitiesKHR __CreateInstance(global::VkSharedPresentSurfaceCapabilitiesKHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkSharedPresentSurfaceCapabilitiesKHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSharedPresentSurfaceCapabilitiesKHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSharedPresentSurfaceCapabilitiesKHR.__Internal));
        *(global::VkSharedPresentSurfaceCapabilitiesKHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSharedPresentSurfaceCapabilitiesKHR(global::VkSharedPresentSurfaceCapabilitiesKHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSharedPresentSurfaceCapabilitiesKHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSharedPresentSurfaceCapabilitiesKHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkSharedPresentSurfaceCapabilitiesKHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkSharedPresentSurfaceCapabilitiesKHR.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkSharedPresentSurfaceCapabilitiesKHR.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkSharedPresentSurfaceCapabilitiesKHR.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkSharedPresentSurfaceCapabilitiesKHR.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint SharedPresentSupportedUsageFlags
    {
        get
        {
            return ((global::VkSharedPresentSurfaceCapabilitiesKHR.__Internal*) __Instance)->sharedPresentSupportedUsageFlags;
        }

        set
        {
            ((global::VkSharedPresentSurfaceCapabilitiesKHR.__Internal*)__Instance)->sharedPresentSupportedUsageFlags = value;
        }
    }
}

public unsafe partial class VkImportFenceFdInfoKHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::System.IntPtr fence;

        [FieldOffset(24)]
        internal uint flags;

        [FieldOffset(28)]
        internal global::VkExternalFenceHandleTypeFlagBits handleType;

        [FieldOffset(32)]
        internal int fd;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImportFenceFdInfoKHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImportFenceFdInfoKHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkImportFenceFdInfoKHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkImportFenceFdInfoKHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkImportFenceFdInfoKHR __CreateInstance(global::VkImportFenceFdInfoKHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkImportFenceFdInfoKHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkImportFenceFdInfoKHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkImportFenceFdInfoKHR.__Internal));
        *(global::VkImportFenceFdInfoKHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkImportFenceFdInfoKHR(global::VkImportFenceFdInfoKHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkImportFenceFdInfoKHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkImportFenceFdInfoKHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkImportFenceFdInfoKHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkImportFenceFdInfoKHR.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkImportFenceFdInfoKHR.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkImportFenceFdInfoKHR.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkImportFenceFdInfoKHR.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkFenceT Fence
    {
        get
        {
            global::VkFenceT __result0;
            if (((global::VkImportFenceFdInfoKHR.__Internal*) __Instance)->fence == IntPtr.Zero) __result0 = null;
            else if (global::VkFenceT.NativeToManagedMap.ContainsKey(((global::VkImportFenceFdInfoKHR.__Internal*) __Instance)->fence))
                __result0 = (global::VkFenceT) global::VkFenceT.NativeToManagedMap[((global::VkImportFenceFdInfoKHR.__Internal*) __Instance)->fence];
            else __result0 = global::VkFenceT.__CreateInstance(((global::VkImportFenceFdInfoKHR.__Internal*) __Instance)->fence);
            return __result0;
        }

        set
        {
            ((global::VkImportFenceFdInfoKHR.__Internal*)__Instance)->fence = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkImportFenceFdInfoKHR.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkImportFenceFdInfoKHR.__Internal*)__Instance)->flags = value;
        }
    }

    public global::VkExternalFenceHandleTypeFlagBits HandleType
    {
        get
        {
            return ((global::VkImportFenceFdInfoKHR.__Internal*) __Instance)->handleType;
        }

        set
        {
            ((global::VkImportFenceFdInfoKHR.__Internal*)__Instance)->handleType = value;
        }
    }

    public int Fd
    {
        get
        {
            return ((global::VkImportFenceFdInfoKHR.__Internal*) __Instance)->fd;
        }

        set
        {
            ((global::VkImportFenceFdInfoKHR.__Internal*)__Instance)->fd = value;
        }
    }
}

public unsafe partial class VkFenceGetFdInfoKHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::System.IntPtr fence;

        [FieldOffset(24)]
        internal global::VkExternalFenceHandleTypeFlagBits handleType;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkFenceGetFdInfoKHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkFenceGetFdInfoKHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkFenceGetFdInfoKHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkFenceGetFdInfoKHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkFenceGetFdInfoKHR __CreateInstance(global::VkFenceGetFdInfoKHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkFenceGetFdInfoKHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkFenceGetFdInfoKHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkFenceGetFdInfoKHR.__Internal));
        *(global::VkFenceGetFdInfoKHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkFenceGetFdInfoKHR(global::VkFenceGetFdInfoKHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkFenceGetFdInfoKHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkFenceGetFdInfoKHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkFenceGetFdInfoKHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkFenceGetFdInfoKHR.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkFenceGetFdInfoKHR.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkFenceGetFdInfoKHR.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkFenceGetFdInfoKHR.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkFenceT Fence
    {
        get
        {
            global::VkFenceT __result0;
            if (((global::VkFenceGetFdInfoKHR.__Internal*) __Instance)->fence == IntPtr.Zero) __result0 = null;
            else if (global::VkFenceT.NativeToManagedMap.ContainsKey(((global::VkFenceGetFdInfoKHR.__Internal*) __Instance)->fence))
                __result0 = (global::VkFenceT) global::VkFenceT.NativeToManagedMap[((global::VkFenceGetFdInfoKHR.__Internal*) __Instance)->fence];
            else __result0 = global::VkFenceT.__CreateInstance(((global::VkFenceGetFdInfoKHR.__Internal*) __Instance)->fence);
            return __result0;
        }

        set
        {
            ((global::VkFenceGetFdInfoKHR.__Internal*)__Instance)->fence = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkExternalFenceHandleTypeFlagBits HandleType
    {
        get
        {
            return ((global::VkFenceGetFdInfoKHR.__Internal*) __Instance)->handleType;
        }

        set
        {
            ((global::VkFenceGetFdInfoKHR.__Internal*)__Instance)->handleType = value;
        }
    }
}

public unsafe partial class VkPhysicalDeviceSurfaceInfo2KHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::System.IntPtr surface;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceSurfaceInfo2KHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceSurfaceInfo2KHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceSurfaceInfo2KHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceSurfaceInfo2KHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceSurfaceInfo2KHR __CreateInstance(global::VkPhysicalDeviceSurfaceInfo2KHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceSurfaceInfo2KHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceSurfaceInfo2KHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceSurfaceInfo2KHR.__Internal));
        *(global::VkPhysicalDeviceSurfaceInfo2KHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceSurfaceInfo2KHR(global::VkPhysicalDeviceSurfaceInfo2KHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceSurfaceInfo2KHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceSurfaceInfo2KHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceSurfaceInfo2KHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDeviceSurfaceInfo2KHR.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDeviceSurfaceInfo2KHR.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDeviceSurfaceInfo2KHR.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDeviceSurfaceInfo2KHR.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkSurfaceKHR_T Surface
    {
        get
        {
            global::VkSurfaceKHR_T __result0;
            if (((global::VkPhysicalDeviceSurfaceInfo2KHR.__Internal*) __Instance)->surface == IntPtr.Zero) __result0 = null;
            else if (global::VkSurfaceKHR_T.NativeToManagedMap.ContainsKey(((global::VkPhysicalDeviceSurfaceInfo2KHR.__Internal*) __Instance)->surface))
                __result0 = (global::VkSurfaceKHR_T) global::VkSurfaceKHR_T.NativeToManagedMap[((global::VkPhysicalDeviceSurfaceInfo2KHR.__Internal*) __Instance)->surface];
            else __result0 = global::VkSurfaceKHR_T.__CreateInstance(((global::VkPhysicalDeviceSurfaceInfo2KHR.__Internal*) __Instance)->surface);
            return __result0;
        }

        set
        {
            ((global::VkPhysicalDeviceSurfaceInfo2KHR.__Internal*)__Instance)->surface = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkSurfaceCapabilities2KHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 72)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkSurfaceCapabilitiesKHR.__Internal surfaceCapabilities;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSurfaceCapabilities2KHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSurfaceCapabilities2KHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSurfaceCapabilities2KHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSurfaceCapabilities2KHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkSurfaceCapabilities2KHR __CreateInstance(global::VkSurfaceCapabilities2KHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkSurfaceCapabilities2KHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSurfaceCapabilities2KHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSurfaceCapabilities2KHR.__Internal));
        *(global::VkSurfaceCapabilities2KHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSurfaceCapabilities2KHR(global::VkSurfaceCapabilities2KHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSurfaceCapabilities2KHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSurfaceCapabilities2KHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkSurfaceCapabilities2KHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkSurfaceCapabilities2KHR.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkSurfaceCapabilities2KHR.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkSurfaceCapabilities2KHR.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkSurfaceCapabilities2KHR.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkSurfaceCapabilitiesKHR SurfaceCapabilities
    {
        get
        {
            return global::VkSurfaceCapabilitiesKHR.__CreateInstance(new global::System.IntPtr(&((global::VkSurfaceCapabilities2KHR.__Internal*) __Instance)->surfaceCapabilities));
        }

        set
        {
            ((global::VkSurfaceCapabilities2KHR.__Internal*)__Instance)->surfaceCapabilities = ReferenceEquals(value, null) ? new global::VkSurfaceCapabilitiesKHR.__Internal() : *(global::VkSurfaceCapabilitiesKHR.__Internal*) value.__Instance;
        }
    }
}

public unsafe partial class VkSurfaceFormat2KHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkSurfaceFormatKHR.__Internal surfaceFormat;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSurfaceFormat2KHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSurfaceFormat2KHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSurfaceFormat2KHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSurfaceFormat2KHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkSurfaceFormat2KHR __CreateInstance(global::VkSurfaceFormat2KHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkSurfaceFormat2KHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSurfaceFormat2KHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSurfaceFormat2KHR.__Internal));
        *(global::VkSurfaceFormat2KHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSurfaceFormat2KHR(global::VkSurfaceFormat2KHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSurfaceFormat2KHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSurfaceFormat2KHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkSurfaceFormat2KHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkSurfaceFormat2KHR.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkSurfaceFormat2KHR.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkSurfaceFormat2KHR.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkSurfaceFormat2KHR.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkSurfaceFormatKHR SurfaceFormat
    {
        get
        {
            return global::VkSurfaceFormatKHR.__CreateInstance(new global::System.IntPtr(&((global::VkSurfaceFormat2KHR.__Internal*) __Instance)->surfaceFormat));
        }

        set
        {
            ((global::VkSurfaceFormat2KHR.__Internal*)__Instance)->surfaceFormat = ReferenceEquals(value, null) ? new global::VkSurfaceFormatKHR.__Internal() : *(global::VkSurfaceFormatKHR.__Internal*) value.__Instance;
        }
    }
}

public unsafe partial class VkImageFormatListCreateInfoKHR : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint viewFormatCount;

        [FieldOffset(24)]
        internal global::System.IntPtr pViewFormats;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageFormatListCreateInfoKHR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImageFormatListCreateInfoKHR>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkImageFormatListCreateInfoKHR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkImageFormatListCreateInfoKHR(native.ToPointer(), skipVTables);
    }

    internal static global::VkImageFormatListCreateInfoKHR __CreateInstance(global::VkImageFormatListCreateInfoKHR.__Internal native, bool skipVTables = false)
    {
        return new global::VkImageFormatListCreateInfoKHR(native, skipVTables);
    }

    private static void* __CopyValue(global::VkImageFormatListCreateInfoKHR.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkImageFormatListCreateInfoKHR.__Internal));
        *(global::VkImageFormatListCreateInfoKHR.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkImageFormatListCreateInfoKHR(global::VkImageFormatListCreateInfoKHR.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkImageFormatListCreateInfoKHR(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkImageFormatListCreateInfoKHR()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkImageFormatListCreateInfoKHR __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkImageFormatListCreateInfoKHR.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkImageFormatListCreateInfoKHR.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkImageFormatListCreateInfoKHR.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkImageFormatListCreateInfoKHR.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint ViewFormatCount
    {
        get
        {
            return ((global::VkImageFormatListCreateInfoKHR.__Internal*) __Instance)->viewFormatCount;
        }

        set
        {
            ((global::VkImageFormatListCreateInfoKHR.__Internal*)__Instance)->viewFormatCount = value;
        }
    }

    public global::VkFormat* PViewFormats
    {
        get
        {
            return ((global::VkImageFormatListCreateInfoKHR.__Internal*) __Instance)->pViewFormats;
        }

        set
        {
            ((global::VkImageFormatListCreateInfoKHR.__Internal*)__Instance)->pViewFormats = value;
        }
    }
}

public unsafe partial class VkDebugReportCallbackEXT_T
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDebugReportCallbackEXT_T> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDebugReportCallbackEXT_T>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDebugReportCallbackEXT_T __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDebugReportCallbackEXT_T(native.ToPointer(), skipVTables);
    }

    internal static global::VkDebugReportCallbackEXT_T __CreateInstance(global::VkDebugReportCallbackEXT_T.__Internal native, bool skipVTables = false)
    {
        return new global::VkDebugReportCallbackEXT_T(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDebugReportCallbackEXT_T.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDebugReportCallbackEXT_T.__Internal));
        *(global::VkDebugReportCallbackEXT_T.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDebugReportCallbackEXT_T(global::VkDebugReportCallbackEXT_T.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDebugReportCallbackEXT_T(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDebugReportCallbackEXT_T()
    {
        Dispose(false);
    }
}

public unsafe partial class VkDebugReportCallbackCreateInfoEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(24)]
        internal global::System.IntPtr pfnCallback;

        [FieldOffset(32)]
        internal global::System.IntPtr pUserData;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDebugReportCallbackCreateInfoEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDebugReportCallbackCreateInfoEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDebugReportCallbackCreateInfoEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDebugReportCallbackCreateInfoEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkDebugReportCallbackCreateInfoEXT __CreateInstance(global::VkDebugReportCallbackCreateInfoEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkDebugReportCallbackCreateInfoEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDebugReportCallbackCreateInfoEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDebugReportCallbackCreateInfoEXT.__Internal));
        *(global::VkDebugReportCallbackCreateInfoEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDebugReportCallbackCreateInfoEXT(global::VkDebugReportCallbackCreateInfoEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDebugReportCallbackCreateInfoEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDebugReportCallbackCreateInfoEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDebugReportCallbackCreateInfoEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDebugReportCallbackCreateInfoEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDebugReportCallbackCreateInfoEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDebugReportCallbackCreateInfoEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDebugReportCallbackCreateInfoEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkDebugReportCallbackCreateInfoEXT.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkDebugReportCallbackCreateInfoEXT.__Internal*)__Instance)->flags = value;
        }
    }

    public global::PFN_vkDebugReportCallbackEXT PfnCallback
    {
        get
        {
            var __ptr0 = ((global::VkDebugReportCallbackCreateInfoEXT.__Internal*) __Instance)->pfnCallback;
            return __ptr0 == IntPtr.Zero? null : (global::PFN_vkDebugReportCallbackEXT) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PFN_vkDebugReportCallbackEXT));
        }

        set
        {
            ((global::VkDebugReportCallbackCreateInfoEXT.__Internal*)__Instance)->pfnCallback = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
        }
    }

    public global::System.IntPtr PUserData
    {
        get
        {
            return ((global::VkDebugReportCallbackCreateInfoEXT.__Internal*) __Instance)->pUserData;
        }

        set
        {
            ((global::VkDebugReportCallbackCreateInfoEXT.__Internal*)__Instance)->pUserData = (global::System.IntPtr) value;
        }
    }
}

public unsafe partial class VkPipelineRasterizationStateRasterizationOrderAMD : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkRasterizationOrderAMD rasterizationOrder;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineRasterizationStateRasterizationOrderAMD> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineRasterizationStateRasterizationOrderAMD>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPipelineRasterizationStateRasterizationOrderAMD __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPipelineRasterizationStateRasterizationOrderAMD(native.ToPointer(), skipVTables);
    }

    internal static global::VkPipelineRasterizationStateRasterizationOrderAMD __CreateInstance(global::VkPipelineRasterizationStateRasterizationOrderAMD.__Internal native, bool skipVTables = false)
    {
        return new global::VkPipelineRasterizationStateRasterizationOrderAMD(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPipelineRasterizationStateRasterizationOrderAMD.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPipelineRasterizationStateRasterizationOrderAMD.__Internal));
        *(global::VkPipelineRasterizationStateRasterizationOrderAMD.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPipelineRasterizationStateRasterizationOrderAMD(global::VkPipelineRasterizationStateRasterizationOrderAMD.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPipelineRasterizationStateRasterizationOrderAMD(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPipelineRasterizationStateRasterizationOrderAMD()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPipelineRasterizationStateRasterizationOrderAMD __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPipelineRasterizationStateRasterizationOrderAMD.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPipelineRasterizationStateRasterizationOrderAMD.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPipelineRasterizationStateRasterizationOrderAMD.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPipelineRasterizationStateRasterizationOrderAMD.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkRasterizationOrderAMD RasterizationOrder
    {
        get
        {
            return ((global::VkPipelineRasterizationStateRasterizationOrderAMD.__Internal*) __Instance)->rasterizationOrder;
        }

        set
        {
            ((global::VkPipelineRasterizationStateRasterizationOrderAMD.__Internal*)__Instance)->rasterizationOrder = value;
        }
    }
}

public unsafe partial class VkDebugMarkerObjectNameInfoEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkDebugReportObjectTypeEXT objectType;

        [FieldOffset(24)]
        internal ulong @object;

        [FieldOffset(32)]
        internal global::System.IntPtr pObjectName;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDebugMarkerObjectNameInfoEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDebugMarkerObjectNameInfoEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDebugMarkerObjectNameInfoEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDebugMarkerObjectNameInfoEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkDebugMarkerObjectNameInfoEXT __CreateInstance(global::VkDebugMarkerObjectNameInfoEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkDebugMarkerObjectNameInfoEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDebugMarkerObjectNameInfoEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDebugMarkerObjectNameInfoEXT.__Internal));
        *(global::VkDebugMarkerObjectNameInfoEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDebugMarkerObjectNameInfoEXT(global::VkDebugMarkerObjectNameInfoEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDebugMarkerObjectNameInfoEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDebugMarkerObjectNameInfoEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDebugMarkerObjectNameInfoEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDebugMarkerObjectNameInfoEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDebugMarkerObjectNameInfoEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDebugMarkerObjectNameInfoEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDebugMarkerObjectNameInfoEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkDebugReportObjectTypeEXT ObjectType
    {
        get
        {
            return ((global::VkDebugMarkerObjectNameInfoEXT.__Internal*) __Instance)->objectType;
        }

        set
        {
            ((global::VkDebugMarkerObjectNameInfoEXT.__Internal*)__Instance)->objectType = value;
        }
    }

    public ulong Object
    {
        get
        {
            return ((global::VkDebugMarkerObjectNameInfoEXT.__Internal*) __Instance)->@object;
        }

        set
        {
            ((global::VkDebugMarkerObjectNameInfoEXT.__Internal*)__Instance)->@object = value;
        }
    }

    public string PObjectName
    {
        get
        {
            return Marshal.PtrToStringAnsi(((global::VkDebugMarkerObjectNameInfoEXT.__Internal*) __Instance)->pObjectName);
        }

        set
        {
            ((global::VkDebugMarkerObjectNameInfoEXT.__Internal*)__Instance)->pObjectName = Marshal.StringToHGlobalAnsi(value);
        }
    }
}

public unsafe partial class VkDebugMarkerObjectTagInfoEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 56)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkDebugReportObjectTypeEXT objectType;

        [FieldOffset(24)]
        internal ulong @object;

        [FieldOffset(32)]
        internal ulong tagName;

        [FieldOffset(40)]
        internal ulong tagSize;

        [FieldOffset(48)]
        internal global::System.IntPtr pTag;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDebugMarkerObjectTagInfoEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDebugMarkerObjectTagInfoEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDebugMarkerObjectTagInfoEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDebugMarkerObjectTagInfoEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkDebugMarkerObjectTagInfoEXT __CreateInstance(global::VkDebugMarkerObjectTagInfoEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkDebugMarkerObjectTagInfoEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDebugMarkerObjectTagInfoEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDebugMarkerObjectTagInfoEXT.__Internal));
        *(global::VkDebugMarkerObjectTagInfoEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDebugMarkerObjectTagInfoEXT(global::VkDebugMarkerObjectTagInfoEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDebugMarkerObjectTagInfoEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDebugMarkerObjectTagInfoEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDebugMarkerObjectTagInfoEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDebugMarkerObjectTagInfoEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDebugMarkerObjectTagInfoEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDebugMarkerObjectTagInfoEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDebugMarkerObjectTagInfoEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkDebugReportObjectTypeEXT ObjectType
    {
        get
        {
            return ((global::VkDebugMarkerObjectTagInfoEXT.__Internal*) __Instance)->objectType;
        }

        set
        {
            ((global::VkDebugMarkerObjectTagInfoEXT.__Internal*)__Instance)->objectType = value;
        }
    }

    public ulong Object
    {
        get
        {
            return ((global::VkDebugMarkerObjectTagInfoEXT.__Internal*) __Instance)->@object;
        }

        set
        {
            ((global::VkDebugMarkerObjectTagInfoEXT.__Internal*)__Instance)->@object = value;
        }
    }

    public ulong TagName
    {
        get
        {
            return ((global::VkDebugMarkerObjectTagInfoEXT.__Internal*) __Instance)->tagName;
        }

        set
        {
            ((global::VkDebugMarkerObjectTagInfoEXT.__Internal*)__Instance)->tagName = value;
        }
    }

    public ulong TagSize
    {
        get
        {
            return ((global::VkDebugMarkerObjectTagInfoEXT.__Internal*) __Instance)->tagSize;
        }

        set
        {
            ((global::VkDebugMarkerObjectTagInfoEXT.__Internal*)__Instance)->tagSize = value;
        }
    }

    public global::System.IntPtr PTag
    {
        get
        {
            return ((global::VkDebugMarkerObjectTagInfoEXT.__Internal*) __Instance)->pTag;
        }

        set
        {
            ((global::VkDebugMarkerObjectTagInfoEXT.__Internal*)__Instance)->pTag = (global::System.IntPtr) value;
        }
    }
}

public unsafe partial class VkDebugMarkerMarkerInfoEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::System.IntPtr pMarkerName;

        [FieldOffset(24)]
        internal fixed float color[4];
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDebugMarkerMarkerInfoEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDebugMarkerMarkerInfoEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDebugMarkerMarkerInfoEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDebugMarkerMarkerInfoEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkDebugMarkerMarkerInfoEXT __CreateInstance(global::VkDebugMarkerMarkerInfoEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkDebugMarkerMarkerInfoEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDebugMarkerMarkerInfoEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDebugMarkerMarkerInfoEXT.__Internal));
        *(global::VkDebugMarkerMarkerInfoEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDebugMarkerMarkerInfoEXT(global::VkDebugMarkerMarkerInfoEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDebugMarkerMarkerInfoEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDebugMarkerMarkerInfoEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDebugMarkerMarkerInfoEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDebugMarkerMarkerInfoEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDebugMarkerMarkerInfoEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDebugMarkerMarkerInfoEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDebugMarkerMarkerInfoEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public string PMarkerName
    {
        get
        {
            return Marshal.PtrToStringAnsi(((global::VkDebugMarkerMarkerInfoEXT.__Internal*) __Instance)->pMarkerName);
        }

        set
        {
            ((global::VkDebugMarkerMarkerInfoEXT.__Internal*)__Instance)->pMarkerName = Marshal.StringToHGlobalAnsi(value);
        }
    }

    public float[] Color
    {
        get
        {
            float[] __value = null;
            if (((global::VkDebugMarkerMarkerInfoEXT.__Internal*) __Instance)->color != null)
            {
                __value = new float[4];
                for (int i = 0; i < 4; i++)
                    __value[i] = ((global::VkDebugMarkerMarkerInfoEXT.__Internal*) __Instance)->color[i];
            }
            return __value;
        }

        set
        {
            if (value != null)
            {
                for (int i = 0; i < 4; i++)
                    ((global::VkDebugMarkerMarkerInfoEXT.__Internal*)__Instance)->color[i] = value[i];
            }
        }
    }
}

public unsafe partial class VkDedicatedAllocationImageCreateInfoNV : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint dedicatedAllocation;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDedicatedAllocationImageCreateInfoNV> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDedicatedAllocationImageCreateInfoNV>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDedicatedAllocationImageCreateInfoNV __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDedicatedAllocationImageCreateInfoNV(native.ToPointer(), skipVTables);
    }

    internal static global::VkDedicatedAllocationImageCreateInfoNV __CreateInstance(global::VkDedicatedAllocationImageCreateInfoNV.__Internal native, bool skipVTables = false)
    {
        return new global::VkDedicatedAllocationImageCreateInfoNV(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDedicatedAllocationImageCreateInfoNV.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDedicatedAllocationImageCreateInfoNV.__Internal));
        *(global::VkDedicatedAllocationImageCreateInfoNV.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDedicatedAllocationImageCreateInfoNV(global::VkDedicatedAllocationImageCreateInfoNV.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDedicatedAllocationImageCreateInfoNV(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDedicatedAllocationImageCreateInfoNV()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDedicatedAllocationImageCreateInfoNV __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDedicatedAllocationImageCreateInfoNV.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDedicatedAllocationImageCreateInfoNV.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDedicatedAllocationImageCreateInfoNV.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDedicatedAllocationImageCreateInfoNV.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint DedicatedAllocation
    {
        get
        {
            return ((global::VkDedicatedAllocationImageCreateInfoNV.__Internal*) __Instance)->dedicatedAllocation;
        }

        set
        {
            ((global::VkDedicatedAllocationImageCreateInfoNV.__Internal*)__Instance)->dedicatedAllocation = value;
        }
    }
}

public unsafe partial class VkDedicatedAllocationBufferCreateInfoNV : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint dedicatedAllocation;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDedicatedAllocationBufferCreateInfoNV> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDedicatedAllocationBufferCreateInfoNV>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDedicatedAllocationBufferCreateInfoNV __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDedicatedAllocationBufferCreateInfoNV(native.ToPointer(), skipVTables);
    }

    internal static global::VkDedicatedAllocationBufferCreateInfoNV __CreateInstance(global::VkDedicatedAllocationBufferCreateInfoNV.__Internal native, bool skipVTables = false)
    {
        return new global::VkDedicatedAllocationBufferCreateInfoNV(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDedicatedAllocationBufferCreateInfoNV.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDedicatedAllocationBufferCreateInfoNV.__Internal));
        *(global::VkDedicatedAllocationBufferCreateInfoNV.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDedicatedAllocationBufferCreateInfoNV(global::VkDedicatedAllocationBufferCreateInfoNV.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDedicatedAllocationBufferCreateInfoNV(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDedicatedAllocationBufferCreateInfoNV()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDedicatedAllocationBufferCreateInfoNV __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDedicatedAllocationBufferCreateInfoNV.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDedicatedAllocationBufferCreateInfoNV.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDedicatedAllocationBufferCreateInfoNV.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDedicatedAllocationBufferCreateInfoNV.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint DedicatedAllocation
    {
        get
        {
            return ((global::VkDedicatedAllocationBufferCreateInfoNV.__Internal*) __Instance)->dedicatedAllocation;
        }

        set
        {
            ((global::VkDedicatedAllocationBufferCreateInfoNV.__Internal*)__Instance)->dedicatedAllocation = value;
        }
    }
}

public unsafe partial class VkDedicatedAllocationMemoryAllocateInfoNV : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::System.IntPtr image;

        [FieldOffset(24)]
        internal global::System.IntPtr buffer;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDedicatedAllocationMemoryAllocateInfoNV> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDedicatedAllocationMemoryAllocateInfoNV>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDedicatedAllocationMemoryAllocateInfoNV __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDedicatedAllocationMemoryAllocateInfoNV(native.ToPointer(), skipVTables);
    }

    internal static global::VkDedicatedAllocationMemoryAllocateInfoNV __CreateInstance(global::VkDedicatedAllocationMemoryAllocateInfoNV.__Internal native, bool skipVTables = false)
    {
        return new global::VkDedicatedAllocationMemoryAllocateInfoNV(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDedicatedAllocationMemoryAllocateInfoNV.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDedicatedAllocationMemoryAllocateInfoNV.__Internal));
        *(global::VkDedicatedAllocationMemoryAllocateInfoNV.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDedicatedAllocationMemoryAllocateInfoNV(global::VkDedicatedAllocationMemoryAllocateInfoNV.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDedicatedAllocationMemoryAllocateInfoNV(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDedicatedAllocationMemoryAllocateInfoNV()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDedicatedAllocationMemoryAllocateInfoNV __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDedicatedAllocationMemoryAllocateInfoNV.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDedicatedAllocationMemoryAllocateInfoNV.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDedicatedAllocationMemoryAllocateInfoNV.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDedicatedAllocationMemoryAllocateInfoNV.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkImageT Image
    {
        get
        {
            global::VkImageT __result0;
            if (((global::VkDedicatedAllocationMemoryAllocateInfoNV.__Internal*) __Instance)->image == IntPtr.Zero) __result0 = null;
            else if (global::VkImageT.NativeToManagedMap.ContainsKey(((global::VkDedicatedAllocationMemoryAllocateInfoNV.__Internal*) __Instance)->image))
                __result0 = (global::VkImageT) global::VkImageT.NativeToManagedMap[((global::VkDedicatedAllocationMemoryAllocateInfoNV.__Internal*) __Instance)->image];
            else __result0 = global::VkImageT.__CreateInstance(((global::VkDedicatedAllocationMemoryAllocateInfoNV.__Internal*) __Instance)->image);
            return __result0;
        }

        set
        {
            ((global::VkDedicatedAllocationMemoryAllocateInfoNV.__Internal*)__Instance)->image = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkBufferT Buffer
    {
        get
        {
            global::VkBufferT __result0;
            if (((global::VkDedicatedAllocationMemoryAllocateInfoNV.__Internal*) __Instance)->buffer == IntPtr.Zero) __result0 = null;
            else if (global::VkBufferT.NativeToManagedMap.ContainsKey(((global::VkDedicatedAllocationMemoryAllocateInfoNV.__Internal*) __Instance)->buffer))
                __result0 = (global::VkBufferT) global::VkBufferT.NativeToManagedMap[((global::VkDedicatedAllocationMemoryAllocateInfoNV.__Internal*) __Instance)->buffer];
            else __result0 = global::VkBufferT.__CreateInstance(((global::VkDedicatedAllocationMemoryAllocateInfoNV.__Internal*) __Instance)->buffer);
            return __result0;
        }

        set
        {
            ((global::VkDedicatedAllocationMemoryAllocateInfoNV.__Internal*)__Instance)->buffer = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkTextureLODGatherFormatPropertiesAMD : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint supportsTextureGatherLODBiasAMD;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkTextureLODGatherFormatPropertiesAMD> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkTextureLODGatherFormatPropertiesAMD>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkTextureLODGatherFormatPropertiesAMD __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkTextureLODGatherFormatPropertiesAMD(native.ToPointer(), skipVTables);
    }

    internal static global::VkTextureLODGatherFormatPropertiesAMD __CreateInstance(global::VkTextureLODGatherFormatPropertiesAMD.__Internal native, bool skipVTables = false)
    {
        return new global::VkTextureLODGatherFormatPropertiesAMD(native, skipVTables);
    }

    private static void* __CopyValue(global::VkTextureLODGatherFormatPropertiesAMD.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkTextureLODGatherFormatPropertiesAMD.__Internal));
        *(global::VkTextureLODGatherFormatPropertiesAMD.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkTextureLODGatherFormatPropertiesAMD(global::VkTextureLODGatherFormatPropertiesAMD.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkTextureLODGatherFormatPropertiesAMD(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkTextureLODGatherFormatPropertiesAMD()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkTextureLODGatherFormatPropertiesAMD __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkTextureLODGatherFormatPropertiesAMD.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkTextureLODGatherFormatPropertiesAMD.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkTextureLODGatherFormatPropertiesAMD.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkTextureLODGatherFormatPropertiesAMD.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint SupportsTextureGatherLODBiasAMD
    {
        get
        {
            return ((global::VkTextureLODGatherFormatPropertiesAMD.__Internal*) __Instance)->supportsTextureGatherLODBiasAMD;
        }

        set
        {
            ((global::VkTextureLODGatherFormatPropertiesAMD.__Internal*)__Instance)->supportsTextureGatherLODBiasAMD = value;
        }
    }
}

public unsafe partial class VkShaderResourceUsageAMD : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint numUsedVgprs;

        [FieldOffset(4)]
        internal uint numUsedSgprs;

        [FieldOffset(8)]
        internal uint ldsSizePerLocalWorkGroup;

        [FieldOffset(16)]
        internal ulong ldsUsageSizeInBytes;

        [FieldOffset(24)]
        internal ulong scratchMemUsageInBytes;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkShaderResourceUsageAMD> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkShaderResourceUsageAMD>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkShaderResourceUsageAMD __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkShaderResourceUsageAMD(native.ToPointer(), skipVTables);
    }

    internal static global::VkShaderResourceUsageAMD __CreateInstance(global::VkShaderResourceUsageAMD.__Internal native, bool skipVTables = false)
    {
        return new global::VkShaderResourceUsageAMD(native, skipVTables);
    }

    private static void* __CopyValue(global::VkShaderResourceUsageAMD.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkShaderResourceUsageAMD.__Internal));
        *(global::VkShaderResourceUsageAMD.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkShaderResourceUsageAMD(global::VkShaderResourceUsageAMD.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkShaderResourceUsageAMD(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkShaderResourceUsageAMD()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkShaderResourceUsageAMD __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint NumUsedVgprs
    {
        get
        {
            return ((global::VkShaderResourceUsageAMD.__Internal*) __Instance)->numUsedVgprs;
        }

        set
        {
            ((global::VkShaderResourceUsageAMD.__Internal*)__Instance)->numUsedVgprs = value;
        }
    }

    public uint NumUsedSgprs
    {
        get
        {
            return ((global::VkShaderResourceUsageAMD.__Internal*) __Instance)->numUsedSgprs;
        }

        set
        {
            ((global::VkShaderResourceUsageAMD.__Internal*)__Instance)->numUsedSgprs = value;
        }
    }

    public uint LdsSizePerLocalWorkGroup
    {
        get
        {
            return ((global::VkShaderResourceUsageAMD.__Internal*) __Instance)->ldsSizePerLocalWorkGroup;
        }

        set
        {
            ((global::VkShaderResourceUsageAMD.__Internal*)__Instance)->ldsSizePerLocalWorkGroup = value;
        }
    }

    public ulong LdsUsageSizeInBytes
    {
        get
        {
            return ((global::VkShaderResourceUsageAMD.__Internal*) __Instance)->ldsUsageSizeInBytes;
        }

        set
        {
            ((global::VkShaderResourceUsageAMD.__Internal*)__Instance)->ldsUsageSizeInBytes = value;
        }
    }

    public ulong ScratchMemUsageInBytes
    {
        get
        {
            return ((global::VkShaderResourceUsageAMD.__Internal*) __Instance)->scratchMemUsageInBytes;
        }

        set
        {
            ((global::VkShaderResourceUsageAMD.__Internal*)__Instance)->scratchMemUsageInBytes = value;
        }
    }
}

public unsafe partial class VkShaderStatisticsInfoAMD : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 72)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint shaderStageMask;

        [FieldOffset(8)]
        internal global::VkShaderResourceUsageAMD.__Internal resourceUsage;

        [FieldOffset(40)]
        internal uint numPhysicalVgprs;

        [FieldOffset(44)]
        internal uint numPhysicalSgprs;

        [FieldOffset(48)]
        internal uint numAvailableVgprs;

        [FieldOffset(52)]
        internal uint numAvailableSgprs;

        [FieldOffset(56)]
        internal fixed uint computeWorkGroupSize[3];
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkShaderStatisticsInfoAMD> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkShaderStatisticsInfoAMD>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkShaderStatisticsInfoAMD __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkShaderStatisticsInfoAMD(native.ToPointer(), skipVTables);
    }

    internal static global::VkShaderStatisticsInfoAMD __CreateInstance(global::VkShaderStatisticsInfoAMD.__Internal native, bool skipVTables = false)
    {
        return new global::VkShaderStatisticsInfoAMD(native, skipVTables);
    }

    private static void* __CopyValue(global::VkShaderStatisticsInfoAMD.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkShaderStatisticsInfoAMD.__Internal));
        *(global::VkShaderStatisticsInfoAMD.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkShaderStatisticsInfoAMD(global::VkShaderStatisticsInfoAMD.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkShaderStatisticsInfoAMD(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkShaderStatisticsInfoAMD()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkShaderStatisticsInfoAMD __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint ShaderStageMask
    {
        get
        {
            return ((global::VkShaderStatisticsInfoAMD.__Internal*) __Instance)->shaderStageMask;
        }

        set
        {
            ((global::VkShaderStatisticsInfoAMD.__Internal*)__Instance)->shaderStageMask = value;
        }
    }

    public global::VkShaderResourceUsageAMD ResourceUsage
    {
        get
        {
            return global::VkShaderResourceUsageAMD.__CreateInstance(new global::System.IntPtr(&((global::VkShaderStatisticsInfoAMD.__Internal*) __Instance)->resourceUsage));
        }

        set
        {
            ((global::VkShaderStatisticsInfoAMD.__Internal*)__Instance)->resourceUsage = ReferenceEquals(value, null) ? new global::VkShaderResourceUsageAMD.__Internal() : *(global::VkShaderResourceUsageAMD.__Internal*) value.__Instance;
        }
    }

    public uint NumPhysicalVgprs
    {
        get
        {
            return ((global::VkShaderStatisticsInfoAMD.__Internal*) __Instance)->numPhysicalVgprs;
        }

        set
        {
            ((global::VkShaderStatisticsInfoAMD.__Internal*)__Instance)->numPhysicalVgprs = value;
        }
    }

    public uint NumPhysicalSgprs
    {
        get
        {
            return ((global::VkShaderStatisticsInfoAMD.__Internal*) __Instance)->numPhysicalSgprs;
        }

        set
        {
            ((global::VkShaderStatisticsInfoAMD.__Internal*)__Instance)->numPhysicalSgprs = value;
        }
    }

    public uint NumAvailableVgprs
    {
        get
        {
            return ((global::VkShaderStatisticsInfoAMD.__Internal*) __Instance)->numAvailableVgprs;
        }

        set
        {
            ((global::VkShaderStatisticsInfoAMD.__Internal*)__Instance)->numAvailableVgprs = value;
        }
    }

    public uint NumAvailableSgprs
    {
        get
        {
            return ((global::VkShaderStatisticsInfoAMD.__Internal*) __Instance)->numAvailableSgprs;
        }

        set
        {
            ((global::VkShaderStatisticsInfoAMD.__Internal*)__Instance)->numAvailableSgprs = value;
        }
    }

    public uint[] ComputeWorkGroupSize
    {
        get
        {
            uint[] __value = null;
            if (((global::VkShaderStatisticsInfoAMD.__Internal*) __Instance)->computeWorkGroupSize != null)
            {
                __value = new uint[3];
                for (int i = 0; i < 3; i++)
                    __value[i] = ((global::VkShaderStatisticsInfoAMD.__Internal*) __Instance)->computeWorkGroupSize[i];
            }
            return __value;
        }

        set
        {
            if (value != null)
            {
                for (int i = 0; i < 3; i++)
                    ((global::VkShaderStatisticsInfoAMD.__Internal*)__Instance)->computeWorkGroupSize[i] = value[i];
            }
        }
    }
}

public unsafe partial class VkExternalImageFormatPropertiesNV : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 48)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkImageFormatProperties.__Internal imageFormatProperties;

        [FieldOffset(32)]
        internal uint externalMemoryFeatures;

        [FieldOffset(36)]
        internal uint exportFromImportedHandleTypes;

        [FieldOffset(40)]
        internal uint compatibleHandleTypes;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkExternalImageFormatPropertiesNV> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkExternalImageFormatPropertiesNV>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkExternalImageFormatPropertiesNV __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkExternalImageFormatPropertiesNV(native.ToPointer(), skipVTables);
    }

    internal static global::VkExternalImageFormatPropertiesNV __CreateInstance(global::VkExternalImageFormatPropertiesNV.__Internal native, bool skipVTables = false)
    {
        return new global::VkExternalImageFormatPropertiesNV(native, skipVTables);
    }

    private static void* __CopyValue(global::VkExternalImageFormatPropertiesNV.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkExternalImageFormatPropertiesNV.__Internal));
        *(global::VkExternalImageFormatPropertiesNV.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkExternalImageFormatPropertiesNV(global::VkExternalImageFormatPropertiesNV.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkExternalImageFormatPropertiesNV(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkExternalImageFormatPropertiesNV()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkExternalImageFormatPropertiesNV __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkImageFormatProperties ImageFormatProperties
    {
        get
        {
            return global::VkImageFormatProperties.__CreateInstance(new global::System.IntPtr(&((global::VkExternalImageFormatPropertiesNV.__Internal*) __Instance)->imageFormatProperties));
        }

        set
        {
            ((global::VkExternalImageFormatPropertiesNV.__Internal*)__Instance)->imageFormatProperties = ReferenceEquals(value, null) ? new global::VkImageFormatProperties.__Internal() : *(global::VkImageFormatProperties.__Internal*) value.__Instance;
        }
    }

    public uint ExternalMemoryFeatures
    {
        get
        {
            return ((global::VkExternalImageFormatPropertiesNV.__Internal*) __Instance)->externalMemoryFeatures;
        }

        set
        {
            ((global::VkExternalImageFormatPropertiesNV.__Internal*)__Instance)->externalMemoryFeatures = value;
        }
    }

    public uint ExportFromImportedHandleTypes
    {
        get
        {
            return ((global::VkExternalImageFormatPropertiesNV.__Internal*) __Instance)->exportFromImportedHandleTypes;
        }

        set
        {
            ((global::VkExternalImageFormatPropertiesNV.__Internal*)__Instance)->exportFromImportedHandleTypes = value;
        }
    }

    public uint CompatibleHandleTypes
    {
        get
        {
            return ((global::VkExternalImageFormatPropertiesNV.__Internal*) __Instance)->compatibleHandleTypes;
        }

        set
        {
            ((global::VkExternalImageFormatPropertiesNV.__Internal*)__Instance)->compatibleHandleTypes = value;
        }
    }
}

public unsafe partial class VkExternalMemoryImageCreateInfoNV : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint handleTypes;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkExternalMemoryImageCreateInfoNV> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkExternalMemoryImageCreateInfoNV>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkExternalMemoryImageCreateInfoNV __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkExternalMemoryImageCreateInfoNV(native.ToPointer(), skipVTables);
    }

    internal static global::VkExternalMemoryImageCreateInfoNV __CreateInstance(global::VkExternalMemoryImageCreateInfoNV.__Internal native, bool skipVTables = false)
    {
        return new global::VkExternalMemoryImageCreateInfoNV(native, skipVTables);
    }

    private static void* __CopyValue(global::VkExternalMemoryImageCreateInfoNV.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkExternalMemoryImageCreateInfoNV.__Internal));
        *(global::VkExternalMemoryImageCreateInfoNV.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkExternalMemoryImageCreateInfoNV(global::VkExternalMemoryImageCreateInfoNV.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkExternalMemoryImageCreateInfoNV(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkExternalMemoryImageCreateInfoNV()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkExternalMemoryImageCreateInfoNV __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkExternalMemoryImageCreateInfoNV.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkExternalMemoryImageCreateInfoNV.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkExternalMemoryImageCreateInfoNV.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkExternalMemoryImageCreateInfoNV.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint HandleTypes
    {
        get
        {
            return ((global::VkExternalMemoryImageCreateInfoNV.__Internal*) __Instance)->handleTypes;
        }

        set
        {
            ((global::VkExternalMemoryImageCreateInfoNV.__Internal*)__Instance)->handleTypes = value;
        }
    }
}

public unsafe partial class VkExportMemoryAllocateInfoNV : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint handleTypes;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkExportMemoryAllocateInfoNV> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkExportMemoryAllocateInfoNV>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkExportMemoryAllocateInfoNV __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkExportMemoryAllocateInfoNV(native.ToPointer(), skipVTables);
    }

    internal static global::VkExportMemoryAllocateInfoNV __CreateInstance(global::VkExportMemoryAllocateInfoNV.__Internal native, bool skipVTables = false)
    {
        return new global::VkExportMemoryAllocateInfoNV(native, skipVTables);
    }

    private static void* __CopyValue(global::VkExportMemoryAllocateInfoNV.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkExportMemoryAllocateInfoNV.__Internal));
        *(global::VkExportMemoryAllocateInfoNV.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkExportMemoryAllocateInfoNV(global::VkExportMemoryAllocateInfoNV.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkExportMemoryAllocateInfoNV(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkExportMemoryAllocateInfoNV()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkExportMemoryAllocateInfoNV __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkExportMemoryAllocateInfoNV.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkExportMemoryAllocateInfoNV.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkExportMemoryAllocateInfoNV.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkExportMemoryAllocateInfoNV.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint HandleTypes
    {
        get
        {
            return ((global::VkExportMemoryAllocateInfoNV.__Internal*) __Instance)->handleTypes;
        }

        set
        {
            ((global::VkExportMemoryAllocateInfoNV.__Internal*)__Instance)->handleTypes = value;
        }
    }
}

public unsafe partial class VkValidationFlagsEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint disabledValidationCheckCount;

        [FieldOffset(24)]
        internal global::System.IntPtr pDisabledValidationChecks;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkValidationFlagsEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkValidationFlagsEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkValidationFlagsEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkValidationFlagsEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkValidationFlagsEXT __CreateInstance(global::VkValidationFlagsEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkValidationFlagsEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkValidationFlagsEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkValidationFlagsEXT.__Internal));
        *(global::VkValidationFlagsEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkValidationFlagsEXT(global::VkValidationFlagsEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkValidationFlagsEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkValidationFlagsEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkValidationFlagsEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkValidationFlagsEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkValidationFlagsEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkValidationFlagsEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkValidationFlagsEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint DisabledValidationCheckCount
    {
        get
        {
            return ((global::VkValidationFlagsEXT.__Internal*) __Instance)->disabledValidationCheckCount;
        }

        set
        {
            ((global::VkValidationFlagsEXT.__Internal*)__Instance)->disabledValidationCheckCount = value;
        }
    }

    public global::VkValidationCheckEXT* PDisabledValidationChecks
    {
        get
        {
            return ((global::VkValidationFlagsEXT.__Internal*) __Instance)->pDisabledValidationChecks;
        }

        set
        {
            ((global::VkValidationFlagsEXT.__Internal*)__Instance)->pDisabledValidationChecks = value;
        }
    }
}

public unsafe partial class VkObjectTableNVX_T
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkObjectTableNVX_T> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkObjectTableNVX_T>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkObjectTableNVX_T __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkObjectTableNVX_T(native.ToPointer(), skipVTables);
    }

    internal static global::VkObjectTableNVX_T __CreateInstance(global::VkObjectTableNVX_T.__Internal native, bool skipVTables = false)
    {
        return new global::VkObjectTableNVX_T(native, skipVTables);
    }

    private static void* __CopyValue(global::VkObjectTableNVX_T.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkObjectTableNVX_T.__Internal));
        *(global::VkObjectTableNVX_T.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkObjectTableNVX_T(global::VkObjectTableNVX_T.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkObjectTableNVX_T(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkObjectTableNVX_T()
    {
        Dispose(false);
    }
}

public unsafe partial class VkIndirectCommandsLayoutNVX_T
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkIndirectCommandsLayoutNVX_T> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkIndirectCommandsLayoutNVX_T>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkIndirectCommandsLayoutNVX_T __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkIndirectCommandsLayoutNVX_T(native.ToPointer(), skipVTables);
    }

    internal static global::VkIndirectCommandsLayoutNVX_T __CreateInstance(global::VkIndirectCommandsLayoutNVX_T.__Internal native, bool skipVTables = false)
    {
        return new global::VkIndirectCommandsLayoutNVX_T(native, skipVTables);
    }

    private static void* __CopyValue(global::VkIndirectCommandsLayoutNVX_T.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkIndirectCommandsLayoutNVX_T.__Internal));
        *(global::VkIndirectCommandsLayoutNVX_T.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkIndirectCommandsLayoutNVX_T(global::VkIndirectCommandsLayoutNVX_T.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkIndirectCommandsLayoutNVX_T(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkIndirectCommandsLayoutNVX_T()
    {
        Dispose(false);
    }
}

public unsafe partial class VkDeviceGeneratedCommandsFeaturesNVX : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint computeBindingPointSupport;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceGeneratedCommandsFeaturesNVX> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceGeneratedCommandsFeaturesNVX>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDeviceGeneratedCommandsFeaturesNVX __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDeviceGeneratedCommandsFeaturesNVX(native.ToPointer(), skipVTables);
    }

    internal static global::VkDeviceGeneratedCommandsFeaturesNVX __CreateInstance(global::VkDeviceGeneratedCommandsFeaturesNVX.__Internal native, bool skipVTables = false)
    {
        return new global::VkDeviceGeneratedCommandsFeaturesNVX(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDeviceGeneratedCommandsFeaturesNVX.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDeviceGeneratedCommandsFeaturesNVX.__Internal));
        *(global::VkDeviceGeneratedCommandsFeaturesNVX.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDeviceGeneratedCommandsFeaturesNVX(global::VkDeviceGeneratedCommandsFeaturesNVX.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDeviceGeneratedCommandsFeaturesNVX(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDeviceGeneratedCommandsFeaturesNVX()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDeviceGeneratedCommandsFeaturesNVX __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDeviceGeneratedCommandsFeaturesNVX.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDeviceGeneratedCommandsFeaturesNVX.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDeviceGeneratedCommandsFeaturesNVX.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDeviceGeneratedCommandsFeaturesNVX.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint ComputeBindingPointSupport
    {
        get
        {
            return ((global::VkDeviceGeneratedCommandsFeaturesNVX.__Internal*) __Instance)->computeBindingPointSupport;
        }

        set
        {
            ((global::VkDeviceGeneratedCommandsFeaturesNVX.__Internal*)__Instance)->computeBindingPointSupport = value;
        }
    }
}

public unsafe partial class VkDeviceGeneratedCommandsLimitsNVX : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint maxIndirectCommandsLayoutTokenCount;

        [FieldOffset(20)]
        internal uint maxObjectEntryCounts;

        [FieldOffset(24)]
        internal uint minSequenceCountBufferOffsetAlignment;

        [FieldOffset(28)]
        internal uint minSequenceIndexBufferOffsetAlignment;

        [FieldOffset(32)]
        internal uint minCommandsTokenBufferOffsetAlignment;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceGeneratedCommandsLimitsNVX> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceGeneratedCommandsLimitsNVX>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDeviceGeneratedCommandsLimitsNVX __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDeviceGeneratedCommandsLimitsNVX(native.ToPointer(), skipVTables);
    }

    internal static global::VkDeviceGeneratedCommandsLimitsNVX __CreateInstance(global::VkDeviceGeneratedCommandsLimitsNVX.__Internal native, bool skipVTables = false)
    {
        return new global::VkDeviceGeneratedCommandsLimitsNVX(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDeviceGeneratedCommandsLimitsNVX.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDeviceGeneratedCommandsLimitsNVX.__Internal));
        *(global::VkDeviceGeneratedCommandsLimitsNVX.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDeviceGeneratedCommandsLimitsNVX(global::VkDeviceGeneratedCommandsLimitsNVX.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDeviceGeneratedCommandsLimitsNVX(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDeviceGeneratedCommandsLimitsNVX()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDeviceGeneratedCommandsLimitsNVX __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDeviceGeneratedCommandsLimitsNVX.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDeviceGeneratedCommandsLimitsNVX.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDeviceGeneratedCommandsLimitsNVX.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDeviceGeneratedCommandsLimitsNVX.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint MaxIndirectCommandsLayoutTokenCount
    {
        get
        {
            return ((global::VkDeviceGeneratedCommandsLimitsNVX.__Internal*) __Instance)->maxIndirectCommandsLayoutTokenCount;
        }

        set
        {
            ((global::VkDeviceGeneratedCommandsLimitsNVX.__Internal*)__Instance)->maxIndirectCommandsLayoutTokenCount = value;
        }
    }

    public uint MaxObjectEntryCounts
    {
        get
        {
            return ((global::VkDeviceGeneratedCommandsLimitsNVX.__Internal*) __Instance)->maxObjectEntryCounts;
        }

        set
        {
            ((global::VkDeviceGeneratedCommandsLimitsNVX.__Internal*)__Instance)->maxObjectEntryCounts = value;
        }
    }

    public uint MinSequenceCountBufferOffsetAlignment
    {
        get
        {
            return ((global::VkDeviceGeneratedCommandsLimitsNVX.__Internal*) __Instance)->minSequenceCountBufferOffsetAlignment;
        }

        set
        {
            ((global::VkDeviceGeneratedCommandsLimitsNVX.__Internal*)__Instance)->minSequenceCountBufferOffsetAlignment = value;
        }
    }

    public uint MinSequenceIndexBufferOffsetAlignment
    {
        get
        {
            return ((global::VkDeviceGeneratedCommandsLimitsNVX.__Internal*) __Instance)->minSequenceIndexBufferOffsetAlignment;
        }

        set
        {
            ((global::VkDeviceGeneratedCommandsLimitsNVX.__Internal*)__Instance)->minSequenceIndexBufferOffsetAlignment = value;
        }
    }

    public uint MinCommandsTokenBufferOffsetAlignment
    {
        get
        {
            return ((global::VkDeviceGeneratedCommandsLimitsNVX.__Internal*) __Instance)->minCommandsTokenBufferOffsetAlignment;
        }

        set
        {
            ((global::VkDeviceGeneratedCommandsLimitsNVX.__Internal*)__Instance)->minCommandsTokenBufferOffsetAlignment = value;
        }
    }
}

public unsafe partial class VkIndirectCommandsTokenNVX : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkIndirectCommandsTokenTypeNVX tokenType;

        [FieldOffset(8)]
        internal global::System.IntPtr buffer;

        [FieldOffset(16)]
        internal ulong offset;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkIndirectCommandsTokenNVX> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkIndirectCommandsTokenNVX>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkIndirectCommandsTokenNVX __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkIndirectCommandsTokenNVX(native.ToPointer(), skipVTables);
    }

    internal static global::VkIndirectCommandsTokenNVX __CreateInstance(global::VkIndirectCommandsTokenNVX.__Internal native, bool skipVTables = false)
    {
        return new global::VkIndirectCommandsTokenNVX(native, skipVTables);
    }

    private static void* __CopyValue(global::VkIndirectCommandsTokenNVX.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkIndirectCommandsTokenNVX.__Internal));
        *(global::VkIndirectCommandsTokenNVX.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkIndirectCommandsTokenNVX(global::VkIndirectCommandsTokenNVX.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkIndirectCommandsTokenNVX(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkIndirectCommandsTokenNVX()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkIndirectCommandsTokenNVX __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkIndirectCommandsTokenTypeNVX TokenType
    {
        get
        {
            return ((global::VkIndirectCommandsTokenNVX.__Internal*) __Instance)->tokenType;
        }

        set
        {
            ((global::VkIndirectCommandsTokenNVX.__Internal*)__Instance)->tokenType = value;
        }
    }

    public global::VkBufferT Buffer
    {
        get
        {
            global::VkBufferT __result0;
            if (((global::VkIndirectCommandsTokenNVX.__Internal*) __Instance)->buffer == IntPtr.Zero) __result0 = null;
            else if (global::VkBufferT.NativeToManagedMap.ContainsKey(((global::VkIndirectCommandsTokenNVX.__Internal*) __Instance)->buffer))
                __result0 = (global::VkBufferT) global::VkBufferT.NativeToManagedMap[((global::VkIndirectCommandsTokenNVX.__Internal*) __Instance)->buffer];
            else __result0 = global::VkBufferT.__CreateInstance(((global::VkIndirectCommandsTokenNVX.__Internal*) __Instance)->buffer);
            return __result0;
        }

        set
        {
            ((global::VkIndirectCommandsTokenNVX.__Internal*)__Instance)->buffer = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public ulong Offset
    {
        get
        {
            return ((global::VkIndirectCommandsTokenNVX.__Internal*) __Instance)->offset;
        }

        set
        {
            ((global::VkIndirectCommandsTokenNVX.__Internal*)__Instance)->offset = value;
        }
    }
}

public unsafe partial class VkIndirectCommandsLayoutTokenNVX : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkIndirectCommandsTokenTypeNVX tokenType;

        [FieldOffset(4)]
        internal uint bindingUnit;

        [FieldOffset(8)]
        internal uint dynamicCount;

        [FieldOffset(12)]
        internal uint divisor;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkIndirectCommandsLayoutTokenNVX> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkIndirectCommandsLayoutTokenNVX>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkIndirectCommandsLayoutTokenNVX __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkIndirectCommandsLayoutTokenNVX(native.ToPointer(), skipVTables);
    }

    internal static global::VkIndirectCommandsLayoutTokenNVX __CreateInstance(global::VkIndirectCommandsLayoutTokenNVX.__Internal native, bool skipVTables = false)
    {
        return new global::VkIndirectCommandsLayoutTokenNVX(native, skipVTables);
    }

    private static void* __CopyValue(global::VkIndirectCommandsLayoutTokenNVX.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkIndirectCommandsLayoutTokenNVX.__Internal));
        *(global::VkIndirectCommandsLayoutTokenNVX.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkIndirectCommandsLayoutTokenNVX(global::VkIndirectCommandsLayoutTokenNVX.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkIndirectCommandsLayoutTokenNVX(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkIndirectCommandsLayoutTokenNVX()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkIndirectCommandsLayoutTokenNVX __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkIndirectCommandsTokenTypeNVX TokenType
    {
        get
        {
            return ((global::VkIndirectCommandsLayoutTokenNVX.__Internal*) __Instance)->tokenType;
        }

        set
        {
            ((global::VkIndirectCommandsLayoutTokenNVX.__Internal*)__Instance)->tokenType = value;
        }
    }

    public uint BindingUnit
    {
        get
        {
            return ((global::VkIndirectCommandsLayoutTokenNVX.__Internal*) __Instance)->bindingUnit;
        }

        set
        {
            ((global::VkIndirectCommandsLayoutTokenNVX.__Internal*)__Instance)->bindingUnit = value;
        }
    }

    public uint DynamicCount
    {
        get
        {
            return ((global::VkIndirectCommandsLayoutTokenNVX.__Internal*) __Instance)->dynamicCount;
        }

        set
        {
            ((global::VkIndirectCommandsLayoutTokenNVX.__Internal*)__Instance)->dynamicCount = value;
        }
    }

    public uint Divisor
    {
        get
        {
            return ((global::VkIndirectCommandsLayoutTokenNVX.__Internal*) __Instance)->divisor;
        }

        set
        {
            ((global::VkIndirectCommandsLayoutTokenNVX.__Internal*)__Instance)->divisor = value;
        }
    }
}

public unsafe partial class VkIndirectCommandsLayoutCreateInfoNVX : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkPipelineBindPoint pipelineBindPoint;

        [FieldOffset(20)]
        internal uint flags;

        [FieldOffset(24)]
        internal uint tokenCount;

        [FieldOffset(32)]
        internal global::System.IntPtr pTokens;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkIndirectCommandsLayoutCreateInfoNVX> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkIndirectCommandsLayoutCreateInfoNVX>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkIndirectCommandsLayoutCreateInfoNVX __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkIndirectCommandsLayoutCreateInfoNVX(native.ToPointer(), skipVTables);
    }

    internal static global::VkIndirectCommandsLayoutCreateInfoNVX __CreateInstance(global::VkIndirectCommandsLayoutCreateInfoNVX.__Internal native, bool skipVTables = false)
    {
        return new global::VkIndirectCommandsLayoutCreateInfoNVX(native, skipVTables);
    }

    private static void* __CopyValue(global::VkIndirectCommandsLayoutCreateInfoNVX.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkIndirectCommandsLayoutCreateInfoNVX.__Internal));
        *(global::VkIndirectCommandsLayoutCreateInfoNVX.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkIndirectCommandsLayoutCreateInfoNVX(global::VkIndirectCommandsLayoutCreateInfoNVX.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkIndirectCommandsLayoutCreateInfoNVX(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkIndirectCommandsLayoutCreateInfoNVX()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkIndirectCommandsLayoutCreateInfoNVX __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkIndirectCommandsLayoutCreateInfoNVX.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkIndirectCommandsLayoutCreateInfoNVX.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkIndirectCommandsLayoutCreateInfoNVX.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkIndirectCommandsLayoutCreateInfoNVX.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkPipelineBindPoint PipelineBindPoint
    {
        get
        {
            return ((global::VkIndirectCommandsLayoutCreateInfoNVX.__Internal*) __Instance)->pipelineBindPoint;
        }

        set
        {
            ((global::VkIndirectCommandsLayoutCreateInfoNVX.__Internal*)__Instance)->pipelineBindPoint = value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkIndirectCommandsLayoutCreateInfoNVX.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkIndirectCommandsLayoutCreateInfoNVX.__Internal*)__Instance)->flags = value;
        }
    }

    public uint TokenCount
    {
        get
        {
            return ((global::VkIndirectCommandsLayoutCreateInfoNVX.__Internal*) __Instance)->tokenCount;
        }

        set
        {
            ((global::VkIndirectCommandsLayoutCreateInfoNVX.__Internal*)__Instance)->tokenCount = value;
        }
    }

    public global::VkIndirectCommandsLayoutTokenNVX PTokens
    {
        get
        {
            global::VkIndirectCommandsLayoutTokenNVX __result0;
            if (((global::VkIndirectCommandsLayoutCreateInfoNVX.__Internal*) __Instance)->pTokens == IntPtr.Zero) __result0 = null;
            else if (global::VkIndirectCommandsLayoutTokenNVX.NativeToManagedMap.ContainsKey(((global::VkIndirectCommandsLayoutCreateInfoNVX.__Internal*) __Instance)->pTokens))
                __result0 = (global::VkIndirectCommandsLayoutTokenNVX) global::VkIndirectCommandsLayoutTokenNVX.NativeToManagedMap[((global::VkIndirectCommandsLayoutCreateInfoNVX.__Internal*) __Instance)->pTokens];
            else __result0 = global::VkIndirectCommandsLayoutTokenNVX.__CreateInstance(((global::VkIndirectCommandsLayoutCreateInfoNVX.__Internal*) __Instance)->pTokens);
            return __result0;
        }

        set
        {
            ((global::VkIndirectCommandsLayoutCreateInfoNVX.__Internal*)__Instance)->pTokens = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkCmdProcessCommandsInfoNVX : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 96)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::System.IntPtr objectTable;

        [FieldOffset(24)]
        internal global::System.IntPtr indirectCommandsLayout;

        [FieldOffset(32)]
        internal uint indirectCommandsTokenCount;

        [FieldOffset(40)]
        internal global::System.IntPtr pIndirectCommandsTokens;

        [FieldOffset(48)]
        internal uint maxSequencesCount;

        [FieldOffset(56)]
        internal global::System.IntPtr targetCommandBuffer;

        [FieldOffset(64)]
        internal global::System.IntPtr sequencesCountBuffer;

        [FieldOffset(72)]
        internal ulong sequencesCountOffset;

        [FieldOffset(80)]
        internal global::System.IntPtr sequencesIndexBuffer;

        [FieldOffset(88)]
        internal ulong sequencesIndexOffset;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkCmdProcessCommandsInfoNVX> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkCmdProcessCommandsInfoNVX>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkCmdProcessCommandsInfoNVX __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkCmdProcessCommandsInfoNVX(native.ToPointer(), skipVTables);
    }

    internal static global::VkCmdProcessCommandsInfoNVX __CreateInstance(global::VkCmdProcessCommandsInfoNVX.__Internal native, bool skipVTables = false)
    {
        return new global::VkCmdProcessCommandsInfoNVX(native, skipVTables);
    }

    private static void* __CopyValue(global::VkCmdProcessCommandsInfoNVX.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkCmdProcessCommandsInfoNVX.__Internal));
        *(global::VkCmdProcessCommandsInfoNVX.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkCmdProcessCommandsInfoNVX(global::VkCmdProcessCommandsInfoNVX.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkCmdProcessCommandsInfoNVX(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkCmdProcessCommandsInfoNVX()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkCmdProcessCommandsInfoNVX __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkCmdProcessCommandsInfoNVX.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkCmdProcessCommandsInfoNVX.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkCmdProcessCommandsInfoNVX.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkCmdProcessCommandsInfoNVX.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkObjectTableNVX_T ObjectTable
    {
        get
        {
            global::VkObjectTableNVX_T __result0;
            if (((global::VkCmdProcessCommandsInfoNVX.__Internal*) __Instance)->objectTable == IntPtr.Zero) __result0 = null;
            else if (global::VkObjectTableNVX_T.NativeToManagedMap.ContainsKey(((global::VkCmdProcessCommandsInfoNVX.__Internal*) __Instance)->objectTable))
                __result0 = (global::VkObjectTableNVX_T) global::VkObjectTableNVX_T.NativeToManagedMap[((global::VkCmdProcessCommandsInfoNVX.__Internal*) __Instance)->objectTable];
            else __result0 = global::VkObjectTableNVX_T.__CreateInstance(((global::VkCmdProcessCommandsInfoNVX.__Internal*) __Instance)->objectTable);
            return __result0;
        }

        set
        {
            ((global::VkCmdProcessCommandsInfoNVX.__Internal*)__Instance)->objectTable = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkIndirectCommandsLayoutNVX_T IndirectCommandsLayout
    {
        get
        {
            global::VkIndirectCommandsLayoutNVX_T __result0;
            if (((global::VkCmdProcessCommandsInfoNVX.__Internal*) __Instance)->indirectCommandsLayout == IntPtr.Zero) __result0 = null;
            else if (global::VkIndirectCommandsLayoutNVX_T.NativeToManagedMap.ContainsKey(((global::VkCmdProcessCommandsInfoNVX.__Internal*) __Instance)->indirectCommandsLayout))
                __result0 = (global::VkIndirectCommandsLayoutNVX_T) global::VkIndirectCommandsLayoutNVX_T.NativeToManagedMap[((global::VkCmdProcessCommandsInfoNVX.__Internal*) __Instance)->indirectCommandsLayout];
            else __result0 = global::VkIndirectCommandsLayoutNVX_T.__CreateInstance(((global::VkCmdProcessCommandsInfoNVX.__Internal*) __Instance)->indirectCommandsLayout);
            return __result0;
        }

        set
        {
            ((global::VkCmdProcessCommandsInfoNVX.__Internal*)__Instance)->indirectCommandsLayout = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint IndirectCommandsTokenCount
    {
        get
        {
            return ((global::VkCmdProcessCommandsInfoNVX.__Internal*) __Instance)->indirectCommandsTokenCount;
        }

        set
        {
            ((global::VkCmdProcessCommandsInfoNVX.__Internal*)__Instance)->indirectCommandsTokenCount = value;
        }
    }

    public global::VkIndirectCommandsTokenNVX PIndirectCommandsTokens
    {
        get
        {
            global::VkIndirectCommandsTokenNVX __result0;
            if (((global::VkCmdProcessCommandsInfoNVX.__Internal*) __Instance)->pIndirectCommandsTokens == IntPtr.Zero) __result0 = null;
            else if (global::VkIndirectCommandsTokenNVX.NativeToManagedMap.ContainsKey(((global::VkCmdProcessCommandsInfoNVX.__Internal*) __Instance)->pIndirectCommandsTokens))
                __result0 = (global::VkIndirectCommandsTokenNVX) global::VkIndirectCommandsTokenNVX.NativeToManagedMap[((global::VkCmdProcessCommandsInfoNVX.__Internal*) __Instance)->pIndirectCommandsTokens];
            else __result0 = global::VkIndirectCommandsTokenNVX.__CreateInstance(((global::VkCmdProcessCommandsInfoNVX.__Internal*) __Instance)->pIndirectCommandsTokens);
            return __result0;
        }

        set
        {
            ((global::VkCmdProcessCommandsInfoNVX.__Internal*)__Instance)->pIndirectCommandsTokens = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint MaxSequencesCount
    {
        get
        {
            return ((global::VkCmdProcessCommandsInfoNVX.__Internal*) __Instance)->maxSequencesCount;
        }

        set
        {
            ((global::VkCmdProcessCommandsInfoNVX.__Internal*)__Instance)->maxSequencesCount = value;
        }
    }

    public global::VkCommandBufferT TargetCommandBuffer
    {
        get
        {
            global::VkCommandBufferT __result0;
            if (((global::VkCmdProcessCommandsInfoNVX.__Internal*) __Instance)->targetCommandBuffer == IntPtr.Zero) __result0 = null;
            else if (global::VkCommandBufferT.NativeToManagedMap.ContainsKey(((global::VkCmdProcessCommandsInfoNVX.__Internal*) __Instance)->targetCommandBuffer))
                __result0 = (global::VkCommandBufferT) global::VkCommandBufferT.NativeToManagedMap[((global::VkCmdProcessCommandsInfoNVX.__Internal*) __Instance)->targetCommandBuffer];
            else __result0 = global::VkCommandBufferT.__CreateInstance(((global::VkCmdProcessCommandsInfoNVX.__Internal*) __Instance)->targetCommandBuffer);
            return __result0;
        }

        set
        {
            ((global::VkCmdProcessCommandsInfoNVX.__Internal*)__Instance)->targetCommandBuffer = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkBufferT SequencesCountBuffer
    {
        get
        {
            global::VkBufferT __result0;
            if (((global::VkCmdProcessCommandsInfoNVX.__Internal*) __Instance)->sequencesCountBuffer == IntPtr.Zero) __result0 = null;
            else if (global::VkBufferT.NativeToManagedMap.ContainsKey(((global::VkCmdProcessCommandsInfoNVX.__Internal*) __Instance)->sequencesCountBuffer))
                __result0 = (global::VkBufferT) global::VkBufferT.NativeToManagedMap[((global::VkCmdProcessCommandsInfoNVX.__Internal*) __Instance)->sequencesCountBuffer];
            else __result0 = global::VkBufferT.__CreateInstance(((global::VkCmdProcessCommandsInfoNVX.__Internal*) __Instance)->sequencesCountBuffer);
            return __result0;
        }

        set
        {
            ((global::VkCmdProcessCommandsInfoNVX.__Internal*)__Instance)->sequencesCountBuffer = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public ulong SequencesCountOffset
    {
        get
        {
            return ((global::VkCmdProcessCommandsInfoNVX.__Internal*) __Instance)->sequencesCountOffset;
        }

        set
        {
            ((global::VkCmdProcessCommandsInfoNVX.__Internal*)__Instance)->sequencesCountOffset = value;
        }
    }

    public global::VkBufferT SequencesIndexBuffer
    {
        get
        {
            global::VkBufferT __result0;
            if (((global::VkCmdProcessCommandsInfoNVX.__Internal*) __Instance)->sequencesIndexBuffer == IntPtr.Zero) __result0 = null;
            else if (global::VkBufferT.NativeToManagedMap.ContainsKey(((global::VkCmdProcessCommandsInfoNVX.__Internal*) __Instance)->sequencesIndexBuffer))
                __result0 = (global::VkBufferT) global::VkBufferT.NativeToManagedMap[((global::VkCmdProcessCommandsInfoNVX.__Internal*) __Instance)->sequencesIndexBuffer];
            else __result0 = global::VkBufferT.__CreateInstance(((global::VkCmdProcessCommandsInfoNVX.__Internal*) __Instance)->sequencesIndexBuffer);
            return __result0;
        }

        set
        {
            ((global::VkCmdProcessCommandsInfoNVX.__Internal*)__Instance)->sequencesIndexBuffer = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public ulong SequencesIndexOffset
    {
        get
        {
            return ((global::VkCmdProcessCommandsInfoNVX.__Internal*) __Instance)->sequencesIndexOffset;
        }

        set
        {
            ((global::VkCmdProcessCommandsInfoNVX.__Internal*)__Instance)->sequencesIndexOffset = value;
        }
    }
}

public unsafe partial class VkCmdReserveSpaceForCommandsInfoNVX : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::System.IntPtr objectTable;

        [FieldOffset(24)]
        internal global::System.IntPtr indirectCommandsLayout;

        [FieldOffset(32)]
        internal uint maxSequencesCount;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkCmdReserveSpaceForCommandsInfoNVX> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkCmdReserveSpaceForCommandsInfoNVX>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkCmdReserveSpaceForCommandsInfoNVX __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkCmdReserveSpaceForCommandsInfoNVX(native.ToPointer(), skipVTables);
    }

    internal static global::VkCmdReserveSpaceForCommandsInfoNVX __CreateInstance(global::VkCmdReserveSpaceForCommandsInfoNVX.__Internal native, bool skipVTables = false)
    {
        return new global::VkCmdReserveSpaceForCommandsInfoNVX(native, skipVTables);
    }

    private static void* __CopyValue(global::VkCmdReserveSpaceForCommandsInfoNVX.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkCmdReserveSpaceForCommandsInfoNVX.__Internal));
        *(global::VkCmdReserveSpaceForCommandsInfoNVX.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkCmdReserveSpaceForCommandsInfoNVX(global::VkCmdReserveSpaceForCommandsInfoNVX.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkCmdReserveSpaceForCommandsInfoNVX(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkCmdReserveSpaceForCommandsInfoNVX()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkCmdReserveSpaceForCommandsInfoNVX __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkCmdReserveSpaceForCommandsInfoNVX.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkCmdReserveSpaceForCommandsInfoNVX.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkCmdReserveSpaceForCommandsInfoNVX.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkCmdReserveSpaceForCommandsInfoNVX.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkObjectTableNVX_T ObjectTable
    {
        get
        {
            global::VkObjectTableNVX_T __result0;
            if (((global::VkCmdReserveSpaceForCommandsInfoNVX.__Internal*) __Instance)->objectTable == IntPtr.Zero) __result0 = null;
            else if (global::VkObjectTableNVX_T.NativeToManagedMap.ContainsKey(((global::VkCmdReserveSpaceForCommandsInfoNVX.__Internal*) __Instance)->objectTable))
                __result0 = (global::VkObjectTableNVX_T) global::VkObjectTableNVX_T.NativeToManagedMap[((global::VkCmdReserveSpaceForCommandsInfoNVX.__Internal*) __Instance)->objectTable];
            else __result0 = global::VkObjectTableNVX_T.__CreateInstance(((global::VkCmdReserveSpaceForCommandsInfoNVX.__Internal*) __Instance)->objectTable);
            return __result0;
        }

        set
        {
            ((global::VkCmdReserveSpaceForCommandsInfoNVX.__Internal*)__Instance)->objectTable = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkIndirectCommandsLayoutNVX_T IndirectCommandsLayout
    {
        get
        {
            global::VkIndirectCommandsLayoutNVX_T __result0;
            if (((global::VkCmdReserveSpaceForCommandsInfoNVX.__Internal*) __Instance)->indirectCommandsLayout == IntPtr.Zero) __result0 = null;
            else if (global::VkIndirectCommandsLayoutNVX_T.NativeToManagedMap.ContainsKey(((global::VkCmdReserveSpaceForCommandsInfoNVX.__Internal*) __Instance)->indirectCommandsLayout))
                __result0 = (global::VkIndirectCommandsLayoutNVX_T) global::VkIndirectCommandsLayoutNVX_T.NativeToManagedMap[((global::VkCmdReserveSpaceForCommandsInfoNVX.__Internal*) __Instance)->indirectCommandsLayout];
            else __result0 = global::VkIndirectCommandsLayoutNVX_T.__CreateInstance(((global::VkCmdReserveSpaceForCommandsInfoNVX.__Internal*) __Instance)->indirectCommandsLayout);
            return __result0;
        }

        set
        {
            ((global::VkCmdReserveSpaceForCommandsInfoNVX.__Internal*)__Instance)->indirectCommandsLayout = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint MaxSequencesCount
    {
        get
        {
            return ((global::VkCmdReserveSpaceForCommandsInfoNVX.__Internal*) __Instance)->maxSequencesCount;
        }

        set
        {
            ((global::VkCmdReserveSpaceForCommandsInfoNVX.__Internal*)__Instance)->maxSequencesCount = value;
        }
    }
}

public unsafe partial class VkObjectTableCreateInfoNVX : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 72)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint objectCount;

        [FieldOffset(24)]
        internal global::System.IntPtr pObjectEntryTypes;

        [FieldOffset(32)]
        internal global::System.IntPtr pObjectEntryCounts;

        [FieldOffset(40)]
        internal global::System.IntPtr pObjectEntryUsageFlags;

        [FieldOffset(48)]
        internal uint maxUniformBuffersPerDescriptor;

        [FieldOffset(52)]
        internal uint maxStorageBuffersPerDescriptor;

        [FieldOffset(56)]
        internal uint maxStorageImagesPerDescriptor;

        [FieldOffset(60)]
        internal uint maxSampledImagesPerDescriptor;

        [FieldOffset(64)]
        internal uint maxPipelineLayouts;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkObjectTableCreateInfoNVX> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkObjectTableCreateInfoNVX>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkObjectTableCreateInfoNVX __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkObjectTableCreateInfoNVX(native.ToPointer(), skipVTables);
    }

    internal static global::VkObjectTableCreateInfoNVX __CreateInstance(global::VkObjectTableCreateInfoNVX.__Internal native, bool skipVTables = false)
    {
        return new global::VkObjectTableCreateInfoNVX(native, skipVTables);
    }

    private static void* __CopyValue(global::VkObjectTableCreateInfoNVX.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkObjectTableCreateInfoNVX.__Internal));
        *(global::VkObjectTableCreateInfoNVX.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkObjectTableCreateInfoNVX(global::VkObjectTableCreateInfoNVX.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkObjectTableCreateInfoNVX(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkObjectTableCreateInfoNVX()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkObjectTableCreateInfoNVX __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkObjectTableCreateInfoNVX.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkObjectTableCreateInfoNVX.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkObjectTableCreateInfoNVX.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkObjectTableCreateInfoNVX.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint ObjectCount
    {
        get
        {
            return ((global::VkObjectTableCreateInfoNVX.__Internal*) __Instance)->objectCount;
        }

        set
        {
            ((global::VkObjectTableCreateInfoNVX.__Internal*)__Instance)->objectCount = value;
        }
    }

    public global::VkObjectEntryTypeNVX* PObjectEntryTypes
    {
        get
        {
            return ((global::VkObjectTableCreateInfoNVX.__Internal*) __Instance)->pObjectEntryTypes;
        }

        set
        {
            ((global::VkObjectTableCreateInfoNVX.__Internal*)__Instance)->pObjectEntryTypes = value;
        }
    }

    public uint* PObjectEntryCounts
    {
        get
        {
            return (uint*) ((global::VkObjectTableCreateInfoNVX.__Internal*) __Instance)->pObjectEntryCounts;
        }

        set
        {
            ((global::VkObjectTableCreateInfoNVX.__Internal*)__Instance)->pObjectEntryCounts = (global::System.IntPtr) value;
        }
    }

    public uint* PObjectEntryUsageFlags
    {
        get
        {
            return (uint*) ((global::VkObjectTableCreateInfoNVX.__Internal*) __Instance)->pObjectEntryUsageFlags;
        }

        set
        {
            ((global::VkObjectTableCreateInfoNVX.__Internal*)__Instance)->pObjectEntryUsageFlags = (global::System.IntPtr) value;
        }
    }

    public uint MaxUniformBuffersPerDescriptor
    {
        get
        {
            return ((global::VkObjectTableCreateInfoNVX.__Internal*) __Instance)->maxUniformBuffersPerDescriptor;
        }

        set
        {
            ((global::VkObjectTableCreateInfoNVX.__Internal*)__Instance)->maxUniformBuffersPerDescriptor = value;
        }
    }

    public uint MaxStorageBuffersPerDescriptor
    {
        get
        {
            return ((global::VkObjectTableCreateInfoNVX.__Internal*) __Instance)->maxStorageBuffersPerDescriptor;
        }

        set
        {
            ((global::VkObjectTableCreateInfoNVX.__Internal*)__Instance)->maxStorageBuffersPerDescriptor = value;
        }
    }

    public uint MaxStorageImagesPerDescriptor
    {
        get
        {
            return ((global::VkObjectTableCreateInfoNVX.__Internal*) __Instance)->maxStorageImagesPerDescriptor;
        }

        set
        {
            ((global::VkObjectTableCreateInfoNVX.__Internal*)__Instance)->maxStorageImagesPerDescriptor = value;
        }
    }

    public uint MaxSampledImagesPerDescriptor
    {
        get
        {
            return ((global::VkObjectTableCreateInfoNVX.__Internal*) __Instance)->maxSampledImagesPerDescriptor;
        }

        set
        {
            ((global::VkObjectTableCreateInfoNVX.__Internal*)__Instance)->maxSampledImagesPerDescriptor = value;
        }
    }

    public uint MaxPipelineLayouts
    {
        get
        {
            return ((global::VkObjectTableCreateInfoNVX.__Internal*) __Instance)->maxPipelineLayouts;
        }

        set
        {
            ((global::VkObjectTableCreateInfoNVX.__Internal*)__Instance)->maxPipelineLayouts = value;
        }
    }
}

public unsafe partial class VkObjectTableEntryNVX : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkObjectEntryTypeNVX type;

        [FieldOffset(4)]
        internal uint flags;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkObjectTableEntryNVX> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkObjectTableEntryNVX>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkObjectTableEntryNVX __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkObjectTableEntryNVX(native.ToPointer(), skipVTables);
    }

    internal static global::VkObjectTableEntryNVX __CreateInstance(global::VkObjectTableEntryNVX.__Internal native, bool skipVTables = false)
    {
        return new global::VkObjectTableEntryNVX(native, skipVTables);
    }

    private static void* __CopyValue(global::VkObjectTableEntryNVX.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkObjectTableEntryNVX.__Internal));
        *(global::VkObjectTableEntryNVX.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkObjectTableEntryNVX(global::VkObjectTableEntryNVX.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkObjectTableEntryNVX(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkObjectTableEntryNVX()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkObjectTableEntryNVX __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkObjectEntryTypeNVX Type
    {
        get
        {
            return ((global::VkObjectTableEntryNVX.__Internal*) __Instance)->type;
        }

        set
        {
            ((global::VkObjectTableEntryNVX.__Internal*)__Instance)->type = value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkObjectTableEntryNVX.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkObjectTableEntryNVX.__Internal*)__Instance)->flags = value;
        }
    }
}

public unsafe partial class VkObjectTablePipelineEntryNVX : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkObjectEntryTypeNVX type;

        [FieldOffset(4)]
        internal uint flags;

        [FieldOffset(8)]
        internal global::System.IntPtr pipeline;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkObjectTablePipelineEntryNVX> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkObjectTablePipelineEntryNVX>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkObjectTablePipelineEntryNVX __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkObjectTablePipelineEntryNVX(native.ToPointer(), skipVTables);
    }

    internal static global::VkObjectTablePipelineEntryNVX __CreateInstance(global::VkObjectTablePipelineEntryNVX.__Internal native, bool skipVTables = false)
    {
        return new global::VkObjectTablePipelineEntryNVX(native, skipVTables);
    }

    private static void* __CopyValue(global::VkObjectTablePipelineEntryNVX.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkObjectTablePipelineEntryNVX.__Internal));
        *(global::VkObjectTablePipelineEntryNVX.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkObjectTablePipelineEntryNVX(global::VkObjectTablePipelineEntryNVX.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkObjectTablePipelineEntryNVX(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkObjectTablePipelineEntryNVX()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkObjectTablePipelineEntryNVX __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkObjectEntryTypeNVX Type
    {
        get
        {
            return ((global::VkObjectTablePipelineEntryNVX.__Internal*) __Instance)->type;
        }

        set
        {
            ((global::VkObjectTablePipelineEntryNVX.__Internal*)__Instance)->type = value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkObjectTablePipelineEntryNVX.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkObjectTablePipelineEntryNVX.__Internal*)__Instance)->flags = value;
        }
    }

    public global::VkPipelineT Pipeline
    {
        get
        {
            global::VkPipelineT __result0;
            if (((global::VkObjectTablePipelineEntryNVX.__Internal*) __Instance)->pipeline == IntPtr.Zero) __result0 = null;
            else if (global::VkPipelineT.NativeToManagedMap.ContainsKey(((global::VkObjectTablePipelineEntryNVX.__Internal*) __Instance)->pipeline))
                __result0 = (global::VkPipelineT) global::VkPipelineT.NativeToManagedMap[((global::VkObjectTablePipelineEntryNVX.__Internal*) __Instance)->pipeline];
            else __result0 = global::VkPipelineT.__CreateInstance(((global::VkObjectTablePipelineEntryNVX.__Internal*) __Instance)->pipeline);
            return __result0;
        }

        set
        {
            ((global::VkObjectTablePipelineEntryNVX.__Internal*)__Instance)->pipeline = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkObjectTableDescriptorSetEntryNVX : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkObjectEntryTypeNVX type;

        [FieldOffset(4)]
        internal uint flags;

        [FieldOffset(8)]
        internal global::System.IntPtr pipelineLayout;

        [FieldOffset(16)]
        internal global::System.IntPtr descriptorSet;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkObjectTableDescriptorSetEntryNVX> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkObjectTableDescriptorSetEntryNVX>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkObjectTableDescriptorSetEntryNVX __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkObjectTableDescriptorSetEntryNVX(native.ToPointer(), skipVTables);
    }

    internal static global::VkObjectTableDescriptorSetEntryNVX __CreateInstance(global::VkObjectTableDescriptorSetEntryNVX.__Internal native, bool skipVTables = false)
    {
        return new global::VkObjectTableDescriptorSetEntryNVX(native, skipVTables);
    }

    private static void* __CopyValue(global::VkObjectTableDescriptorSetEntryNVX.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkObjectTableDescriptorSetEntryNVX.__Internal));
        *(global::VkObjectTableDescriptorSetEntryNVX.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkObjectTableDescriptorSetEntryNVX(global::VkObjectTableDescriptorSetEntryNVX.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkObjectTableDescriptorSetEntryNVX(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkObjectTableDescriptorSetEntryNVX()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkObjectTableDescriptorSetEntryNVX __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkObjectEntryTypeNVX Type
    {
        get
        {
            return ((global::VkObjectTableDescriptorSetEntryNVX.__Internal*) __Instance)->type;
        }

        set
        {
            ((global::VkObjectTableDescriptorSetEntryNVX.__Internal*)__Instance)->type = value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkObjectTableDescriptorSetEntryNVX.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkObjectTableDescriptorSetEntryNVX.__Internal*)__Instance)->flags = value;
        }
    }

    public global::VkPipelineLayoutT PipelineLayout
    {
        get
        {
            global::VkPipelineLayoutT __result0;
            if (((global::VkObjectTableDescriptorSetEntryNVX.__Internal*) __Instance)->pipelineLayout == IntPtr.Zero) __result0 = null;
            else if (global::VkPipelineLayoutT.NativeToManagedMap.ContainsKey(((global::VkObjectTableDescriptorSetEntryNVX.__Internal*) __Instance)->pipelineLayout))
                __result0 = (global::VkPipelineLayoutT) global::VkPipelineLayoutT.NativeToManagedMap[((global::VkObjectTableDescriptorSetEntryNVX.__Internal*) __Instance)->pipelineLayout];
            else __result0 = global::VkPipelineLayoutT.__CreateInstance(((global::VkObjectTableDescriptorSetEntryNVX.__Internal*) __Instance)->pipelineLayout);
            return __result0;
        }

        set
        {
            ((global::VkObjectTableDescriptorSetEntryNVX.__Internal*)__Instance)->pipelineLayout = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkDescriptorSetT DescriptorSet
    {
        get
        {
            global::VkDescriptorSetT __result0;
            if (((global::VkObjectTableDescriptorSetEntryNVX.__Internal*) __Instance)->descriptorSet == IntPtr.Zero) __result0 = null;
            else if (global::VkDescriptorSetT.NativeToManagedMap.ContainsKey(((global::VkObjectTableDescriptorSetEntryNVX.__Internal*) __Instance)->descriptorSet))
                __result0 = (global::VkDescriptorSetT) global::VkDescriptorSetT.NativeToManagedMap[((global::VkObjectTableDescriptorSetEntryNVX.__Internal*) __Instance)->descriptorSet];
            else __result0 = global::VkDescriptorSetT.__CreateInstance(((global::VkObjectTableDescriptorSetEntryNVX.__Internal*) __Instance)->descriptorSet);
            return __result0;
        }

        set
        {
            ((global::VkObjectTableDescriptorSetEntryNVX.__Internal*)__Instance)->descriptorSet = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkObjectTableVertexBufferEntryNVX : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkObjectEntryTypeNVX type;

        [FieldOffset(4)]
        internal uint flags;

        [FieldOffset(8)]
        internal global::System.IntPtr buffer;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkObjectTableVertexBufferEntryNVX> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkObjectTableVertexBufferEntryNVX>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkObjectTableVertexBufferEntryNVX __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkObjectTableVertexBufferEntryNVX(native.ToPointer(), skipVTables);
    }

    internal static global::VkObjectTableVertexBufferEntryNVX __CreateInstance(global::VkObjectTableVertexBufferEntryNVX.__Internal native, bool skipVTables = false)
    {
        return new global::VkObjectTableVertexBufferEntryNVX(native, skipVTables);
    }

    private static void* __CopyValue(global::VkObjectTableVertexBufferEntryNVX.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkObjectTableVertexBufferEntryNVX.__Internal));
        *(global::VkObjectTableVertexBufferEntryNVX.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkObjectTableVertexBufferEntryNVX(global::VkObjectTableVertexBufferEntryNVX.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkObjectTableVertexBufferEntryNVX(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkObjectTableVertexBufferEntryNVX()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkObjectTableVertexBufferEntryNVX __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkObjectEntryTypeNVX Type
    {
        get
        {
            return ((global::VkObjectTableVertexBufferEntryNVX.__Internal*) __Instance)->type;
        }

        set
        {
            ((global::VkObjectTableVertexBufferEntryNVX.__Internal*)__Instance)->type = value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkObjectTableVertexBufferEntryNVX.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkObjectTableVertexBufferEntryNVX.__Internal*)__Instance)->flags = value;
        }
    }

    public global::VkBufferT Buffer
    {
        get
        {
            global::VkBufferT __result0;
            if (((global::VkObjectTableVertexBufferEntryNVX.__Internal*) __Instance)->buffer == IntPtr.Zero) __result0 = null;
            else if (global::VkBufferT.NativeToManagedMap.ContainsKey(((global::VkObjectTableVertexBufferEntryNVX.__Internal*) __Instance)->buffer))
                __result0 = (global::VkBufferT) global::VkBufferT.NativeToManagedMap[((global::VkObjectTableVertexBufferEntryNVX.__Internal*) __Instance)->buffer];
            else __result0 = global::VkBufferT.__CreateInstance(((global::VkObjectTableVertexBufferEntryNVX.__Internal*) __Instance)->buffer);
            return __result0;
        }

        set
        {
            ((global::VkObjectTableVertexBufferEntryNVX.__Internal*)__Instance)->buffer = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkObjectTableIndexBufferEntryNVX : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkObjectEntryTypeNVX type;

        [FieldOffset(4)]
        internal uint flags;

        [FieldOffset(8)]
        internal global::System.IntPtr buffer;

        [FieldOffset(16)]
        internal global::VkIndexType indexType;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkObjectTableIndexBufferEntryNVX> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkObjectTableIndexBufferEntryNVX>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkObjectTableIndexBufferEntryNVX __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkObjectTableIndexBufferEntryNVX(native.ToPointer(), skipVTables);
    }

    internal static global::VkObjectTableIndexBufferEntryNVX __CreateInstance(global::VkObjectTableIndexBufferEntryNVX.__Internal native, bool skipVTables = false)
    {
        return new global::VkObjectTableIndexBufferEntryNVX(native, skipVTables);
    }

    private static void* __CopyValue(global::VkObjectTableIndexBufferEntryNVX.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkObjectTableIndexBufferEntryNVX.__Internal));
        *(global::VkObjectTableIndexBufferEntryNVX.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkObjectTableIndexBufferEntryNVX(global::VkObjectTableIndexBufferEntryNVX.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkObjectTableIndexBufferEntryNVX(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkObjectTableIndexBufferEntryNVX()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkObjectTableIndexBufferEntryNVX __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkObjectEntryTypeNVX Type
    {
        get
        {
            return ((global::VkObjectTableIndexBufferEntryNVX.__Internal*) __Instance)->type;
        }

        set
        {
            ((global::VkObjectTableIndexBufferEntryNVX.__Internal*)__Instance)->type = value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkObjectTableIndexBufferEntryNVX.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkObjectTableIndexBufferEntryNVX.__Internal*)__Instance)->flags = value;
        }
    }

    public global::VkBufferT Buffer
    {
        get
        {
            global::VkBufferT __result0;
            if (((global::VkObjectTableIndexBufferEntryNVX.__Internal*) __Instance)->buffer == IntPtr.Zero) __result0 = null;
            else if (global::VkBufferT.NativeToManagedMap.ContainsKey(((global::VkObjectTableIndexBufferEntryNVX.__Internal*) __Instance)->buffer))
                __result0 = (global::VkBufferT) global::VkBufferT.NativeToManagedMap[((global::VkObjectTableIndexBufferEntryNVX.__Internal*) __Instance)->buffer];
            else __result0 = global::VkBufferT.__CreateInstance(((global::VkObjectTableIndexBufferEntryNVX.__Internal*) __Instance)->buffer);
            return __result0;
        }

        set
        {
            ((global::VkObjectTableIndexBufferEntryNVX.__Internal*)__Instance)->buffer = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public global::VkIndexType IndexType
    {
        get
        {
            return ((global::VkObjectTableIndexBufferEntryNVX.__Internal*) __Instance)->indexType;
        }

        set
        {
            ((global::VkObjectTableIndexBufferEntryNVX.__Internal*)__Instance)->indexType = value;
        }
    }
}

public unsafe partial class VkObjectTablePushConstantEntryNVX : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkObjectEntryTypeNVX type;

        [FieldOffset(4)]
        internal uint flags;

        [FieldOffset(8)]
        internal global::System.IntPtr pipelineLayout;

        [FieldOffset(16)]
        internal uint stageFlags;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkObjectTablePushConstantEntryNVX> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkObjectTablePushConstantEntryNVX>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkObjectTablePushConstantEntryNVX __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkObjectTablePushConstantEntryNVX(native.ToPointer(), skipVTables);
    }

    internal static global::VkObjectTablePushConstantEntryNVX __CreateInstance(global::VkObjectTablePushConstantEntryNVX.__Internal native, bool skipVTables = false)
    {
        return new global::VkObjectTablePushConstantEntryNVX(native, skipVTables);
    }

    private static void* __CopyValue(global::VkObjectTablePushConstantEntryNVX.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkObjectTablePushConstantEntryNVX.__Internal));
        *(global::VkObjectTablePushConstantEntryNVX.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkObjectTablePushConstantEntryNVX(global::VkObjectTablePushConstantEntryNVX.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkObjectTablePushConstantEntryNVX(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkObjectTablePushConstantEntryNVX()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkObjectTablePushConstantEntryNVX __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkObjectEntryTypeNVX Type
    {
        get
        {
            return ((global::VkObjectTablePushConstantEntryNVX.__Internal*) __Instance)->type;
        }

        set
        {
            ((global::VkObjectTablePushConstantEntryNVX.__Internal*)__Instance)->type = value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkObjectTablePushConstantEntryNVX.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkObjectTablePushConstantEntryNVX.__Internal*)__Instance)->flags = value;
        }
    }

    public global::VkPipelineLayoutT PipelineLayout
    {
        get
        {
            global::VkPipelineLayoutT __result0;
            if (((global::VkObjectTablePushConstantEntryNVX.__Internal*) __Instance)->pipelineLayout == IntPtr.Zero) __result0 = null;
            else if (global::VkPipelineLayoutT.NativeToManagedMap.ContainsKey(((global::VkObjectTablePushConstantEntryNVX.__Internal*) __Instance)->pipelineLayout))
                __result0 = (global::VkPipelineLayoutT) global::VkPipelineLayoutT.NativeToManagedMap[((global::VkObjectTablePushConstantEntryNVX.__Internal*) __Instance)->pipelineLayout];
            else __result0 = global::VkPipelineLayoutT.__CreateInstance(((global::VkObjectTablePushConstantEntryNVX.__Internal*) __Instance)->pipelineLayout);
            return __result0;
        }

        set
        {
            ((global::VkObjectTablePushConstantEntryNVX.__Internal*)__Instance)->pipelineLayout = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint StageFlags
    {
        get
        {
            return ((global::VkObjectTablePushConstantEntryNVX.__Internal*) __Instance)->stageFlags;
        }

        set
        {
            ((global::VkObjectTablePushConstantEntryNVX.__Internal*)__Instance)->stageFlags = value;
        }
    }
}

public unsafe partial class VkViewportWScalingNV : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal float xcoeff;

        [FieldOffset(4)]
        internal float ycoeff;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkViewportWScalingNV> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkViewportWScalingNV>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkViewportWScalingNV __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkViewportWScalingNV(native.ToPointer(), skipVTables);
    }

    internal static global::VkViewportWScalingNV __CreateInstance(global::VkViewportWScalingNV.__Internal native, bool skipVTables = false)
    {
        return new global::VkViewportWScalingNV(native, skipVTables);
    }

    private static void* __CopyValue(global::VkViewportWScalingNV.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkViewportWScalingNV.__Internal));
        *(global::VkViewportWScalingNV.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkViewportWScalingNV(global::VkViewportWScalingNV.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkViewportWScalingNV(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkViewportWScalingNV()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkViewportWScalingNV __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public float Xcoeff
    {
        get
        {
            return ((global::VkViewportWScalingNV.__Internal*) __Instance)->xcoeff;
        }

        set
        {
            ((global::VkViewportWScalingNV.__Internal*)__Instance)->xcoeff = value;
        }
    }

    public float Ycoeff
    {
        get
        {
            return ((global::VkViewportWScalingNV.__Internal*) __Instance)->ycoeff;
        }

        set
        {
            ((global::VkViewportWScalingNV.__Internal*)__Instance)->ycoeff = value;
        }
    }
}

public unsafe partial class VkPipelineViewportWScalingStateCreateInfoNV : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint viewportWScalingEnable;

        [FieldOffset(20)]
        internal uint viewportCount;

        [FieldOffset(24)]
        internal global::System.IntPtr pViewportWScalings;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineViewportWScalingStateCreateInfoNV> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineViewportWScalingStateCreateInfoNV>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPipelineViewportWScalingStateCreateInfoNV __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPipelineViewportWScalingStateCreateInfoNV(native.ToPointer(), skipVTables);
    }

    internal static global::VkPipelineViewportWScalingStateCreateInfoNV __CreateInstance(global::VkPipelineViewportWScalingStateCreateInfoNV.__Internal native, bool skipVTables = false)
    {
        return new global::VkPipelineViewportWScalingStateCreateInfoNV(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPipelineViewportWScalingStateCreateInfoNV.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPipelineViewportWScalingStateCreateInfoNV.__Internal));
        *(global::VkPipelineViewportWScalingStateCreateInfoNV.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPipelineViewportWScalingStateCreateInfoNV(global::VkPipelineViewportWScalingStateCreateInfoNV.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPipelineViewportWScalingStateCreateInfoNV(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPipelineViewportWScalingStateCreateInfoNV()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPipelineViewportWScalingStateCreateInfoNV __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPipelineViewportWScalingStateCreateInfoNV.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPipelineViewportWScalingStateCreateInfoNV.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPipelineViewportWScalingStateCreateInfoNV.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPipelineViewportWScalingStateCreateInfoNV.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint ViewportWScalingEnable
    {
        get
        {
            return ((global::VkPipelineViewportWScalingStateCreateInfoNV.__Internal*) __Instance)->viewportWScalingEnable;
        }

        set
        {
            ((global::VkPipelineViewportWScalingStateCreateInfoNV.__Internal*)__Instance)->viewportWScalingEnable = value;
        }
    }

    public uint ViewportCount
    {
        get
        {
            return ((global::VkPipelineViewportWScalingStateCreateInfoNV.__Internal*) __Instance)->viewportCount;
        }

        set
        {
            ((global::VkPipelineViewportWScalingStateCreateInfoNV.__Internal*)__Instance)->viewportCount = value;
        }
    }

    public global::VkViewportWScalingNV PViewportWScalings
    {
        get
        {
            global::VkViewportWScalingNV __result0;
            if (((global::VkPipelineViewportWScalingStateCreateInfoNV.__Internal*) __Instance)->pViewportWScalings == IntPtr.Zero) __result0 = null;
            else if (global::VkViewportWScalingNV.NativeToManagedMap.ContainsKey(((global::VkPipelineViewportWScalingStateCreateInfoNV.__Internal*) __Instance)->pViewportWScalings))
                __result0 = (global::VkViewportWScalingNV) global::VkViewportWScalingNV.NativeToManagedMap[((global::VkPipelineViewportWScalingStateCreateInfoNV.__Internal*) __Instance)->pViewportWScalings];
            else __result0 = global::VkViewportWScalingNV.__CreateInstance(((global::VkPipelineViewportWScalingStateCreateInfoNV.__Internal*) __Instance)->pViewportWScalings);
            return __result0;
        }

        set
        {
            ((global::VkPipelineViewportWScalingStateCreateInfoNV.__Internal*)__Instance)->pViewportWScalings = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkSurfaceCapabilities2EXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 72)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint minImageCount;

        [FieldOffset(20)]
        internal uint maxImageCount;

        [FieldOffset(24)]
        internal global::VkExtent2D.__Internal currentExtent;

        [FieldOffset(32)]
        internal global::VkExtent2D.__Internal minImageExtent;

        [FieldOffset(40)]
        internal global::VkExtent2D.__Internal maxImageExtent;

        [FieldOffset(48)]
        internal uint maxImageArrayLayers;

        [FieldOffset(52)]
        internal uint supportedTransforms;

        [FieldOffset(56)]
        internal global::VkSurfaceTransformFlagBitsKHR currentTransform;

        [FieldOffset(60)]
        internal uint supportedCompositeAlpha;

        [FieldOffset(64)]
        internal uint supportedUsageFlags;

        [FieldOffset(68)]
        internal uint supportedSurfaceCounters;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSurfaceCapabilities2EXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSurfaceCapabilities2EXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSurfaceCapabilities2EXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSurfaceCapabilities2EXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkSurfaceCapabilities2EXT __CreateInstance(global::VkSurfaceCapabilities2EXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkSurfaceCapabilities2EXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSurfaceCapabilities2EXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSurfaceCapabilities2EXT.__Internal));
        *(global::VkSurfaceCapabilities2EXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSurfaceCapabilities2EXT(global::VkSurfaceCapabilities2EXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSurfaceCapabilities2EXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSurfaceCapabilities2EXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkSurfaceCapabilities2EXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkSurfaceCapabilities2EXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkSurfaceCapabilities2EXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkSurfaceCapabilities2EXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkSurfaceCapabilities2EXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint MinImageCount
    {
        get
        {
            return ((global::VkSurfaceCapabilities2EXT.__Internal*) __Instance)->minImageCount;
        }

        set
        {
            ((global::VkSurfaceCapabilities2EXT.__Internal*)__Instance)->minImageCount = value;
        }
    }

    public uint MaxImageCount
    {
        get
        {
            return ((global::VkSurfaceCapabilities2EXT.__Internal*) __Instance)->maxImageCount;
        }

        set
        {
            ((global::VkSurfaceCapabilities2EXT.__Internal*)__Instance)->maxImageCount = value;
        }
    }

    public global::VkExtent2D CurrentExtent
    {
        get
        {
            return global::VkExtent2D.__CreateInstance(new global::System.IntPtr(&((global::VkSurfaceCapabilities2EXT.__Internal*) __Instance)->currentExtent));
        }

        set
        {
            ((global::VkSurfaceCapabilities2EXT.__Internal*)__Instance)->currentExtent = ReferenceEquals(value, null) ? new global::VkExtent2D.__Internal() : *(global::VkExtent2D.__Internal*) value.__Instance;
        }
    }

    public global::VkExtent2D MinImageExtent
    {
        get
        {
            return global::VkExtent2D.__CreateInstance(new global::System.IntPtr(&((global::VkSurfaceCapabilities2EXT.__Internal*) __Instance)->minImageExtent));
        }

        set
        {
            ((global::VkSurfaceCapabilities2EXT.__Internal*)__Instance)->minImageExtent = ReferenceEquals(value, null) ? new global::VkExtent2D.__Internal() : *(global::VkExtent2D.__Internal*) value.__Instance;
        }
    }

    public global::VkExtent2D MaxImageExtent
    {
        get
        {
            return global::VkExtent2D.__CreateInstance(new global::System.IntPtr(&((global::VkSurfaceCapabilities2EXT.__Internal*) __Instance)->maxImageExtent));
        }

        set
        {
            ((global::VkSurfaceCapabilities2EXT.__Internal*)__Instance)->maxImageExtent = ReferenceEquals(value, null) ? new global::VkExtent2D.__Internal() : *(global::VkExtent2D.__Internal*) value.__Instance;
        }
    }

    public uint MaxImageArrayLayers
    {
        get
        {
            return ((global::VkSurfaceCapabilities2EXT.__Internal*) __Instance)->maxImageArrayLayers;
        }

        set
        {
            ((global::VkSurfaceCapabilities2EXT.__Internal*)__Instance)->maxImageArrayLayers = value;
        }
    }

    public uint SupportedTransforms
    {
        get
        {
            return ((global::VkSurfaceCapabilities2EXT.__Internal*) __Instance)->supportedTransforms;
        }

        set
        {
            ((global::VkSurfaceCapabilities2EXT.__Internal*)__Instance)->supportedTransforms = value;
        }
    }

    public global::VkSurfaceTransformFlagBitsKHR CurrentTransform
    {
        get
        {
            return ((global::VkSurfaceCapabilities2EXT.__Internal*) __Instance)->currentTransform;
        }

        set
        {
            ((global::VkSurfaceCapabilities2EXT.__Internal*)__Instance)->currentTransform = value;
        }
    }

    public uint SupportedCompositeAlpha
    {
        get
        {
            return ((global::VkSurfaceCapabilities2EXT.__Internal*) __Instance)->supportedCompositeAlpha;
        }

        set
        {
            ((global::VkSurfaceCapabilities2EXT.__Internal*)__Instance)->supportedCompositeAlpha = value;
        }
    }

    public uint SupportedUsageFlags
    {
        get
        {
            return ((global::VkSurfaceCapabilities2EXT.__Internal*) __Instance)->supportedUsageFlags;
        }

        set
        {
            ((global::VkSurfaceCapabilities2EXT.__Internal*)__Instance)->supportedUsageFlags = value;
        }
    }

    public uint SupportedSurfaceCounters
    {
        get
        {
            return ((global::VkSurfaceCapabilities2EXT.__Internal*) __Instance)->supportedSurfaceCounters;
        }

        set
        {
            ((global::VkSurfaceCapabilities2EXT.__Internal*)__Instance)->supportedSurfaceCounters = value;
        }
    }
}

public unsafe partial class VkDisplayPowerInfoEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkDisplayPowerStateEXT powerState;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDisplayPowerInfoEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDisplayPowerInfoEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDisplayPowerInfoEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDisplayPowerInfoEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkDisplayPowerInfoEXT __CreateInstance(global::VkDisplayPowerInfoEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkDisplayPowerInfoEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDisplayPowerInfoEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDisplayPowerInfoEXT.__Internal));
        *(global::VkDisplayPowerInfoEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDisplayPowerInfoEXT(global::VkDisplayPowerInfoEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDisplayPowerInfoEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDisplayPowerInfoEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDisplayPowerInfoEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDisplayPowerInfoEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDisplayPowerInfoEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDisplayPowerInfoEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDisplayPowerInfoEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkDisplayPowerStateEXT PowerState
    {
        get
        {
            return ((global::VkDisplayPowerInfoEXT.__Internal*) __Instance)->powerState;
        }

        set
        {
            ((global::VkDisplayPowerInfoEXT.__Internal*)__Instance)->powerState = value;
        }
    }
}

public unsafe partial class VkDeviceEventInfoEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkDeviceEventTypeEXT deviceEvent;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceEventInfoEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceEventInfoEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDeviceEventInfoEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDeviceEventInfoEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkDeviceEventInfoEXT __CreateInstance(global::VkDeviceEventInfoEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkDeviceEventInfoEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDeviceEventInfoEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDeviceEventInfoEXT.__Internal));
        *(global::VkDeviceEventInfoEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDeviceEventInfoEXT(global::VkDeviceEventInfoEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDeviceEventInfoEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDeviceEventInfoEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDeviceEventInfoEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDeviceEventInfoEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDeviceEventInfoEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDeviceEventInfoEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDeviceEventInfoEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkDeviceEventTypeEXT DeviceEvent
    {
        get
        {
            return ((global::VkDeviceEventInfoEXT.__Internal*) __Instance)->deviceEvent;
        }

        set
        {
            ((global::VkDeviceEventInfoEXT.__Internal*)__Instance)->deviceEvent = value;
        }
    }
}

public unsafe partial class VkDisplayEventInfoEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkDisplayEventTypeEXT displayEvent;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDisplayEventInfoEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDisplayEventInfoEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDisplayEventInfoEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDisplayEventInfoEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkDisplayEventInfoEXT __CreateInstance(global::VkDisplayEventInfoEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkDisplayEventInfoEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDisplayEventInfoEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDisplayEventInfoEXT.__Internal));
        *(global::VkDisplayEventInfoEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDisplayEventInfoEXT(global::VkDisplayEventInfoEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDisplayEventInfoEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDisplayEventInfoEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDisplayEventInfoEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDisplayEventInfoEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDisplayEventInfoEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDisplayEventInfoEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDisplayEventInfoEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkDisplayEventTypeEXT DisplayEvent
    {
        get
        {
            return ((global::VkDisplayEventInfoEXT.__Internal*) __Instance)->displayEvent;
        }

        set
        {
            ((global::VkDisplayEventInfoEXT.__Internal*)__Instance)->displayEvent = value;
        }
    }
}

public unsafe partial class VkSwapchainCounterCreateInfoEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint surfaceCounters;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSwapchainCounterCreateInfoEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSwapchainCounterCreateInfoEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSwapchainCounterCreateInfoEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSwapchainCounterCreateInfoEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkSwapchainCounterCreateInfoEXT __CreateInstance(global::VkSwapchainCounterCreateInfoEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkSwapchainCounterCreateInfoEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSwapchainCounterCreateInfoEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSwapchainCounterCreateInfoEXT.__Internal));
        *(global::VkSwapchainCounterCreateInfoEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSwapchainCounterCreateInfoEXT(global::VkSwapchainCounterCreateInfoEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSwapchainCounterCreateInfoEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSwapchainCounterCreateInfoEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkSwapchainCounterCreateInfoEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkSwapchainCounterCreateInfoEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkSwapchainCounterCreateInfoEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkSwapchainCounterCreateInfoEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkSwapchainCounterCreateInfoEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint SurfaceCounters
    {
        get
        {
            return ((global::VkSwapchainCounterCreateInfoEXT.__Internal*) __Instance)->surfaceCounters;
        }

        set
        {
            ((global::VkSwapchainCounterCreateInfoEXT.__Internal*)__Instance)->surfaceCounters = value;
        }
    }
}

public unsafe partial class VkRefreshCycleDurationGOOGLE : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal ulong refreshDuration;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkRefreshCycleDurationGOOGLE> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkRefreshCycleDurationGOOGLE>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkRefreshCycleDurationGOOGLE __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkRefreshCycleDurationGOOGLE(native.ToPointer(), skipVTables);
    }

    internal static global::VkRefreshCycleDurationGOOGLE __CreateInstance(global::VkRefreshCycleDurationGOOGLE.__Internal native, bool skipVTables = false)
    {
        return new global::VkRefreshCycleDurationGOOGLE(native, skipVTables);
    }

    private static void* __CopyValue(global::VkRefreshCycleDurationGOOGLE.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkRefreshCycleDurationGOOGLE.__Internal));
        *(global::VkRefreshCycleDurationGOOGLE.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkRefreshCycleDurationGOOGLE(global::VkRefreshCycleDurationGOOGLE.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkRefreshCycleDurationGOOGLE(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkRefreshCycleDurationGOOGLE()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkRefreshCycleDurationGOOGLE __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public ulong RefreshDuration
    {
        get
        {
            return ((global::VkRefreshCycleDurationGOOGLE.__Internal*) __Instance)->refreshDuration;
        }

        set
        {
            ((global::VkRefreshCycleDurationGOOGLE.__Internal*)__Instance)->refreshDuration = value;
        }
    }
}

public unsafe partial class VkPastPresentationTimingGOOGLE : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint presentID;

        [FieldOffset(8)]
        internal ulong desiredPresentTime;

        [FieldOffset(16)]
        internal ulong actualPresentTime;

        [FieldOffset(24)]
        internal ulong earliestPresentTime;

        [FieldOffset(32)]
        internal ulong presentMargin;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPastPresentationTimingGOOGLE> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPastPresentationTimingGOOGLE>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPastPresentationTimingGOOGLE __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPastPresentationTimingGOOGLE(native.ToPointer(), skipVTables);
    }

    internal static global::VkPastPresentationTimingGOOGLE __CreateInstance(global::VkPastPresentationTimingGOOGLE.__Internal native, bool skipVTables = false)
    {
        return new global::VkPastPresentationTimingGOOGLE(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPastPresentationTimingGOOGLE.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPastPresentationTimingGOOGLE.__Internal));
        *(global::VkPastPresentationTimingGOOGLE.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPastPresentationTimingGOOGLE(global::VkPastPresentationTimingGOOGLE.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPastPresentationTimingGOOGLE(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPastPresentationTimingGOOGLE()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPastPresentationTimingGOOGLE __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint PresentID
    {
        get
        {
            return ((global::VkPastPresentationTimingGOOGLE.__Internal*) __Instance)->presentID;
        }

        set
        {
            ((global::VkPastPresentationTimingGOOGLE.__Internal*)__Instance)->presentID = value;
        }
    }

    public ulong DesiredPresentTime
    {
        get
        {
            return ((global::VkPastPresentationTimingGOOGLE.__Internal*) __Instance)->desiredPresentTime;
        }

        set
        {
            ((global::VkPastPresentationTimingGOOGLE.__Internal*)__Instance)->desiredPresentTime = value;
        }
    }

    public ulong ActualPresentTime
    {
        get
        {
            return ((global::VkPastPresentationTimingGOOGLE.__Internal*) __Instance)->actualPresentTime;
        }

        set
        {
            ((global::VkPastPresentationTimingGOOGLE.__Internal*)__Instance)->actualPresentTime = value;
        }
    }

    public ulong EarliestPresentTime
    {
        get
        {
            return ((global::VkPastPresentationTimingGOOGLE.__Internal*) __Instance)->earliestPresentTime;
        }

        set
        {
            ((global::VkPastPresentationTimingGOOGLE.__Internal*)__Instance)->earliestPresentTime = value;
        }
    }

    public ulong PresentMargin
    {
        get
        {
            return ((global::VkPastPresentationTimingGOOGLE.__Internal*) __Instance)->presentMargin;
        }

        set
        {
            ((global::VkPastPresentationTimingGOOGLE.__Internal*)__Instance)->presentMargin = value;
        }
    }
}

public unsafe partial class VkPresentTimeGOOGLE : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint presentID;

        [FieldOffset(8)]
        internal ulong desiredPresentTime;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPresentTimeGOOGLE> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPresentTimeGOOGLE>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPresentTimeGOOGLE __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPresentTimeGOOGLE(native.ToPointer(), skipVTables);
    }

    internal static global::VkPresentTimeGOOGLE __CreateInstance(global::VkPresentTimeGOOGLE.__Internal native, bool skipVTables = false)
    {
        return new global::VkPresentTimeGOOGLE(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPresentTimeGOOGLE.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPresentTimeGOOGLE.__Internal));
        *(global::VkPresentTimeGOOGLE.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPresentTimeGOOGLE(global::VkPresentTimeGOOGLE.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPresentTimeGOOGLE(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPresentTimeGOOGLE()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPresentTimeGOOGLE __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint PresentID
    {
        get
        {
            return ((global::VkPresentTimeGOOGLE.__Internal*) __Instance)->presentID;
        }

        set
        {
            ((global::VkPresentTimeGOOGLE.__Internal*)__Instance)->presentID = value;
        }
    }

    public ulong DesiredPresentTime
    {
        get
        {
            return ((global::VkPresentTimeGOOGLE.__Internal*) __Instance)->desiredPresentTime;
        }

        set
        {
            ((global::VkPresentTimeGOOGLE.__Internal*)__Instance)->desiredPresentTime = value;
        }
    }
}

public unsafe partial class VkPresentTimesInfoGOOGLE : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint swapchainCount;

        [FieldOffset(24)]
        internal global::System.IntPtr pTimes;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPresentTimesInfoGOOGLE> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPresentTimesInfoGOOGLE>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPresentTimesInfoGOOGLE __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPresentTimesInfoGOOGLE(native.ToPointer(), skipVTables);
    }

    internal static global::VkPresentTimesInfoGOOGLE __CreateInstance(global::VkPresentTimesInfoGOOGLE.__Internal native, bool skipVTables = false)
    {
        return new global::VkPresentTimesInfoGOOGLE(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPresentTimesInfoGOOGLE.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPresentTimesInfoGOOGLE.__Internal));
        *(global::VkPresentTimesInfoGOOGLE.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPresentTimesInfoGOOGLE(global::VkPresentTimesInfoGOOGLE.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPresentTimesInfoGOOGLE(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPresentTimesInfoGOOGLE()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPresentTimesInfoGOOGLE __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPresentTimesInfoGOOGLE.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPresentTimesInfoGOOGLE.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPresentTimesInfoGOOGLE.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPresentTimesInfoGOOGLE.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint SwapchainCount
    {
        get
        {
            return ((global::VkPresentTimesInfoGOOGLE.__Internal*) __Instance)->swapchainCount;
        }

        set
        {
            ((global::VkPresentTimesInfoGOOGLE.__Internal*)__Instance)->swapchainCount = value;
        }
    }

    public global::VkPresentTimeGOOGLE PTimes
    {
        get
        {
            global::VkPresentTimeGOOGLE __result0;
            if (((global::VkPresentTimesInfoGOOGLE.__Internal*) __Instance)->pTimes == IntPtr.Zero) __result0 = null;
            else if (global::VkPresentTimeGOOGLE.NativeToManagedMap.ContainsKey(((global::VkPresentTimesInfoGOOGLE.__Internal*) __Instance)->pTimes))
                __result0 = (global::VkPresentTimeGOOGLE) global::VkPresentTimeGOOGLE.NativeToManagedMap[((global::VkPresentTimesInfoGOOGLE.__Internal*) __Instance)->pTimes];
            else __result0 = global::VkPresentTimeGOOGLE.__CreateInstance(((global::VkPresentTimesInfoGOOGLE.__Internal*) __Instance)->pTimes);
            return __result0;
        }

        set
        {
            ((global::VkPresentTimesInfoGOOGLE.__Internal*)__Instance)->pTimes = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint perViewPositionAllComponents;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX __CreateInstance(global::VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.__Internal));
        *(global::VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(global::VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint PerViewPositionAllComponents
    {
        get
        {
            return ((global::VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.__Internal*) __Instance)->perViewPositionAllComponents;
        }

        set
        {
            ((global::VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.__Internal*)__Instance)->perViewPositionAllComponents = value;
        }
    }
}

public unsafe partial class VkViewportSwizzleNV : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkViewportCoordinateSwizzleNV x;

        [FieldOffset(4)]
        internal global::VkViewportCoordinateSwizzleNV y;

        [FieldOffset(8)]
        internal global::VkViewportCoordinateSwizzleNV z;

        [FieldOffset(12)]
        internal global::VkViewportCoordinateSwizzleNV w;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkViewportSwizzleNV> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkViewportSwizzleNV>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkViewportSwizzleNV __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkViewportSwizzleNV(native.ToPointer(), skipVTables);
    }

    internal static global::VkViewportSwizzleNV __CreateInstance(global::VkViewportSwizzleNV.__Internal native, bool skipVTables = false)
    {
        return new global::VkViewportSwizzleNV(native, skipVTables);
    }

    private static void* __CopyValue(global::VkViewportSwizzleNV.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkViewportSwizzleNV.__Internal));
        *(global::VkViewportSwizzleNV.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkViewportSwizzleNV(global::VkViewportSwizzleNV.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkViewportSwizzleNV(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkViewportSwizzleNV()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkViewportSwizzleNV __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkViewportCoordinateSwizzleNV X
    {
        get
        {
            return ((global::VkViewportSwizzleNV.__Internal*) __Instance)->x;
        }

        set
        {
            ((global::VkViewportSwizzleNV.__Internal*)__Instance)->x = value;
        }
    }

    public global::VkViewportCoordinateSwizzleNV Y
    {
        get
        {
            return ((global::VkViewportSwizzleNV.__Internal*) __Instance)->y;
        }

        set
        {
            ((global::VkViewportSwizzleNV.__Internal*)__Instance)->y = value;
        }
    }

    public global::VkViewportCoordinateSwizzleNV Z
    {
        get
        {
            return ((global::VkViewportSwizzleNV.__Internal*) __Instance)->z;
        }

        set
        {
            ((global::VkViewportSwizzleNV.__Internal*)__Instance)->z = value;
        }
    }

    public global::VkViewportCoordinateSwizzleNV W
    {
        get
        {
            return ((global::VkViewportSwizzleNV.__Internal*) __Instance)->w;
        }

        set
        {
            ((global::VkViewportSwizzleNV.__Internal*)__Instance)->w = value;
        }
    }
}

public unsafe partial class VkPipelineViewportSwizzleStateCreateInfoNV : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(20)]
        internal uint viewportCount;

        [FieldOffset(24)]
        internal global::System.IntPtr pViewportSwizzles;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineViewportSwizzleStateCreateInfoNV> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineViewportSwizzleStateCreateInfoNV>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPipelineViewportSwizzleStateCreateInfoNV __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPipelineViewportSwizzleStateCreateInfoNV(native.ToPointer(), skipVTables);
    }

    internal static global::VkPipelineViewportSwizzleStateCreateInfoNV __CreateInstance(global::VkPipelineViewportSwizzleStateCreateInfoNV.__Internal native, bool skipVTables = false)
    {
        return new global::VkPipelineViewportSwizzleStateCreateInfoNV(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPipelineViewportSwizzleStateCreateInfoNV.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPipelineViewportSwizzleStateCreateInfoNV.__Internal));
        *(global::VkPipelineViewportSwizzleStateCreateInfoNV.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPipelineViewportSwizzleStateCreateInfoNV(global::VkPipelineViewportSwizzleStateCreateInfoNV.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPipelineViewportSwizzleStateCreateInfoNV(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPipelineViewportSwizzleStateCreateInfoNV()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPipelineViewportSwizzleStateCreateInfoNV __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPipelineViewportSwizzleStateCreateInfoNV.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPipelineViewportSwizzleStateCreateInfoNV.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPipelineViewportSwizzleStateCreateInfoNV.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPipelineViewportSwizzleStateCreateInfoNV.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkPipelineViewportSwizzleStateCreateInfoNV.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkPipelineViewportSwizzleStateCreateInfoNV.__Internal*)__Instance)->flags = value;
        }
    }

    public uint ViewportCount
    {
        get
        {
            return ((global::VkPipelineViewportSwizzleStateCreateInfoNV.__Internal*) __Instance)->viewportCount;
        }

        set
        {
            ((global::VkPipelineViewportSwizzleStateCreateInfoNV.__Internal*)__Instance)->viewportCount = value;
        }
    }

    public global::VkViewportSwizzleNV PViewportSwizzles
    {
        get
        {
            global::VkViewportSwizzleNV __result0;
            if (((global::VkPipelineViewportSwizzleStateCreateInfoNV.__Internal*) __Instance)->pViewportSwizzles == IntPtr.Zero) __result0 = null;
            else if (global::VkViewportSwizzleNV.NativeToManagedMap.ContainsKey(((global::VkPipelineViewportSwizzleStateCreateInfoNV.__Internal*) __Instance)->pViewportSwizzles))
                __result0 = (global::VkViewportSwizzleNV) global::VkViewportSwizzleNV.NativeToManagedMap[((global::VkPipelineViewportSwizzleStateCreateInfoNV.__Internal*) __Instance)->pViewportSwizzles];
            else __result0 = global::VkViewportSwizzleNV.__CreateInstance(((global::VkPipelineViewportSwizzleStateCreateInfoNV.__Internal*) __Instance)->pViewportSwizzles);
            return __result0;
        }

        set
        {
            ((global::VkPipelineViewportSwizzleStateCreateInfoNV.__Internal*)__Instance)->pViewportSwizzles = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkPhysicalDeviceDiscardRectanglePropertiesEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint maxDiscardRectangles;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceDiscardRectanglePropertiesEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceDiscardRectanglePropertiesEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceDiscardRectanglePropertiesEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceDiscardRectanglePropertiesEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceDiscardRectanglePropertiesEXT __CreateInstance(global::VkPhysicalDeviceDiscardRectanglePropertiesEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceDiscardRectanglePropertiesEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceDiscardRectanglePropertiesEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceDiscardRectanglePropertiesEXT.__Internal));
        *(global::VkPhysicalDeviceDiscardRectanglePropertiesEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceDiscardRectanglePropertiesEXT(global::VkPhysicalDeviceDiscardRectanglePropertiesEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceDiscardRectanglePropertiesEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceDiscardRectanglePropertiesEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceDiscardRectanglePropertiesEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDeviceDiscardRectanglePropertiesEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDeviceDiscardRectanglePropertiesEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDeviceDiscardRectanglePropertiesEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDeviceDiscardRectanglePropertiesEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint MaxDiscardRectangles
    {
        get
        {
            return ((global::VkPhysicalDeviceDiscardRectanglePropertiesEXT.__Internal*) __Instance)->maxDiscardRectangles;
        }

        set
        {
            ((global::VkPhysicalDeviceDiscardRectanglePropertiesEXT.__Internal*)__Instance)->maxDiscardRectangles = value;
        }
    }
}

public unsafe partial class VkPipelineDiscardRectangleStateCreateInfoEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(20)]
        internal global::VkDiscardRectangleModeEXT discardRectangleMode;

        [FieldOffset(24)]
        internal uint discardRectangleCount;

        [FieldOffset(32)]
        internal global::System.IntPtr pDiscardRectangles;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineDiscardRectangleStateCreateInfoEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineDiscardRectangleStateCreateInfoEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPipelineDiscardRectangleStateCreateInfoEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPipelineDiscardRectangleStateCreateInfoEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkPipelineDiscardRectangleStateCreateInfoEXT __CreateInstance(global::VkPipelineDiscardRectangleStateCreateInfoEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkPipelineDiscardRectangleStateCreateInfoEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPipelineDiscardRectangleStateCreateInfoEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPipelineDiscardRectangleStateCreateInfoEXT.__Internal));
        *(global::VkPipelineDiscardRectangleStateCreateInfoEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPipelineDiscardRectangleStateCreateInfoEXT(global::VkPipelineDiscardRectangleStateCreateInfoEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPipelineDiscardRectangleStateCreateInfoEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPipelineDiscardRectangleStateCreateInfoEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPipelineDiscardRectangleStateCreateInfoEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPipelineDiscardRectangleStateCreateInfoEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPipelineDiscardRectangleStateCreateInfoEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPipelineDiscardRectangleStateCreateInfoEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPipelineDiscardRectangleStateCreateInfoEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkPipelineDiscardRectangleStateCreateInfoEXT.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkPipelineDiscardRectangleStateCreateInfoEXT.__Internal*)__Instance)->flags = value;
        }
    }

    public global::VkDiscardRectangleModeEXT DiscardRectangleMode
    {
        get
        {
            return ((global::VkPipelineDiscardRectangleStateCreateInfoEXT.__Internal*) __Instance)->discardRectangleMode;
        }

        set
        {
            ((global::VkPipelineDiscardRectangleStateCreateInfoEXT.__Internal*)__Instance)->discardRectangleMode = value;
        }
    }

    public uint DiscardRectangleCount
    {
        get
        {
            return ((global::VkPipelineDiscardRectangleStateCreateInfoEXT.__Internal*) __Instance)->discardRectangleCount;
        }

        set
        {
            ((global::VkPipelineDiscardRectangleStateCreateInfoEXT.__Internal*)__Instance)->discardRectangleCount = value;
        }
    }

    public global::VkRect2D PDiscardRectangles
    {
        get
        {
            global::VkRect2D __result0;
            if (((global::VkPipelineDiscardRectangleStateCreateInfoEXT.__Internal*) __Instance)->pDiscardRectangles == IntPtr.Zero) __result0 = null;
            else if (global::VkRect2D.NativeToManagedMap.ContainsKey(((global::VkPipelineDiscardRectangleStateCreateInfoEXT.__Internal*) __Instance)->pDiscardRectangles))
                __result0 = (global::VkRect2D) global::VkRect2D.NativeToManagedMap[((global::VkPipelineDiscardRectangleStateCreateInfoEXT.__Internal*) __Instance)->pDiscardRectangles];
            else __result0 = global::VkRect2D.__CreateInstance(((global::VkPipelineDiscardRectangleStateCreateInfoEXT.__Internal*) __Instance)->pDiscardRectangles);
            return __result0;
        }

        set
        {
            ((global::VkPipelineDiscardRectangleStateCreateInfoEXT.__Internal*)__Instance)->pDiscardRectangles = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkPhysicalDeviceConservativeRasterizationPropertiesEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 56)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal float primitiveOverestimationSize;

        [FieldOffset(20)]
        internal float maxExtraPrimitiveOverestimationSize;

        [FieldOffset(24)]
        internal float extraPrimitiveOverestimationSizeGranularity;

        [FieldOffset(28)]
        internal uint primitiveUnderestimation;

        [FieldOffset(32)]
        internal uint conservativePointAndLineRasterization;

        [FieldOffset(36)]
        internal uint degenerateTrianglesRasterized;

        [FieldOffset(40)]
        internal uint degenerateLinesRasterized;

        [FieldOffset(44)]
        internal uint fullyCoveredFragmentShaderInputVariable;

        [FieldOffset(48)]
        internal uint conservativeRasterizationPostDepthCoverage;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT __CreateInstance(global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT.__Internal));
        *(global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceConservativeRasterizationPropertiesEXT(global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceConservativeRasterizationPropertiesEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceConservativeRasterizationPropertiesEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public float PrimitiveOverestimationSize
    {
        get
        {
            return ((global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT.__Internal*) __Instance)->primitiveOverestimationSize;
        }

        set
        {
            ((global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT.__Internal*)__Instance)->primitiveOverestimationSize = value;
        }
    }

    public float MaxExtraPrimitiveOverestimationSize
    {
        get
        {
            return ((global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT.__Internal*) __Instance)->maxExtraPrimitiveOverestimationSize;
        }

        set
        {
            ((global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT.__Internal*)__Instance)->maxExtraPrimitiveOverestimationSize = value;
        }
    }

    public float ExtraPrimitiveOverestimationSizeGranularity
    {
        get
        {
            return ((global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT.__Internal*) __Instance)->extraPrimitiveOverestimationSizeGranularity;
        }

        set
        {
            ((global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT.__Internal*)__Instance)->extraPrimitiveOverestimationSizeGranularity = value;
        }
    }

    public uint PrimitiveUnderestimation
    {
        get
        {
            return ((global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT.__Internal*) __Instance)->primitiveUnderestimation;
        }

        set
        {
            ((global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT.__Internal*)__Instance)->primitiveUnderestimation = value;
        }
    }

    public uint ConservativePointAndLineRasterization
    {
        get
        {
            return ((global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT.__Internal*) __Instance)->conservativePointAndLineRasterization;
        }

        set
        {
            ((global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT.__Internal*)__Instance)->conservativePointAndLineRasterization = value;
        }
    }

    public uint DegenerateTrianglesRasterized
    {
        get
        {
            return ((global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT.__Internal*) __Instance)->degenerateTrianglesRasterized;
        }

        set
        {
            ((global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT.__Internal*)__Instance)->degenerateTrianglesRasterized = value;
        }
    }

    public uint DegenerateLinesRasterized
    {
        get
        {
            return ((global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT.__Internal*) __Instance)->degenerateLinesRasterized;
        }

        set
        {
            ((global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT.__Internal*)__Instance)->degenerateLinesRasterized = value;
        }
    }

    public uint FullyCoveredFragmentShaderInputVariable
    {
        get
        {
            return ((global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT.__Internal*) __Instance)->fullyCoveredFragmentShaderInputVariable;
        }

        set
        {
            ((global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT.__Internal*)__Instance)->fullyCoveredFragmentShaderInputVariable = value;
        }
    }

    public uint ConservativeRasterizationPostDepthCoverage
    {
        get
        {
            return ((global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT.__Internal*) __Instance)->conservativeRasterizationPostDepthCoverage;
        }

        set
        {
            ((global::VkPhysicalDeviceConservativeRasterizationPropertiesEXT.__Internal*)__Instance)->conservativeRasterizationPostDepthCoverage = value;
        }
    }
}

public unsafe partial class VkPipelineRasterizationConservativeStateCreateInfoEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(20)]
        internal global::VkConservativeRasterizationModeEXT conservativeRasterizationMode;

        [FieldOffset(24)]
        internal float extraPrimitiveOverestimationSize;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineRasterizationConservativeStateCreateInfoEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineRasterizationConservativeStateCreateInfoEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPipelineRasterizationConservativeStateCreateInfoEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPipelineRasterizationConservativeStateCreateInfoEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkPipelineRasterizationConservativeStateCreateInfoEXT __CreateInstance(global::VkPipelineRasterizationConservativeStateCreateInfoEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkPipelineRasterizationConservativeStateCreateInfoEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPipelineRasterizationConservativeStateCreateInfoEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPipelineRasterizationConservativeStateCreateInfoEXT.__Internal));
        *(global::VkPipelineRasterizationConservativeStateCreateInfoEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPipelineRasterizationConservativeStateCreateInfoEXT(global::VkPipelineRasterizationConservativeStateCreateInfoEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPipelineRasterizationConservativeStateCreateInfoEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPipelineRasterizationConservativeStateCreateInfoEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPipelineRasterizationConservativeStateCreateInfoEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPipelineRasterizationConservativeStateCreateInfoEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPipelineRasterizationConservativeStateCreateInfoEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPipelineRasterizationConservativeStateCreateInfoEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPipelineRasterizationConservativeStateCreateInfoEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkPipelineRasterizationConservativeStateCreateInfoEXT.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkPipelineRasterizationConservativeStateCreateInfoEXT.__Internal*)__Instance)->flags = value;
        }
    }

    public global::VkConservativeRasterizationModeEXT ConservativeRasterizationMode
    {
        get
        {
            return ((global::VkPipelineRasterizationConservativeStateCreateInfoEXT.__Internal*) __Instance)->conservativeRasterizationMode;
        }

        set
        {
            ((global::VkPipelineRasterizationConservativeStateCreateInfoEXT.__Internal*)__Instance)->conservativeRasterizationMode = value;
        }
    }

    public float ExtraPrimitiveOverestimationSize
    {
        get
        {
            return ((global::VkPipelineRasterizationConservativeStateCreateInfoEXT.__Internal*) __Instance)->extraPrimitiveOverestimationSize;
        }

        set
        {
            ((global::VkPipelineRasterizationConservativeStateCreateInfoEXT.__Internal*)__Instance)->extraPrimitiveOverestimationSize = value;
        }
    }
}

public unsafe partial class VkXYColorEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal float x;

        [FieldOffset(4)]
        internal float y;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkXYColorEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkXYColorEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkXYColorEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkXYColorEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkXYColorEXT __CreateInstance(global::VkXYColorEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkXYColorEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkXYColorEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkXYColorEXT.__Internal));
        *(global::VkXYColorEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkXYColorEXT(global::VkXYColorEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkXYColorEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkXYColorEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkXYColorEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public float X
    {
        get
        {
            return ((global::VkXYColorEXT.__Internal*) __Instance)->x;
        }

        set
        {
            ((global::VkXYColorEXT.__Internal*)__Instance)->x = value;
        }
    }

    public float Y
    {
        get
        {
            return ((global::VkXYColorEXT.__Internal*) __Instance)->y;
        }

        set
        {
            ((global::VkXYColorEXT.__Internal*)__Instance)->y = value;
        }
    }
}

public unsafe partial class VkHdrMetadataEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 64)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkXYColorEXT.__Internal displayPrimaryRed;

        [FieldOffset(24)]
        internal global::VkXYColorEXT.__Internal displayPrimaryGreen;

        [FieldOffset(32)]
        internal global::VkXYColorEXT.__Internal displayPrimaryBlue;

        [FieldOffset(40)]
        internal global::VkXYColorEXT.__Internal whitePoint;

        [FieldOffset(48)]
        internal float maxLuminance;

        [FieldOffset(52)]
        internal float minLuminance;

        [FieldOffset(56)]
        internal float maxContentLightLevel;

        [FieldOffset(60)]
        internal float maxFrameAverageLightLevel;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkHdrMetadataEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkHdrMetadataEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkHdrMetadataEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkHdrMetadataEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkHdrMetadataEXT __CreateInstance(global::VkHdrMetadataEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkHdrMetadataEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkHdrMetadataEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkHdrMetadataEXT.__Internal));
        *(global::VkHdrMetadataEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkHdrMetadataEXT(global::VkHdrMetadataEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkHdrMetadataEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkHdrMetadataEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkHdrMetadataEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkHdrMetadataEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkHdrMetadataEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkHdrMetadataEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkHdrMetadataEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkXYColorEXT DisplayPrimaryRed
    {
        get
        {
            return global::VkXYColorEXT.__CreateInstance(new global::System.IntPtr(&((global::VkHdrMetadataEXT.__Internal*) __Instance)->displayPrimaryRed));
        }

        set
        {
            ((global::VkHdrMetadataEXT.__Internal*)__Instance)->displayPrimaryRed = ReferenceEquals(value, null) ? new global::VkXYColorEXT.__Internal() : *(global::VkXYColorEXT.__Internal*) value.__Instance;
        }
    }

    public global::VkXYColorEXT DisplayPrimaryGreen
    {
        get
        {
            return global::VkXYColorEXT.__CreateInstance(new global::System.IntPtr(&((global::VkHdrMetadataEXT.__Internal*) __Instance)->displayPrimaryGreen));
        }

        set
        {
            ((global::VkHdrMetadataEXT.__Internal*)__Instance)->displayPrimaryGreen = ReferenceEquals(value, null) ? new global::VkXYColorEXT.__Internal() : *(global::VkXYColorEXT.__Internal*) value.__Instance;
        }
    }

    public global::VkXYColorEXT DisplayPrimaryBlue
    {
        get
        {
            return global::VkXYColorEXT.__CreateInstance(new global::System.IntPtr(&((global::VkHdrMetadataEXT.__Internal*) __Instance)->displayPrimaryBlue));
        }

        set
        {
            ((global::VkHdrMetadataEXT.__Internal*)__Instance)->displayPrimaryBlue = ReferenceEquals(value, null) ? new global::VkXYColorEXT.__Internal() : *(global::VkXYColorEXT.__Internal*) value.__Instance;
        }
    }

    public global::VkXYColorEXT WhitePoint
    {
        get
        {
            return global::VkXYColorEXT.__CreateInstance(new global::System.IntPtr(&((global::VkHdrMetadataEXT.__Internal*) __Instance)->whitePoint));
        }

        set
        {
            ((global::VkHdrMetadataEXT.__Internal*)__Instance)->whitePoint = ReferenceEquals(value, null) ? new global::VkXYColorEXT.__Internal() : *(global::VkXYColorEXT.__Internal*) value.__Instance;
        }
    }

    public float MaxLuminance
    {
        get
        {
            return ((global::VkHdrMetadataEXT.__Internal*) __Instance)->maxLuminance;
        }

        set
        {
            ((global::VkHdrMetadataEXT.__Internal*)__Instance)->maxLuminance = value;
        }
    }

    public float MinLuminance
    {
        get
        {
            return ((global::VkHdrMetadataEXT.__Internal*) __Instance)->minLuminance;
        }

        set
        {
            ((global::VkHdrMetadataEXT.__Internal*)__Instance)->minLuminance = value;
        }
    }

    public float MaxContentLightLevel
    {
        get
        {
            return ((global::VkHdrMetadataEXT.__Internal*) __Instance)->maxContentLightLevel;
        }

        set
        {
            ((global::VkHdrMetadataEXT.__Internal*)__Instance)->maxContentLightLevel = value;
        }
    }

    public float MaxFrameAverageLightLevel
    {
        get
        {
            return ((global::VkHdrMetadataEXT.__Internal*) __Instance)->maxFrameAverageLightLevel;
        }

        set
        {
            ((global::VkHdrMetadataEXT.__Internal*)__Instance)->maxFrameAverageLightLevel = value;
        }
    }
}

public unsafe partial class VkDebugUtilsMessengerEXT_T
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDebugUtilsMessengerEXT_T> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDebugUtilsMessengerEXT_T>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDebugUtilsMessengerEXT_T __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDebugUtilsMessengerEXT_T(native.ToPointer(), skipVTables);
    }

    internal static global::VkDebugUtilsMessengerEXT_T __CreateInstance(global::VkDebugUtilsMessengerEXT_T.__Internal native, bool skipVTables = false)
    {
        return new global::VkDebugUtilsMessengerEXT_T(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDebugUtilsMessengerEXT_T.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDebugUtilsMessengerEXT_T.__Internal));
        *(global::VkDebugUtilsMessengerEXT_T.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDebugUtilsMessengerEXT_T(global::VkDebugUtilsMessengerEXT_T.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDebugUtilsMessengerEXT_T(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDebugUtilsMessengerEXT_T()
    {
        Dispose(false);
    }
}

public unsafe partial class VkDebugUtilsObjectNameInfoEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkObjectType objectType;

        [FieldOffset(24)]
        internal ulong objectHandle;

        [FieldOffset(32)]
        internal global::System.IntPtr pObjectName;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDebugUtilsObjectNameInfoEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDebugUtilsObjectNameInfoEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDebugUtilsObjectNameInfoEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDebugUtilsObjectNameInfoEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkDebugUtilsObjectNameInfoEXT __CreateInstance(global::VkDebugUtilsObjectNameInfoEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkDebugUtilsObjectNameInfoEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDebugUtilsObjectNameInfoEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDebugUtilsObjectNameInfoEXT.__Internal));
        *(global::VkDebugUtilsObjectNameInfoEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDebugUtilsObjectNameInfoEXT(global::VkDebugUtilsObjectNameInfoEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDebugUtilsObjectNameInfoEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDebugUtilsObjectNameInfoEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDebugUtilsObjectNameInfoEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDebugUtilsObjectNameInfoEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDebugUtilsObjectNameInfoEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDebugUtilsObjectNameInfoEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDebugUtilsObjectNameInfoEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkObjectType ObjectType
    {
        get
        {
            return ((global::VkDebugUtilsObjectNameInfoEXT.__Internal*) __Instance)->objectType;
        }

        set
        {
            ((global::VkDebugUtilsObjectNameInfoEXT.__Internal*)__Instance)->objectType = value;
        }
    }

    public ulong ObjectHandle
    {
        get
        {
            return ((global::VkDebugUtilsObjectNameInfoEXT.__Internal*) __Instance)->objectHandle;
        }

        set
        {
            ((global::VkDebugUtilsObjectNameInfoEXT.__Internal*)__Instance)->objectHandle = value;
        }
    }

    public string PObjectName
    {
        get
        {
            return Marshal.PtrToStringAnsi(((global::VkDebugUtilsObjectNameInfoEXT.__Internal*) __Instance)->pObjectName);
        }

        set
        {
            ((global::VkDebugUtilsObjectNameInfoEXT.__Internal*)__Instance)->pObjectName = Marshal.StringToHGlobalAnsi(value);
        }
    }
}

public unsafe partial class VkDebugUtilsObjectTagInfoEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 56)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkObjectType objectType;

        [FieldOffset(24)]
        internal ulong objectHandle;

        [FieldOffset(32)]
        internal ulong tagName;

        [FieldOffset(40)]
        internal ulong tagSize;

        [FieldOffset(48)]
        internal global::System.IntPtr pTag;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDebugUtilsObjectTagInfoEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDebugUtilsObjectTagInfoEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDebugUtilsObjectTagInfoEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDebugUtilsObjectTagInfoEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkDebugUtilsObjectTagInfoEXT __CreateInstance(global::VkDebugUtilsObjectTagInfoEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkDebugUtilsObjectTagInfoEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDebugUtilsObjectTagInfoEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDebugUtilsObjectTagInfoEXT.__Internal));
        *(global::VkDebugUtilsObjectTagInfoEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDebugUtilsObjectTagInfoEXT(global::VkDebugUtilsObjectTagInfoEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDebugUtilsObjectTagInfoEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDebugUtilsObjectTagInfoEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDebugUtilsObjectTagInfoEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDebugUtilsObjectTagInfoEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDebugUtilsObjectTagInfoEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDebugUtilsObjectTagInfoEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDebugUtilsObjectTagInfoEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkObjectType ObjectType
    {
        get
        {
            return ((global::VkDebugUtilsObjectTagInfoEXT.__Internal*) __Instance)->objectType;
        }

        set
        {
            ((global::VkDebugUtilsObjectTagInfoEXT.__Internal*)__Instance)->objectType = value;
        }
    }

    public ulong ObjectHandle
    {
        get
        {
            return ((global::VkDebugUtilsObjectTagInfoEXT.__Internal*) __Instance)->objectHandle;
        }

        set
        {
            ((global::VkDebugUtilsObjectTagInfoEXT.__Internal*)__Instance)->objectHandle = value;
        }
    }

    public ulong TagName
    {
        get
        {
            return ((global::VkDebugUtilsObjectTagInfoEXT.__Internal*) __Instance)->tagName;
        }

        set
        {
            ((global::VkDebugUtilsObjectTagInfoEXT.__Internal*)__Instance)->tagName = value;
        }
    }

    public ulong TagSize
    {
        get
        {
            return ((global::VkDebugUtilsObjectTagInfoEXT.__Internal*) __Instance)->tagSize;
        }

        set
        {
            ((global::VkDebugUtilsObjectTagInfoEXT.__Internal*)__Instance)->tagSize = value;
        }
    }

    public global::System.IntPtr PTag
    {
        get
        {
            return ((global::VkDebugUtilsObjectTagInfoEXT.__Internal*) __Instance)->pTag;
        }

        set
        {
            ((global::VkDebugUtilsObjectTagInfoEXT.__Internal*)__Instance)->pTag = (global::System.IntPtr) value;
        }
    }
}

public unsafe partial class VkDebugUtilsLabelEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::System.IntPtr pLabelName;

        [FieldOffset(24)]
        internal fixed float color[4];
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDebugUtilsLabelEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDebugUtilsLabelEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDebugUtilsLabelEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDebugUtilsLabelEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkDebugUtilsLabelEXT __CreateInstance(global::VkDebugUtilsLabelEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkDebugUtilsLabelEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDebugUtilsLabelEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDebugUtilsLabelEXT.__Internal));
        *(global::VkDebugUtilsLabelEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDebugUtilsLabelEXT(global::VkDebugUtilsLabelEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDebugUtilsLabelEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDebugUtilsLabelEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDebugUtilsLabelEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDebugUtilsLabelEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDebugUtilsLabelEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDebugUtilsLabelEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDebugUtilsLabelEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public string PLabelName
    {
        get
        {
            return Marshal.PtrToStringAnsi(((global::VkDebugUtilsLabelEXT.__Internal*) __Instance)->pLabelName);
        }

        set
        {
            ((global::VkDebugUtilsLabelEXT.__Internal*)__Instance)->pLabelName = Marshal.StringToHGlobalAnsi(value);
        }
    }

    public float[] Color
    {
        get
        {
            float[] __value = null;
            if (((global::VkDebugUtilsLabelEXT.__Internal*) __Instance)->color != null)
            {
                __value = new float[4];
                for (int i = 0; i < 4; i++)
                    __value[i] = ((global::VkDebugUtilsLabelEXT.__Internal*) __Instance)->color[i];
            }
            return __value;
        }

        set
        {
            if (value != null)
            {
                for (int i = 0; i < 4; i++)
                    ((global::VkDebugUtilsLabelEXT.__Internal*)__Instance)->color[i] = value[i];
            }
        }
    }
}

public unsafe partial class VkDebugUtilsMessengerCallbackDataEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 96)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(24)]
        internal global::System.IntPtr pMessageIdName;

        [FieldOffset(32)]
        internal int messageIdNumber;

        [FieldOffset(40)]
        internal global::System.IntPtr pMessage;

        [FieldOffset(48)]
        internal uint queueLabelCount;

        [FieldOffset(56)]
        internal global::System.IntPtr pQueueLabels;

        [FieldOffset(64)]
        internal uint cmdBufLabelCount;

        [FieldOffset(72)]
        internal global::System.IntPtr pCmdBufLabels;

        [FieldOffset(80)]
        internal uint objectCount;

        [FieldOffset(88)]
        internal global::System.IntPtr pObjects;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDebugUtilsMessengerCallbackDataEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDebugUtilsMessengerCallbackDataEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDebugUtilsMessengerCallbackDataEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDebugUtilsMessengerCallbackDataEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkDebugUtilsMessengerCallbackDataEXT __CreateInstance(global::VkDebugUtilsMessengerCallbackDataEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkDebugUtilsMessengerCallbackDataEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDebugUtilsMessengerCallbackDataEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDebugUtilsMessengerCallbackDataEXT.__Internal));
        *(global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDebugUtilsMessengerCallbackDataEXT(global::VkDebugUtilsMessengerCallbackDataEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDebugUtilsMessengerCallbackDataEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDebugUtilsMessengerCallbackDataEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDebugUtilsMessengerCallbackDataEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*)__Instance)->flags = value;
        }
    }

    public string PMessageIdName
    {
        get
        {
            return Marshal.PtrToStringAnsi(((global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*) __Instance)->pMessageIdName);
        }

        set
        {
            ((global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*)__Instance)->pMessageIdName = Marshal.StringToHGlobalAnsi(value);
        }
    }

    public int MessageIdNumber
    {
        get
        {
            return ((global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*) __Instance)->messageIdNumber;
        }

        set
        {
            ((global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*)__Instance)->messageIdNumber = value;
        }
    }

    public string PMessage
    {
        get
        {
            return Marshal.PtrToStringAnsi(((global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*) __Instance)->pMessage);
        }

        set
        {
            ((global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*)__Instance)->pMessage = Marshal.StringToHGlobalAnsi(value);
        }
    }

    public uint QueueLabelCount
    {
        get
        {
            return ((global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*) __Instance)->queueLabelCount;
        }

        set
        {
            ((global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*)__Instance)->queueLabelCount = value;
        }
    }

    public global::VkDebugUtilsLabelEXT PQueueLabels
    {
        get
        {
            global::VkDebugUtilsLabelEXT __result0;
            if (((global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*) __Instance)->pQueueLabels == IntPtr.Zero) __result0 = null;
            else if (global::VkDebugUtilsLabelEXT.NativeToManagedMap.ContainsKey(((global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*) __Instance)->pQueueLabels))
                __result0 = (global::VkDebugUtilsLabelEXT) global::VkDebugUtilsLabelEXT.NativeToManagedMap[((global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*) __Instance)->pQueueLabels];
            else __result0 = global::VkDebugUtilsLabelEXT.__CreateInstance(((global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*) __Instance)->pQueueLabels);
            return __result0;
        }

        set
        {
            ((global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*)__Instance)->pQueueLabels = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint CmdBufLabelCount
    {
        get
        {
            return ((global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*) __Instance)->cmdBufLabelCount;
        }

        set
        {
            ((global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*)__Instance)->cmdBufLabelCount = value;
        }
    }

    public global::VkDebugUtilsLabelEXT PCmdBufLabels
    {
        get
        {
            global::VkDebugUtilsLabelEXT __result0;
            if (((global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*) __Instance)->pCmdBufLabels == IntPtr.Zero) __result0 = null;
            else if (global::VkDebugUtilsLabelEXT.NativeToManagedMap.ContainsKey(((global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*) __Instance)->pCmdBufLabels))
                __result0 = (global::VkDebugUtilsLabelEXT) global::VkDebugUtilsLabelEXT.NativeToManagedMap[((global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*) __Instance)->pCmdBufLabels];
            else __result0 = global::VkDebugUtilsLabelEXT.__CreateInstance(((global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*) __Instance)->pCmdBufLabels);
            return __result0;
        }

        set
        {
            ((global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*)__Instance)->pCmdBufLabels = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint ObjectCount
    {
        get
        {
            return ((global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*) __Instance)->objectCount;
        }

        set
        {
            ((global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*)__Instance)->objectCount = value;
        }
    }

    public global::VkDebugUtilsObjectNameInfoEXT PObjects
    {
        get
        {
            global::VkDebugUtilsObjectNameInfoEXT __result0;
            if (((global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*) __Instance)->pObjects == IntPtr.Zero) __result0 = null;
            else if (global::VkDebugUtilsObjectNameInfoEXT.NativeToManagedMap.ContainsKey(((global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*) __Instance)->pObjects))
                __result0 = (global::VkDebugUtilsObjectNameInfoEXT) global::VkDebugUtilsObjectNameInfoEXT.NativeToManagedMap[((global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*) __Instance)->pObjects];
            else __result0 = global::VkDebugUtilsObjectNameInfoEXT.__CreateInstance(((global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*) __Instance)->pObjects);
            return __result0;
        }

        set
        {
            ((global::VkDebugUtilsMessengerCallbackDataEXT.__Internal*)__Instance)->pObjects = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkDebugUtilsMessengerCreateInfoEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 48)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(20)]
        internal uint messageSeverity;

        [FieldOffset(24)]
        internal uint messageType;

        [FieldOffset(32)]
        internal global::System.IntPtr pfnUserCallback;

        [FieldOffset(40)]
        internal global::System.IntPtr pUserData;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDebugUtilsMessengerCreateInfoEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDebugUtilsMessengerCreateInfoEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDebugUtilsMessengerCreateInfoEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDebugUtilsMessengerCreateInfoEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkDebugUtilsMessengerCreateInfoEXT __CreateInstance(global::VkDebugUtilsMessengerCreateInfoEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkDebugUtilsMessengerCreateInfoEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDebugUtilsMessengerCreateInfoEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDebugUtilsMessengerCreateInfoEXT.__Internal));
        *(global::VkDebugUtilsMessengerCreateInfoEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDebugUtilsMessengerCreateInfoEXT(global::VkDebugUtilsMessengerCreateInfoEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDebugUtilsMessengerCreateInfoEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDebugUtilsMessengerCreateInfoEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDebugUtilsMessengerCreateInfoEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDebugUtilsMessengerCreateInfoEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDebugUtilsMessengerCreateInfoEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDebugUtilsMessengerCreateInfoEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDebugUtilsMessengerCreateInfoEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkDebugUtilsMessengerCreateInfoEXT.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkDebugUtilsMessengerCreateInfoEXT.__Internal*)__Instance)->flags = value;
        }
    }

    public uint MessageSeverity
    {
        get
        {
            return ((global::VkDebugUtilsMessengerCreateInfoEXT.__Internal*) __Instance)->messageSeverity;
        }

        set
        {
            ((global::VkDebugUtilsMessengerCreateInfoEXT.__Internal*)__Instance)->messageSeverity = value;
        }
    }

    public uint MessageType
    {
        get
        {
            return ((global::VkDebugUtilsMessengerCreateInfoEXT.__Internal*) __Instance)->messageType;
        }

        set
        {
            ((global::VkDebugUtilsMessengerCreateInfoEXT.__Internal*)__Instance)->messageType = value;
        }
    }

    public global::PFN_vkDebugUtilsMessengerCallbackEXT PfnUserCallback
    {
        get
        {
            var __ptr0 = ((global::VkDebugUtilsMessengerCreateInfoEXT.__Internal*) __Instance)->pfnUserCallback;
            return __ptr0 == IntPtr.Zero? null : (global::PFN_vkDebugUtilsMessengerCallbackEXT) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PFN_vkDebugUtilsMessengerCallbackEXT));
        }

        set
        {
            ((global::VkDebugUtilsMessengerCreateInfoEXT.__Internal*)__Instance)->pfnUserCallback = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
        }
    }

    public global::System.IntPtr PUserData
    {
        get
        {
            return ((global::VkDebugUtilsMessengerCreateInfoEXT.__Internal*) __Instance)->pUserData;
        }

        set
        {
            ((global::VkDebugUtilsMessengerCreateInfoEXT.__Internal*)__Instance)->pUserData = (global::System.IntPtr) value;
        }
    }
}

public unsafe partial class VkSamplerReductionModeCreateInfoEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkSamplerReductionModeEXT reductionMode;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSamplerReductionModeCreateInfoEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSamplerReductionModeCreateInfoEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSamplerReductionModeCreateInfoEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSamplerReductionModeCreateInfoEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkSamplerReductionModeCreateInfoEXT __CreateInstance(global::VkSamplerReductionModeCreateInfoEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkSamplerReductionModeCreateInfoEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSamplerReductionModeCreateInfoEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSamplerReductionModeCreateInfoEXT.__Internal));
        *(global::VkSamplerReductionModeCreateInfoEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSamplerReductionModeCreateInfoEXT(global::VkSamplerReductionModeCreateInfoEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSamplerReductionModeCreateInfoEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSamplerReductionModeCreateInfoEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkSamplerReductionModeCreateInfoEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkSamplerReductionModeCreateInfoEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkSamplerReductionModeCreateInfoEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkSamplerReductionModeCreateInfoEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkSamplerReductionModeCreateInfoEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkSamplerReductionModeEXT ReductionMode
    {
        get
        {
            return ((global::VkSamplerReductionModeCreateInfoEXT.__Internal*) __Instance)->reductionMode;
        }

        set
        {
            ((global::VkSamplerReductionModeCreateInfoEXT.__Internal*)__Instance)->reductionMode = value;
        }
    }
}

public unsafe partial class VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint filterMinmaxSingleComponentFormats;

        [FieldOffset(20)]
        internal uint filterMinmaxImageComponentMapping;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT __CreateInstance(global::VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.__Internal));
        *(global::VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT(global::VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint FilterMinmaxSingleComponentFormats
    {
        get
        {
            return ((global::VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.__Internal*) __Instance)->filterMinmaxSingleComponentFormats;
        }

        set
        {
            ((global::VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.__Internal*)__Instance)->filterMinmaxSingleComponentFormats = value;
        }
    }

    public uint FilterMinmaxImageComponentMapping
    {
        get
        {
            return ((global::VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.__Internal*) __Instance)->filterMinmaxImageComponentMapping;
        }

        set
        {
            ((global::VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.__Internal*)__Instance)->filterMinmaxImageComponentMapping = value;
        }
    }
}

public unsafe partial class VkSampleLocationEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal float x;

        [FieldOffset(4)]
        internal float y;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSampleLocationEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSampleLocationEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSampleLocationEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSampleLocationEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkSampleLocationEXT __CreateInstance(global::VkSampleLocationEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkSampleLocationEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSampleLocationEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSampleLocationEXT.__Internal));
        *(global::VkSampleLocationEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSampleLocationEXT(global::VkSampleLocationEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSampleLocationEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSampleLocationEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkSampleLocationEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public float X
    {
        get
        {
            return ((global::VkSampleLocationEXT.__Internal*) __Instance)->x;
        }

        set
        {
            ((global::VkSampleLocationEXT.__Internal*)__Instance)->x = value;
        }
    }

    public float Y
    {
        get
        {
            return ((global::VkSampleLocationEXT.__Internal*) __Instance)->y;
        }

        set
        {
            ((global::VkSampleLocationEXT.__Internal*)__Instance)->y = value;
        }
    }
}

public unsafe partial class VkSampleLocationsInfoEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkSampleCountFlagBits sampleLocationsPerPixel;

        [FieldOffset(20)]
        internal global::VkExtent2D.__Internal sampleLocationGridSize;

        [FieldOffset(28)]
        internal uint sampleLocationsCount;

        [FieldOffset(32)]
        internal global::System.IntPtr pSampleLocations;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSampleLocationsInfoEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSampleLocationsInfoEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSampleLocationsInfoEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSampleLocationsInfoEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkSampleLocationsInfoEXT __CreateInstance(global::VkSampleLocationsInfoEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkSampleLocationsInfoEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSampleLocationsInfoEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSampleLocationsInfoEXT.__Internal));
        *(global::VkSampleLocationsInfoEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSampleLocationsInfoEXT(global::VkSampleLocationsInfoEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSampleLocationsInfoEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSampleLocationsInfoEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkSampleLocationsInfoEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkSampleLocationsInfoEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkSampleLocationsInfoEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkSampleLocationsInfoEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkSampleLocationsInfoEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkSampleCountFlagBits SampleLocationsPerPixel
    {
        get
        {
            return ((global::VkSampleLocationsInfoEXT.__Internal*) __Instance)->sampleLocationsPerPixel;
        }

        set
        {
            ((global::VkSampleLocationsInfoEXT.__Internal*)__Instance)->sampleLocationsPerPixel = value;
        }
    }

    public global::VkExtent2D SampleLocationGridSize
    {
        get
        {
            return global::VkExtent2D.__CreateInstance(new global::System.IntPtr(&((global::VkSampleLocationsInfoEXT.__Internal*) __Instance)->sampleLocationGridSize));
        }

        set
        {
            ((global::VkSampleLocationsInfoEXT.__Internal*)__Instance)->sampleLocationGridSize = ReferenceEquals(value, null) ? new global::VkExtent2D.__Internal() : *(global::VkExtent2D.__Internal*) value.__Instance;
        }
    }

    public uint SampleLocationsCount
    {
        get
        {
            return ((global::VkSampleLocationsInfoEXT.__Internal*) __Instance)->sampleLocationsCount;
        }

        set
        {
            ((global::VkSampleLocationsInfoEXT.__Internal*)__Instance)->sampleLocationsCount = value;
        }
    }

    public global::VkSampleLocationEXT PSampleLocations
    {
        get
        {
            global::VkSampleLocationEXT __result0;
            if (((global::VkSampleLocationsInfoEXT.__Internal*) __Instance)->pSampleLocations == IntPtr.Zero) __result0 = null;
            else if (global::VkSampleLocationEXT.NativeToManagedMap.ContainsKey(((global::VkSampleLocationsInfoEXT.__Internal*) __Instance)->pSampleLocations))
                __result0 = (global::VkSampleLocationEXT) global::VkSampleLocationEXT.NativeToManagedMap[((global::VkSampleLocationsInfoEXT.__Internal*) __Instance)->pSampleLocations];
            else __result0 = global::VkSampleLocationEXT.__CreateInstance(((global::VkSampleLocationsInfoEXT.__Internal*) __Instance)->pSampleLocations);
            return __result0;
        }

        set
        {
            ((global::VkSampleLocationsInfoEXT.__Internal*)__Instance)->pSampleLocations = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkAttachmentSampleLocationsEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 48)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint attachmentIndex;

        [FieldOffset(8)]
        internal global::VkSampleLocationsInfoEXT.__Internal sampleLocationsInfo;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkAttachmentSampleLocationsEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkAttachmentSampleLocationsEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkAttachmentSampleLocationsEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkAttachmentSampleLocationsEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkAttachmentSampleLocationsEXT __CreateInstance(global::VkAttachmentSampleLocationsEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkAttachmentSampleLocationsEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkAttachmentSampleLocationsEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkAttachmentSampleLocationsEXT.__Internal));
        *(global::VkAttachmentSampleLocationsEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkAttachmentSampleLocationsEXT(global::VkAttachmentSampleLocationsEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkAttachmentSampleLocationsEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkAttachmentSampleLocationsEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkAttachmentSampleLocationsEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint AttachmentIndex
    {
        get
        {
            return ((global::VkAttachmentSampleLocationsEXT.__Internal*) __Instance)->attachmentIndex;
        }

        set
        {
            ((global::VkAttachmentSampleLocationsEXT.__Internal*)__Instance)->attachmentIndex = value;
        }
    }

    public global::VkSampleLocationsInfoEXT SampleLocationsInfo
    {
        get
        {
            return global::VkSampleLocationsInfoEXT.__CreateInstance(new global::System.IntPtr(&((global::VkAttachmentSampleLocationsEXT.__Internal*) __Instance)->sampleLocationsInfo));
        }

        set
        {
            ((global::VkAttachmentSampleLocationsEXT.__Internal*)__Instance)->sampleLocationsInfo = ReferenceEquals(value, null) ? new global::VkSampleLocationsInfoEXT.__Internal() : *(global::VkSampleLocationsInfoEXT.__Internal*) value.__Instance;
        }
    }
}

public unsafe partial class VkSubpassSampleLocationsEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 48)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint subpassIndex;

        [FieldOffset(8)]
        internal global::VkSampleLocationsInfoEXT.__Internal sampleLocationsInfo;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSubpassSampleLocationsEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkSubpassSampleLocationsEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkSubpassSampleLocationsEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkSubpassSampleLocationsEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkSubpassSampleLocationsEXT __CreateInstance(global::VkSubpassSampleLocationsEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkSubpassSampleLocationsEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkSubpassSampleLocationsEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkSubpassSampleLocationsEXT.__Internal));
        *(global::VkSubpassSampleLocationsEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkSubpassSampleLocationsEXT(global::VkSubpassSampleLocationsEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkSubpassSampleLocationsEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkSubpassSampleLocationsEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkSubpassSampleLocationsEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint SubpassIndex
    {
        get
        {
            return ((global::VkSubpassSampleLocationsEXT.__Internal*) __Instance)->subpassIndex;
        }

        set
        {
            ((global::VkSubpassSampleLocationsEXT.__Internal*)__Instance)->subpassIndex = value;
        }
    }

    public global::VkSampleLocationsInfoEXT SampleLocationsInfo
    {
        get
        {
            return global::VkSampleLocationsInfoEXT.__CreateInstance(new global::System.IntPtr(&((global::VkSubpassSampleLocationsEXT.__Internal*) __Instance)->sampleLocationsInfo));
        }

        set
        {
            ((global::VkSubpassSampleLocationsEXT.__Internal*)__Instance)->sampleLocationsInfo = ReferenceEquals(value, null) ? new global::VkSampleLocationsInfoEXT.__Internal() : *(global::VkSampleLocationsInfoEXT.__Internal*) value.__Instance;
        }
    }
}

public unsafe partial class VkRenderPassSampleLocationsBeginInfoEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 48)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint attachmentInitialSampleLocationsCount;

        [FieldOffset(24)]
        internal global::System.IntPtr pAttachmentInitialSampleLocations;

        [FieldOffset(32)]
        internal uint postSubpassSampleLocationsCount;

        [FieldOffset(40)]
        internal global::System.IntPtr pPostSubpassSampleLocations;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkRenderPassSampleLocationsBeginInfoEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkRenderPassSampleLocationsBeginInfoEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkRenderPassSampleLocationsBeginInfoEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkRenderPassSampleLocationsBeginInfoEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkRenderPassSampleLocationsBeginInfoEXT __CreateInstance(global::VkRenderPassSampleLocationsBeginInfoEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkRenderPassSampleLocationsBeginInfoEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkRenderPassSampleLocationsBeginInfoEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkRenderPassSampleLocationsBeginInfoEXT.__Internal));
        *(global::VkRenderPassSampleLocationsBeginInfoEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkRenderPassSampleLocationsBeginInfoEXT(global::VkRenderPassSampleLocationsBeginInfoEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkRenderPassSampleLocationsBeginInfoEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkRenderPassSampleLocationsBeginInfoEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkRenderPassSampleLocationsBeginInfoEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkRenderPassSampleLocationsBeginInfoEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkRenderPassSampleLocationsBeginInfoEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkRenderPassSampleLocationsBeginInfoEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkRenderPassSampleLocationsBeginInfoEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint AttachmentInitialSampleLocationsCount
    {
        get
        {
            return ((global::VkRenderPassSampleLocationsBeginInfoEXT.__Internal*) __Instance)->attachmentInitialSampleLocationsCount;
        }

        set
        {
            ((global::VkRenderPassSampleLocationsBeginInfoEXT.__Internal*)__Instance)->attachmentInitialSampleLocationsCount = value;
        }
    }

    public global::VkAttachmentSampleLocationsEXT PAttachmentInitialSampleLocations
    {
        get
        {
            global::VkAttachmentSampleLocationsEXT __result0;
            if (((global::VkRenderPassSampleLocationsBeginInfoEXT.__Internal*) __Instance)->pAttachmentInitialSampleLocations == IntPtr.Zero) __result0 = null;
            else if (global::VkAttachmentSampleLocationsEXT.NativeToManagedMap.ContainsKey(((global::VkRenderPassSampleLocationsBeginInfoEXT.__Internal*) __Instance)->pAttachmentInitialSampleLocations))
                __result0 = (global::VkAttachmentSampleLocationsEXT) global::VkAttachmentSampleLocationsEXT.NativeToManagedMap[((global::VkRenderPassSampleLocationsBeginInfoEXT.__Internal*) __Instance)->pAttachmentInitialSampleLocations];
            else __result0 = global::VkAttachmentSampleLocationsEXT.__CreateInstance(((global::VkRenderPassSampleLocationsBeginInfoEXT.__Internal*) __Instance)->pAttachmentInitialSampleLocations);
            return __result0;
        }

        set
        {
            ((global::VkRenderPassSampleLocationsBeginInfoEXT.__Internal*)__Instance)->pAttachmentInitialSampleLocations = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }

    public uint PostSubpassSampleLocationsCount
    {
        get
        {
            return ((global::VkRenderPassSampleLocationsBeginInfoEXT.__Internal*) __Instance)->postSubpassSampleLocationsCount;
        }

        set
        {
            ((global::VkRenderPassSampleLocationsBeginInfoEXT.__Internal*)__Instance)->postSubpassSampleLocationsCount = value;
        }
    }

    public global::VkSubpassSampleLocationsEXT PPostSubpassSampleLocations
    {
        get
        {
            global::VkSubpassSampleLocationsEXT __result0;
            if (((global::VkRenderPassSampleLocationsBeginInfoEXT.__Internal*) __Instance)->pPostSubpassSampleLocations == IntPtr.Zero) __result0 = null;
            else if (global::VkSubpassSampleLocationsEXT.NativeToManagedMap.ContainsKey(((global::VkRenderPassSampleLocationsBeginInfoEXT.__Internal*) __Instance)->pPostSubpassSampleLocations))
                __result0 = (global::VkSubpassSampleLocationsEXT) global::VkSubpassSampleLocationsEXT.NativeToManagedMap[((global::VkRenderPassSampleLocationsBeginInfoEXT.__Internal*) __Instance)->pPostSubpassSampleLocations];
            else __result0 = global::VkSubpassSampleLocationsEXT.__CreateInstance(((global::VkRenderPassSampleLocationsBeginInfoEXT.__Internal*) __Instance)->pPostSubpassSampleLocations);
            return __result0;
        }

        set
        {
            ((global::VkRenderPassSampleLocationsBeginInfoEXT.__Internal*)__Instance)->pPostSubpassSampleLocations = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkPipelineSampleLocationsStateCreateInfoEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 64)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint sampleLocationsEnable;

        [FieldOffset(24)]
        internal global::VkSampleLocationsInfoEXT.__Internal sampleLocationsInfo;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineSampleLocationsStateCreateInfoEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineSampleLocationsStateCreateInfoEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPipelineSampleLocationsStateCreateInfoEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPipelineSampleLocationsStateCreateInfoEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkPipelineSampleLocationsStateCreateInfoEXT __CreateInstance(global::VkPipelineSampleLocationsStateCreateInfoEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkPipelineSampleLocationsStateCreateInfoEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPipelineSampleLocationsStateCreateInfoEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPipelineSampleLocationsStateCreateInfoEXT.__Internal));
        *(global::VkPipelineSampleLocationsStateCreateInfoEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPipelineSampleLocationsStateCreateInfoEXT(global::VkPipelineSampleLocationsStateCreateInfoEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPipelineSampleLocationsStateCreateInfoEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPipelineSampleLocationsStateCreateInfoEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPipelineSampleLocationsStateCreateInfoEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPipelineSampleLocationsStateCreateInfoEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPipelineSampleLocationsStateCreateInfoEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPipelineSampleLocationsStateCreateInfoEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPipelineSampleLocationsStateCreateInfoEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint SampleLocationsEnable
    {
        get
        {
            return ((global::VkPipelineSampleLocationsStateCreateInfoEXT.__Internal*) __Instance)->sampleLocationsEnable;
        }

        set
        {
            ((global::VkPipelineSampleLocationsStateCreateInfoEXT.__Internal*)__Instance)->sampleLocationsEnable = value;
        }
    }

    public global::VkSampleLocationsInfoEXT SampleLocationsInfo
    {
        get
        {
            return global::VkSampleLocationsInfoEXT.__CreateInstance(new global::System.IntPtr(&((global::VkPipelineSampleLocationsStateCreateInfoEXT.__Internal*) __Instance)->sampleLocationsInfo));
        }

        set
        {
            ((global::VkPipelineSampleLocationsStateCreateInfoEXT.__Internal*)__Instance)->sampleLocationsInfo = ReferenceEquals(value, null) ? new global::VkSampleLocationsInfoEXT.__Internal() : *(global::VkSampleLocationsInfoEXT.__Internal*) value.__Instance;
        }
    }
}

public unsafe partial class VkPhysicalDeviceSampleLocationsPropertiesEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 48)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint sampleLocationSampleCounts;

        [FieldOffset(20)]
        internal global::VkExtent2D.__Internal maxSampleLocationGridSize;

        [FieldOffset(28)]
        internal fixed float sampleLocationCoordinateRange[2];

        [FieldOffset(36)]
        internal uint sampleLocationSubPixelBits;

        [FieldOffset(40)]
        internal uint variableSampleLocations;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceSampleLocationsPropertiesEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceSampleLocationsPropertiesEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceSampleLocationsPropertiesEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceSampleLocationsPropertiesEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceSampleLocationsPropertiesEXT __CreateInstance(global::VkPhysicalDeviceSampleLocationsPropertiesEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceSampleLocationsPropertiesEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceSampleLocationsPropertiesEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceSampleLocationsPropertiesEXT.__Internal));
        *(global::VkPhysicalDeviceSampleLocationsPropertiesEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceSampleLocationsPropertiesEXT(global::VkPhysicalDeviceSampleLocationsPropertiesEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceSampleLocationsPropertiesEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceSampleLocationsPropertiesEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceSampleLocationsPropertiesEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDeviceSampleLocationsPropertiesEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDeviceSampleLocationsPropertiesEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDeviceSampleLocationsPropertiesEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDeviceSampleLocationsPropertiesEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint SampleLocationSampleCounts
    {
        get
        {
            return ((global::VkPhysicalDeviceSampleLocationsPropertiesEXT.__Internal*) __Instance)->sampleLocationSampleCounts;
        }

        set
        {
            ((global::VkPhysicalDeviceSampleLocationsPropertiesEXT.__Internal*)__Instance)->sampleLocationSampleCounts = value;
        }
    }

    public global::VkExtent2D MaxSampleLocationGridSize
    {
        get
        {
            return global::VkExtent2D.__CreateInstance(new global::System.IntPtr(&((global::VkPhysicalDeviceSampleLocationsPropertiesEXT.__Internal*) __Instance)->maxSampleLocationGridSize));
        }

        set
        {
            ((global::VkPhysicalDeviceSampleLocationsPropertiesEXT.__Internal*)__Instance)->maxSampleLocationGridSize = ReferenceEquals(value, null) ? new global::VkExtent2D.__Internal() : *(global::VkExtent2D.__Internal*) value.__Instance;
        }
    }

    public float[] SampleLocationCoordinateRange
    {
        get
        {
            float[] __value = null;
            if (((global::VkPhysicalDeviceSampleLocationsPropertiesEXT.__Internal*) __Instance)->sampleLocationCoordinateRange != null)
            {
                __value = new float[2];
                for (int i = 0; i < 2; i++)
                    __value[i] = ((global::VkPhysicalDeviceSampleLocationsPropertiesEXT.__Internal*) __Instance)->sampleLocationCoordinateRange[i];
            }
            return __value;
        }

        set
        {
            if (value != null)
            {
                for (int i = 0; i < 2; i++)
                    ((global::VkPhysicalDeviceSampleLocationsPropertiesEXT.__Internal*)__Instance)->sampleLocationCoordinateRange[i] = value[i];
            }
        }
    }

    public uint SampleLocationSubPixelBits
    {
        get
        {
            return ((global::VkPhysicalDeviceSampleLocationsPropertiesEXT.__Internal*) __Instance)->sampleLocationSubPixelBits;
        }

        set
        {
            ((global::VkPhysicalDeviceSampleLocationsPropertiesEXT.__Internal*)__Instance)->sampleLocationSubPixelBits = value;
        }
    }

    public uint VariableSampleLocations
    {
        get
        {
            return ((global::VkPhysicalDeviceSampleLocationsPropertiesEXT.__Internal*) __Instance)->variableSampleLocations;
        }

        set
        {
            ((global::VkPhysicalDeviceSampleLocationsPropertiesEXT.__Internal*)__Instance)->variableSampleLocations = value;
        }
    }
}

public unsafe partial class VkMultisamplePropertiesEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkExtent2D.__Internal maxSampleLocationGridSize;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkMultisamplePropertiesEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkMultisamplePropertiesEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkMultisamplePropertiesEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkMultisamplePropertiesEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkMultisamplePropertiesEXT __CreateInstance(global::VkMultisamplePropertiesEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkMultisamplePropertiesEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkMultisamplePropertiesEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkMultisamplePropertiesEXT.__Internal));
        *(global::VkMultisamplePropertiesEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkMultisamplePropertiesEXT(global::VkMultisamplePropertiesEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkMultisamplePropertiesEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkMultisamplePropertiesEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkMultisamplePropertiesEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkMultisamplePropertiesEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkMultisamplePropertiesEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkMultisamplePropertiesEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkMultisamplePropertiesEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkExtent2D MaxSampleLocationGridSize
    {
        get
        {
            return global::VkExtent2D.__CreateInstance(new global::System.IntPtr(&((global::VkMultisamplePropertiesEXT.__Internal*) __Instance)->maxSampleLocationGridSize));
        }

        set
        {
            ((global::VkMultisamplePropertiesEXT.__Internal*)__Instance)->maxSampleLocationGridSize = ReferenceEquals(value, null) ? new global::VkExtent2D.__Internal() : *(global::VkExtent2D.__Internal*) value.__Instance;
        }
    }
}

public unsafe partial class VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint advancedBlendCoherentOperations;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT __CreateInstance(global::VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.__Internal));
        *(global::VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(global::VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint AdvancedBlendCoherentOperations
    {
        get
        {
            return ((global::VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.__Internal*) __Instance)->advancedBlendCoherentOperations;
        }

        set
        {
            ((global::VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.__Internal*)__Instance)->advancedBlendCoherentOperations = value;
        }
    }
}

public unsafe partial class VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint advancedBlendMaxColorAttachments;

        [FieldOffset(20)]
        internal uint advancedBlendIndependentBlend;

        [FieldOffset(24)]
        internal uint advancedBlendNonPremultipliedSrcColor;

        [FieldOffset(28)]
        internal uint advancedBlendNonPremultipliedDstColor;

        [FieldOffset(32)]
        internal uint advancedBlendCorrelatedOverlap;

        [FieldOffset(36)]
        internal uint advancedBlendAllOperations;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT __CreateInstance(global::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.__Internal));
        *(global::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(global::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint AdvancedBlendMaxColorAttachments
    {
        get
        {
            return ((global::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.__Internal*) __Instance)->advancedBlendMaxColorAttachments;
        }

        set
        {
            ((global::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.__Internal*)__Instance)->advancedBlendMaxColorAttachments = value;
        }
    }

    public uint AdvancedBlendIndependentBlend
    {
        get
        {
            return ((global::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.__Internal*) __Instance)->advancedBlendIndependentBlend;
        }

        set
        {
            ((global::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.__Internal*)__Instance)->advancedBlendIndependentBlend = value;
        }
    }

    public uint AdvancedBlendNonPremultipliedSrcColor
    {
        get
        {
            return ((global::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.__Internal*) __Instance)->advancedBlendNonPremultipliedSrcColor;
        }

        set
        {
            ((global::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.__Internal*)__Instance)->advancedBlendNonPremultipliedSrcColor = value;
        }
    }

    public uint AdvancedBlendNonPremultipliedDstColor
    {
        get
        {
            return ((global::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.__Internal*) __Instance)->advancedBlendNonPremultipliedDstColor;
        }

        set
        {
            ((global::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.__Internal*)__Instance)->advancedBlendNonPremultipliedDstColor = value;
        }
    }

    public uint AdvancedBlendCorrelatedOverlap
    {
        get
        {
            return ((global::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.__Internal*) __Instance)->advancedBlendCorrelatedOverlap;
        }

        set
        {
            ((global::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.__Internal*)__Instance)->advancedBlendCorrelatedOverlap = value;
        }
    }

    public uint AdvancedBlendAllOperations
    {
        get
        {
            return ((global::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.__Internal*) __Instance)->advancedBlendAllOperations;
        }

        set
        {
            ((global::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.__Internal*)__Instance)->advancedBlendAllOperations = value;
        }
    }
}

public unsafe partial class VkPipelineColorBlendAdvancedStateCreateInfoEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint srcPremultiplied;

        [FieldOffset(20)]
        internal uint dstPremultiplied;

        [FieldOffset(24)]
        internal global::VkBlendOverlapEXT blendOverlap;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineColorBlendAdvancedStateCreateInfoEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineColorBlendAdvancedStateCreateInfoEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPipelineColorBlendAdvancedStateCreateInfoEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPipelineColorBlendAdvancedStateCreateInfoEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkPipelineColorBlendAdvancedStateCreateInfoEXT __CreateInstance(global::VkPipelineColorBlendAdvancedStateCreateInfoEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkPipelineColorBlendAdvancedStateCreateInfoEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPipelineColorBlendAdvancedStateCreateInfoEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPipelineColorBlendAdvancedStateCreateInfoEXT.__Internal));
        *(global::VkPipelineColorBlendAdvancedStateCreateInfoEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPipelineColorBlendAdvancedStateCreateInfoEXT(global::VkPipelineColorBlendAdvancedStateCreateInfoEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPipelineColorBlendAdvancedStateCreateInfoEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPipelineColorBlendAdvancedStateCreateInfoEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPipelineColorBlendAdvancedStateCreateInfoEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPipelineColorBlendAdvancedStateCreateInfoEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPipelineColorBlendAdvancedStateCreateInfoEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPipelineColorBlendAdvancedStateCreateInfoEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPipelineColorBlendAdvancedStateCreateInfoEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint SrcPremultiplied
    {
        get
        {
            return ((global::VkPipelineColorBlendAdvancedStateCreateInfoEXT.__Internal*) __Instance)->srcPremultiplied;
        }

        set
        {
            ((global::VkPipelineColorBlendAdvancedStateCreateInfoEXT.__Internal*)__Instance)->srcPremultiplied = value;
        }
    }

    public uint DstPremultiplied
    {
        get
        {
            return ((global::VkPipelineColorBlendAdvancedStateCreateInfoEXT.__Internal*) __Instance)->dstPremultiplied;
        }

        set
        {
            ((global::VkPipelineColorBlendAdvancedStateCreateInfoEXT.__Internal*)__Instance)->dstPremultiplied = value;
        }
    }

    public global::VkBlendOverlapEXT BlendOverlap
    {
        get
        {
            return ((global::VkPipelineColorBlendAdvancedStateCreateInfoEXT.__Internal*) __Instance)->blendOverlap;
        }

        set
        {
            ((global::VkPipelineColorBlendAdvancedStateCreateInfoEXT.__Internal*)__Instance)->blendOverlap = value;
        }
    }
}

public unsafe partial class VkPipelineCoverageToColorStateCreateInfoNV : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(20)]
        internal uint coverageToColorEnable;

        [FieldOffset(24)]
        internal uint coverageToColorLocation;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineCoverageToColorStateCreateInfoNV> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineCoverageToColorStateCreateInfoNV>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPipelineCoverageToColorStateCreateInfoNV __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPipelineCoverageToColorStateCreateInfoNV(native.ToPointer(), skipVTables);
    }

    internal static global::VkPipelineCoverageToColorStateCreateInfoNV __CreateInstance(global::VkPipelineCoverageToColorStateCreateInfoNV.__Internal native, bool skipVTables = false)
    {
        return new global::VkPipelineCoverageToColorStateCreateInfoNV(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPipelineCoverageToColorStateCreateInfoNV.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPipelineCoverageToColorStateCreateInfoNV.__Internal));
        *(global::VkPipelineCoverageToColorStateCreateInfoNV.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPipelineCoverageToColorStateCreateInfoNV(global::VkPipelineCoverageToColorStateCreateInfoNV.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPipelineCoverageToColorStateCreateInfoNV(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPipelineCoverageToColorStateCreateInfoNV()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPipelineCoverageToColorStateCreateInfoNV __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPipelineCoverageToColorStateCreateInfoNV.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPipelineCoverageToColorStateCreateInfoNV.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPipelineCoverageToColorStateCreateInfoNV.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPipelineCoverageToColorStateCreateInfoNV.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkPipelineCoverageToColorStateCreateInfoNV.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkPipelineCoverageToColorStateCreateInfoNV.__Internal*)__Instance)->flags = value;
        }
    }

    public uint CoverageToColorEnable
    {
        get
        {
            return ((global::VkPipelineCoverageToColorStateCreateInfoNV.__Internal*) __Instance)->coverageToColorEnable;
        }

        set
        {
            ((global::VkPipelineCoverageToColorStateCreateInfoNV.__Internal*)__Instance)->coverageToColorEnable = value;
        }
    }

    public uint CoverageToColorLocation
    {
        get
        {
            return ((global::VkPipelineCoverageToColorStateCreateInfoNV.__Internal*) __Instance)->coverageToColorLocation;
        }

        set
        {
            ((global::VkPipelineCoverageToColorStateCreateInfoNV.__Internal*)__Instance)->coverageToColorLocation = value;
        }
    }
}

public unsafe partial class VkPipelineCoverageModulationStateCreateInfoNV : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(20)]
        internal global::VkCoverageModulationModeNV coverageModulationMode;

        [FieldOffset(24)]
        internal uint coverageModulationTableEnable;

        [FieldOffset(28)]
        internal uint coverageModulationTableCount;

        [FieldOffset(32)]
        internal global::System.IntPtr pCoverageModulationTable;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineCoverageModulationStateCreateInfoNV> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineCoverageModulationStateCreateInfoNV>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPipelineCoverageModulationStateCreateInfoNV __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPipelineCoverageModulationStateCreateInfoNV(native.ToPointer(), skipVTables);
    }

    internal static global::VkPipelineCoverageModulationStateCreateInfoNV __CreateInstance(global::VkPipelineCoverageModulationStateCreateInfoNV.__Internal native, bool skipVTables = false)
    {
        return new global::VkPipelineCoverageModulationStateCreateInfoNV(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPipelineCoverageModulationStateCreateInfoNV.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPipelineCoverageModulationStateCreateInfoNV.__Internal));
        *(global::VkPipelineCoverageModulationStateCreateInfoNV.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPipelineCoverageModulationStateCreateInfoNV(global::VkPipelineCoverageModulationStateCreateInfoNV.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPipelineCoverageModulationStateCreateInfoNV(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPipelineCoverageModulationStateCreateInfoNV()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPipelineCoverageModulationStateCreateInfoNV __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPipelineCoverageModulationStateCreateInfoNV.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPipelineCoverageModulationStateCreateInfoNV.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPipelineCoverageModulationStateCreateInfoNV.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPipelineCoverageModulationStateCreateInfoNV.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkPipelineCoverageModulationStateCreateInfoNV.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkPipelineCoverageModulationStateCreateInfoNV.__Internal*)__Instance)->flags = value;
        }
    }

    public global::VkCoverageModulationModeNV CoverageModulationMode
    {
        get
        {
            return ((global::VkPipelineCoverageModulationStateCreateInfoNV.__Internal*) __Instance)->coverageModulationMode;
        }

        set
        {
            ((global::VkPipelineCoverageModulationStateCreateInfoNV.__Internal*)__Instance)->coverageModulationMode = value;
        }
    }

    public uint CoverageModulationTableEnable
    {
        get
        {
            return ((global::VkPipelineCoverageModulationStateCreateInfoNV.__Internal*) __Instance)->coverageModulationTableEnable;
        }

        set
        {
            ((global::VkPipelineCoverageModulationStateCreateInfoNV.__Internal*)__Instance)->coverageModulationTableEnable = value;
        }
    }

    public uint CoverageModulationTableCount
    {
        get
        {
            return ((global::VkPipelineCoverageModulationStateCreateInfoNV.__Internal*) __Instance)->coverageModulationTableCount;
        }

        set
        {
            ((global::VkPipelineCoverageModulationStateCreateInfoNV.__Internal*)__Instance)->coverageModulationTableCount = value;
        }
    }

    public float* PCoverageModulationTable
    {
        get
        {
            return (float*) ((global::VkPipelineCoverageModulationStateCreateInfoNV.__Internal*) __Instance)->pCoverageModulationTable;
        }

        set
        {
            ((global::VkPipelineCoverageModulationStateCreateInfoNV.__Internal*)__Instance)->pCoverageModulationTable = (global::System.IntPtr) value;
        }
    }
}

public unsafe partial class VkValidationCacheEXT_T
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkValidationCacheEXT_T> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkValidationCacheEXT_T>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkValidationCacheEXT_T __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkValidationCacheEXT_T(native.ToPointer(), skipVTables);
    }

    internal static global::VkValidationCacheEXT_T __CreateInstance(global::VkValidationCacheEXT_T.__Internal native, bool skipVTables = false)
    {
        return new global::VkValidationCacheEXT_T(native, skipVTables);
    }

    private static void* __CopyValue(global::VkValidationCacheEXT_T.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkValidationCacheEXT_T.__Internal));
        *(global::VkValidationCacheEXT_T.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkValidationCacheEXT_T(global::VkValidationCacheEXT_T.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkValidationCacheEXT_T(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkValidationCacheEXT_T()
    {
        Dispose(false);
    }
}

public unsafe partial class VkValidationCacheCreateInfoEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint flags;

        [FieldOffset(24)]
        internal ulong initialDataSize;

        [FieldOffset(32)]
        internal global::System.IntPtr pInitialData;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkValidationCacheCreateInfoEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkValidationCacheCreateInfoEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkValidationCacheCreateInfoEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkValidationCacheCreateInfoEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkValidationCacheCreateInfoEXT __CreateInstance(global::VkValidationCacheCreateInfoEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkValidationCacheCreateInfoEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkValidationCacheCreateInfoEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkValidationCacheCreateInfoEXT.__Internal));
        *(global::VkValidationCacheCreateInfoEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkValidationCacheCreateInfoEXT(global::VkValidationCacheCreateInfoEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkValidationCacheCreateInfoEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkValidationCacheCreateInfoEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkValidationCacheCreateInfoEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkValidationCacheCreateInfoEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkValidationCacheCreateInfoEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkValidationCacheCreateInfoEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkValidationCacheCreateInfoEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint Flags
    {
        get
        {
            return ((global::VkValidationCacheCreateInfoEXT.__Internal*) __Instance)->flags;
        }

        set
        {
            ((global::VkValidationCacheCreateInfoEXT.__Internal*)__Instance)->flags = value;
        }
    }

    public ulong InitialDataSize
    {
        get
        {
            return ((global::VkValidationCacheCreateInfoEXT.__Internal*) __Instance)->initialDataSize;
        }

        set
        {
            ((global::VkValidationCacheCreateInfoEXT.__Internal*)__Instance)->initialDataSize = value;
        }
    }

    public global::System.IntPtr PInitialData
    {
        get
        {
            return ((global::VkValidationCacheCreateInfoEXT.__Internal*) __Instance)->pInitialData;
        }

        set
        {
            ((global::VkValidationCacheCreateInfoEXT.__Internal*)__Instance)->pInitialData = (global::System.IntPtr) value;
        }
    }
}

public unsafe partial class VkShaderModuleValidationCacheCreateInfoEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::System.IntPtr validationCache;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkShaderModuleValidationCacheCreateInfoEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkShaderModuleValidationCacheCreateInfoEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkShaderModuleValidationCacheCreateInfoEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkShaderModuleValidationCacheCreateInfoEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkShaderModuleValidationCacheCreateInfoEXT __CreateInstance(global::VkShaderModuleValidationCacheCreateInfoEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkShaderModuleValidationCacheCreateInfoEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkShaderModuleValidationCacheCreateInfoEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkShaderModuleValidationCacheCreateInfoEXT.__Internal));
        *(global::VkShaderModuleValidationCacheCreateInfoEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkShaderModuleValidationCacheCreateInfoEXT(global::VkShaderModuleValidationCacheCreateInfoEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkShaderModuleValidationCacheCreateInfoEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkShaderModuleValidationCacheCreateInfoEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkShaderModuleValidationCacheCreateInfoEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkShaderModuleValidationCacheCreateInfoEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkShaderModuleValidationCacheCreateInfoEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkShaderModuleValidationCacheCreateInfoEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkShaderModuleValidationCacheCreateInfoEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkValidationCacheEXT_T ValidationCache
    {
        get
        {
            global::VkValidationCacheEXT_T __result0;
            if (((global::VkShaderModuleValidationCacheCreateInfoEXT.__Internal*) __Instance)->validationCache == IntPtr.Zero) __result0 = null;
            else if (global::VkValidationCacheEXT_T.NativeToManagedMap.ContainsKey(((global::VkShaderModuleValidationCacheCreateInfoEXT.__Internal*) __Instance)->validationCache))
                __result0 = (global::VkValidationCacheEXT_T) global::VkValidationCacheEXT_T.NativeToManagedMap[((global::VkShaderModuleValidationCacheCreateInfoEXT.__Internal*) __Instance)->validationCache];
            else __result0 = global::VkValidationCacheEXT_T.__CreateInstance(((global::VkShaderModuleValidationCacheCreateInfoEXT.__Internal*) __Instance)->validationCache);
            return __result0;
        }

        set
        {
            ((global::VkShaderModuleValidationCacheCreateInfoEXT.__Internal*)__Instance)->validationCache = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class VkDescriptorSetLayoutBindingFlagsCreateInfoEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint bindingCount;

        [FieldOffset(24)]
        internal global::System.IntPtr pBindingFlags;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorSetLayoutBindingFlagsCreateInfoEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorSetLayoutBindingFlagsCreateInfoEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDescriptorSetLayoutBindingFlagsCreateInfoEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDescriptorSetLayoutBindingFlagsCreateInfoEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkDescriptorSetLayoutBindingFlagsCreateInfoEXT __CreateInstance(global::VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkDescriptorSetLayoutBindingFlagsCreateInfoEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.__Internal));
        *(global::VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDescriptorSetLayoutBindingFlagsCreateInfoEXT(global::VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDescriptorSetLayoutBindingFlagsCreateInfoEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDescriptorSetLayoutBindingFlagsCreateInfoEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDescriptorSetLayoutBindingFlagsCreateInfoEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint BindingCount
    {
        get
        {
            return ((global::VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.__Internal*) __Instance)->bindingCount;
        }

        set
        {
            ((global::VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.__Internal*)__Instance)->bindingCount = value;
        }
    }

    public uint* PBindingFlags
    {
        get
        {
            return (uint*) ((global::VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.__Internal*) __Instance)->pBindingFlags;
        }

        set
        {
            ((global::VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.__Internal*)__Instance)->pBindingFlags = (global::System.IntPtr) value;
        }
    }
}

public unsafe partial class VkPhysicalDeviceDescriptorIndexingFeaturesEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 96)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint shaderInputAttachmentArrayDynamicIndexing;

        [FieldOffset(20)]
        internal uint shaderUniformTexelBufferArrayDynamicIndexing;

        [FieldOffset(24)]
        internal uint shaderStorageTexelBufferArrayDynamicIndexing;

        [FieldOffset(28)]
        internal uint shaderUniformBufferArrayNonUniformIndexing;

        [FieldOffset(32)]
        internal uint shaderSampledImageArrayNonUniformIndexing;

        [FieldOffset(36)]
        internal uint shaderStorageBufferArrayNonUniformIndexing;

        [FieldOffset(40)]
        internal uint shaderStorageImageArrayNonUniformIndexing;

        [FieldOffset(44)]
        internal uint shaderInputAttachmentArrayNonUniformIndexing;

        [FieldOffset(48)]
        internal uint shaderUniformTexelBufferArrayNonUniformIndexing;

        [FieldOffset(52)]
        internal uint shaderStorageTexelBufferArrayNonUniformIndexing;

        [FieldOffset(56)]
        internal uint descriptorBindingUniformBufferUpdateAfterBind;

        [FieldOffset(60)]
        internal uint descriptorBindingSampledImageUpdateAfterBind;

        [FieldOffset(64)]
        internal uint descriptorBindingStorageImageUpdateAfterBind;

        [FieldOffset(68)]
        internal uint descriptorBindingStorageBufferUpdateAfterBind;

        [FieldOffset(72)]
        internal uint descriptorBindingUniformTexelBufferUpdateAfterBind;

        [FieldOffset(76)]
        internal uint descriptorBindingStorageTexelBufferUpdateAfterBind;

        [FieldOffset(80)]
        internal uint descriptorBindingUpdateUnusedWhilePending;

        [FieldOffset(84)]
        internal uint descriptorBindingPartiallyBound;

        [FieldOffset(88)]
        internal uint descriptorBindingVariableDescriptorCount;

        [FieldOffset(92)]
        internal uint runtimeDescriptorArray;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT __CreateInstance(global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal));
        *(global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceDescriptorIndexingFeaturesEXT(global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceDescriptorIndexingFeaturesEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceDescriptorIndexingFeaturesEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint ShaderInputAttachmentArrayDynamicIndexing
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*) __Instance)->shaderInputAttachmentArrayDynamicIndexing;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*)__Instance)->shaderInputAttachmentArrayDynamicIndexing = value;
        }
    }

    public uint ShaderUniformTexelBufferArrayDynamicIndexing
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*) __Instance)->shaderUniformTexelBufferArrayDynamicIndexing;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*)__Instance)->shaderUniformTexelBufferArrayDynamicIndexing = value;
        }
    }

    public uint ShaderStorageTexelBufferArrayDynamicIndexing
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*) __Instance)->shaderStorageTexelBufferArrayDynamicIndexing;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*)__Instance)->shaderStorageTexelBufferArrayDynamicIndexing = value;
        }
    }

    public uint ShaderUniformBufferArrayNonUniformIndexing
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*) __Instance)->shaderUniformBufferArrayNonUniformIndexing;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*)__Instance)->shaderUniformBufferArrayNonUniformIndexing = value;
        }
    }

    public uint ShaderSampledImageArrayNonUniformIndexing
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*) __Instance)->shaderSampledImageArrayNonUniformIndexing;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*)__Instance)->shaderSampledImageArrayNonUniformIndexing = value;
        }
    }

    public uint ShaderStorageBufferArrayNonUniformIndexing
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*) __Instance)->shaderStorageBufferArrayNonUniformIndexing;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*)__Instance)->shaderStorageBufferArrayNonUniformIndexing = value;
        }
    }

    public uint ShaderStorageImageArrayNonUniformIndexing
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*) __Instance)->shaderStorageImageArrayNonUniformIndexing;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*)__Instance)->shaderStorageImageArrayNonUniformIndexing = value;
        }
    }

    public uint ShaderInputAttachmentArrayNonUniformIndexing
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*) __Instance)->shaderInputAttachmentArrayNonUniformIndexing;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*)__Instance)->shaderInputAttachmentArrayNonUniformIndexing = value;
        }
    }

    public uint ShaderUniformTexelBufferArrayNonUniformIndexing
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*) __Instance)->shaderUniformTexelBufferArrayNonUniformIndexing;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*)__Instance)->shaderUniformTexelBufferArrayNonUniformIndexing = value;
        }
    }

    public uint ShaderStorageTexelBufferArrayNonUniformIndexing
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*) __Instance)->shaderStorageTexelBufferArrayNonUniformIndexing;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*)__Instance)->shaderStorageTexelBufferArrayNonUniformIndexing = value;
        }
    }

    public uint DescriptorBindingUniformBufferUpdateAfterBind
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*) __Instance)->descriptorBindingUniformBufferUpdateAfterBind;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*)__Instance)->descriptorBindingUniformBufferUpdateAfterBind = value;
        }
    }

    public uint DescriptorBindingSampledImageUpdateAfterBind
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*) __Instance)->descriptorBindingSampledImageUpdateAfterBind;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*)__Instance)->descriptorBindingSampledImageUpdateAfterBind = value;
        }
    }

    public uint DescriptorBindingStorageImageUpdateAfterBind
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*) __Instance)->descriptorBindingStorageImageUpdateAfterBind;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*)__Instance)->descriptorBindingStorageImageUpdateAfterBind = value;
        }
    }

    public uint DescriptorBindingStorageBufferUpdateAfterBind
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*) __Instance)->descriptorBindingStorageBufferUpdateAfterBind;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*)__Instance)->descriptorBindingStorageBufferUpdateAfterBind = value;
        }
    }

    public uint DescriptorBindingUniformTexelBufferUpdateAfterBind
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*) __Instance)->descriptorBindingUniformTexelBufferUpdateAfterBind;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*)__Instance)->descriptorBindingUniformTexelBufferUpdateAfterBind = value;
        }
    }

    public uint DescriptorBindingStorageTexelBufferUpdateAfterBind
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*) __Instance)->descriptorBindingStorageTexelBufferUpdateAfterBind;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*)__Instance)->descriptorBindingStorageTexelBufferUpdateAfterBind = value;
        }
    }

    public uint DescriptorBindingUpdateUnusedWhilePending
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*) __Instance)->descriptorBindingUpdateUnusedWhilePending;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*)__Instance)->descriptorBindingUpdateUnusedWhilePending = value;
        }
    }

    public uint DescriptorBindingPartiallyBound
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*) __Instance)->descriptorBindingPartiallyBound;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*)__Instance)->descriptorBindingPartiallyBound = value;
        }
    }

    public uint DescriptorBindingVariableDescriptorCount
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*) __Instance)->descriptorBindingVariableDescriptorCount;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*)__Instance)->descriptorBindingVariableDescriptorCount = value;
        }
    }

    public uint RuntimeDescriptorArray
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*) __Instance)->runtimeDescriptorArray;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingFeaturesEXT.__Internal*)__Instance)->runtimeDescriptorArray = value;
        }
    }
}

public unsafe partial class VkPhysicalDeviceDescriptorIndexingPropertiesEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 112)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint maxUpdateAfterBindDescriptorsInAllPools;

        [FieldOffset(20)]
        internal uint shaderUniformBufferArrayNonUniformIndexingNative;

        [FieldOffset(24)]
        internal uint shaderSampledImageArrayNonUniformIndexingNative;

        [FieldOffset(28)]
        internal uint shaderStorageBufferArrayNonUniformIndexingNative;

        [FieldOffset(32)]
        internal uint shaderStorageImageArrayNonUniformIndexingNative;

        [FieldOffset(36)]
        internal uint shaderInputAttachmentArrayNonUniformIndexingNative;

        [FieldOffset(40)]
        internal uint robustBufferAccessUpdateAfterBind;

        [FieldOffset(44)]
        internal uint quadDivergentImplicitLod;

        [FieldOffset(48)]
        internal uint maxPerStageDescriptorUpdateAfterBindSamplers;

        [FieldOffset(52)]
        internal uint maxPerStageDescriptorUpdateAfterBindUniformBuffers;

        [FieldOffset(56)]
        internal uint maxPerStageDescriptorUpdateAfterBindStorageBuffers;

        [FieldOffset(60)]
        internal uint maxPerStageDescriptorUpdateAfterBindSampledImages;

        [FieldOffset(64)]
        internal uint maxPerStageDescriptorUpdateAfterBindStorageImages;

        [FieldOffset(68)]
        internal uint maxPerStageDescriptorUpdateAfterBindInputAttachments;

        [FieldOffset(72)]
        internal uint maxPerStageUpdateAfterBindResources;

        [FieldOffset(76)]
        internal uint maxDescriptorSetUpdateAfterBindSamplers;

        [FieldOffset(80)]
        internal uint maxDescriptorSetUpdateAfterBindUniformBuffers;

        [FieldOffset(84)]
        internal uint maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;

        [FieldOffset(88)]
        internal uint maxDescriptorSetUpdateAfterBindStorageBuffers;

        [FieldOffset(92)]
        internal uint maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;

        [FieldOffset(96)]
        internal uint maxDescriptorSetUpdateAfterBindSampledImages;

        [FieldOffset(100)]
        internal uint maxDescriptorSetUpdateAfterBindStorageImages;

        [FieldOffset(104)]
        internal uint maxDescriptorSetUpdateAfterBindInputAttachments;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT __CreateInstance(global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal));
        *(global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceDescriptorIndexingPropertiesEXT(global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceDescriptorIndexingPropertiesEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceDescriptorIndexingPropertiesEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint MaxUpdateAfterBindDescriptorsInAllPools
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*) __Instance)->maxUpdateAfterBindDescriptorsInAllPools;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*)__Instance)->maxUpdateAfterBindDescriptorsInAllPools = value;
        }
    }

    public uint ShaderUniformBufferArrayNonUniformIndexingNative
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*) __Instance)->shaderUniformBufferArrayNonUniformIndexingNative;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*)__Instance)->shaderUniformBufferArrayNonUniformIndexingNative = value;
        }
    }

    public uint ShaderSampledImageArrayNonUniformIndexingNative
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*) __Instance)->shaderSampledImageArrayNonUniformIndexingNative;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*)__Instance)->shaderSampledImageArrayNonUniformIndexingNative = value;
        }
    }

    public uint ShaderStorageBufferArrayNonUniformIndexingNative
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*) __Instance)->shaderStorageBufferArrayNonUniformIndexingNative;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*)__Instance)->shaderStorageBufferArrayNonUniformIndexingNative = value;
        }
    }

    public uint ShaderStorageImageArrayNonUniformIndexingNative
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*) __Instance)->shaderStorageImageArrayNonUniformIndexingNative;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*)__Instance)->shaderStorageImageArrayNonUniformIndexingNative = value;
        }
    }

    public uint ShaderInputAttachmentArrayNonUniformIndexingNative
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*) __Instance)->shaderInputAttachmentArrayNonUniformIndexingNative;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*)__Instance)->shaderInputAttachmentArrayNonUniformIndexingNative = value;
        }
    }

    public uint RobustBufferAccessUpdateAfterBind
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*) __Instance)->robustBufferAccessUpdateAfterBind;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*)__Instance)->robustBufferAccessUpdateAfterBind = value;
        }
    }

    public uint QuadDivergentImplicitLod
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*) __Instance)->quadDivergentImplicitLod;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*)__Instance)->quadDivergentImplicitLod = value;
        }
    }

    public uint MaxPerStageDescriptorUpdateAfterBindSamplers
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*) __Instance)->maxPerStageDescriptorUpdateAfterBindSamplers;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*)__Instance)->maxPerStageDescriptorUpdateAfterBindSamplers = value;
        }
    }

    public uint MaxPerStageDescriptorUpdateAfterBindUniformBuffers
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*) __Instance)->maxPerStageDescriptorUpdateAfterBindUniformBuffers;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*)__Instance)->maxPerStageDescriptorUpdateAfterBindUniformBuffers = value;
        }
    }

    public uint MaxPerStageDescriptorUpdateAfterBindStorageBuffers
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*) __Instance)->maxPerStageDescriptorUpdateAfterBindStorageBuffers;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*)__Instance)->maxPerStageDescriptorUpdateAfterBindStorageBuffers = value;
        }
    }

    public uint MaxPerStageDescriptorUpdateAfterBindSampledImages
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*) __Instance)->maxPerStageDescriptorUpdateAfterBindSampledImages;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*)__Instance)->maxPerStageDescriptorUpdateAfterBindSampledImages = value;
        }
    }

    public uint MaxPerStageDescriptorUpdateAfterBindStorageImages
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*) __Instance)->maxPerStageDescriptorUpdateAfterBindStorageImages;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*)__Instance)->maxPerStageDescriptorUpdateAfterBindStorageImages = value;
        }
    }

    public uint MaxPerStageDescriptorUpdateAfterBindInputAttachments
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*) __Instance)->maxPerStageDescriptorUpdateAfterBindInputAttachments;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*)__Instance)->maxPerStageDescriptorUpdateAfterBindInputAttachments = value;
        }
    }

    public uint MaxPerStageUpdateAfterBindResources
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*) __Instance)->maxPerStageUpdateAfterBindResources;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*)__Instance)->maxPerStageUpdateAfterBindResources = value;
        }
    }

    public uint MaxDescriptorSetUpdateAfterBindSamplers
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*) __Instance)->maxDescriptorSetUpdateAfterBindSamplers;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*)__Instance)->maxDescriptorSetUpdateAfterBindSamplers = value;
        }
    }

    public uint MaxDescriptorSetUpdateAfterBindUniformBuffers
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*) __Instance)->maxDescriptorSetUpdateAfterBindUniformBuffers;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*)__Instance)->maxDescriptorSetUpdateAfterBindUniformBuffers = value;
        }
    }

    public uint MaxDescriptorSetUpdateAfterBindUniformBuffersDynamic
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*) __Instance)->maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*)__Instance)->maxDescriptorSetUpdateAfterBindUniformBuffersDynamic = value;
        }
    }

    public uint MaxDescriptorSetUpdateAfterBindStorageBuffers
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*) __Instance)->maxDescriptorSetUpdateAfterBindStorageBuffers;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*)__Instance)->maxDescriptorSetUpdateAfterBindStorageBuffers = value;
        }
    }

    public uint MaxDescriptorSetUpdateAfterBindStorageBuffersDynamic
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*) __Instance)->maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*)__Instance)->maxDescriptorSetUpdateAfterBindStorageBuffersDynamic = value;
        }
    }

    public uint MaxDescriptorSetUpdateAfterBindSampledImages
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*) __Instance)->maxDescriptorSetUpdateAfterBindSampledImages;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*)__Instance)->maxDescriptorSetUpdateAfterBindSampledImages = value;
        }
    }

    public uint MaxDescriptorSetUpdateAfterBindStorageImages
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*) __Instance)->maxDescriptorSetUpdateAfterBindStorageImages;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*)__Instance)->maxDescriptorSetUpdateAfterBindStorageImages = value;
        }
    }

    public uint MaxDescriptorSetUpdateAfterBindInputAttachments
    {
        get
        {
            return ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*) __Instance)->maxDescriptorSetUpdateAfterBindInputAttachments;
        }

        set
        {
            ((global::VkPhysicalDeviceDescriptorIndexingPropertiesEXT.__Internal*)__Instance)->maxDescriptorSetUpdateAfterBindInputAttachments = value;
        }
    }
}

public unsafe partial class VkDescriptorSetVariableDescriptorCountAllocateInfoEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint descriptorSetCount;

        [FieldOffset(24)]
        internal global::System.IntPtr pDescriptorCounts;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorSetVariableDescriptorCountAllocateInfoEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorSetVariableDescriptorCountAllocateInfoEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDescriptorSetVariableDescriptorCountAllocateInfoEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDescriptorSetVariableDescriptorCountAllocateInfoEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkDescriptorSetVariableDescriptorCountAllocateInfoEXT __CreateInstance(global::VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkDescriptorSetVariableDescriptorCountAllocateInfoEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.__Internal));
        *(global::VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDescriptorSetVariableDescriptorCountAllocateInfoEXT(global::VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDescriptorSetVariableDescriptorCountAllocateInfoEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDescriptorSetVariableDescriptorCountAllocateInfoEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDescriptorSetVariableDescriptorCountAllocateInfoEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint DescriptorSetCount
    {
        get
        {
            return ((global::VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.__Internal*) __Instance)->descriptorSetCount;
        }

        set
        {
            ((global::VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.__Internal*)__Instance)->descriptorSetCount = value;
        }
    }

    public uint* PDescriptorCounts
    {
        get
        {
            return (uint*) ((global::VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.__Internal*) __Instance)->pDescriptorCounts;
        }

        set
        {
            ((global::VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.__Internal*)__Instance)->pDescriptorCounts = (global::System.IntPtr) value;
        }
    }
}

public unsafe partial class VkDescriptorSetVariableDescriptorCountLayoutSupportEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint maxVariableDescriptorCount;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorSetVariableDescriptorCountLayoutSupportEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDescriptorSetVariableDescriptorCountLayoutSupportEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDescriptorSetVariableDescriptorCountLayoutSupportEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDescriptorSetVariableDescriptorCountLayoutSupportEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkDescriptorSetVariableDescriptorCountLayoutSupportEXT __CreateInstance(global::VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkDescriptorSetVariableDescriptorCountLayoutSupportEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.__Internal));
        *(global::VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDescriptorSetVariableDescriptorCountLayoutSupportEXT(global::VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDescriptorSetVariableDescriptorCountLayoutSupportEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDescriptorSetVariableDescriptorCountLayoutSupportEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDescriptorSetVariableDescriptorCountLayoutSupportEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint MaxVariableDescriptorCount
    {
        get
        {
            return ((global::VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.__Internal*) __Instance)->maxVariableDescriptorCount;
        }

        set
        {
            ((global::VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.__Internal*)__Instance)->maxVariableDescriptorCount = value;
        }
    }
}

public unsafe partial class VkDeviceQueueGlobalPriorityCreateInfoEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkQueueGlobalPriorityEXT globalPriority;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceQueueGlobalPriorityCreateInfoEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkDeviceQueueGlobalPriorityCreateInfoEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkDeviceQueueGlobalPriorityCreateInfoEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkDeviceQueueGlobalPriorityCreateInfoEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkDeviceQueueGlobalPriorityCreateInfoEXT __CreateInstance(global::VkDeviceQueueGlobalPriorityCreateInfoEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkDeviceQueueGlobalPriorityCreateInfoEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkDeviceQueueGlobalPriorityCreateInfoEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkDeviceQueueGlobalPriorityCreateInfoEXT.__Internal));
        *(global::VkDeviceQueueGlobalPriorityCreateInfoEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkDeviceQueueGlobalPriorityCreateInfoEXT(global::VkDeviceQueueGlobalPriorityCreateInfoEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkDeviceQueueGlobalPriorityCreateInfoEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkDeviceQueueGlobalPriorityCreateInfoEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkDeviceQueueGlobalPriorityCreateInfoEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkDeviceQueueGlobalPriorityCreateInfoEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkDeviceQueueGlobalPriorityCreateInfoEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkDeviceQueueGlobalPriorityCreateInfoEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkDeviceQueueGlobalPriorityCreateInfoEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkQueueGlobalPriorityEXT GlobalPriority
    {
        get
        {
            return ((global::VkDeviceQueueGlobalPriorityCreateInfoEXT.__Internal*) __Instance)->globalPriority;
        }

        set
        {
            ((global::VkDeviceQueueGlobalPriorityCreateInfoEXT.__Internal*)__Instance)->globalPriority = value;
        }
    }
}

public unsafe partial class VkImportMemoryHostPointerInfoEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal global::VkExternalMemoryHandleTypeFlagBits handleType;

        [FieldOffset(24)]
        internal global::System.IntPtr pHostPointer;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImportMemoryHostPointerInfoEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkImportMemoryHostPointerInfoEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkImportMemoryHostPointerInfoEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkImportMemoryHostPointerInfoEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkImportMemoryHostPointerInfoEXT __CreateInstance(global::VkImportMemoryHostPointerInfoEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkImportMemoryHostPointerInfoEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkImportMemoryHostPointerInfoEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkImportMemoryHostPointerInfoEXT.__Internal));
        *(global::VkImportMemoryHostPointerInfoEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkImportMemoryHostPointerInfoEXT(global::VkImportMemoryHostPointerInfoEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkImportMemoryHostPointerInfoEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkImportMemoryHostPointerInfoEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkImportMemoryHostPointerInfoEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkImportMemoryHostPointerInfoEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkImportMemoryHostPointerInfoEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkImportMemoryHostPointerInfoEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkImportMemoryHostPointerInfoEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public global::VkExternalMemoryHandleTypeFlagBits HandleType
    {
        get
        {
            return ((global::VkImportMemoryHostPointerInfoEXT.__Internal*) __Instance)->handleType;
        }

        set
        {
            ((global::VkImportMemoryHostPointerInfoEXT.__Internal*)__Instance)->handleType = value;
        }
    }

    public global::System.IntPtr PHostPointer
    {
        get
        {
            return ((global::VkImportMemoryHostPointerInfoEXT.__Internal*) __Instance)->pHostPointer;
        }

        set
        {
            ((global::VkImportMemoryHostPointerInfoEXT.__Internal*)__Instance)->pHostPointer = (global::System.IntPtr) value;
        }
    }
}

public unsafe partial class VkMemoryHostPointerPropertiesEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint memoryTypeBits;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkMemoryHostPointerPropertiesEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkMemoryHostPointerPropertiesEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkMemoryHostPointerPropertiesEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkMemoryHostPointerPropertiesEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkMemoryHostPointerPropertiesEXT __CreateInstance(global::VkMemoryHostPointerPropertiesEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkMemoryHostPointerPropertiesEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkMemoryHostPointerPropertiesEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkMemoryHostPointerPropertiesEXT.__Internal));
        *(global::VkMemoryHostPointerPropertiesEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkMemoryHostPointerPropertiesEXT(global::VkMemoryHostPointerPropertiesEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkMemoryHostPointerPropertiesEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkMemoryHostPointerPropertiesEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkMemoryHostPointerPropertiesEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkMemoryHostPointerPropertiesEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkMemoryHostPointerPropertiesEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkMemoryHostPointerPropertiesEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkMemoryHostPointerPropertiesEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint MemoryTypeBits
    {
        get
        {
            return ((global::VkMemoryHostPointerPropertiesEXT.__Internal*) __Instance)->memoryTypeBits;
        }

        set
        {
            ((global::VkMemoryHostPointerPropertiesEXT.__Internal*)__Instance)->memoryTypeBits = value;
        }
    }
}

public unsafe partial class VkPhysicalDeviceExternalMemoryHostPropertiesEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal ulong minImportedHostPointerAlignment;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceExternalMemoryHostPropertiesEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceExternalMemoryHostPropertiesEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceExternalMemoryHostPropertiesEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceExternalMemoryHostPropertiesEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceExternalMemoryHostPropertiesEXT __CreateInstance(global::VkPhysicalDeviceExternalMemoryHostPropertiesEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceExternalMemoryHostPropertiesEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceExternalMemoryHostPropertiesEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceExternalMemoryHostPropertiesEXT.__Internal));
        *(global::VkPhysicalDeviceExternalMemoryHostPropertiesEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceExternalMemoryHostPropertiesEXT(global::VkPhysicalDeviceExternalMemoryHostPropertiesEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceExternalMemoryHostPropertiesEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceExternalMemoryHostPropertiesEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceExternalMemoryHostPropertiesEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDeviceExternalMemoryHostPropertiesEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDeviceExternalMemoryHostPropertiesEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDeviceExternalMemoryHostPropertiesEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDeviceExternalMemoryHostPropertiesEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public ulong MinImportedHostPointerAlignment
    {
        get
        {
            return ((global::VkPhysicalDeviceExternalMemoryHostPropertiesEXT.__Internal*) __Instance)->minImportedHostPointerAlignment;
        }

        set
        {
            ((global::VkPhysicalDeviceExternalMemoryHostPropertiesEXT.__Internal*)__Instance)->minImportedHostPointerAlignment = value;
        }
    }
}

public unsafe partial class VkPhysicalDeviceShaderCorePropertiesAMD : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 72)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint shaderEngineCount;

        [FieldOffset(20)]
        internal uint shaderArraysPerEngineCount;

        [FieldOffset(24)]
        internal uint computeUnitsPerShaderArray;

        [FieldOffset(28)]
        internal uint simdPerComputeUnit;

        [FieldOffset(32)]
        internal uint wavefrontsPerSimd;

        [FieldOffset(36)]
        internal uint wavefrontSize;

        [FieldOffset(40)]
        internal uint sgprsPerSimd;

        [FieldOffset(44)]
        internal uint minSgprAllocation;

        [FieldOffset(48)]
        internal uint maxSgprAllocation;

        [FieldOffset(52)]
        internal uint sgprAllocationGranularity;

        [FieldOffset(56)]
        internal uint vgprsPerSimd;

        [FieldOffset(60)]
        internal uint minVgprAllocation;

        [FieldOffset(64)]
        internal uint maxVgprAllocation;

        [FieldOffset(68)]
        internal uint vgprAllocationGranularity;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceShaderCorePropertiesAMD> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceShaderCorePropertiesAMD>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceShaderCorePropertiesAMD __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceShaderCorePropertiesAMD(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceShaderCorePropertiesAMD __CreateInstance(global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceShaderCorePropertiesAMD(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal));
        *(global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceShaderCorePropertiesAMD(global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceShaderCorePropertiesAMD(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceShaderCorePropertiesAMD()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceShaderCorePropertiesAMD __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint ShaderEngineCount
    {
        get
        {
            return ((global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal*) __Instance)->shaderEngineCount;
        }

        set
        {
            ((global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal*)__Instance)->shaderEngineCount = value;
        }
    }

    public uint ShaderArraysPerEngineCount
    {
        get
        {
            return ((global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal*) __Instance)->shaderArraysPerEngineCount;
        }

        set
        {
            ((global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal*)__Instance)->shaderArraysPerEngineCount = value;
        }
    }

    public uint ComputeUnitsPerShaderArray
    {
        get
        {
            return ((global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal*) __Instance)->computeUnitsPerShaderArray;
        }

        set
        {
            ((global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal*)__Instance)->computeUnitsPerShaderArray = value;
        }
    }

    public uint SimdPerComputeUnit
    {
        get
        {
            return ((global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal*) __Instance)->simdPerComputeUnit;
        }

        set
        {
            ((global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal*)__Instance)->simdPerComputeUnit = value;
        }
    }

    public uint WavefrontsPerSimd
    {
        get
        {
            return ((global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal*) __Instance)->wavefrontsPerSimd;
        }

        set
        {
            ((global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal*)__Instance)->wavefrontsPerSimd = value;
        }
    }

    public uint WavefrontSize
    {
        get
        {
            return ((global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal*) __Instance)->wavefrontSize;
        }

        set
        {
            ((global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal*)__Instance)->wavefrontSize = value;
        }
    }

    public uint SgprsPerSimd
    {
        get
        {
            return ((global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal*) __Instance)->sgprsPerSimd;
        }

        set
        {
            ((global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal*)__Instance)->sgprsPerSimd = value;
        }
    }

    public uint MinSgprAllocation
    {
        get
        {
            return ((global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal*) __Instance)->minSgprAllocation;
        }

        set
        {
            ((global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal*)__Instance)->minSgprAllocation = value;
        }
    }

    public uint MaxSgprAllocation
    {
        get
        {
            return ((global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal*) __Instance)->maxSgprAllocation;
        }

        set
        {
            ((global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal*)__Instance)->maxSgprAllocation = value;
        }
    }

    public uint SgprAllocationGranularity
    {
        get
        {
            return ((global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal*) __Instance)->sgprAllocationGranularity;
        }

        set
        {
            ((global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal*)__Instance)->sgprAllocationGranularity = value;
        }
    }

    public uint VgprsPerSimd
    {
        get
        {
            return ((global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal*) __Instance)->vgprsPerSimd;
        }

        set
        {
            ((global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal*)__Instance)->vgprsPerSimd = value;
        }
    }

    public uint MinVgprAllocation
    {
        get
        {
            return ((global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal*) __Instance)->minVgprAllocation;
        }

        set
        {
            ((global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal*)__Instance)->minVgprAllocation = value;
        }
    }

    public uint MaxVgprAllocation
    {
        get
        {
            return ((global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal*) __Instance)->maxVgprAllocation;
        }

        set
        {
            ((global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal*)__Instance)->maxVgprAllocation = value;
        }
    }

    public uint VgprAllocationGranularity
    {
        get
        {
            return ((global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal*) __Instance)->vgprAllocationGranularity;
        }

        set
        {
            ((global::VkPhysicalDeviceShaderCorePropertiesAMD.__Internal*)__Instance)->vgprAllocationGranularity = value;
        }
    }
}

public unsafe partial class VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint maxVertexAttribDivisor;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT __CreateInstance(global::VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.__Internal));
        *(global::VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(global::VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint MaxVertexAttribDivisor
    {
        get
        {
            return ((global::VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.__Internal*) __Instance)->maxVertexAttribDivisor;
        }

        set
        {
            ((global::VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.__Internal*)__Instance)->maxVertexAttribDivisor = value;
        }
    }
}

public unsafe partial class VkVertexInputBindingDivisorDescriptionEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint binding;

        [FieldOffset(4)]
        internal uint divisor;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkVertexInputBindingDivisorDescriptionEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkVertexInputBindingDivisorDescriptionEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkVertexInputBindingDivisorDescriptionEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkVertexInputBindingDivisorDescriptionEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkVertexInputBindingDivisorDescriptionEXT __CreateInstance(global::VkVertexInputBindingDivisorDescriptionEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkVertexInputBindingDivisorDescriptionEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkVertexInputBindingDivisorDescriptionEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkVertexInputBindingDivisorDescriptionEXT.__Internal));
        *(global::VkVertexInputBindingDivisorDescriptionEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkVertexInputBindingDivisorDescriptionEXT(global::VkVertexInputBindingDivisorDescriptionEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkVertexInputBindingDivisorDescriptionEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkVertexInputBindingDivisorDescriptionEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkVertexInputBindingDivisorDescriptionEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint Binding
    {
        get
        {
            return ((global::VkVertexInputBindingDivisorDescriptionEXT.__Internal*) __Instance)->binding;
        }

        set
        {
            ((global::VkVertexInputBindingDivisorDescriptionEXT.__Internal*)__Instance)->binding = value;
        }
    }

    public uint Divisor
    {
        get
        {
            return ((global::VkVertexInputBindingDivisorDescriptionEXT.__Internal*) __Instance)->divisor;
        }

        set
        {
            ((global::VkVertexInputBindingDivisorDescriptionEXT.__Internal*)__Instance)->divisor = value;
        }
    }
}

public unsafe partial class VkPipelineVertexInputDivisorStateCreateInfoEXT : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::VkStructureType sType;

        [FieldOffset(8)]
        internal global::System.IntPtr pNext;

        [FieldOffset(16)]
        internal uint vertexBindingDivisorCount;

        [FieldOffset(24)]
        internal global::System.IntPtr pVertexBindingDivisors;
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineVertexInputDivisorStateCreateInfoEXT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::VkPipelineVertexInputDivisorStateCreateInfoEXT>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::VkPipelineVertexInputDivisorStateCreateInfoEXT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::VkPipelineVertexInputDivisorStateCreateInfoEXT(native.ToPointer(), skipVTables);
    }

    internal static global::VkPipelineVertexInputDivisorStateCreateInfoEXT __CreateInstance(global::VkPipelineVertexInputDivisorStateCreateInfoEXT.__Internal native, bool skipVTables = false)
    {
        return new global::VkPipelineVertexInputDivisorStateCreateInfoEXT(native, skipVTables);
    }

    private static void* __CopyValue(global::VkPipelineVertexInputDivisorStateCreateInfoEXT.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::VkPipelineVertexInputDivisorStateCreateInfoEXT.__Internal));
        *(global::VkPipelineVertexInputDivisorStateCreateInfoEXT.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private VkPipelineVertexInputDivisorStateCreateInfoEXT(global::VkPipelineVertexInputDivisorStateCreateInfoEXT.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected VkPipelineVertexInputDivisorStateCreateInfoEXT(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~VkPipelineVertexInputDivisorStateCreateInfoEXT()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::VkPipelineVertexInputDivisorStateCreateInfoEXT __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public global::VkStructureType SType
    {
        get
        {
            return ((global::VkPipelineVertexInputDivisorStateCreateInfoEXT.__Internal*) __Instance)->sType;
        }

        set
        {
            ((global::VkPipelineVertexInputDivisorStateCreateInfoEXT.__Internal*)__Instance)->sType = value;
        }
    }

    public global::System.IntPtr PNext
    {
        get
        {
            return ((global::VkPipelineVertexInputDivisorStateCreateInfoEXT.__Internal*) __Instance)->pNext;
        }

        set
        {
            ((global::VkPipelineVertexInputDivisorStateCreateInfoEXT.__Internal*)__Instance)->pNext = (global::System.IntPtr) value;
        }
    }

    public uint VertexBindingDivisorCount
    {
        get
        {
            return ((global::VkPipelineVertexInputDivisorStateCreateInfoEXT.__Internal*) __Instance)->vertexBindingDivisorCount;
        }

        set
        {
            ((global::VkPipelineVertexInputDivisorStateCreateInfoEXT.__Internal*)__Instance)->vertexBindingDivisorCount = value;
        }
    }

    public global::VkVertexInputBindingDivisorDescriptionEXT PVertexBindingDivisors
    {
        get
        {
            global::VkVertexInputBindingDivisorDescriptionEXT __result0;
            if (((global::VkPipelineVertexInputDivisorStateCreateInfoEXT.__Internal*) __Instance)->pVertexBindingDivisors == IntPtr.Zero) __result0 = null;
            else if (global::VkVertexInputBindingDivisorDescriptionEXT.NativeToManagedMap.ContainsKey(((global::VkPipelineVertexInputDivisorStateCreateInfoEXT.__Internal*) __Instance)->pVertexBindingDivisors))
                __result0 = (global::VkVertexInputBindingDivisorDescriptionEXT) global::VkVertexInputBindingDivisorDescriptionEXT.NativeToManagedMap[((global::VkPipelineVertexInputDivisorStateCreateInfoEXT.__Internal*) __Instance)->pVertexBindingDivisors];
            else __result0 = global::VkVertexInputBindingDivisorDescriptionEXT.__CreateInstance(((global::VkPipelineVertexInputDivisorStateCreateInfoEXT.__Internal*) __Instance)->pVertexBindingDivisors);
            return __result0;
        }

        set
        {
            ((global::VkPipelineVertexInputDivisorStateCreateInfoEXT.__Internal*)__Instance)->pVertexBindingDivisors = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
        }
    }
}

public unsafe partial class vulkan_core
{
    public partial struct __Internal
    {
        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCreateInstance")]
        internal static extern global::VkResult VkCreateInstance(global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pInstance);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkDestroyInstance")]
        internal static extern void VkDestroyInstance(global::System.IntPtr instance, global::System.IntPtr pAllocator);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkEnumeratePhysicalDevices")]
        internal static extern global::VkResult VkEnumeratePhysicalDevices(global::System.IntPtr instance, uint* pPhysicalDeviceCount, global::System.IntPtr pPhysicalDevices);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetPhysicalDeviceFeatures")]
        internal static extern void VkGetPhysicalDeviceFeatures(global::System.IntPtr physicalDevice, global::System.IntPtr pFeatures);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetPhysicalDeviceFormatProperties")]
        internal static extern void VkGetPhysicalDeviceFormatProperties(global::System.IntPtr physicalDevice, global::VkFormat format, global::System.IntPtr pFormatProperties);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetPhysicalDeviceImageFormatProperties")]
        internal static extern global::VkResult VkGetPhysicalDeviceImageFormatProperties(global::System.IntPtr physicalDevice, global::VkFormat format, global::VkImageType type, global::VkImageTiling tiling, uint usage, uint flags, global::System.IntPtr pImageFormatProperties);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetPhysicalDeviceProperties")]
        internal static extern void VkGetPhysicalDeviceProperties(global::System.IntPtr physicalDevice, global::System.IntPtr pProperties);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetPhysicalDeviceQueueFamilyProperties")]
        internal static extern void VkGetPhysicalDeviceQueueFamilyProperties(global::System.IntPtr physicalDevice, uint* pQueueFamilyPropertyCount, global::System.IntPtr pQueueFamilyProperties);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetPhysicalDeviceMemoryProperties")]
        internal static extern void VkGetPhysicalDeviceMemoryProperties(global::System.IntPtr physicalDevice, global::System.IntPtr pMemoryProperties);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetInstanceProcAddr")]
        internal static extern global::System.IntPtr VkGetInstanceProcAddr(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string pName);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetDeviceProcAddr")]
        internal static extern global::System.IntPtr VkGetDeviceProcAddr(global::System.IntPtr device, [MarshalAs(UnmanagedType.LPStr)] string pName);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCreateDevice")]
        internal static extern global::VkResult VkCreateDevice(global::System.IntPtr physicalDevice, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pDevice);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkDestroyDevice")]
        internal static extern void VkDestroyDevice(global::System.IntPtr device, global::System.IntPtr pAllocator);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkEnumerateInstanceExtensionProperties")]
        internal static extern global::VkResult VkEnumerateInstanceExtensionProperties([MarshalAs(UnmanagedType.LPStr)] string pLayerName, uint* pPropertyCount, global::System.IntPtr pProperties);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkEnumerateDeviceExtensionProperties")]
        internal static extern global::VkResult VkEnumerateDeviceExtensionProperties(global::System.IntPtr physicalDevice, [MarshalAs(UnmanagedType.LPStr)] string pLayerName, uint* pPropertyCount, global::System.IntPtr pProperties);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkEnumerateInstanceLayerProperties")]
        internal static extern global::VkResult VkEnumerateInstanceLayerProperties(uint* pPropertyCount, global::System.IntPtr pProperties);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkEnumerateDeviceLayerProperties")]
        internal static extern global::VkResult VkEnumerateDeviceLayerProperties(global::System.IntPtr physicalDevice, uint* pPropertyCount, global::System.IntPtr pProperties);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetDeviceQueue")]
        internal static extern void VkGetDeviceQueue(global::System.IntPtr device, uint queueFamilyIndex, uint queueIndex, global::System.IntPtr pQueue);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkQueueSubmit")]
        internal static extern global::VkResult VkQueueSubmit(global::System.IntPtr queue, uint submitCount, global::System.IntPtr pSubmits, global::System.IntPtr fence);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkQueueWaitIdle")]
        internal static extern global::VkResult VkQueueWaitIdle(global::System.IntPtr queue);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkDeviceWaitIdle")]
        internal static extern global::VkResult VkDeviceWaitIdle(global::System.IntPtr device);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkAllocateMemory")]
        internal static extern global::VkResult VkAllocateMemory(global::System.IntPtr device, global::System.IntPtr pAllocateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pMemory);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkFreeMemory")]
        internal static extern void VkFreeMemory(global::System.IntPtr device, global::System.IntPtr memory, global::System.IntPtr pAllocator);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkMapMemory")]
        internal static extern global::VkResult VkMapMemory(global::System.IntPtr device, global::System.IntPtr memory, ulong offset, ulong size, uint flags, void** ppData);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkUnmapMemory")]
        internal static extern void VkUnmapMemory(global::System.IntPtr device, global::System.IntPtr memory);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkFlushMappedMemoryRanges")]
        internal static extern global::VkResult VkFlushMappedMemoryRanges(global::System.IntPtr device, uint memoryRangeCount, global::System.IntPtr pMemoryRanges);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkInvalidateMappedMemoryRanges")]
        internal static extern global::VkResult VkInvalidateMappedMemoryRanges(global::System.IntPtr device, uint memoryRangeCount, global::System.IntPtr pMemoryRanges);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetDeviceMemoryCommitment")]
        internal static extern void VkGetDeviceMemoryCommitment(global::System.IntPtr device, global::System.IntPtr memory, ulong* pCommittedMemoryInBytes);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkBindBufferMemory")]
        internal static extern global::VkResult VkBindBufferMemory(global::System.IntPtr device, global::System.IntPtr buffer, global::System.IntPtr memory, ulong memoryOffset);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkBindImageMemory")]
        internal static extern global::VkResult VkBindImageMemory(global::System.IntPtr device, global::System.IntPtr image, global::System.IntPtr memory, ulong memoryOffset);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetBufferMemoryRequirements")]
        internal static extern void VkGetBufferMemoryRequirements(global::System.IntPtr device, global::System.IntPtr buffer, global::System.IntPtr pMemoryRequirements);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetImageMemoryRequirements")]
        internal static extern void VkGetImageMemoryRequirements(global::System.IntPtr device, global::System.IntPtr image, global::System.IntPtr pMemoryRequirements);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetImageSparseMemoryRequirements")]
        internal static extern void VkGetImageSparseMemoryRequirements(global::System.IntPtr device, global::System.IntPtr image, uint* pSparseMemoryRequirementCount, global::System.IntPtr pSparseMemoryRequirements);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetPhysicalDeviceSparseImageFormatProperties")]
        internal static extern void VkGetPhysicalDeviceSparseImageFormatProperties(global::System.IntPtr physicalDevice, global::VkFormat format, global::VkImageType type, global::VkSampleCountFlagBits samples, uint usage, global::VkImageTiling tiling, uint* pPropertyCount, global::System.IntPtr pProperties);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkQueueBindSparse")]
        internal static extern global::VkResult VkQueueBindSparse(global::System.IntPtr queue, uint bindInfoCount, global::System.IntPtr pBindInfo, global::System.IntPtr fence);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCreateFence")]
        internal static extern global::VkResult VkCreateFence(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pFence);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkDestroyFence")]
        internal static extern void VkDestroyFence(global::System.IntPtr device, global::System.IntPtr fence, global::System.IntPtr pAllocator);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkResetFences")]
        internal static extern global::VkResult VkResetFences(global::System.IntPtr device, uint fenceCount, global::System.IntPtr pFences);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetFenceStatus")]
        internal static extern global::VkResult VkGetFenceStatus(global::System.IntPtr device, global::System.IntPtr fence);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkWaitForFences")]
        internal static extern global::VkResult VkWaitForFences(global::System.IntPtr device, uint fenceCount, global::System.IntPtr pFences, uint waitAll, ulong timeout);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCreateSemaphore")]
        internal static extern global::VkResult VkCreateSemaphore(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pSemaphore);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkDestroySemaphore")]
        internal static extern void VkDestroySemaphore(global::System.IntPtr device, global::System.IntPtr semaphore, global::System.IntPtr pAllocator);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCreateEvent")]
        internal static extern global::VkResult VkCreateEvent(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pEvent);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkDestroyEvent")]
        internal static extern void VkDestroyEvent(global::System.IntPtr device, global::System.IntPtr @event, global::System.IntPtr pAllocator);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetEventStatus")]
        internal static extern global::VkResult VkGetEventStatus(global::System.IntPtr device, global::System.IntPtr @event);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkSetEvent")]
        internal static extern global::VkResult VkSetEvent(global::System.IntPtr device, global::System.IntPtr @event);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkResetEvent")]
        internal static extern global::VkResult VkResetEvent(global::System.IntPtr device, global::System.IntPtr @event);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCreateQueryPool")]
        internal static extern global::VkResult VkCreateQueryPool(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pQueryPool);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkDestroyQueryPool")]
        internal static extern void VkDestroyQueryPool(global::System.IntPtr device, global::System.IntPtr queryPool, global::System.IntPtr pAllocator);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetQueryPoolResults")]
        internal static extern global::VkResult VkGetQueryPoolResults(global::System.IntPtr device, global::System.IntPtr queryPool, uint firstQuery, uint queryCount, ulong dataSize, global::System.IntPtr pData, ulong stride, uint flags);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCreateBuffer")]
        internal static extern global::VkResult VkCreateBuffer(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pBuffer);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkDestroyBuffer")]
        internal static extern void VkDestroyBuffer(global::System.IntPtr device, global::System.IntPtr buffer, global::System.IntPtr pAllocator);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCreateBufferView")]
        internal static extern global::VkResult VkCreateBufferView(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pView);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkDestroyBufferView")]
        internal static extern void VkDestroyBufferView(global::System.IntPtr device, global::System.IntPtr bufferView, global::System.IntPtr pAllocator);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCreateImage")]
        internal static extern global::VkResult VkCreateImage(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pImage);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkDestroyImage")]
        internal static extern void VkDestroyImage(global::System.IntPtr device, global::System.IntPtr image, global::System.IntPtr pAllocator);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetImageSubresourceLayout")]
        internal static extern void VkGetImageSubresourceLayout(global::System.IntPtr device, global::System.IntPtr image, global::System.IntPtr pSubresource, global::System.IntPtr pLayout);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCreateImageView")]
        internal static extern global::VkResult VkCreateImageView(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pView);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkDestroyImageView")]
        internal static extern void VkDestroyImageView(global::System.IntPtr device, global::System.IntPtr imageView, global::System.IntPtr pAllocator);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCreateShaderModule")]
        internal static extern global::VkResult VkCreateShaderModule(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pShaderModule);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkDestroyShaderModule")]
        internal static extern void VkDestroyShaderModule(global::System.IntPtr device, global::System.IntPtr shaderModule, global::System.IntPtr pAllocator);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCreatePipelineCache")]
        internal static extern global::VkResult VkCreatePipelineCache(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pPipelineCache);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkDestroyPipelineCache")]
        internal static extern void VkDestroyPipelineCache(global::System.IntPtr device, global::System.IntPtr pipelineCache, global::System.IntPtr pAllocator);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetPipelineCacheData")]
        internal static extern global::VkResult VkGetPipelineCacheData(global::System.IntPtr device, global::System.IntPtr pipelineCache, ulong* pDataSize, global::System.IntPtr pData);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkMergePipelineCaches")]
        internal static extern global::VkResult VkMergePipelineCaches(global::System.IntPtr device, global::System.IntPtr dstCache, uint srcCacheCount, global::System.IntPtr pSrcCaches);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCreateGraphicsPipelines")]
        internal static extern global::VkResult VkCreateGraphicsPipelines(global::System.IntPtr device, global::System.IntPtr pipelineCache, uint createInfoCount, global::System.IntPtr pCreateInfos, global::System.IntPtr pAllocator, global::System.IntPtr pPipelines);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCreateComputePipelines")]
        internal static extern global::VkResult VkCreateComputePipelines(global::System.IntPtr device, global::System.IntPtr pipelineCache, uint createInfoCount, global::System.IntPtr pCreateInfos, global::System.IntPtr pAllocator, global::System.IntPtr pPipelines);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkDestroyPipeline")]
        internal static extern void VkDestroyPipeline(global::System.IntPtr device, global::System.IntPtr pipeline, global::System.IntPtr pAllocator);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCreatePipelineLayout")]
        internal static extern global::VkResult VkCreatePipelineLayout(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pPipelineLayout);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkDestroyPipelineLayout")]
        internal static extern void VkDestroyPipelineLayout(global::System.IntPtr device, global::System.IntPtr pipelineLayout, global::System.IntPtr pAllocator);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCreateSampler")]
        internal static extern global::VkResult VkCreateSampler(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pSampler);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkDestroySampler")]
        internal static extern void VkDestroySampler(global::System.IntPtr device, global::System.IntPtr sampler, global::System.IntPtr pAllocator);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCreateDescriptorSetLayout")]
        internal static extern global::VkResult VkCreateDescriptorSetLayout(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pSetLayout);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkDestroyDescriptorSetLayout")]
        internal static extern void VkDestroyDescriptorSetLayout(global::System.IntPtr device, global::System.IntPtr descriptorSetLayout, global::System.IntPtr pAllocator);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCreateDescriptorPool")]
        internal static extern global::VkResult VkCreateDescriptorPool(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pDescriptorPool);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkDestroyDescriptorPool")]
        internal static extern void VkDestroyDescriptorPool(global::System.IntPtr device, global::System.IntPtr descriptorPool, global::System.IntPtr pAllocator);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkResetDescriptorPool")]
        internal static extern global::VkResult VkResetDescriptorPool(global::System.IntPtr device, global::System.IntPtr descriptorPool, uint flags);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkAllocateDescriptorSets")]
        internal static extern global::VkResult VkAllocateDescriptorSets(global::System.IntPtr device, global::System.IntPtr pAllocateInfo, global::System.IntPtr pDescriptorSets);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkFreeDescriptorSets")]
        internal static extern global::VkResult VkFreeDescriptorSets(global::System.IntPtr device, global::System.IntPtr descriptorPool, uint descriptorSetCount, global::System.IntPtr pDescriptorSets);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkUpdateDescriptorSets")]
        internal static extern void VkUpdateDescriptorSets(global::System.IntPtr device, uint descriptorWriteCount, global::System.IntPtr pDescriptorWrites, uint descriptorCopyCount, global::System.IntPtr pDescriptorCopies);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCreateFramebuffer")]
        internal static extern global::VkResult VkCreateFramebuffer(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pFramebuffer);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkDestroyFramebuffer")]
        internal static extern void VkDestroyFramebuffer(global::System.IntPtr device, global::System.IntPtr framebuffer, global::System.IntPtr pAllocator);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCreateRenderPass")]
        internal static extern global::VkResult VkCreateRenderPass(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pRenderPass);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkDestroyRenderPass")]
        internal static extern void VkDestroyRenderPass(global::System.IntPtr device, global::System.IntPtr renderPass, global::System.IntPtr pAllocator);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetRenderAreaGranularity")]
        internal static extern void VkGetRenderAreaGranularity(global::System.IntPtr device, global::System.IntPtr renderPass, global::System.IntPtr pGranularity);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCreateCommandPool")]
        internal static extern global::VkResult VkCreateCommandPool(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pCommandPool);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkDestroyCommandPool")]
        internal static extern void VkDestroyCommandPool(global::System.IntPtr device, global::System.IntPtr commandPool, global::System.IntPtr pAllocator);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkResetCommandPool")]
        internal static extern global::VkResult VkResetCommandPool(global::System.IntPtr device, global::System.IntPtr commandPool, uint flags);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkAllocateCommandBuffers")]
        internal static extern global::VkResult VkAllocateCommandBuffers(global::System.IntPtr device, global::System.IntPtr pAllocateInfo, global::System.IntPtr pCommandBuffers);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkFreeCommandBuffers")]
        internal static extern void VkFreeCommandBuffers(global::System.IntPtr device, global::System.IntPtr commandPool, uint commandBufferCount, global::System.IntPtr pCommandBuffers);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkBeginCommandBuffer")]
        internal static extern global::VkResult VkBeginCommandBuffer(global::System.IntPtr commandBuffer, global::System.IntPtr pBeginInfo);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkEndCommandBuffer")]
        internal static extern global::VkResult VkEndCommandBuffer(global::System.IntPtr commandBuffer);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkResetCommandBuffer")]
        internal static extern global::VkResult VkResetCommandBuffer(global::System.IntPtr commandBuffer, uint flags);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdBindPipeline")]
        internal static extern void VkCmdBindPipeline(global::System.IntPtr commandBuffer, global::VkPipelineBindPoint pipelineBindPoint, global::System.IntPtr pipeline);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdSetViewport")]
        internal static extern void VkCmdSetViewport(global::System.IntPtr commandBuffer, uint firstViewport, uint viewportCount, global::System.IntPtr pViewports);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdSetScissor")]
        internal static extern void VkCmdSetScissor(global::System.IntPtr commandBuffer, uint firstScissor, uint scissorCount, global::System.IntPtr pScissors);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdSetLineWidth")]
        internal static extern void VkCmdSetLineWidth(global::System.IntPtr commandBuffer, float lineWidth);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdSetDepthBias")]
        internal static extern void VkCmdSetDepthBias(global::System.IntPtr commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdSetBlendConstants")]
        internal static extern void VkCmdSetBlendConstants(global::System.IntPtr commandBuffer, float[] blendConstants);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdSetDepthBounds")]
        internal static extern void VkCmdSetDepthBounds(global::System.IntPtr commandBuffer, float minDepthBounds, float maxDepthBounds);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdSetStencilCompareMask")]
        internal static extern void VkCmdSetStencilCompareMask(global::System.IntPtr commandBuffer, uint faceMask, uint compareMask);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdSetStencilWriteMask")]
        internal static extern void VkCmdSetStencilWriteMask(global::System.IntPtr commandBuffer, uint faceMask, uint writeMask);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdSetStencilReference")]
        internal static extern void VkCmdSetStencilReference(global::System.IntPtr commandBuffer, uint faceMask, uint reference);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdBindDescriptorSets")]
        internal static extern void VkCmdBindDescriptorSets(global::System.IntPtr commandBuffer, global::VkPipelineBindPoint pipelineBindPoint, global::System.IntPtr layout, uint firstSet, uint descriptorSetCount, global::System.IntPtr pDescriptorSets, uint dynamicOffsetCount, uint* pDynamicOffsets);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdBindIndexBuffer")]
        internal static extern void VkCmdBindIndexBuffer(global::System.IntPtr commandBuffer, global::System.IntPtr buffer, ulong offset, global::VkIndexType indexType);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdBindVertexBuffers")]
        internal static extern void VkCmdBindVertexBuffers(global::System.IntPtr commandBuffer, uint firstBinding, uint bindingCount, global::System.IntPtr pBuffers, ulong* pOffsets);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdDraw")]
        internal static extern void VkCmdDraw(global::System.IntPtr commandBuffer, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdDrawIndexed")]
        internal static extern void VkCmdDrawIndexed(global::System.IntPtr commandBuffer, uint indexCount, uint instanceCount, uint firstIndex, int vertexOffset, uint firstInstance);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdDrawIndirect")]
        internal static extern void VkCmdDrawIndirect(global::System.IntPtr commandBuffer, global::System.IntPtr buffer, ulong offset, uint drawCount, uint stride);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdDrawIndexedIndirect")]
        internal static extern void VkCmdDrawIndexedIndirect(global::System.IntPtr commandBuffer, global::System.IntPtr buffer, ulong offset, uint drawCount, uint stride);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdDispatch")]
        internal static extern void VkCmdDispatch(global::System.IntPtr commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdDispatchIndirect")]
        internal static extern void VkCmdDispatchIndirect(global::System.IntPtr commandBuffer, global::System.IntPtr buffer, ulong offset);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdCopyBuffer")]
        internal static extern void VkCmdCopyBuffer(global::System.IntPtr commandBuffer, global::System.IntPtr srcBuffer, global::System.IntPtr dstBuffer, uint regionCount, global::System.IntPtr pRegions);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdCopyImage")]
        internal static extern void VkCmdCopyImage(global::System.IntPtr commandBuffer, global::System.IntPtr srcImage, global::VkImageLayout srcImageLayout, global::System.IntPtr dstImage, global::VkImageLayout dstImageLayout, uint regionCount, global::System.IntPtr pRegions);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdBlitImage")]
        internal static extern void VkCmdBlitImage(global::System.IntPtr commandBuffer, global::System.IntPtr srcImage, global::VkImageLayout srcImageLayout, global::System.IntPtr dstImage, global::VkImageLayout dstImageLayout, uint regionCount, global::System.IntPtr pRegions, global::VkFilter filter);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdCopyBufferToImage")]
        internal static extern void VkCmdCopyBufferToImage(global::System.IntPtr commandBuffer, global::System.IntPtr srcBuffer, global::System.IntPtr dstImage, global::VkImageLayout dstImageLayout, uint regionCount, global::System.IntPtr pRegions);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdCopyImageToBuffer")]
        internal static extern void VkCmdCopyImageToBuffer(global::System.IntPtr commandBuffer, global::System.IntPtr srcImage, global::VkImageLayout srcImageLayout, global::System.IntPtr dstBuffer, uint regionCount, global::System.IntPtr pRegions);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdUpdateBuffer")]
        internal static extern void VkCmdUpdateBuffer(global::System.IntPtr commandBuffer, global::System.IntPtr dstBuffer, ulong dstOffset, ulong dataSize, global::System.IntPtr pData);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdFillBuffer")]
        internal static extern void VkCmdFillBuffer(global::System.IntPtr commandBuffer, global::System.IntPtr dstBuffer, ulong dstOffset, ulong size, uint data);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdClearColorImage")]
        internal static extern void VkCmdClearColorImage(global::System.IntPtr commandBuffer, global::System.IntPtr image, global::VkImageLayout imageLayout, global::System.IntPtr pColor, uint rangeCount, global::System.IntPtr pRanges);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdClearDepthStencilImage")]
        internal static extern void VkCmdClearDepthStencilImage(global::System.IntPtr commandBuffer, global::System.IntPtr image, global::VkImageLayout imageLayout, global::System.IntPtr pDepthStencil, uint rangeCount, global::System.IntPtr pRanges);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdClearAttachments")]
        internal static extern void VkCmdClearAttachments(global::System.IntPtr commandBuffer, uint attachmentCount, global::System.IntPtr pAttachments, uint rectCount, global::System.IntPtr pRects);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdResolveImage")]
        internal static extern void VkCmdResolveImage(global::System.IntPtr commandBuffer, global::System.IntPtr srcImage, global::VkImageLayout srcImageLayout, global::System.IntPtr dstImage, global::VkImageLayout dstImageLayout, uint regionCount, global::System.IntPtr pRegions);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdSetEvent")]
        internal static extern void VkCmdSetEvent(global::System.IntPtr commandBuffer, global::System.IntPtr @event, uint stageMask);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdResetEvent")]
        internal static extern void VkCmdResetEvent(global::System.IntPtr commandBuffer, global::System.IntPtr @event, uint stageMask);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdWaitEvents")]
        internal static extern void VkCmdWaitEvents(global::System.IntPtr commandBuffer, uint eventCount, global::System.IntPtr pEvents, uint srcStageMask, uint dstStageMask, uint memoryBarrierCount, global::System.IntPtr pMemoryBarriers, uint bufferMemoryBarrierCount, global::System.IntPtr pBufferMemoryBarriers, uint imageMemoryBarrierCount, global::System.IntPtr pImageMemoryBarriers);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdPipelineBarrier")]
        internal static extern void VkCmdPipelineBarrier(global::System.IntPtr commandBuffer, uint srcStageMask, uint dstStageMask, uint dependencyFlags, uint memoryBarrierCount, global::System.IntPtr pMemoryBarriers, uint bufferMemoryBarrierCount, global::System.IntPtr pBufferMemoryBarriers, uint imageMemoryBarrierCount, global::System.IntPtr pImageMemoryBarriers);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdBeginQuery")]
        internal static extern void VkCmdBeginQuery(global::System.IntPtr commandBuffer, global::System.IntPtr queryPool, uint query, uint flags);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdEndQuery")]
        internal static extern void VkCmdEndQuery(global::System.IntPtr commandBuffer, global::System.IntPtr queryPool, uint query);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdResetQueryPool")]
        internal static extern void VkCmdResetQueryPool(global::System.IntPtr commandBuffer, global::System.IntPtr queryPool, uint firstQuery, uint queryCount);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdWriteTimestamp")]
        internal static extern void VkCmdWriteTimestamp(global::System.IntPtr commandBuffer, global::VkPipelineStageFlagBits pipelineStage, global::System.IntPtr queryPool, uint query);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdCopyQueryPoolResults")]
        internal static extern void VkCmdCopyQueryPoolResults(global::System.IntPtr commandBuffer, global::System.IntPtr queryPool, uint firstQuery, uint queryCount, global::System.IntPtr dstBuffer, ulong dstOffset, ulong stride, uint flags);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdPushConstants")]
        internal static extern void VkCmdPushConstants(global::System.IntPtr commandBuffer, global::System.IntPtr layout, uint stageFlags, uint offset, uint size, global::System.IntPtr pValues);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdBeginRenderPass")]
        internal static extern void VkCmdBeginRenderPass(global::System.IntPtr commandBuffer, global::System.IntPtr pRenderPassBegin, global::VkSubpassContents contents);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdNextSubpass")]
        internal static extern void VkCmdNextSubpass(global::System.IntPtr commandBuffer, global::VkSubpassContents contents);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdEndRenderPass")]
        internal static extern void VkCmdEndRenderPass(global::System.IntPtr commandBuffer);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdExecuteCommands")]
        internal static extern void VkCmdExecuteCommands(global::System.IntPtr commandBuffer, uint commandBufferCount, global::System.IntPtr pCommandBuffers);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkEnumerateInstanceVersion")]
        internal static extern global::VkResult VkEnumerateInstanceVersion(uint* pApiVersion);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkBindBufferMemory2")]
        internal static extern global::VkResult VkBindBufferMemory2(global::System.IntPtr device, uint bindInfoCount, global::System.IntPtr pBindInfos);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkBindImageMemory2")]
        internal static extern global::VkResult VkBindImageMemory2(global::System.IntPtr device, uint bindInfoCount, global::System.IntPtr pBindInfos);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetDeviceGroupPeerMemoryFeatures")]
        internal static extern void VkGetDeviceGroupPeerMemoryFeatures(global::System.IntPtr device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, uint* pPeerMemoryFeatures);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdSetDeviceMask")]
        internal static extern void VkCmdSetDeviceMask(global::System.IntPtr commandBuffer, uint deviceMask);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCmdDispatchBase")]
        internal static extern void VkCmdDispatchBase(global::System.IntPtr commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkEnumeratePhysicalDeviceGroups")]
        internal static extern global::VkResult VkEnumeratePhysicalDeviceGroups(global::System.IntPtr instance, uint* pPhysicalDeviceGroupCount, global::System.IntPtr pPhysicalDeviceGroupProperties);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetImageMemoryRequirements2")]
        internal static extern void VkGetImageMemoryRequirements2(global::System.IntPtr device, global::System.IntPtr pInfo, global::System.IntPtr pMemoryRequirements);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetBufferMemoryRequirements2")]
        internal static extern void VkGetBufferMemoryRequirements2(global::System.IntPtr device, global::System.IntPtr pInfo, global::System.IntPtr pMemoryRequirements);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetPhysicalDeviceFeatures2")]
        internal static extern void VkGetPhysicalDeviceFeatures2(global::System.IntPtr physicalDevice, global::System.IntPtr pFeatures);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetPhysicalDeviceProperties2")]
        internal static extern void VkGetPhysicalDeviceProperties2(global::System.IntPtr physicalDevice, global::System.IntPtr pProperties);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetPhysicalDeviceFormatProperties2")]
        internal static extern void VkGetPhysicalDeviceFormatProperties2(global::System.IntPtr physicalDevice, global::VkFormat format, global::System.IntPtr pFormatProperties);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetPhysicalDeviceQueueFamilyProperties2")]
        internal static extern void VkGetPhysicalDeviceQueueFamilyProperties2(global::System.IntPtr physicalDevice, uint* pQueueFamilyPropertyCount, global::System.IntPtr pQueueFamilyProperties);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetPhysicalDeviceMemoryProperties2")]
        internal static extern void VkGetPhysicalDeviceMemoryProperties2(global::System.IntPtr physicalDevice, global::System.IntPtr pMemoryProperties);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetPhysicalDeviceSparseImageFormatProperties2")]
        internal static extern void VkGetPhysicalDeviceSparseImageFormatProperties2(global::System.IntPtr physicalDevice, global::System.IntPtr pFormatInfo, uint* pPropertyCount, global::System.IntPtr pProperties);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkTrimCommandPool")]
        internal static extern void VkTrimCommandPool(global::System.IntPtr device, global::System.IntPtr commandPool, uint flags);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetDeviceQueue2")]
        internal static extern void VkGetDeviceQueue2(global::System.IntPtr device, global::System.IntPtr pQueueInfo, global::System.IntPtr pQueue);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCreateSamplerYcbcrConversion")]
        internal static extern global::VkResult VkCreateSamplerYcbcrConversion(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pYcbcrConversion);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkDestroySamplerYcbcrConversion")]
        internal static extern void VkDestroySamplerYcbcrConversion(global::System.IntPtr device, global::System.IntPtr ycbcrConversion, global::System.IntPtr pAllocator);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCreateDescriptorUpdateTemplate")]
        internal static extern global::VkResult VkCreateDescriptorUpdateTemplate(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pDescriptorUpdateTemplate);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkDestroyDescriptorUpdateTemplate")]
        internal static extern void VkDestroyDescriptorUpdateTemplate(global::System.IntPtr device, global::System.IntPtr descriptorUpdateTemplate, global::System.IntPtr pAllocator);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkUpdateDescriptorSetWithTemplate")]
        internal static extern void VkUpdateDescriptorSetWithTemplate(global::System.IntPtr device, global::System.IntPtr descriptorSet, global::System.IntPtr descriptorUpdateTemplate, global::System.IntPtr pData);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetPhysicalDeviceExternalBufferProperties")]
        internal static extern void VkGetPhysicalDeviceExternalBufferProperties(global::System.IntPtr physicalDevice, global::System.IntPtr pExternalBufferInfo, global::System.IntPtr pExternalBufferProperties);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetPhysicalDeviceExternalFenceProperties")]
        internal static extern void VkGetPhysicalDeviceExternalFenceProperties(global::System.IntPtr physicalDevice, global::System.IntPtr pExternalFenceInfo, global::System.IntPtr pExternalFenceProperties);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetPhysicalDeviceExternalSemaphoreProperties")]
        internal static extern void VkGetPhysicalDeviceExternalSemaphoreProperties(global::System.IntPtr physicalDevice, global::System.IntPtr pExternalSemaphoreInfo, global::System.IntPtr pExternalSemaphoreProperties);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetDescriptorSetLayoutSupport")]
        internal static extern void VkGetDescriptorSetLayoutSupport(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pSupport);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkDestroySurfaceKHR")]
        internal static extern void VkDestroySurfaceKHR(global::System.IntPtr instance, global::System.IntPtr surface, global::System.IntPtr pAllocator);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetPhysicalDeviceSurfaceSupportKHR")]
        internal static extern global::VkResult VkGetPhysicalDeviceSurfaceSupportKHR(global::System.IntPtr physicalDevice, uint queueFamilyIndex, global::System.IntPtr surface, uint* pSupported);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetPhysicalDeviceSurfaceCapabilitiesKHR")]
        internal static extern global::VkResult VkGetPhysicalDeviceSurfaceCapabilitiesKHR(global::System.IntPtr physicalDevice, global::System.IntPtr surface, global::System.IntPtr pSurfaceCapabilities);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetPhysicalDeviceSurfaceFormatsKHR")]
        internal static extern global::VkResult VkGetPhysicalDeviceSurfaceFormatsKHR(global::System.IntPtr physicalDevice, global::System.IntPtr surface, uint* pSurfaceFormatCount, global::System.IntPtr pSurfaceFormats);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetPhysicalDeviceSurfacePresentModesKHR")]
        internal static extern global::VkResult VkGetPhysicalDeviceSurfacePresentModesKHR(global::System.IntPtr physicalDevice, global::System.IntPtr surface, uint* pPresentModeCount, global::VkPresentModeKHR* pPresentModes);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCreateSwapchainKHR")]
        internal static extern global::VkResult VkCreateSwapchainKHR(global::System.IntPtr device, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pSwapchain);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkDestroySwapchainKHR")]
        internal static extern void VkDestroySwapchainKHR(global::System.IntPtr device, global::System.IntPtr swapchain, global::System.IntPtr pAllocator);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetSwapchainImagesKHR")]
        internal static extern global::VkResult VkGetSwapchainImagesKHR(global::System.IntPtr device, global::System.IntPtr swapchain, uint* pSwapchainImageCount, global::System.IntPtr pSwapchainImages);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkAcquireNextImageKHR")]
        internal static extern global::VkResult VkAcquireNextImageKHR(global::System.IntPtr device, global::System.IntPtr swapchain, ulong timeout, global::System.IntPtr semaphore, global::System.IntPtr fence, uint* pImageIndex);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkQueuePresentKHR")]
        internal static extern global::VkResult VkQueuePresentKHR(global::System.IntPtr queue, global::System.IntPtr pPresentInfo);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetDeviceGroupPresentCapabilitiesKHR")]
        internal static extern global::VkResult VkGetDeviceGroupPresentCapabilitiesKHR(global::System.IntPtr device, global::System.IntPtr pDeviceGroupPresentCapabilities);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetDeviceGroupSurfacePresentModesKHR")]
        internal static extern global::VkResult VkGetDeviceGroupSurfacePresentModesKHR(global::System.IntPtr device, global::System.IntPtr surface, uint* pModes);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetPhysicalDevicePresentRectanglesKHR")]
        internal static extern global::VkResult VkGetPhysicalDevicePresentRectanglesKHR(global::System.IntPtr physicalDevice, global::System.IntPtr surface, uint* pRectCount, global::System.IntPtr pRects);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkAcquireNextImage2KHR")]
        internal static extern global::VkResult VkAcquireNextImage2KHR(global::System.IntPtr device, global::System.IntPtr pAcquireInfo, uint* pImageIndex);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetPhysicalDeviceDisplayPropertiesKHR")]
        internal static extern global::VkResult VkGetPhysicalDeviceDisplayPropertiesKHR(global::System.IntPtr physicalDevice, uint* pPropertyCount, global::System.IntPtr pProperties);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetPhysicalDeviceDisplayPlanePropertiesKHR")]
        internal static extern global::VkResult VkGetPhysicalDeviceDisplayPlanePropertiesKHR(global::System.IntPtr physicalDevice, uint* pPropertyCount, global::System.IntPtr pProperties);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetDisplayPlaneSupportedDisplaysKHR")]
        internal static extern global::VkResult VkGetDisplayPlaneSupportedDisplaysKHR(global::System.IntPtr physicalDevice, uint planeIndex, uint* pDisplayCount, global::System.IntPtr pDisplays);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetDisplayModePropertiesKHR")]
        internal static extern global::VkResult VkGetDisplayModePropertiesKHR(global::System.IntPtr physicalDevice, global::System.IntPtr display, uint* pPropertyCount, global::System.IntPtr pProperties);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCreateDisplayModeKHR")]
        internal static extern global::VkResult VkCreateDisplayModeKHR(global::System.IntPtr physicalDevice, global::System.IntPtr display, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pMode);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkGetDisplayPlaneCapabilitiesKHR")]
        internal static extern global::VkResult VkGetDisplayPlaneCapabilitiesKHR(global::System.IntPtr physicalDevice, global::System.IntPtr mode, uint planeIndex, global::System.IntPtr pCapabilities);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCreateDisplayPlaneSurfaceKHR")]
        internal static extern global::VkResult VkCreateDisplayPlaneSurfaceKHR(global::System.IntPtr instance, global::System.IntPtr pCreateInfo, global::System.IntPtr pAllocator, global::System.IntPtr pSurface);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("vulkan-1", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="vkCreateSharedSwapchainsKHR")]
        internal static extern global::VkResult VkCreateSharedSwapchainsKHR(global::System.IntPtr device, uint swapchainCount, global::System.IntPtr pCreateInfos, global::System.IntPtr pAllocator, global::System.IntPtr pSwapchains);
    }

    public static global::VkResult VkCreateInstance(global::VkInstanceCreateInfo pCreateInfo, global::VkAllocationCallbacks pAllocator, global::VkInstanceT pInstance)
    {
        var __arg0 = ReferenceEquals(pCreateInfo, null) ? global::System.IntPtr.Zero : pCreateInfo.__Instance;
        var __arg1 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        var __arg2 = ReferenceEquals(pInstance, null) ? global::System.IntPtr.Zero : pInstance.__Instance;
        var __ret = __Internal.VkCreateInstance(__arg0, __arg1, __arg2);
        return __ret;
    }

    public static void VkDestroyInstance(global::VkInstanceT instance, global::VkAllocationCallbacks pAllocator)
    {
        var __arg0 = ReferenceEquals(instance, null) ? global::System.IntPtr.Zero : instance.__Instance;
        var __arg1 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        __Internal.VkDestroyInstance(__arg0, __arg1);
    }

    public static global::VkResult VkEnumeratePhysicalDevices(global::VkInstanceT instance, ref uint pPhysicalDeviceCount, global::VkPhysicalDeviceT pPhysicalDevices)
    {
        var __arg0 = ReferenceEquals(instance, null) ? global::System.IntPtr.Zero : instance.__Instance;
        fixed (uint* __refParamPtr1 = &pPhysicalDeviceCount)
        {
            var __arg1 = __refParamPtr1;
            var __arg2 = ReferenceEquals(pPhysicalDevices, null) ? global::System.IntPtr.Zero : pPhysicalDevices.__Instance;
            var __ret = __Internal.VkEnumeratePhysicalDevices(__arg0, __arg1, __arg2);
            return __ret;
        }
    }

    public static void VkGetPhysicalDeviceFeatures(global::VkPhysicalDeviceT physicalDevice, global::VkPhysicalDeviceFeatures pFeatures)
    {
        var __arg0 = ReferenceEquals(physicalDevice, null) ? global::System.IntPtr.Zero : physicalDevice.__Instance;
        var __arg1 = ReferenceEquals(pFeatures, null) ? global::System.IntPtr.Zero : pFeatures.__Instance;
        __Internal.VkGetPhysicalDeviceFeatures(__arg0, __arg1);
    }

    public static void VkGetPhysicalDeviceFormatProperties(global::VkPhysicalDeviceT physicalDevice, global::VkFormat format, global::VkFormatProperties pFormatProperties)
    {
        var __arg0 = ReferenceEquals(physicalDevice, null) ? global::System.IntPtr.Zero : physicalDevice.__Instance;
        var __arg2 = ReferenceEquals(pFormatProperties, null) ? global::System.IntPtr.Zero : pFormatProperties.__Instance;
        __Internal.VkGetPhysicalDeviceFormatProperties(__arg0, format, __arg2);
    }

    public static global::VkResult VkGetPhysicalDeviceImageFormatProperties(global::VkPhysicalDeviceT physicalDevice, global::VkFormat format, global::VkImageType type, global::VkImageTiling tiling, uint usage, uint flags, global::VkImageFormatProperties pImageFormatProperties)
    {
        var __arg0 = ReferenceEquals(physicalDevice, null) ? global::System.IntPtr.Zero : physicalDevice.__Instance;
        var __arg6 = ReferenceEquals(pImageFormatProperties, null) ? global::System.IntPtr.Zero : pImageFormatProperties.__Instance;
        var __ret = __Internal.VkGetPhysicalDeviceImageFormatProperties(__arg0, format, type, tiling, usage, flags, __arg6);
        return __ret;
    }

    public static void VkGetPhysicalDeviceProperties(global::VkPhysicalDeviceT physicalDevice, global::VkPhysicalDeviceProperties pProperties)
    {
        var __arg0 = ReferenceEquals(physicalDevice, null) ? global::System.IntPtr.Zero : physicalDevice.__Instance;
        var __arg1 = ReferenceEquals(pProperties, null) ? global::System.IntPtr.Zero : pProperties.__Instance;
        __Internal.VkGetPhysicalDeviceProperties(__arg0, __arg1);
    }

    public static void VkGetPhysicalDeviceQueueFamilyProperties(global::VkPhysicalDeviceT physicalDevice, ref uint pQueueFamilyPropertyCount, global::VkQueueFamilyProperties pQueueFamilyProperties)
    {
        var __arg0 = ReferenceEquals(physicalDevice, null) ? global::System.IntPtr.Zero : physicalDevice.__Instance;
        fixed (uint* __refParamPtr1 = &pQueueFamilyPropertyCount)
        {
            var __arg1 = __refParamPtr1;
            var __arg2 = ReferenceEquals(pQueueFamilyProperties, null) ? global::System.IntPtr.Zero : pQueueFamilyProperties.__Instance;
            __Internal.VkGetPhysicalDeviceQueueFamilyProperties(__arg0, __arg1, __arg2);
        }
    }

    public static void VkGetPhysicalDeviceMemoryProperties(global::VkPhysicalDeviceT physicalDevice, global::VkPhysicalDeviceMemoryProperties pMemoryProperties)
    {
        var __arg0 = ReferenceEquals(physicalDevice, null) ? global::System.IntPtr.Zero : physicalDevice.__Instance;
        var __arg1 = ReferenceEquals(pMemoryProperties, null) ? global::System.IntPtr.Zero : pMemoryProperties.__Instance;
        __Internal.VkGetPhysicalDeviceMemoryProperties(__arg0, __arg1);
    }

    public static global::PFN_vkVoidFunction VkGetInstanceProcAddr(global::VkInstanceT instance, string pName)
    {
        var __arg0 = ReferenceEquals(instance, null) ? global::System.IntPtr.Zero : instance.__Instance;
        var __ret = __Internal.VkGetInstanceProcAddr(__arg0, pName);
        var __ptr0 = __ret;
        return __ptr0 == IntPtr.Zero? null : (global::PFN_vkVoidFunction) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PFN_vkVoidFunction));
    }

    public static global::PFN_vkVoidFunction VkGetDeviceProcAddr(global::VkDeviceT device, string pName)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __ret = __Internal.VkGetDeviceProcAddr(__arg0, pName);
        var __ptr0 = __ret;
        return __ptr0 == IntPtr.Zero? null : (global::PFN_vkVoidFunction) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PFN_vkVoidFunction));
    }

    public static global::VkResult VkCreateDevice(global::VkPhysicalDeviceT physicalDevice, global::VkDeviceCreateInfo pCreateInfo, global::VkAllocationCallbacks pAllocator, global::VkDeviceT pDevice)
    {
        var __arg0 = ReferenceEquals(physicalDevice, null) ? global::System.IntPtr.Zero : physicalDevice.__Instance;
        var __arg1 = ReferenceEquals(pCreateInfo, null) ? global::System.IntPtr.Zero : pCreateInfo.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        var __arg3 = ReferenceEquals(pDevice, null) ? global::System.IntPtr.Zero : pDevice.__Instance;
        var __ret = __Internal.VkCreateDevice(__arg0, __arg1, __arg2, __arg3);
        return __ret;
    }

    public static void VkDestroyDevice(global::VkDeviceT device, global::VkAllocationCallbacks pAllocator)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        __Internal.VkDestroyDevice(__arg0, __arg1);
    }

    public static global::VkResult VkEnumerateInstanceExtensionProperties(string pLayerName, ref uint pPropertyCount, global::VkExtensionProperties pProperties)
    {
        fixed (uint* __refParamPtr1 = &pPropertyCount)
        {
            var __arg1 = __refParamPtr1;
            var __arg2 = ReferenceEquals(pProperties, null) ? global::System.IntPtr.Zero : pProperties.__Instance;
            var __ret = __Internal.VkEnumerateInstanceExtensionProperties(pLayerName, __arg1, __arg2);
            return __ret;
        }
    }

    public static global::VkResult VkEnumerateDeviceExtensionProperties(global::VkPhysicalDeviceT physicalDevice, string pLayerName, ref uint pPropertyCount, global::VkExtensionProperties pProperties)
    {
        var __arg0 = ReferenceEquals(physicalDevice, null) ? global::System.IntPtr.Zero : physicalDevice.__Instance;
        fixed (uint* __refParamPtr2 = &pPropertyCount)
        {
            var __arg2 = __refParamPtr2;
            var __arg3 = ReferenceEquals(pProperties, null) ? global::System.IntPtr.Zero : pProperties.__Instance;
            var __ret = __Internal.VkEnumerateDeviceExtensionProperties(__arg0, pLayerName, __arg2, __arg3);
            return __ret;
        }
    }

    public static global::VkResult VkEnumerateInstanceLayerProperties(ref uint pPropertyCount, global::VkLayerProperties pProperties)
    {
        fixed (uint* __refParamPtr0 = &pPropertyCount)
        {
            var __arg0 = __refParamPtr0;
            var __arg1 = ReferenceEquals(pProperties, null) ? global::System.IntPtr.Zero : pProperties.__Instance;
            var __ret = __Internal.VkEnumerateInstanceLayerProperties(__arg0, __arg1);
            return __ret;
        }
    }

    public static global::VkResult VkEnumerateDeviceLayerProperties(global::VkPhysicalDeviceT physicalDevice, ref uint pPropertyCount, global::VkLayerProperties pProperties)
    {
        var __arg0 = ReferenceEquals(physicalDevice, null) ? global::System.IntPtr.Zero : physicalDevice.__Instance;
        fixed (uint* __refParamPtr1 = &pPropertyCount)
        {
            var __arg1 = __refParamPtr1;
            var __arg2 = ReferenceEquals(pProperties, null) ? global::System.IntPtr.Zero : pProperties.__Instance;
            var __ret = __Internal.VkEnumerateDeviceLayerProperties(__arg0, __arg1, __arg2);
            return __ret;
        }
    }

    public static void VkGetDeviceQueue(global::VkDeviceT device, uint queueFamilyIndex, uint queueIndex, global::VkQueueT pQueue)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg3 = ReferenceEquals(pQueue, null) ? global::System.IntPtr.Zero : pQueue.__Instance;
        __Internal.VkGetDeviceQueue(__arg0, queueFamilyIndex, queueIndex, __arg3);
    }

    public static global::VkResult VkQueueSubmit(global::VkQueueT queue, uint submitCount, global::VkSubmitInfo pSubmits, global::VkFenceT fence)
    {
        var __arg0 = ReferenceEquals(queue, null) ? global::System.IntPtr.Zero : queue.__Instance;
        var __arg2 = ReferenceEquals(pSubmits, null) ? global::System.IntPtr.Zero : pSubmits.__Instance;
        var __arg3 = ReferenceEquals(fence, null) ? global::System.IntPtr.Zero : fence.__Instance;
        var __ret = __Internal.VkQueueSubmit(__arg0, submitCount, __arg2, __arg3);
        return __ret;
    }

    public static global::VkResult VkQueueWaitIdle(global::VkQueueT queue)
    {
        var __arg0 = ReferenceEquals(queue, null) ? global::System.IntPtr.Zero : queue.__Instance;
        var __ret = __Internal.VkQueueWaitIdle(__arg0);
        return __ret;
    }

    public static global::VkResult VkDeviceWaitIdle(global::VkDeviceT device)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __ret = __Internal.VkDeviceWaitIdle(__arg0);
        return __ret;
    }

    public static global::VkResult VkAllocateMemory(global::VkDeviceT device, global::VkMemoryAllocateInfo pAllocateInfo, global::VkAllocationCallbacks pAllocator, global::VkDeviceMemoryT pMemory)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pAllocateInfo, null) ? global::System.IntPtr.Zero : pAllocateInfo.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        var __arg3 = ReferenceEquals(pMemory, null) ? global::System.IntPtr.Zero : pMemory.__Instance;
        var __ret = __Internal.VkAllocateMemory(__arg0, __arg1, __arg2, __arg3);
        return __ret;
    }

    public static void VkFreeMemory(global::VkDeviceT device, global::VkDeviceMemoryT memory, global::VkAllocationCallbacks pAllocator)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(memory, null) ? global::System.IntPtr.Zero : memory.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        __Internal.VkFreeMemory(__arg0, __arg1, __arg2);
    }

    public static global::VkResult VkMapMemory(global::VkDeviceT device, global::VkDeviceMemoryT memory, ulong offset, ulong size, uint flags, void** ppData)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(memory, null) ? global::System.IntPtr.Zero : memory.__Instance;
        var __ret = __Internal.VkMapMemory(__arg0, __arg1, offset, size, flags, ppData);
        return __ret;
    }

    public static void VkUnmapMemory(global::VkDeviceT device, global::VkDeviceMemoryT memory)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(memory, null) ? global::System.IntPtr.Zero : memory.__Instance;
        __Internal.VkUnmapMemory(__arg0, __arg1);
    }

    public static global::VkResult VkFlushMappedMemoryRanges(global::VkDeviceT device, uint memoryRangeCount, global::VkMappedMemoryRange pMemoryRanges)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg2 = ReferenceEquals(pMemoryRanges, null) ? global::System.IntPtr.Zero : pMemoryRanges.__Instance;
        var __ret = __Internal.VkFlushMappedMemoryRanges(__arg0, memoryRangeCount, __arg2);
        return __ret;
    }

    public static global::VkResult VkInvalidateMappedMemoryRanges(global::VkDeviceT device, uint memoryRangeCount, global::VkMappedMemoryRange pMemoryRanges)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg2 = ReferenceEquals(pMemoryRanges, null) ? global::System.IntPtr.Zero : pMemoryRanges.__Instance;
        var __ret = __Internal.VkInvalidateMappedMemoryRanges(__arg0, memoryRangeCount, __arg2);
        return __ret;
    }

    public static void VkGetDeviceMemoryCommitment(global::VkDeviceT device, global::VkDeviceMemoryT memory, ref ulong pCommittedMemoryInBytes)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(memory, null) ? global::System.IntPtr.Zero : memory.__Instance;
        fixed (ulong* __refParamPtr2 = &pCommittedMemoryInBytes)
        {
            var __arg2 = __refParamPtr2;
            __Internal.VkGetDeviceMemoryCommitment(__arg0, __arg1, __arg2);
        }
    }

    public static global::VkResult VkBindBufferMemory(global::VkDeviceT device, global::VkBufferT buffer, global::VkDeviceMemoryT memory, ulong memoryOffset)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(buffer, null) ? global::System.IntPtr.Zero : buffer.__Instance;
        var __arg2 = ReferenceEquals(memory, null) ? global::System.IntPtr.Zero : memory.__Instance;
        var __ret = __Internal.VkBindBufferMemory(__arg0, __arg1, __arg2, memoryOffset);
        return __ret;
    }

    public static global::VkResult VkBindImageMemory(global::VkDeviceT device, global::VkImageT image, global::VkDeviceMemoryT memory, ulong memoryOffset)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
        var __arg2 = ReferenceEquals(memory, null) ? global::System.IntPtr.Zero : memory.__Instance;
        var __ret = __Internal.VkBindImageMemory(__arg0, __arg1, __arg2, memoryOffset);
        return __ret;
    }

    public static void VkGetBufferMemoryRequirements(global::VkDeviceT device, global::VkBufferT buffer, global::VkMemoryRequirements pMemoryRequirements)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(buffer, null) ? global::System.IntPtr.Zero : buffer.__Instance;
        var __arg2 = ReferenceEquals(pMemoryRequirements, null) ? global::System.IntPtr.Zero : pMemoryRequirements.__Instance;
        __Internal.VkGetBufferMemoryRequirements(__arg0, __arg1, __arg2);
    }

    public static void VkGetImageMemoryRequirements(global::VkDeviceT device, global::VkImageT image, global::VkMemoryRequirements pMemoryRequirements)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
        var __arg2 = ReferenceEquals(pMemoryRequirements, null) ? global::System.IntPtr.Zero : pMemoryRequirements.__Instance;
        __Internal.VkGetImageMemoryRequirements(__arg0, __arg1, __arg2);
    }

    public static void VkGetImageSparseMemoryRequirements(global::VkDeviceT device, global::VkImageT image, ref uint pSparseMemoryRequirementCount, global::VkSparseImageMemoryRequirements pSparseMemoryRequirements)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
        fixed (uint* __refParamPtr2 = &pSparseMemoryRequirementCount)
        {
            var __arg2 = __refParamPtr2;
            var __arg3 = ReferenceEquals(pSparseMemoryRequirements, null) ? global::System.IntPtr.Zero : pSparseMemoryRequirements.__Instance;
            __Internal.VkGetImageSparseMemoryRequirements(__arg0, __arg1, __arg2, __arg3);
        }
    }

    public static void VkGetPhysicalDeviceSparseImageFormatProperties(global::VkPhysicalDeviceT physicalDevice, global::VkFormat format, global::VkImageType type, global::VkSampleCountFlagBits samples, uint usage, global::VkImageTiling tiling, ref uint pPropertyCount, global::VkSparseImageFormatProperties pProperties)
    {
        var __arg0 = ReferenceEquals(physicalDevice, null) ? global::System.IntPtr.Zero : physicalDevice.__Instance;
        fixed (uint* __refParamPtr6 = &pPropertyCount)
        {
            var __arg6 = __refParamPtr6;
            var __arg7 = ReferenceEquals(pProperties, null) ? global::System.IntPtr.Zero : pProperties.__Instance;
            __Internal.VkGetPhysicalDeviceSparseImageFormatProperties(__arg0, format, type, samples, usage, tiling, __arg6, __arg7);
        }
    }

    public static global::VkResult VkQueueBindSparse(global::VkQueueT queue, uint bindInfoCount, global::VkBindSparseInfo pBindInfo, global::VkFenceT fence)
    {
        var __arg0 = ReferenceEquals(queue, null) ? global::System.IntPtr.Zero : queue.__Instance;
        var __arg2 = ReferenceEquals(pBindInfo, null) ? global::System.IntPtr.Zero : pBindInfo.__Instance;
        var __arg3 = ReferenceEquals(fence, null) ? global::System.IntPtr.Zero : fence.__Instance;
        var __ret = __Internal.VkQueueBindSparse(__arg0, bindInfoCount, __arg2, __arg3);
        return __ret;
    }

    public static global::VkResult VkCreateFence(global::VkDeviceT device, global::VkFenceCreateInfo pCreateInfo, global::VkAllocationCallbacks pAllocator, global::VkFenceT pFence)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pCreateInfo, null) ? global::System.IntPtr.Zero : pCreateInfo.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        var __arg3 = ReferenceEquals(pFence, null) ? global::System.IntPtr.Zero : pFence.__Instance;
        var __ret = __Internal.VkCreateFence(__arg0, __arg1, __arg2, __arg3);
        return __ret;
    }

    public static void VkDestroyFence(global::VkDeviceT device, global::VkFenceT fence, global::VkAllocationCallbacks pAllocator)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(fence, null) ? global::System.IntPtr.Zero : fence.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        __Internal.VkDestroyFence(__arg0, __arg1, __arg2);
    }

    public static global::VkResult VkResetFences(global::VkDeviceT device, uint fenceCount, global::VkFenceT pFences)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg2 = ReferenceEquals(pFences, null) ? global::System.IntPtr.Zero : pFences.__Instance;
        var __ret = __Internal.VkResetFences(__arg0, fenceCount, __arg2);
        return __ret;
    }

    public static global::VkResult VkGetFenceStatus(global::VkDeviceT device, global::VkFenceT fence)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(fence, null) ? global::System.IntPtr.Zero : fence.__Instance;
        var __ret = __Internal.VkGetFenceStatus(__arg0, __arg1);
        return __ret;
    }

    public static global::VkResult VkWaitForFences(global::VkDeviceT device, uint fenceCount, global::VkFenceT pFences, uint waitAll, ulong timeout)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg2 = ReferenceEquals(pFences, null) ? global::System.IntPtr.Zero : pFences.__Instance;
        var __ret = __Internal.VkWaitForFences(__arg0, fenceCount, __arg2, waitAll, timeout);
        return __ret;
    }

    public static global::VkResult VkCreateSemaphore(global::VkDeviceT device, global::VkSemaphoreCreateInfo pCreateInfo, global::VkAllocationCallbacks pAllocator, global::VkSemaphoreT pSemaphore)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pCreateInfo, null) ? global::System.IntPtr.Zero : pCreateInfo.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        var __arg3 = ReferenceEquals(pSemaphore, null) ? global::System.IntPtr.Zero : pSemaphore.__Instance;
        var __ret = __Internal.VkCreateSemaphore(__arg0, __arg1, __arg2, __arg3);
        return __ret;
    }

    public static void VkDestroySemaphore(global::VkDeviceT device, global::VkSemaphoreT semaphore, global::VkAllocationCallbacks pAllocator)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(semaphore, null) ? global::System.IntPtr.Zero : semaphore.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        __Internal.VkDestroySemaphore(__arg0, __arg1, __arg2);
    }

    public static global::VkResult VkCreateEvent(global::VkDeviceT device, global::VkEventCreateInfo pCreateInfo, global::VkAllocationCallbacks pAllocator, global::VkEventT pEvent)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pCreateInfo, null) ? global::System.IntPtr.Zero : pCreateInfo.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        var __arg3 = ReferenceEquals(pEvent, null) ? global::System.IntPtr.Zero : pEvent.__Instance;
        var __ret = __Internal.VkCreateEvent(__arg0, __arg1, __arg2, __arg3);
        return __ret;
    }

    public static void VkDestroyEvent(global::VkDeviceT device, global::VkEventT @event, global::VkAllocationCallbacks pAllocator)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(@event, null) ? global::System.IntPtr.Zero : @event.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        __Internal.VkDestroyEvent(__arg0, __arg1, __arg2);
    }

    public static global::VkResult VkGetEventStatus(global::VkDeviceT device, global::VkEventT @event)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(@event, null) ? global::System.IntPtr.Zero : @event.__Instance;
        var __ret = __Internal.VkGetEventStatus(__arg0, __arg1);
        return __ret;
    }

    public static global::VkResult VkSetEvent(global::VkDeviceT device, global::VkEventT @event)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(@event, null) ? global::System.IntPtr.Zero : @event.__Instance;
        var __ret = __Internal.VkSetEvent(__arg0, __arg1);
        return __ret;
    }

    public static global::VkResult VkResetEvent(global::VkDeviceT device, global::VkEventT @event)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(@event, null) ? global::System.IntPtr.Zero : @event.__Instance;
        var __ret = __Internal.VkResetEvent(__arg0, __arg1);
        return __ret;
    }

    public static global::VkResult VkCreateQueryPool(global::VkDeviceT device, global::VkQueryPoolCreateInfo pCreateInfo, global::VkAllocationCallbacks pAllocator, global::VkQueryPoolT pQueryPool)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pCreateInfo, null) ? global::System.IntPtr.Zero : pCreateInfo.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        var __arg3 = ReferenceEquals(pQueryPool, null) ? global::System.IntPtr.Zero : pQueryPool.__Instance;
        var __ret = __Internal.VkCreateQueryPool(__arg0, __arg1, __arg2, __arg3);
        return __ret;
    }

    public static void VkDestroyQueryPool(global::VkDeviceT device, global::VkQueryPoolT queryPool, global::VkAllocationCallbacks pAllocator)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(queryPool, null) ? global::System.IntPtr.Zero : queryPool.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        __Internal.VkDestroyQueryPool(__arg0, __arg1, __arg2);
    }

    public static global::VkResult VkGetQueryPoolResults(global::VkDeviceT device, global::VkQueryPoolT queryPool, uint firstQuery, uint queryCount, ulong dataSize, global::System.IntPtr pData, ulong stride, uint flags)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(queryPool, null) ? global::System.IntPtr.Zero : queryPool.__Instance;
        var __ret = __Internal.VkGetQueryPoolResults(__arg0, __arg1, firstQuery, queryCount, dataSize, pData, stride, flags);
        return __ret;
    }

    public static global::VkResult VkCreateBuffer(global::VkDeviceT device, global::VkBufferCreateInfo pCreateInfo, global::VkAllocationCallbacks pAllocator, global::VkBufferT pBuffer)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pCreateInfo, null) ? global::System.IntPtr.Zero : pCreateInfo.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        var __arg3 = ReferenceEquals(pBuffer, null) ? global::System.IntPtr.Zero : pBuffer.__Instance;
        var __ret = __Internal.VkCreateBuffer(__arg0, __arg1, __arg2, __arg3);
        return __ret;
    }

    public static void VkDestroyBuffer(global::VkDeviceT device, global::VkBufferT buffer, global::VkAllocationCallbacks pAllocator)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(buffer, null) ? global::System.IntPtr.Zero : buffer.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        __Internal.VkDestroyBuffer(__arg0, __arg1, __arg2);
    }

    public static global::VkResult VkCreateBufferView(global::VkDeviceT device, global::VkBufferViewCreateInfo pCreateInfo, global::VkAllocationCallbacks pAllocator, global::VkBufferViewT pView)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pCreateInfo, null) ? global::System.IntPtr.Zero : pCreateInfo.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        var __arg3 = ReferenceEquals(pView, null) ? global::System.IntPtr.Zero : pView.__Instance;
        var __ret = __Internal.VkCreateBufferView(__arg0, __arg1, __arg2, __arg3);
        return __ret;
    }

    public static void VkDestroyBufferView(global::VkDeviceT device, global::VkBufferViewT bufferView, global::VkAllocationCallbacks pAllocator)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(bufferView, null) ? global::System.IntPtr.Zero : bufferView.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        __Internal.VkDestroyBufferView(__arg0, __arg1, __arg2);
    }

    public static global::VkResult VkCreateImage(global::VkDeviceT device, global::VkImageCreateInfo pCreateInfo, global::VkAllocationCallbacks pAllocator, global::VkImageT pImage)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pCreateInfo, null) ? global::System.IntPtr.Zero : pCreateInfo.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        var __arg3 = ReferenceEquals(pImage, null) ? global::System.IntPtr.Zero : pImage.__Instance;
        var __ret = __Internal.VkCreateImage(__arg0, __arg1, __arg2, __arg3);
        return __ret;
    }

    public static void VkDestroyImage(global::VkDeviceT device, global::VkImageT image, global::VkAllocationCallbacks pAllocator)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        __Internal.VkDestroyImage(__arg0, __arg1, __arg2);
    }

    public static void VkGetImageSubresourceLayout(global::VkDeviceT device, global::VkImageT image, global::VkImageSubresource pSubresource, global::VkSubresourceLayout pLayout)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
        var __arg2 = ReferenceEquals(pSubresource, null) ? global::System.IntPtr.Zero : pSubresource.__Instance;
        var __arg3 = ReferenceEquals(pLayout, null) ? global::System.IntPtr.Zero : pLayout.__Instance;
        __Internal.VkGetImageSubresourceLayout(__arg0, __arg1, __arg2, __arg3);
    }

    public static global::VkResult VkCreateImageView(global::VkDeviceT device, global::VkImageViewCreateInfo pCreateInfo, global::VkAllocationCallbacks pAllocator, global::VkImageViewT pView)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pCreateInfo, null) ? global::System.IntPtr.Zero : pCreateInfo.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        var __arg3 = ReferenceEquals(pView, null) ? global::System.IntPtr.Zero : pView.__Instance;
        var __ret = __Internal.VkCreateImageView(__arg0, __arg1, __arg2, __arg3);
        return __ret;
    }

    public static void VkDestroyImageView(global::VkDeviceT device, global::VkImageViewT imageView, global::VkAllocationCallbacks pAllocator)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(imageView, null) ? global::System.IntPtr.Zero : imageView.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        __Internal.VkDestroyImageView(__arg0, __arg1, __arg2);
    }

    public static global::VkResult VkCreateShaderModule(global::VkDeviceT device, global::VkShaderModuleCreateInfo pCreateInfo, global::VkAllocationCallbacks pAllocator, global::VkShaderModuleT pShaderModule)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pCreateInfo, null) ? global::System.IntPtr.Zero : pCreateInfo.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        var __arg3 = ReferenceEquals(pShaderModule, null) ? global::System.IntPtr.Zero : pShaderModule.__Instance;
        var __ret = __Internal.VkCreateShaderModule(__arg0, __arg1, __arg2, __arg3);
        return __ret;
    }

    public static void VkDestroyShaderModule(global::VkDeviceT device, global::VkShaderModuleT shaderModule, global::VkAllocationCallbacks pAllocator)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(shaderModule, null) ? global::System.IntPtr.Zero : shaderModule.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        __Internal.VkDestroyShaderModule(__arg0, __arg1, __arg2);
    }

    public static global::VkResult VkCreatePipelineCache(global::VkDeviceT device, global::VkPipelineCacheCreateInfo pCreateInfo, global::VkAllocationCallbacks pAllocator, global::VkPipelineCacheT pPipelineCache)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pCreateInfo, null) ? global::System.IntPtr.Zero : pCreateInfo.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        var __arg3 = ReferenceEquals(pPipelineCache, null) ? global::System.IntPtr.Zero : pPipelineCache.__Instance;
        var __ret = __Internal.VkCreatePipelineCache(__arg0, __arg1, __arg2, __arg3);
        return __ret;
    }

    public static void VkDestroyPipelineCache(global::VkDeviceT device, global::VkPipelineCacheT pipelineCache, global::VkAllocationCallbacks pAllocator)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pipelineCache, null) ? global::System.IntPtr.Zero : pipelineCache.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        __Internal.VkDestroyPipelineCache(__arg0, __arg1, __arg2);
    }

    public static global::VkResult VkGetPipelineCacheData(global::VkDeviceT device, global::VkPipelineCacheT pipelineCache, ref ulong pDataSize, global::System.IntPtr pData)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pipelineCache, null) ? global::System.IntPtr.Zero : pipelineCache.__Instance;
        fixed (ulong* __refParamPtr2 = &pDataSize)
        {
            var __arg2 = __refParamPtr2;
            var __ret = __Internal.VkGetPipelineCacheData(__arg0, __arg1, __arg2, pData);
            return __ret;
        }
    }

    public static global::VkResult VkMergePipelineCaches(global::VkDeviceT device, global::VkPipelineCacheT dstCache, uint srcCacheCount, global::VkPipelineCacheT pSrcCaches)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(dstCache, null) ? global::System.IntPtr.Zero : dstCache.__Instance;
        var __arg3 = ReferenceEquals(pSrcCaches, null) ? global::System.IntPtr.Zero : pSrcCaches.__Instance;
        var __ret = __Internal.VkMergePipelineCaches(__arg0, __arg1, srcCacheCount, __arg3);
        return __ret;
    }

    public static global::VkResult VkCreateGraphicsPipelines(global::VkDeviceT device, global::VkPipelineCacheT pipelineCache, uint createInfoCount, global::VkGraphicsPipelineCreateInfo pCreateInfos, global::VkAllocationCallbacks pAllocator, global::VkPipelineT pPipelines)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pipelineCache, null) ? global::System.IntPtr.Zero : pipelineCache.__Instance;
        var __arg3 = ReferenceEquals(pCreateInfos, null) ? global::System.IntPtr.Zero : pCreateInfos.__Instance;
        var __arg4 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        var __arg5 = ReferenceEquals(pPipelines, null) ? global::System.IntPtr.Zero : pPipelines.__Instance;
        var __ret = __Internal.VkCreateGraphicsPipelines(__arg0, __arg1, createInfoCount, __arg3, __arg4, __arg5);
        return __ret;
    }

    public static global::VkResult VkCreateComputePipelines(global::VkDeviceT device, global::VkPipelineCacheT pipelineCache, uint createInfoCount, global::VkComputePipelineCreateInfo pCreateInfos, global::VkAllocationCallbacks pAllocator, global::VkPipelineT pPipelines)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pipelineCache, null) ? global::System.IntPtr.Zero : pipelineCache.__Instance;
        var __arg3 = ReferenceEquals(pCreateInfos, null) ? global::System.IntPtr.Zero : pCreateInfos.__Instance;
        var __arg4 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        var __arg5 = ReferenceEquals(pPipelines, null) ? global::System.IntPtr.Zero : pPipelines.__Instance;
        var __ret = __Internal.VkCreateComputePipelines(__arg0, __arg1, createInfoCount, __arg3, __arg4, __arg5);
        return __ret;
    }

    public static void VkDestroyPipeline(global::VkDeviceT device, global::VkPipelineT pipeline, global::VkAllocationCallbacks pAllocator)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pipeline, null) ? global::System.IntPtr.Zero : pipeline.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        __Internal.VkDestroyPipeline(__arg0, __arg1, __arg2);
    }

    public static global::VkResult VkCreatePipelineLayout(global::VkDeviceT device, global::VkPipelineLayoutCreateInfo pCreateInfo, global::VkAllocationCallbacks pAllocator, global::VkPipelineLayoutT pPipelineLayout)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pCreateInfo, null) ? global::System.IntPtr.Zero : pCreateInfo.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        var __arg3 = ReferenceEquals(pPipelineLayout, null) ? global::System.IntPtr.Zero : pPipelineLayout.__Instance;
        var __ret = __Internal.VkCreatePipelineLayout(__arg0, __arg1, __arg2, __arg3);
        return __ret;
    }

    public static void VkDestroyPipelineLayout(global::VkDeviceT device, global::VkPipelineLayoutT pipelineLayout, global::VkAllocationCallbacks pAllocator)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pipelineLayout, null) ? global::System.IntPtr.Zero : pipelineLayout.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        __Internal.VkDestroyPipelineLayout(__arg0, __arg1, __arg2);
    }

    public static global::VkResult VkCreateSampler(global::VkDeviceT device, global::VkSamplerCreateInfo pCreateInfo, global::VkAllocationCallbacks pAllocator, global::VkSamplerT pSampler)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pCreateInfo, null) ? global::System.IntPtr.Zero : pCreateInfo.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        var __arg3 = ReferenceEquals(pSampler, null) ? global::System.IntPtr.Zero : pSampler.__Instance;
        var __ret = __Internal.VkCreateSampler(__arg0, __arg1, __arg2, __arg3);
        return __ret;
    }

    public static void VkDestroySampler(global::VkDeviceT device, global::VkSamplerT sampler, global::VkAllocationCallbacks pAllocator)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(sampler, null) ? global::System.IntPtr.Zero : sampler.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        __Internal.VkDestroySampler(__arg0, __arg1, __arg2);
    }

    public static global::VkResult VkCreateDescriptorSetLayout(global::VkDeviceT device, global::VkDescriptorSetLayoutCreateInfo pCreateInfo, global::VkAllocationCallbacks pAllocator, global::VkDescriptorSetLayoutT pSetLayout)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pCreateInfo, null) ? global::System.IntPtr.Zero : pCreateInfo.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        var __arg3 = ReferenceEquals(pSetLayout, null) ? global::System.IntPtr.Zero : pSetLayout.__Instance;
        var __ret = __Internal.VkCreateDescriptorSetLayout(__arg0, __arg1, __arg2, __arg3);
        return __ret;
    }

    public static void VkDestroyDescriptorSetLayout(global::VkDeviceT device, global::VkDescriptorSetLayoutT descriptorSetLayout, global::VkAllocationCallbacks pAllocator)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(descriptorSetLayout, null) ? global::System.IntPtr.Zero : descriptorSetLayout.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        __Internal.VkDestroyDescriptorSetLayout(__arg0, __arg1, __arg2);
    }

    public static global::VkResult VkCreateDescriptorPool(global::VkDeviceT device, global::VkDescriptorPoolCreateInfo pCreateInfo, global::VkAllocationCallbacks pAllocator, global::VkDescriptorPoolT pDescriptorPool)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pCreateInfo, null) ? global::System.IntPtr.Zero : pCreateInfo.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        var __arg3 = ReferenceEquals(pDescriptorPool, null) ? global::System.IntPtr.Zero : pDescriptorPool.__Instance;
        var __ret = __Internal.VkCreateDescriptorPool(__arg0, __arg1, __arg2, __arg3);
        return __ret;
    }

    public static void VkDestroyDescriptorPool(global::VkDeviceT device, global::VkDescriptorPoolT descriptorPool, global::VkAllocationCallbacks pAllocator)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(descriptorPool, null) ? global::System.IntPtr.Zero : descriptorPool.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        __Internal.VkDestroyDescriptorPool(__arg0, __arg1, __arg2);
    }

    public static global::VkResult VkResetDescriptorPool(global::VkDeviceT device, global::VkDescriptorPoolT descriptorPool, uint flags)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(descriptorPool, null) ? global::System.IntPtr.Zero : descriptorPool.__Instance;
        var __ret = __Internal.VkResetDescriptorPool(__arg0, __arg1, flags);
        return __ret;
    }

    public static global::VkResult VkAllocateDescriptorSets(global::VkDeviceT device, global::VkDescriptorSetAllocateInfo pAllocateInfo, global::VkDescriptorSetT pDescriptorSets)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pAllocateInfo, null) ? global::System.IntPtr.Zero : pAllocateInfo.__Instance;
        var __arg2 = ReferenceEquals(pDescriptorSets, null) ? global::System.IntPtr.Zero : pDescriptorSets.__Instance;
        var __ret = __Internal.VkAllocateDescriptorSets(__arg0, __arg1, __arg2);
        return __ret;
    }

    public static global::VkResult VkFreeDescriptorSets(global::VkDeviceT device, global::VkDescriptorPoolT descriptorPool, uint descriptorSetCount, global::VkDescriptorSetT pDescriptorSets)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(descriptorPool, null) ? global::System.IntPtr.Zero : descriptorPool.__Instance;
        var __arg3 = ReferenceEquals(pDescriptorSets, null) ? global::System.IntPtr.Zero : pDescriptorSets.__Instance;
        var __ret = __Internal.VkFreeDescriptorSets(__arg0, __arg1, descriptorSetCount, __arg3);
        return __ret;
    }

    public static void VkUpdateDescriptorSets(global::VkDeviceT device, uint descriptorWriteCount, global::VkWriteDescriptorSet pDescriptorWrites, uint descriptorCopyCount, global::VkCopyDescriptorSet pDescriptorCopies)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg2 = ReferenceEquals(pDescriptorWrites, null) ? global::System.IntPtr.Zero : pDescriptorWrites.__Instance;
        var __arg4 = ReferenceEquals(pDescriptorCopies, null) ? global::System.IntPtr.Zero : pDescriptorCopies.__Instance;
        __Internal.VkUpdateDescriptorSets(__arg0, descriptorWriteCount, __arg2, descriptorCopyCount, __arg4);
    }

    public static global::VkResult VkCreateFramebuffer(global::VkDeviceT device, global::VkFramebufferCreateInfo pCreateInfo, global::VkAllocationCallbacks pAllocator, global::VkFramebufferT pFramebuffer)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pCreateInfo, null) ? global::System.IntPtr.Zero : pCreateInfo.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        var __arg3 = ReferenceEquals(pFramebuffer, null) ? global::System.IntPtr.Zero : pFramebuffer.__Instance;
        var __ret = __Internal.VkCreateFramebuffer(__arg0, __arg1, __arg2, __arg3);
        return __ret;
    }

    public static void VkDestroyFramebuffer(global::VkDeviceT device, global::VkFramebufferT framebuffer, global::VkAllocationCallbacks pAllocator)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(framebuffer, null) ? global::System.IntPtr.Zero : framebuffer.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        __Internal.VkDestroyFramebuffer(__arg0, __arg1, __arg2);
    }

    public static global::VkResult VkCreateRenderPass(global::VkDeviceT device, global::VkRenderPassCreateInfo pCreateInfo, global::VkAllocationCallbacks pAllocator, global::VkRenderPassT pRenderPass)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pCreateInfo, null) ? global::System.IntPtr.Zero : pCreateInfo.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        var __arg3 = ReferenceEquals(pRenderPass, null) ? global::System.IntPtr.Zero : pRenderPass.__Instance;
        var __ret = __Internal.VkCreateRenderPass(__arg0, __arg1, __arg2, __arg3);
        return __ret;
    }

    public static void VkDestroyRenderPass(global::VkDeviceT device, global::VkRenderPassT renderPass, global::VkAllocationCallbacks pAllocator)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(renderPass, null) ? global::System.IntPtr.Zero : renderPass.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        __Internal.VkDestroyRenderPass(__arg0, __arg1, __arg2);
    }

    public static void VkGetRenderAreaGranularity(global::VkDeviceT device, global::VkRenderPassT renderPass, global::VkExtent2D pGranularity)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(renderPass, null) ? global::System.IntPtr.Zero : renderPass.__Instance;
        var __arg2 = ReferenceEquals(pGranularity, null) ? global::System.IntPtr.Zero : pGranularity.__Instance;
        __Internal.VkGetRenderAreaGranularity(__arg0, __arg1, __arg2);
    }

    public static global::VkResult VkCreateCommandPool(global::VkDeviceT device, global::VkCommandPoolCreateInfo pCreateInfo, global::VkAllocationCallbacks pAllocator, global::VkCommandPoolT pCommandPool)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pCreateInfo, null) ? global::System.IntPtr.Zero : pCreateInfo.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        var __arg3 = ReferenceEquals(pCommandPool, null) ? global::System.IntPtr.Zero : pCommandPool.__Instance;
        var __ret = __Internal.VkCreateCommandPool(__arg0, __arg1, __arg2, __arg3);
        return __ret;
    }

    public static void VkDestroyCommandPool(global::VkDeviceT device, global::VkCommandPoolT commandPool, global::VkAllocationCallbacks pAllocator)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(commandPool, null) ? global::System.IntPtr.Zero : commandPool.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        __Internal.VkDestroyCommandPool(__arg0, __arg1, __arg2);
    }

    public static global::VkResult VkResetCommandPool(global::VkDeviceT device, global::VkCommandPoolT commandPool, uint flags)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(commandPool, null) ? global::System.IntPtr.Zero : commandPool.__Instance;
        var __ret = __Internal.VkResetCommandPool(__arg0, __arg1, flags);
        return __ret;
    }

    public static global::VkResult VkAllocateCommandBuffers(global::VkDeviceT device, global::VkCommandBufferAllocateInfo pAllocateInfo, global::VkCommandBufferT pCommandBuffers)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pAllocateInfo, null) ? global::System.IntPtr.Zero : pAllocateInfo.__Instance;
        var __arg2 = ReferenceEquals(pCommandBuffers, null) ? global::System.IntPtr.Zero : pCommandBuffers.__Instance;
        var __ret = __Internal.VkAllocateCommandBuffers(__arg0, __arg1, __arg2);
        return __ret;
    }

    public static void VkFreeCommandBuffers(global::VkDeviceT device, global::VkCommandPoolT commandPool, uint commandBufferCount, global::VkCommandBufferT pCommandBuffers)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(commandPool, null) ? global::System.IntPtr.Zero : commandPool.__Instance;
        var __arg3 = ReferenceEquals(pCommandBuffers, null) ? global::System.IntPtr.Zero : pCommandBuffers.__Instance;
        __Internal.VkFreeCommandBuffers(__arg0, __arg1, commandBufferCount, __arg3);
    }

    public static global::VkResult VkBeginCommandBuffer(global::VkCommandBufferT commandBuffer, global::VkCommandBufferBeginInfo pBeginInfo)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __arg1 = ReferenceEquals(pBeginInfo, null) ? global::System.IntPtr.Zero : pBeginInfo.__Instance;
        var __ret = __Internal.VkBeginCommandBuffer(__arg0, __arg1);
        return __ret;
    }

    public static global::VkResult VkEndCommandBuffer(global::VkCommandBufferT commandBuffer)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __ret = __Internal.VkEndCommandBuffer(__arg0);
        return __ret;
    }

    public static global::VkResult VkResetCommandBuffer(global::VkCommandBufferT commandBuffer, uint flags)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __ret = __Internal.VkResetCommandBuffer(__arg0, flags);
        return __ret;
    }

    public static void VkCmdBindPipeline(global::VkCommandBufferT commandBuffer, global::VkPipelineBindPoint pipelineBindPoint, global::VkPipelineT pipeline)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __arg2 = ReferenceEquals(pipeline, null) ? global::System.IntPtr.Zero : pipeline.__Instance;
        __Internal.VkCmdBindPipeline(__arg0, pipelineBindPoint, __arg2);
    }

    public static void VkCmdSetViewport(global::VkCommandBufferT commandBuffer, uint firstViewport, uint viewportCount, global::VkViewport pViewports)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __arg3 = ReferenceEquals(pViewports, null) ? global::System.IntPtr.Zero : pViewports.__Instance;
        __Internal.VkCmdSetViewport(__arg0, firstViewport, viewportCount, __arg3);
    }

    public static void VkCmdSetScissor(global::VkCommandBufferT commandBuffer, uint firstScissor, uint scissorCount, global::VkRect2D pScissors)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __arg3 = ReferenceEquals(pScissors, null) ? global::System.IntPtr.Zero : pScissors.__Instance;
        __Internal.VkCmdSetScissor(__arg0, firstScissor, scissorCount, __arg3);
    }

    public static void VkCmdSetLineWidth(global::VkCommandBufferT commandBuffer, float lineWidth)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        __Internal.VkCmdSetLineWidth(__arg0, lineWidth);
    }

    public static void VkCmdSetDepthBias(global::VkCommandBufferT commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        __Internal.VkCmdSetDepthBias(__arg0, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
    }

    public static void VkCmdSetBlendConstants(global::VkCommandBufferT commandBuffer, float[] blendConstants)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        if (blendConstants == null || blendConstants.Length != 4)
            throw new ArgumentOutOfRangeException("blendConstants", "The dimensions of the provided array don't match the required size.");
        __Internal.VkCmdSetBlendConstants(__arg0, blendConstants);
    }

    public static void VkCmdSetDepthBounds(global::VkCommandBufferT commandBuffer, float minDepthBounds, float maxDepthBounds)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        __Internal.VkCmdSetDepthBounds(__arg0, minDepthBounds, maxDepthBounds);
    }

    public static void VkCmdSetStencilCompareMask(global::VkCommandBufferT commandBuffer, uint faceMask, uint compareMask)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        __Internal.VkCmdSetStencilCompareMask(__arg0, faceMask, compareMask);
    }

    public static void VkCmdSetStencilWriteMask(global::VkCommandBufferT commandBuffer, uint faceMask, uint writeMask)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        __Internal.VkCmdSetStencilWriteMask(__arg0, faceMask, writeMask);
    }

    public static void VkCmdSetStencilReference(global::VkCommandBufferT commandBuffer, uint faceMask, uint reference)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        __Internal.VkCmdSetStencilReference(__arg0, faceMask, reference);
    }

    public static void VkCmdBindDescriptorSets(global::VkCommandBufferT commandBuffer, global::VkPipelineBindPoint pipelineBindPoint, global::VkPipelineLayoutT layout, uint firstSet, uint descriptorSetCount, global::VkDescriptorSetT pDescriptorSets, uint dynamicOffsetCount, ref uint pDynamicOffsets)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __arg2 = ReferenceEquals(layout, null) ? global::System.IntPtr.Zero : layout.__Instance;
        var __arg5 = ReferenceEquals(pDescriptorSets, null) ? global::System.IntPtr.Zero : pDescriptorSets.__Instance;
        fixed (uint* __refParamPtr7 = &pDynamicOffsets)
        {
            var __arg7 = __refParamPtr7;
            __Internal.VkCmdBindDescriptorSets(__arg0, pipelineBindPoint, __arg2, firstSet, descriptorSetCount, __arg5, dynamicOffsetCount, __arg7);
        }
    }

    public static void VkCmdBindIndexBuffer(global::VkCommandBufferT commandBuffer, global::VkBufferT buffer, ulong offset, global::VkIndexType indexType)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __arg1 = ReferenceEquals(buffer, null) ? global::System.IntPtr.Zero : buffer.__Instance;
        __Internal.VkCmdBindIndexBuffer(__arg0, __arg1, offset, indexType);
    }

    public static void VkCmdBindVertexBuffers(global::VkCommandBufferT commandBuffer, uint firstBinding, uint bindingCount, global::VkBufferT pBuffers, ref ulong pOffsets)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __arg3 = ReferenceEquals(pBuffers, null) ? global::System.IntPtr.Zero : pBuffers.__Instance;
        fixed (ulong* __refParamPtr4 = &pOffsets)
        {
            var __arg4 = __refParamPtr4;
            __Internal.VkCmdBindVertexBuffers(__arg0, firstBinding, bindingCount, __arg3, __arg4);
        }
    }

    public static void VkCmdDraw(global::VkCommandBufferT commandBuffer, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        __Internal.VkCmdDraw(__arg0, vertexCount, instanceCount, firstVertex, firstInstance);
    }

    public static void VkCmdDrawIndexed(global::VkCommandBufferT commandBuffer, uint indexCount, uint instanceCount, uint firstIndex, int vertexOffset, uint firstInstance)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        __Internal.VkCmdDrawIndexed(__arg0, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
    }

    public static void VkCmdDrawIndirect(global::VkCommandBufferT commandBuffer, global::VkBufferT buffer, ulong offset, uint drawCount, uint stride)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __arg1 = ReferenceEquals(buffer, null) ? global::System.IntPtr.Zero : buffer.__Instance;
        __Internal.VkCmdDrawIndirect(__arg0, __arg1, offset, drawCount, stride);
    }

    public static void VkCmdDrawIndexedIndirect(global::VkCommandBufferT commandBuffer, global::VkBufferT buffer, ulong offset, uint drawCount, uint stride)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __arg1 = ReferenceEquals(buffer, null) ? global::System.IntPtr.Zero : buffer.__Instance;
        __Internal.VkCmdDrawIndexedIndirect(__arg0, __arg1, offset, drawCount, stride);
    }

    public static void VkCmdDispatch(global::VkCommandBufferT commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        __Internal.VkCmdDispatch(__arg0, groupCountX, groupCountY, groupCountZ);
    }

    public static void VkCmdDispatchIndirect(global::VkCommandBufferT commandBuffer, global::VkBufferT buffer, ulong offset)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __arg1 = ReferenceEquals(buffer, null) ? global::System.IntPtr.Zero : buffer.__Instance;
        __Internal.VkCmdDispatchIndirect(__arg0, __arg1, offset);
    }

    public static void VkCmdCopyBuffer(global::VkCommandBufferT commandBuffer, global::VkBufferT srcBuffer, global::VkBufferT dstBuffer, uint regionCount, global::VkBufferCopy pRegions)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __arg1 = ReferenceEquals(srcBuffer, null) ? global::System.IntPtr.Zero : srcBuffer.__Instance;
        var __arg2 = ReferenceEquals(dstBuffer, null) ? global::System.IntPtr.Zero : dstBuffer.__Instance;
        var __arg4 = ReferenceEquals(pRegions, null) ? global::System.IntPtr.Zero : pRegions.__Instance;
        __Internal.VkCmdCopyBuffer(__arg0, __arg1, __arg2, regionCount, __arg4);
    }

    public static void VkCmdCopyImage(global::VkCommandBufferT commandBuffer, global::VkImageT srcImage, global::VkImageLayout srcImageLayout, global::VkImageT dstImage, global::VkImageLayout dstImageLayout, uint regionCount, global::VkImageCopy pRegions)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __arg1 = ReferenceEquals(srcImage, null) ? global::System.IntPtr.Zero : srcImage.__Instance;
        var __arg3 = ReferenceEquals(dstImage, null) ? global::System.IntPtr.Zero : dstImage.__Instance;
        var __arg6 = ReferenceEquals(pRegions, null) ? global::System.IntPtr.Zero : pRegions.__Instance;
        __Internal.VkCmdCopyImage(__arg0, __arg1, srcImageLayout, __arg3, dstImageLayout, regionCount, __arg6);
    }

    public static void VkCmdBlitImage(global::VkCommandBufferT commandBuffer, global::VkImageT srcImage, global::VkImageLayout srcImageLayout, global::VkImageT dstImage, global::VkImageLayout dstImageLayout, uint regionCount, global::VkImageBlit pRegions, global::VkFilter filter)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __arg1 = ReferenceEquals(srcImage, null) ? global::System.IntPtr.Zero : srcImage.__Instance;
        var __arg3 = ReferenceEquals(dstImage, null) ? global::System.IntPtr.Zero : dstImage.__Instance;
        var __arg6 = ReferenceEquals(pRegions, null) ? global::System.IntPtr.Zero : pRegions.__Instance;
        __Internal.VkCmdBlitImage(__arg0, __arg1, srcImageLayout, __arg3, dstImageLayout, regionCount, __arg6, filter);
    }

    public static void VkCmdCopyBufferToImage(global::VkCommandBufferT commandBuffer, global::VkBufferT srcBuffer, global::VkImageT dstImage, global::VkImageLayout dstImageLayout, uint regionCount, global::VkBufferImageCopy pRegions)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __arg1 = ReferenceEquals(srcBuffer, null) ? global::System.IntPtr.Zero : srcBuffer.__Instance;
        var __arg2 = ReferenceEquals(dstImage, null) ? global::System.IntPtr.Zero : dstImage.__Instance;
        var __arg5 = ReferenceEquals(pRegions, null) ? global::System.IntPtr.Zero : pRegions.__Instance;
        __Internal.VkCmdCopyBufferToImage(__arg0, __arg1, __arg2, dstImageLayout, regionCount, __arg5);
    }

    public static void VkCmdCopyImageToBuffer(global::VkCommandBufferT commandBuffer, global::VkImageT srcImage, global::VkImageLayout srcImageLayout, global::VkBufferT dstBuffer, uint regionCount, global::VkBufferImageCopy pRegions)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __arg1 = ReferenceEquals(srcImage, null) ? global::System.IntPtr.Zero : srcImage.__Instance;
        var __arg3 = ReferenceEquals(dstBuffer, null) ? global::System.IntPtr.Zero : dstBuffer.__Instance;
        var __arg5 = ReferenceEquals(pRegions, null) ? global::System.IntPtr.Zero : pRegions.__Instance;
        __Internal.VkCmdCopyImageToBuffer(__arg0, __arg1, srcImageLayout, __arg3, regionCount, __arg5);
    }

    public static void VkCmdUpdateBuffer(global::VkCommandBufferT commandBuffer, global::VkBufferT dstBuffer, ulong dstOffset, ulong dataSize, global::System.IntPtr pData)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __arg1 = ReferenceEquals(dstBuffer, null) ? global::System.IntPtr.Zero : dstBuffer.__Instance;
        __Internal.VkCmdUpdateBuffer(__arg0, __arg1, dstOffset, dataSize, pData);
    }

    public static void VkCmdFillBuffer(global::VkCommandBufferT commandBuffer, global::VkBufferT dstBuffer, ulong dstOffset, ulong size, uint data)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __arg1 = ReferenceEquals(dstBuffer, null) ? global::System.IntPtr.Zero : dstBuffer.__Instance;
        __Internal.VkCmdFillBuffer(__arg0, __arg1, dstOffset, size, data);
    }

    public static void VkCmdClearColorImage(global::VkCommandBufferT commandBuffer, global::VkImageT image, global::VkImageLayout imageLayout, global::VkClearColorValue pColor, uint rangeCount, global::VkImageSubresourceRange pRanges)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __arg1 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
        var ____arg3 = pColor.__Instance;
        var __arg3 = new global::System.IntPtr(&____arg3);
        var __arg5 = ReferenceEquals(pRanges, null) ? global::System.IntPtr.Zero : pRanges.__Instance;
        __Internal.VkCmdClearColorImage(__arg0, __arg1, imageLayout, __arg3, rangeCount, __arg5);
    }

    public static void VkCmdClearDepthStencilImage(global::VkCommandBufferT commandBuffer, global::VkImageT image, global::VkImageLayout imageLayout, global::VkClearDepthStencilValue pDepthStencil, uint rangeCount, global::VkImageSubresourceRange pRanges)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __arg1 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
        var __arg3 = ReferenceEquals(pDepthStencil, null) ? global::System.IntPtr.Zero : pDepthStencil.__Instance;
        var __arg5 = ReferenceEquals(pRanges, null) ? global::System.IntPtr.Zero : pRanges.__Instance;
        __Internal.VkCmdClearDepthStencilImage(__arg0, __arg1, imageLayout, __arg3, rangeCount, __arg5);
    }

    public static void VkCmdClearAttachments(global::VkCommandBufferT commandBuffer, uint attachmentCount, global::VkClearAttachment pAttachments, uint rectCount, global::VkClearRect pRects)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __arg2 = ReferenceEquals(pAttachments, null) ? global::System.IntPtr.Zero : pAttachments.__Instance;
        var __arg4 = ReferenceEquals(pRects, null) ? global::System.IntPtr.Zero : pRects.__Instance;
        __Internal.VkCmdClearAttachments(__arg0, attachmentCount, __arg2, rectCount, __arg4);
    }

    public static void VkCmdResolveImage(global::VkCommandBufferT commandBuffer, global::VkImageT srcImage, global::VkImageLayout srcImageLayout, global::VkImageT dstImage, global::VkImageLayout dstImageLayout, uint regionCount, global::VkImageResolve pRegions)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __arg1 = ReferenceEquals(srcImage, null) ? global::System.IntPtr.Zero : srcImage.__Instance;
        var __arg3 = ReferenceEquals(dstImage, null) ? global::System.IntPtr.Zero : dstImage.__Instance;
        var __arg6 = ReferenceEquals(pRegions, null) ? global::System.IntPtr.Zero : pRegions.__Instance;
        __Internal.VkCmdResolveImage(__arg0, __arg1, srcImageLayout, __arg3, dstImageLayout, regionCount, __arg6);
    }

    public static void VkCmdSetEvent(global::VkCommandBufferT commandBuffer, global::VkEventT @event, uint stageMask)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __arg1 = ReferenceEquals(@event, null) ? global::System.IntPtr.Zero : @event.__Instance;
        __Internal.VkCmdSetEvent(__arg0, __arg1, stageMask);
    }

    public static void VkCmdResetEvent(global::VkCommandBufferT commandBuffer, global::VkEventT @event, uint stageMask)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __arg1 = ReferenceEquals(@event, null) ? global::System.IntPtr.Zero : @event.__Instance;
        __Internal.VkCmdResetEvent(__arg0, __arg1, stageMask);
    }

    public static void VkCmdWaitEvents(global::VkCommandBufferT commandBuffer, uint eventCount, global::VkEventT pEvents, uint srcStageMask, uint dstStageMask, uint memoryBarrierCount, global::VkMemoryBarrier pMemoryBarriers, uint bufferMemoryBarrierCount, global::VkBufferMemoryBarrier pBufferMemoryBarriers, uint imageMemoryBarrierCount, global::VkImageMemoryBarrier pImageMemoryBarriers)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __arg2 = ReferenceEquals(pEvents, null) ? global::System.IntPtr.Zero : pEvents.__Instance;
        var __arg6 = ReferenceEquals(pMemoryBarriers, null) ? global::System.IntPtr.Zero : pMemoryBarriers.__Instance;
        var __arg8 = ReferenceEquals(pBufferMemoryBarriers, null) ? global::System.IntPtr.Zero : pBufferMemoryBarriers.__Instance;
        var __arg10 = ReferenceEquals(pImageMemoryBarriers, null) ? global::System.IntPtr.Zero : pImageMemoryBarriers.__Instance;
        __Internal.VkCmdWaitEvents(__arg0, eventCount, __arg2, srcStageMask, dstStageMask, memoryBarrierCount, __arg6, bufferMemoryBarrierCount, __arg8, imageMemoryBarrierCount, __arg10);
    }

    public static void VkCmdPipelineBarrier(global::VkCommandBufferT commandBuffer, uint srcStageMask, uint dstStageMask, uint dependencyFlags, uint memoryBarrierCount, global::VkMemoryBarrier pMemoryBarriers, uint bufferMemoryBarrierCount, global::VkBufferMemoryBarrier pBufferMemoryBarriers, uint imageMemoryBarrierCount, global::VkImageMemoryBarrier pImageMemoryBarriers)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __arg5 = ReferenceEquals(pMemoryBarriers, null) ? global::System.IntPtr.Zero : pMemoryBarriers.__Instance;
        var __arg7 = ReferenceEquals(pBufferMemoryBarriers, null) ? global::System.IntPtr.Zero : pBufferMemoryBarriers.__Instance;
        var __arg9 = ReferenceEquals(pImageMemoryBarriers, null) ? global::System.IntPtr.Zero : pImageMemoryBarriers.__Instance;
        __Internal.VkCmdPipelineBarrier(__arg0, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, __arg5, bufferMemoryBarrierCount, __arg7, imageMemoryBarrierCount, __arg9);
    }

    public static void VkCmdBeginQuery(global::VkCommandBufferT commandBuffer, global::VkQueryPoolT queryPool, uint query, uint flags)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __arg1 = ReferenceEquals(queryPool, null) ? global::System.IntPtr.Zero : queryPool.__Instance;
        __Internal.VkCmdBeginQuery(__arg0, __arg1, query, flags);
    }

    public static void VkCmdEndQuery(global::VkCommandBufferT commandBuffer, global::VkQueryPoolT queryPool, uint query)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __arg1 = ReferenceEquals(queryPool, null) ? global::System.IntPtr.Zero : queryPool.__Instance;
        __Internal.VkCmdEndQuery(__arg0, __arg1, query);
    }

    public static void VkCmdResetQueryPool(global::VkCommandBufferT commandBuffer, global::VkQueryPoolT queryPool, uint firstQuery, uint queryCount)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __arg1 = ReferenceEquals(queryPool, null) ? global::System.IntPtr.Zero : queryPool.__Instance;
        __Internal.VkCmdResetQueryPool(__arg0, __arg1, firstQuery, queryCount);
    }

    public static void VkCmdWriteTimestamp(global::VkCommandBufferT commandBuffer, global::VkPipelineStageFlagBits pipelineStage, global::VkQueryPoolT queryPool, uint query)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __arg2 = ReferenceEquals(queryPool, null) ? global::System.IntPtr.Zero : queryPool.__Instance;
        __Internal.VkCmdWriteTimestamp(__arg0, pipelineStage, __arg2, query);
    }

    public static void VkCmdCopyQueryPoolResults(global::VkCommandBufferT commandBuffer, global::VkQueryPoolT queryPool, uint firstQuery, uint queryCount, global::VkBufferT dstBuffer, ulong dstOffset, ulong stride, uint flags)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __arg1 = ReferenceEquals(queryPool, null) ? global::System.IntPtr.Zero : queryPool.__Instance;
        var __arg4 = ReferenceEquals(dstBuffer, null) ? global::System.IntPtr.Zero : dstBuffer.__Instance;
        __Internal.VkCmdCopyQueryPoolResults(__arg0, __arg1, firstQuery, queryCount, __arg4, dstOffset, stride, flags);
    }

    public static void VkCmdPushConstants(global::VkCommandBufferT commandBuffer, global::VkPipelineLayoutT layout, uint stageFlags, uint offset, uint size, global::System.IntPtr pValues)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __arg1 = ReferenceEquals(layout, null) ? global::System.IntPtr.Zero : layout.__Instance;
        __Internal.VkCmdPushConstants(__arg0, __arg1, stageFlags, offset, size, pValues);
    }

    public static void VkCmdBeginRenderPass(global::VkCommandBufferT commandBuffer, global::VkRenderPassBeginInfo pRenderPassBegin, global::VkSubpassContents contents)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __arg1 = ReferenceEquals(pRenderPassBegin, null) ? global::System.IntPtr.Zero : pRenderPassBegin.__Instance;
        __Internal.VkCmdBeginRenderPass(__arg0, __arg1, contents);
    }

    public static void VkCmdNextSubpass(global::VkCommandBufferT commandBuffer, global::VkSubpassContents contents)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        __Internal.VkCmdNextSubpass(__arg0, contents);
    }

    public static void VkCmdEndRenderPass(global::VkCommandBufferT commandBuffer)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        __Internal.VkCmdEndRenderPass(__arg0);
    }

    public static void VkCmdExecuteCommands(global::VkCommandBufferT commandBuffer, uint commandBufferCount, global::VkCommandBufferT pCommandBuffers)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        var __arg2 = ReferenceEquals(pCommandBuffers, null) ? global::System.IntPtr.Zero : pCommandBuffers.__Instance;
        __Internal.VkCmdExecuteCommands(__arg0, commandBufferCount, __arg2);
    }

    public static global::VkResult VkEnumerateInstanceVersion(ref uint pApiVersion)
    {
        fixed (uint* __refParamPtr0 = &pApiVersion)
        {
            var __arg0 = __refParamPtr0;
            var __ret = __Internal.VkEnumerateInstanceVersion(__arg0);
            return __ret;
        }
    }

    public static global::VkResult VkBindBufferMemory2(global::VkDeviceT device, uint bindInfoCount, global::VkBindBufferMemoryInfo pBindInfos)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg2 = ReferenceEquals(pBindInfos, null) ? global::System.IntPtr.Zero : pBindInfos.__Instance;
        var __ret = __Internal.VkBindBufferMemory2(__arg0, bindInfoCount, __arg2);
        return __ret;
    }

    public static global::VkResult VkBindImageMemory2(global::VkDeviceT device, uint bindInfoCount, global::VkBindImageMemoryInfo pBindInfos)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg2 = ReferenceEquals(pBindInfos, null) ? global::System.IntPtr.Zero : pBindInfos.__Instance;
        var __ret = __Internal.VkBindImageMemory2(__arg0, bindInfoCount, __arg2);
        return __ret;
    }

    public static void VkGetDeviceGroupPeerMemoryFeatures(global::VkDeviceT device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, ref uint pPeerMemoryFeatures)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        fixed (uint* __refParamPtr4 = &pPeerMemoryFeatures)
        {
            var __arg4 = __refParamPtr4;
            __Internal.VkGetDeviceGroupPeerMemoryFeatures(__arg0, heapIndex, localDeviceIndex, remoteDeviceIndex, __arg4);
        }
    }

    public static void VkCmdSetDeviceMask(global::VkCommandBufferT commandBuffer, uint deviceMask)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        __Internal.VkCmdSetDeviceMask(__arg0, deviceMask);
    }

    public static void VkCmdDispatchBase(global::VkCommandBufferT commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ)
    {
        var __arg0 = ReferenceEquals(commandBuffer, null) ? global::System.IntPtr.Zero : commandBuffer.__Instance;
        __Internal.VkCmdDispatchBase(__arg0, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
    }

    public static global::VkResult VkEnumeratePhysicalDeviceGroups(global::VkInstanceT instance, ref uint pPhysicalDeviceGroupCount, global::VkPhysicalDeviceGroupProperties pPhysicalDeviceGroupProperties)
    {
        var __arg0 = ReferenceEquals(instance, null) ? global::System.IntPtr.Zero : instance.__Instance;
        fixed (uint* __refParamPtr1 = &pPhysicalDeviceGroupCount)
        {
            var __arg1 = __refParamPtr1;
            var __arg2 = ReferenceEquals(pPhysicalDeviceGroupProperties, null) ? global::System.IntPtr.Zero : pPhysicalDeviceGroupProperties.__Instance;
            var __ret = __Internal.VkEnumeratePhysicalDeviceGroups(__arg0, __arg1, __arg2);
            return __ret;
        }
    }

    public static void VkGetImageMemoryRequirements2(global::VkDeviceT device, global::VkImageMemoryRequirementsInfo2 pInfo, global::VkMemoryRequirements2 pMemoryRequirements)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pInfo, null) ? global::System.IntPtr.Zero : pInfo.__Instance;
        var __arg2 = ReferenceEquals(pMemoryRequirements, null) ? global::System.IntPtr.Zero : pMemoryRequirements.__Instance;
        __Internal.VkGetImageMemoryRequirements2(__arg0, __arg1, __arg2);
    }

    public static void VkGetBufferMemoryRequirements2(global::VkDeviceT device, global::VkBufferMemoryRequirementsInfo2 pInfo, global::VkMemoryRequirements2 pMemoryRequirements)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pInfo, null) ? global::System.IntPtr.Zero : pInfo.__Instance;
        var __arg2 = ReferenceEquals(pMemoryRequirements, null) ? global::System.IntPtr.Zero : pMemoryRequirements.__Instance;
        __Internal.VkGetBufferMemoryRequirements2(__arg0, __arg1, __arg2);
    }

    public static void VkGetPhysicalDeviceFeatures2(global::VkPhysicalDeviceT physicalDevice, global::VkPhysicalDeviceFeatures2 pFeatures)
    {
        var __arg0 = ReferenceEquals(physicalDevice, null) ? global::System.IntPtr.Zero : physicalDevice.__Instance;
        var __arg1 = ReferenceEquals(pFeatures, null) ? global::System.IntPtr.Zero : pFeatures.__Instance;
        __Internal.VkGetPhysicalDeviceFeatures2(__arg0, __arg1);
    }

    public static void VkGetPhysicalDeviceProperties2(global::VkPhysicalDeviceT physicalDevice, global::VkPhysicalDeviceProperties2 pProperties)
    {
        var __arg0 = ReferenceEquals(physicalDevice, null) ? global::System.IntPtr.Zero : physicalDevice.__Instance;
        var __arg1 = ReferenceEquals(pProperties, null) ? global::System.IntPtr.Zero : pProperties.__Instance;
        __Internal.VkGetPhysicalDeviceProperties2(__arg0, __arg1);
    }

    public static void VkGetPhysicalDeviceFormatProperties2(global::VkPhysicalDeviceT physicalDevice, global::VkFormat format, global::VkFormatProperties2 pFormatProperties)
    {
        var __arg0 = ReferenceEquals(physicalDevice, null) ? global::System.IntPtr.Zero : physicalDevice.__Instance;
        var __arg2 = ReferenceEquals(pFormatProperties, null) ? global::System.IntPtr.Zero : pFormatProperties.__Instance;
        __Internal.VkGetPhysicalDeviceFormatProperties2(__arg0, format, __arg2);
    }

    public static void VkGetPhysicalDeviceQueueFamilyProperties2(global::VkPhysicalDeviceT physicalDevice, ref uint pQueueFamilyPropertyCount, global::VkQueueFamilyProperties2 pQueueFamilyProperties)
    {
        var __arg0 = ReferenceEquals(physicalDevice, null) ? global::System.IntPtr.Zero : physicalDevice.__Instance;
        fixed (uint* __refParamPtr1 = &pQueueFamilyPropertyCount)
        {
            var __arg1 = __refParamPtr1;
            var __arg2 = ReferenceEquals(pQueueFamilyProperties, null) ? global::System.IntPtr.Zero : pQueueFamilyProperties.__Instance;
            __Internal.VkGetPhysicalDeviceQueueFamilyProperties2(__arg0, __arg1, __arg2);
        }
    }

    public static void VkGetPhysicalDeviceMemoryProperties2(global::VkPhysicalDeviceT physicalDevice, global::VkPhysicalDeviceMemoryProperties2 pMemoryProperties)
    {
        var __arg0 = ReferenceEquals(physicalDevice, null) ? global::System.IntPtr.Zero : physicalDevice.__Instance;
        var __arg1 = ReferenceEquals(pMemoryProperties, null) ? global::System.IntPtr.Zero : pMemoryProperties.__Instance;
        __Internal.VkGetPhysicalDeviceMemoryProperties2(__arg0, __arg1);
    }

    public static void VkGetPhysicalDeviceSparseImageFormatProperties2(global::VkPhysicalDeviceT physicalDevice, global::VkPhysicalDeviceSparseImageFormatInfo2 pFormatInfo, ref uint pPropertyCount, global::VkSparseImageFormatProperties2 pProperties)
    {
        var __arg0 = ReferenceEquals(physicalDevice, null) ? global::System.IntPtr.Zero : physicalDevice.__Instance;
        var __arg1 = ReferenceEquals(pFormatInfo, null) ? global::System.IntPtr.Zero : pFormatInfo.__Instance;
        fixed (uint* __refParamPtr2 = &pPropertyCount)
        {
            var __arg2 = __refParamPtr2;
            var __arg3 = ReferenceEquals(pProperties, null) ? global::System.IntPtr.Zero : pProperties.__Instance;
            __Internal.VkGetPhysicalDeviceSparseImageFormatProperties2(__arg0, __arg1, __arg2, __arg3);
        }
    }

    public static void VkTrimCommandPool(global::VkDeviceT device, global::VkCommandPoolT commandPool, uint flags)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(commandPool, null) ? global::System.IntPtr.Zero : commandPool.__Instance;
        __Internal.VkTrimCommandPool(__arg0, __arg1, flags);
    }

    public static void VkGetDeviceQueue2(global::VkDeviceT device, global::VkDeviceQueueInfo2 pQueueInfo, global::VkQueueT pQueue)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pQueueInfo, null) ? global::System.IntPtr.Zero : pQueueInfo.__Instance;
        var __arg2 = ReferenceEquals(pQueue, null) ? global::System.IntPtr.Zero : pQueue.__Instance;
        __Internal.VkGetDeviceQueue2(__arg0, __arg1, __arg2);
    }

    public static global::VkResult VkCreateSamplerYcbcrConversion(global::VkDeviceT device, global::VkSamplerYcbcrConversionCreateInfo pCreateInfo, global::VkAllocationCallbacks pAllocator, global::VkSamplerYcbcrConversionT pYcbcrConversion)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pCreateInfo, null) ? global::System.IntPtr.Zero : pCreateInfo.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        var __arg3 = ReferenceEquals(pYcbcrConversion, null) ? global::System.IntPtr.Zero : pYcbcrConversion.__Instance;
        var __ret = __Internal.VkCreateSamplerYcbcrConversion(__arg0, __arg1, __arg2, __arg3);
        return __ret;
    }

    public static void VkDestroySamplerYcbcrConversion(global::VkDeviceT device, global::VkSamplerYcbcrConversionT ycbcrConversion, global::VkAllocationCallbacks pAllocator)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(ycbcrConversion, null) ? global::System.IntPtr.Zero : ycbcrConversion.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        __Internal.VkDestroySamplerYcbcrConversion(__arg0, __arg1, __arg2);
    }

    public static global::VkResult VkCreateDescriptorUpdateTemplate(global::VkDeviceT device, global::VkDescriptorUpdateTemplateCreateInfo pCreateInfo, global::VkAllocationCallbacks pAllocator, global::VkDescriptorUpdateTemplateT pDescriptorUpdateTemplate)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pCreateInfo, null) ? global::System.IntPtr.Zero : pCreateInfo.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        var __arg3 = ReferenceEquals(pDescriptorUpdateTemplate, null) ? global::System.IntPtr.Zero : pDescriptorUpdateTemplate.__Instance;
        var __ret = __Internal.VkCreateDescriptorUpdateTemplate(__arg0, __arg1, __arg2, __arg3);
        return __ret;
    }

    public static void VkDestroyDescriptorUpdateTemplate(global::VkDeviceT device, global::VkDescriptorUpdateTemplateT descriptorUpdateTemplate, global::VkAllocationCallbacks pAllocator)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(descriptorUpdateTemplate, null) ? global::System.IntPtr.Zero : descriptorUpdateTemplate.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        __Internal.VkDestroyDescriptorUpdateTemplate(__arg0, __arg1, __arg2);
    }

    public static void VkUpdateDescriptorSetWithTemplate(global::VkDeviceT device, global::VkDescriptorSetT descriptorSet, global::VkDescriptorUpdateTemplateT descriptorUpdateTemplate, global::System.IntPtr pData)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(descriptorSet, null) ? global::System.IntPtr.Zero : descriptorSet.__Instance;
        var __arg2 = ReferenceEquals(descriptorUpdateTemplate, null) ? global::System.IntPtr.Zero : descriptorUpdateTemplate.__Instance;
        __Internal.VkUpdateDescriptorSetWithTemplate(__arg0, __arg1, __arg2, pData);
    }

    public static void VkGetPhysicalDeviceExternalBufferProperties(global::VkPhysicalDeviceT physicalDevice, global::VkPhysicalDeviceExternalBufferInfo pExternalBufferInfo, global::VkExternalBufferProperties pExternalBufferProperties)
    {
        var __arg0 = ReferenceEquals(physicalDevice, null) ? global::System.IntPtr.Zero : physicalDevice.__Instance;
        var __arg1 = ReferenceEquals(pExternalBufferInfo, null) ? global::System.IntPtr.Zero : pExternalBufferInfo.__Instance;
        var __arg2 = ReferenceEquals(pExternalBufferProperties, null) ? global::System.IntPtr.Zero : pExternalBufferProperties.__Instance;
        __Internal.VkGetPhysicalDeviceExternalBufferProperties(__arg0, __arg1, __arg2);
    }

    public static void VkGetPhysicalDeviceExternalFenceProperties(global::VkPhysicalDeviceT physicalDevice, global::VkPhysicalDeviceExternalFenceInfo pExternalFenceInfo, global::VkExternalFenceProperties pExternalFenceProperties)
    {
        var __arg0 = ReferenceEquals(physicalDevice, null) ? global::System.IntPtr.Zero : physicalDevice.__Instance;
        var __arg1 = ReferenceEquals(pExternalFenceInfo, null) ? global::System.IntPtr.Zero : pExternalFenceInfo.__Instance;
        var __arg2 = ReferenceEquals(pExternalFenceProperties, null) ? global::System.IntPtr.Zero : pExternalFenceProperties.__Instance;
        __Internal.VkGetPhysicalDeviceExternalFenceProperties(__arg0, __arg1, __arg2);
    }

    public static void VkGetPhysicalDeviceExternalSemaphoreProperties(global::VkPhysicalDeviceT physicalDevice, global::VkPhysicalDeviceExternalSemaphoreInfo pExternalSemaphoreInfo, global::VkExternalSemaphoreProperties pExternalSemaphoreProperties)
    {
        var __arg0 = ReferenceEquals(physicalDevice, null) ? global::System.IntPtr.Zero : physicalDevice.__Instance;
        var __arg1 = ReferenceEquals(pExternalSemaphoreInfo, null) ? global::System.IntPtr.Zero : pExternalSemaphoreInfo.__Instance;
        var __arg2 = ReferenceEquals(pExternalSemaphoreProperties, null) ? global::System.IntPtr.Zero : pExternalSemaphoreProperties.__Instance;
        __Internal.VkGetPhysicalDeviceExternalSemaphoreProperties(__arg0, __arg1, __arg2);
    }

    public static void VkGetDescriptorSetLayoutSupport(global::VkDeviceT device, global::VkDescriptorSetLayoutCreateInfo pCreateInfo, global::VkDescriptorSetLayoutSupport pSupport)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pCreateInfo, null) ? global::System.IntPtr.Zero : pCreateInfo.__Instance;
        var __arg2 = ReferenceEquals(pSupport, null) ? global::System.IntPtr.Zero : pSupport.__Instance;
        __Internal.VkGetDescriptorSetLayoutSupport(__arg0, __arg1, __arg2);
    }

    public static void VkDestroySurfaceKHR(global::VkInstanceT instance, global::VkSurfaceKHR_T surface, global::VkAllocationCallbacks pAllocator)
    {
        var __arg0 = ReferenceEquals(instance, null) ? global::System.IntPtr.Zero : instance.__Instance;
        var __arg1 = ReferenceEquals(surface, null) ? global::System.IntPtr.Zero : surface.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        __Internal.VkDestroySurfaceKHR(__arg0, __arg1, __arg2);
    }

    public static global::VkResult VkGetPhysicalDeviceSurfaceSupportKHR(global::VkPhysicalDeviceT physicalDevice, uint queueFamilyIndex, global::VkSurfaceKHR_T surface, ref uint pSupported)
    {
        var __arg0 = ReferenceEquals(physicalDevice, null) ? global::System.IntPtr.Zero : physicalDevice.__Instance;
        var __arg2 = ReferenceEquals(surface, null) ? global::System.IntPtr.Zero : surface.__Instance;
        fixed (uint* __refParamPtr3 = &pSupported)
        {
            var __arg3 = __refParamPtr3;
            var __ret = __Internal.VkGetPhysicalDeviceSurfaceSupportKHR(__arg0, queueFamilyIndex, __arg2, __arg3);
            return __ret;
        }
    }

    public static global::VkResult VkGetPhysicalDeviceSurfaceCapabilitiesKHR(global::VkPhysicalDeviceT physicalDevice, global::VkSurfaceKHR_T surface, global::VkSurfaceCapabilitiesKHR pSurfaceCapabilities)
    {
        var __arg0 = ReferenceEquals(physicalDevice, null) ? global::System.IntPtr.Zero : physicalDevice.__Instance;
        var __arg1 = ReferenceEquals(surface, null) ? global::System.IntPtr.Zero : surface.__Instance;
        var __arg2 = ReferenceEquals(pSurfaceCapabilities, null) ? global::System.IntPtr.Zero : pSurfaceCapabilities.__Instance;
        var __ret = __Internal.VkGetPhysicalDeviceSurfaceCapabilitiesKHR(__arg0, __arg1, __arg2);
        return __ret;
    }

    public static global::VkResult VkGetPhysicalDeviceSurfaceFormatsKHR(global::VkPhysicalDeviceT physicalDevice, global::VkSurfaceKHR_T surface, ref uint pSurfaceFormatCount, global::VkSurfaceFormatKHR pSurfaceFormats)
    {
        var __arg0 = ReferenceEquals(physicalDevice, null) ? global::System.IntPtr.Zero : physicalDevice.__Instance;
        var __arg1 = ReferenceEquals(surface, null) ? global::System.IntPtr.Zero : surface.__Instance;
        fixed (uint* __refParamPtr2 = &pSurfaceFormatCount)
        {
            var __arg2 = __refParamPtr2;
            var __arg3 = ReferenceEquals(pSurfaceFormats, null) ? global::System.IntPtr.Zero : pSurfaceFormats.__Instance;
            var __ret = __Internal.VkGetPhysicalDeviceSurfaceFormatsKHR(__arg0, __arg1, __arg2, __arg3);
            return __ret;
        }
    }

    public static global::VkResult VkGetPhysicalDeviceSurfacePresentModesKHR(global::VkPhysicalDeviceT physicalDevice, global::VkSurfaceKHR_T surface, ref uint pPresentModeCount, global::VkPresentModeKHR* pPresentModes)
    {
        var __arg0 = ReferenceEquals(physicalDevice, null) ? global::System.IntPtr.Zero : physicalDevice.__Instance;
        var __arg1 = ReferenceEquals(surface, null) ? global::System.IntPtr.Zero : surface.__Instance;
        fixed (uint* __refParamPtr2 = &pPresentModeCount)
        {
            var __arg2 = __refParamPtr2;
            var __ret = __Internal.VkGetPhysicalDeviceSurfacePresentModesKHR(__arg0, __arg1, __arg2, pPresentModes);
            return __ret;
        }
    }

    public static global::VkResult VkCreateSwapchainKHR(global::VkDeviceT device, global::VkSwapchainCreateInfoKHR pCreateInfo, global::VkAllocationCallbacks pAllocator, global::VkSwapchainKHR_T pSwapchain)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pCreateInfo, null) ? global::System.IntPtr.Zero : pCreateInfo.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        var __arg3 = ReferenceEquals(pSwapchain, null) ? global::System.IntPtr.Zero : pSwapchain.__Instance;
        var __ret = __Internal.VkCreateSwapchainKHR(__arg0, __arg1, __arg2, __arg3);
        return __ret;
    }

    public static void VkDestroySwapchainKHR(global::VkDeviceT device, global::VkSwapchainKHR_T swapchain, global::VkAllocationCallbacks pAllocator)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(swapchain, null) ? global::System.IntPtr.Zero : swapchain.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        __Internal.VkDestroySwapchainKHR(__arg0, __arg1, __arg2);
    }

    public static global::VkResult VkGetSwapchainImagesKHR(global::VkDeviceT device, global::VkSwapchainKHR_T swapchain, ref uint pSwapchainImageCount, global::VkImageT pSwapchainImages)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(swapchain, null) ? global::System.IntPtr.Zero : swapchain.__Instance;
        fixed (uint* __refParamPtr2 = &pSwapchainImageCount)
        {
            var __arg2 = __refParamPtr2;
            var __arg3 = ReferenceEquals(pSwapchainImages, null) ? global::System.IntPtr.Zero : pSwapchainImages.__Instance;
            var __ret = __Internal.VkGetSwapchainImagesKHR(__arg0, __arg1, __arg2, __arg3);
            return __ret;
        }
    }

    public static global::VkResult VkAcquireNextImageKHR(global::VkDeviceT device, global::VkSwapchainKHR_T swapchain, ulong timeout, global::VkSemaphoreT semaphore, global::VkFenceT fence, ref uint pImageIndex)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(swapchain, null) ? global::System.IntPtr.Zero : swapchain.__Instance;
        var __arg3 = ReferenceEquals(semaphore, null) ? global::System.IntPtr.Zero : semaphore.__Instance;
        var __arg4 = ReferenceEquals(fence, null) ? global::System.IntPtr.Zero : fence.__Instance;
        fixed (uint* __refParamPtr5 = &pImageIndex)
        {
            var __arg5 = __refParamPtr5;
            var __ret = __Internal.VkAcquireNextImageKHR(__arg0, __arg1, timeout, __arg3, __arg4, __arg5);
            return __ret;
        }
    }

    public static global::VkResult VkQueuePresentKHR(global::VkQueueT queue, global::VkPresentInfoKHR pPresentInfo)
    {
        var __arg0 = ReferenceEquals(queue, null) ? global::System.IntPtr.Zero : queue.__Instance;
        var __arg1 = ReferenceEquals(pPresentInfo, null) ? global::System.IntPtr.Zero : pPresentInfo.__Instance;
        var __ret = __Internal.VkQueuePresentKHR(__arg0, __arg1);
        return __ret;
    }

    public static global::VkResult VkGetDeviceGroupPresentCapabilitiesKHR(global::VkDeviceT device, global::VkDeviceGroupPresentCapabilitiesKHR pDeviceGroupPresentCapabilities)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pDeviceGroupPresentCapabilities, null) ? global::System.IntPtr.Zero : pDeviceGroupPresentCapabilities.__Instance;
        var __ret = __Internal.VkGetDeviceGroupPresentCapabilitiesKHR(__arg0, __arg1);
        return __ret;
    }

    public static global::VkResult VkGetDeviceGroupSurfacePresentModesKHR(global::VkDeviceT device, global::VkSurfaceKHR_T surface, ref uint pModes)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(surface, null) ? global::System.IntPtr.Zero : surface.__Instance;
        fixed (uint* __refParamPtr2 = &pModes)
        {
            var __arg2 = __refParamPtr2;
            var __ret = __Internal.VkGetDeviceGroupSurfacePresentModesKHR(__arg0, __arg1, __arg2);
            return __ret;
        }
    }

    public static global::VkResult VkGetPhysicalDevicePresentRectanglesKHR(global::VkPhysicalDeviceT physicalDevice, global::VkSurfaceKHR_T surface, ref uint pRectCount, global::VkRect2D pRects)
    {
        var __arg0 = ReferenceEquals(physicalDevice, null) ? global::System.IntPtr.Zero : physicalDevice.__Instance;
        var __arg1 = ReferenceEquals(surface, null) ? global::System.IntPtr.Zero : surface.__Instance;
        fixed (uint* __refParamPtr2 = &pRectCount)
        {
            var __arg2 = __refParamPtr2;
            var __arg3 = ReferenceEquals(pRects, null) ? global::System.IntPtr.Zero : pRects.__Instance;
            var __ret = __Internal.VkGetPhysicalDevicePresentRectanglesKHR(__arg0, __arg1, __arg2, __arg3);
            return __ret;
        }
    }

    public static global::VkResult VkAcquireNextImage2KHR(global::VkDeviceT device, global::VkAcquireNextImageInfoKHR pAcquireInfo, ref uint pImageIndex)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg1 = ReferenceEquals(pAcquireInfo, null) ? global::System.IntPtr.Zero : pAcquireInfo.__Instance;
        fixed (uint* __refParamPtr2 = &pImageIndex)
        {
            var __arg2 = __refParamPtr2;
            var __ret = __Internal.VkAcquireNextImage2KHR(__arg0, __arg1, __arg2);
            return __ret;
        }
    }

    public static global::VkResult VkGetPhysicalDeviceDisplayPropertiesKHR(global::VkPhysicalDeviceT physicalDevice, ref uint pPropertyCount, global::VkDisplayPropertiesKHR pProperties)
    {
        var __arg0 = ReferenceEquals(physicalDevice, null) ? global::System.IntPtr.Zero : physicalDevice.__Instance;
        fixed (uint* __refParamPtr1 = &pPropertyCount)
        {
            var __arg1 = __refParamPtr1;
            var __arg2 = ReferenceEquals(pProperties, null) ? global::System.IntPtr.Zero : pProperties.__Instance;
            var __ret = __Internal.VkGetPhysicalDeviceDisplayPropertiesKHR(__arg0, __arg1, __arg2);
            return __ret;
        }
    }

    public static global::VkResult VkGetPhysicalDeviceDisplayPlanePropertiesKHR(global::VkPhysicalDeviceT physicalDevice, ref uint pPropertyCount, global::VkDisplayPlanePropertiesKHR pProperties)
    {
        var __arg0 = ReferenceEquals(physicalDevice, null) ? global::System.IntPtr.Zero : physicalDevice.__Instance;
        fixed (uint* __refParamPtr1 = &pPropertyCount)
        {
            var __arg1 = __refParamPtr1;
            var __arg2 = ReferenceEquals(pProperties, null) ? global::System.IntPtr.Zero : pProperties.__Instance;
            var __ret = __Internal.VkGetPhysicalDeviceDisplayPlanePropertiesKHR(__arg0, __arg1, __arg2);
            return __ret;
        }
    }

    public static global::VkResult VkGetDisplayPlaneSupportedDisplaysKHR(global::VkPhysicalDeviceT physicalDevice, uint planeIndex, ref uint pDisplayCount, global::VkDisplayKHR_T pDisplays)
    {
        var __arg0 = ReferenceEquals(physicalDevice, null) ? global::System.IntPtr.Zero : physicalDevice.__Instance;
        fixed (uint* __refParamPtr2 = &pDisplayCount)
        {
            var __arg2 = __refParamPtr2;
            var __arg3 = ReferenceEquals(pDisplays, null) ? global::System.IntPtr.Zero : pDisplays.__Instance;
            var __ret = __Internal.VkGetDisplayPlaneSupportedDisplaysKHR(__arg0, planeIndex, __arg2, __arg3);
            return __ret;
        }
    }

    public static global::VkResult VkGetDisplayModePropertiesKHR(global::VkPhysicalDeviceT physicalDevice, global::VkDisplayKHR_T display, ref uint pPropertyCount, global::VkDisplayModePropertiesKHR pProperties)
    {
        var __arg0 = ReferenceEquals(physicalDevice, null) ? global::System.IntPtr.Zero : physicalDevice.__Instance;
        var __arg1 = ReferenceEquals(display, null) ? global::System.IntPtr.Zero : display.__Instance;
        fixed (uint* __refParamPtr2 = &pPropertyCount)
        {
            var __arg2 = __refParamPtr2;
            var __arg3 = ReferenceEquals(pProperties, null) ? global::System.IntPtr.Zero : pProperties.__Instance;
            var __ret = __Internal.VkGetDisplayModePropertiesKHR(__arg0, __arg1, __arg2, __arg3);
            return __ret;
        }
    }

    public static global::VkResult VkCreateDisplayModeKHR(global::VkPhysicalDeviceT physicalDevice, global::VkDisplayKHR_T display, global::VkDisplayModeCreateInfoKHR pCreateInfo, global::VkAllocationCallbacks pAllocator, global::VkDisplayModeKHR_T pMode)
    {
        var __arg0 = ReferenceEquals(physicalDevice, null) ? global::System.IntPtr.Zero : physicalDevice.__Instance;
        var __arg1 = ReferenceEquals(display, null) ? global::System.IntPtr.Zero : display.__Instance;
        var __arg2 = ReferenceEquals(pCreateInfo, null) ? global::System.IntPtr.Zero : pCreateInfo.__Instance;
        var __arg3 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        var __arg4 = ReferenceEquals(pMode, null) ? global::System.IntPtr.Zero : pMode.__Instance;
        var __ret = __Internal.VkCreateDisplayModeKHR(__arg0, __arg1, __arg2, __arg3, __arg4);
        return __ret;
    }

    public static global::VkResult VkGetDisplayPlaneCapabilitiesKHR(global::VkPhysicalDeviceT physicalDevice, global::VkDisplayModeKHR_T mode, uint planeIndex, global::VkDisplayPlaneCapabilitiesKHR pCapabilities)
    {
        var __arg0 = ReferenceEquals(physicalDevice, null) ? global::System.IntPtr.Zero : physicalDevice.__Instance;
        var __arg1 = ReferenceEquals(mode, null) ? global::System.IntPtr.Zero : mode.__Instance;
        var __arg3 = ReferenceEquals(pCapabilities, null) ? global::System.IntPtr.Zero : pCapabilities.__Instance;
        var __ret = __Internal.VkGetDisplayPlaneCapabilitiesKHR(__arg0, __arg1, planeIndex, __arg3);
        return __ret;
    }

    public static global::VkResult VkCreateDisplayPlaneSurfaceKHR(global::VkInstanceT instance, global::VkDisplaySurfaceCreateInfoKHR pCreateInfo, global::VkAllocationCallbacks pAllocator, global::VkSurfaceKHR_T pSurface)
    {
        var __arg0 = ReferenceEquals(instance, null) ? global::System.IntPtr.Zero : instance.__Instance;
        var __arg1 = ReferenceEquals(pCreateInfo, null) ? global::System.IntPtr.Zero : pCreateInfo.__Instance;
        var __arg2 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        var __arg3 = ReferenceEquals(pSurface, null) ? global::System.IntPtr.Zero : pSurface.__Instance;
        var __ret = __Internal.VkCreateDisplayPlaneSurfaceKHR(__arg0, __arg1, __arg2, __arg3);
        return __ret;
    }

    public static global::VkResult VkCreateSharedSwapchainsKHR(global::VkDeviceT device, uint swapchainCount, global::VkSwapchainCreateInfoKHR pCreateInfos, global::VkAllocationCallbacks pAllocator, global::VkSwapchainKHR_T pSwapchains)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __arg2 = ReferenceEquals(pCreateInfos, null) ? global::System.IntPtr.Zero : pCreateInfos.__Instance;
        var __arg3 = ReferenceEquals(pAllocator, null) ? global::System.IntPtr.Zero : pAllocator.__Instance;
        var __arg4 = ReferenceEquals(pSwapchains, null) ? global::System.IntPtr.Zero : pSwapchains.__Instance;
        var __ret = __Internal.VkCreateSharedSwapchainsKHR(__arg0, swapchainCount, __arg2, __arg3, __arg4);
        return __ret;
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
