// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    /// <summary>A representation of a object this is rendered to a screen. This object is contained in a parent and has children. The screen object has a few values that allow for it to be positioned and scaled, along with other variables that are used when rendering. This class can be extended to create a representation for GUI textures, fonts, etc.</summary>
    public unsafe partial class UiObject : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 224)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vfptr_UiObject;

            [FieldOffset(8)]
            internal global::System.IntPtr m_parent;

            [FieldOffset(16)]
            internal global::System.IntPtr m_children;

            [FieldOffset(24)]
            internal byte m_visible;

            [FieldOffset(32)]
            internal global::System.IntPtr m_rectangle;

            [FieldOffset(40)]
            internal global::System.IntPtr m_scissor;

            [FieldOffset(48)]
            internal global::System.IntPtr m_positionOffset;

            [FieldOffset(56)]
            internal global::System.IntPtr m_screenTransform;

            [FieldOffset(64)]
            internal global::System.IntPtr m_alphaDriver;

            [FieldOffset(72)]
            internal float m_alpha;

            [FieldOffset(80)]
            internal global::System.IntPtr m_scaleDriver;

            [FieldOffset(88)]
            internal float m_scale;

            [FieldOffset(96)]
            internal global::Std.Function.__Internal m_actionLeft;

            [FieldOffset(160)]
            internal global::Std.Function.__Internal m_actionRight;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0UiObject@fl@@QEAA@PEAV01@AEBVUiBound@1@@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, global::System.IntPtr parent, global::System.IntPtr rectangle);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0UiObject@fl@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Update@UiObject@fl@@QEAAXXZ")]
            internal static extern void Update(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?RemoveChild@UiObject@fl@@QEAAXPEAV12@@Z")]
            internal static extern void RemoveChild(global::System.IntPtr instance, global::System.IntPtr child);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetVisible@UiObject@fl@@QEAAXAEB_N@Z")]
            internal static extern void SetVisible(global::System.IntPtr instance, bool* visible);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetAlphaDriver@UiObject@fl@@QEAAXPEAVIDriver@2@@Z")]
            internal static extern void SetAlphaDriver(global::System.IntPtr instance, global::System.IntPtr alphaDriver);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetScaleDriver@UiObject@fl@@QEAAXPEAVIDriver@2@@Z")]
            internal static extern void SetScaleDriver(global::System.IntPtr instance, global::System.IntPtr scaleDriver);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetParent@UiObject@fl@@QEBAPEAV12@XZ")]
            internal static extern global::System.IntPtr GetParent(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetParent@UiObject@fl@@QEAAXPEAV12@@Z")]
            internal static extern void SetParent(global::System.IntPtr instance, global::System.IntPtr parent);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetRectangle@UiObject@fl@@QEBAPEAVUiBound@2@XZ")]
            internal static extern global::System.IntPtr GetRectangle(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetRectangle@UiObject@fl@@QEBAXAEBVUiBound@2@@Z")]
            internal static extern void SetRectangle(global::System.IntPtr instance, global::System.IntPtr rectangle);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetScissor@UiObject@fl@@QEBAPEAVVector4@2@XZ")]
            internal static extern global::System.IntPtr GetScissor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetScissor@UiObject@fl@@QEBAXAEBVVector4@2@@Z")]
            internal static extern void SetScissor(global::System.IntPtr instance, global::System.IntPtr scissor);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetPositionOffset@UiObject@fl@@QEBAPEAVVector2@2@XZ")]
            internal static extern global::System.IntPtr GetPositionOffset(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetPositionOffset@UiObject@fl@@QEBAXAEBVVector2@2@@Z")]
            internal static extern void SetPositionOffset(global::System.IntPtr instance, global::System.IntPtr positionOffset);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?IsVisible@UiObject@fl@@QEBA_NXZ")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsVisible(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetScreenTransform@UiObject@fl@@QEBAPEAVVector4@2@XZ")]
            internal static extern global::System.IntPtr GetScreenTransform(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetAlpha@UiObject@fl@@QEBAMXZ")]
            internal static extern float GetAlpha(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetScale@UiObject@fl@@QEBAMXZ")]
            internal static extern float GetScale(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.UiObject> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.UiObject>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.UiObject __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.UiObject(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.UiObject __CreateInstance(global::FlounderSharp.UiObject.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.UiObject(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.UiObject.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.UiObject.__Internal));
            global::FlounderSharp.UiObject.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private UiObject(global::FlounderSharp.UiObject.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected UiObject(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        /// <summary>Creates a new screen object.</summary>
        /// <param name="parent">The parent screen object.</param>
        /// <param name="rectangle">The rectangle that will represent the bounds of the ui object.</param>
        public UiObject(global::FlounderSharp.UiObject parent, global::FlounderSharp.UiBound rectangle)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.UiObject.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg0 = ReferenceEquals(parent, null) ? global::System.IntPtr.Zero : parent.__Instance;
            if (ReferenceEquals(rectangle, null))
                throw new global::System.ArgumentNullException("rectangle", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = rectangle.__Instance;
            __Internal.ctor((__Instance + __PointerAdjustment), __arg0, __arg1);
            SetupVTables(GetType().FullName == "FlounderSharp.UiObject");
        }

        public UiObject(global::FlounderSharp.UiObject _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.UiObject.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
            SetupVTables(GetType().FullName == "FlounderSharp.UiObject");
        }

        ~UiObject()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.UiObject __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::FlounderSharp.UiObject.__Internal*) __Instance)->vfptr_UiObject = new global::System.IntPtr(__OriginalVTables[0]);
            if (disposing)
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 1 * 8);
                var ___dtorDelegate = (global::FlounderSharp.Delegates.Action_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Action_IntPtr_int));
                ___dtorDelegate((__Instance + __PointerAdjustment), 0);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Updates this screen object and the extended object.</summary>
        public void Update()
        {
            __Internal.Update((__Instance + __PointerAdjustment));
        }

        /// <summary>Updates the implementation.</summary>
        public virtual void UpdateObject()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 8);
            var ___UpdateObjectDelegate = (global::FlounderSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Action_IntPtr));
            ___UpdateObjectDelegate((__Instance + __PointerAdjustment));
        }

        /// <summary>Disowns a child from this screen objects children list.</summary>
        /// <param name="child">The child to disown.</param>
        public void RemoveChild(global::FlounderSharp.UiObject child)
        {
            var __arg0 = ReferenceEquals(child, null) ? global::System.IntPtr.Zero : child.__Instance;
            __Internal.RemoveChild((__Instance + __PointerAdjustment), __arg0);
        }

        public void SetVisible(ref bool visible)
        {
            fixed (bool* __refParamPtr0 = &visible)
            {
                var __arg0 = __refParamPtr0;
                __Internal.SetVisible((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public void SetAlphaDriver(global::FlounderSharp.IDriver alphaDriver)
        {
            var __arg0 = ReferenceEquals(alphaDriver, null) ? global::System.IntPtr.Zero : alphaDriver.__Instance;
            __Internal.SetAlphaDriver((__Instance + __PointerAdjustment), __arg0);
        }

        public void SetScaleDriver(global::FlounderSharp.IDriver scaleDriver)
        {
            var __arg0 = ReferenceEquals(scaleDriver, null) ? global::System.IntPtr.Zero : scaleDriver.__Instance;
            __Internal.SetScaleDriver((__Instance + __PointerAdjustment), __arg0);
        }

        /// <summary>Gets the parent object.</summary>
        /// <param name="parent">The new parent object.</param>
        /// <remarks>Removes this object from the previous parent and attaches it to another parent.</remarks>
        public global::FlounderSharp.UiObject Parent
        {
            get
            {
                var __ret = __Internal.GetParent((__Instance + __PointerAdjustment));
                global::FlounderSharp.UiObject __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.UiObject.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.UiObject) global::FlounderSharp.UiObject.NativeToManagedMap[__ret];
                else global::FlounderSharp.UiObject.NativeToManagedMap[__ret] = __result0 = (global::FlounderSharp.UiObject) global::FlounderSharp.UiObject.__CreateInstance(__ret);
                return __result0;
            }

            set
            {
                var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                __Internal.SetParent((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public global::FlounderSharp.UiBound Rectangle
        {
            get
            {
                var __ret = __Internal.GetRectangle((__Instance + __PointerAdjustment));
                global::FlounderSharp.UiBound __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.UiBound.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.UiBound) global::FlounderSharp.UiBound.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.UiBound.__CreateInstance(__ret);
                return __result0;
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = value.__Instance;
                __Internal.SetRectangle((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public global::FlounderSharp.Vector4 Scissor
        {
            get
            {
                var __ret = __Internal.GetScissor((__Instance + __PointerAdjustment));
                global::FlounderSharp.Vector4 __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Vector4.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Vector4) global::FlounderSharp.Vector4.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.Vector4.__CreateInstance(__ret);
                return __result0;
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = value.__Instance;
                __Internal.SetScissor((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public global::FlounderSharp.Vector2 PositionOffset
        {
            get
            {
                var __ret = __Internal.GetPositionOffset((__Instance + __PointerAdjustment));
                global::FlounderSharp.Vector2 __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Vector2.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Vector2) global::FlounderSharp.Vector2.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.Vector2.__CreateInstance(__ret);
                return __result0;
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = value.__Instance;
                __Internal.SetPositionOffset((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public bool IsVisible
        {
            get
            {
                var __ret = __Internal.IsVisible((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        /// <summary>Gets the ui object screen space transform.</summary>
        public global::FlounderSharp.Vector4 ScreenTransform
        {
            get
            {
                var __ret = __Internal.GetScreenTransform((__Instance + __PointerAdjustment));
                global::FlounderSharp.Vector4 __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Vector4.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Vector4) global::FlounderSharp.Vector4.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.Vector4.__CreateInstance(__ret);
                return __result0;
            }
        }

        public float Alpha
        {
            get
            {
                var __ret = __Internal.GetAlpha((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public float Scale
        {
            get
            {
                var __ret = __Internal.GetScale((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        #region Virtual table interop

        // virtual ~UiObject()
        private static global::FlounderSharp.Delegates.Action_IntPtr_int _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr instance, int delete)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.UiObject) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // void UpdateObject()
        private static global::FlounderSharp.Delegates.Action_IntPtr _UpdateObjectDelegateInstance;

        private static void _UpdateObjectDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.UiObject) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.UpdateObject();
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[2];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _UpdateObjectDelegateInstance += _UpdateObjectDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_UpdateObjectDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(3 * 8);
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(3 * 8);
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = _Thunks[1];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
