// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    /// <summary>A vector like object of the form w + xi + yj + zk, where w, x, y, z are real numbers and i, j, k are imaginary units.</summary>
    public unsafe partial class Quaternion : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::FlounderSharp.Quaternion._.__Internal _;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Quaternion@fl@@QEAA@XZ")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Quaternion@fl@@QEAA@AEBM000@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, float* x, float* y, float* z, float* w);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Quaternion@fl@@QEAA@AEBVVector4@1@@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, global::System.IntPtr source);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Quaternion@fl@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr source);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Quaternion@fl@@QEAA@AEBVMatrix4@1@@Z")]
            internal static extern global::System.IntPtr ctor_2(global::System.IntPtr instance, global::System.IntPtr source);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1Quaternion@fl@@QEAA@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Multiply@Quaternion@fl@@QEBA?AV12@AEBV12@@Z")]
            internal static extern void Multiply(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?MultiplyInverse@Quaternion@fl@@QEBA?AV12@AEBV12@@Z")]
            internal static extern void MultiplyInverse(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Dot@Quaternion@fl@@QEBAMAEBV12@@Z")]
            internal static extern float Dot(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Slerp@Quaternion@fl@@QEAA?AV12@AEBV12@AEBM@Z")]
            internal static extern void Slerp(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other, float* progression);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Scale@Quaternion@fl@@QEBA?AV12@AEBM@Z")]
            internal static extern void Scale(global::System.IntPtr instance, global::System.IntPtr @return, float* scalar);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Negate@Quaternion@fl@@QEBA?AV12@XZ")]
            internal static extern void Negate(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Normalize@Quaternion@fl@@QEBA?AV12@XZ")]
            internal static extern void Normalize(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?ToMatrix@Quaternion@fl@@QEAA?AVMatrix4@2@XZ")]
            internal static extern void ToMatrix(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?ToRotationMatrix@Quaternion@fl@@QEAA?AVMatrix4@2@XZ")]
            internal static extern void ToRotationMatrix(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Write@Quaternion@fl@@QEAAXPEAVLoadedValue@2@@Z")]
            internal static extern void Write(global::System.IntPtr instance, global::System.IntPtr destination);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??8Quaternion@fl@@QEBA_NAEBV01@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??9Quaternion@fl@@QEBA_NAEBV01@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??MQuaternion@fl@@QEBA_NAEBV01@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorLess(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??NQuaternion@fl@@QEBA_NAEBV01@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorLessEqual(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??OQuaternion@fl@@QEBA_NAEBV01@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorGreater(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??PQuaternion@fl@@QEBA_NAEBV01@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorGreaterEqual(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??8Quaternion@fl@@QEBA_NAEBM@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual(global::System.IntPtr instance, float* value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??9Quaternion@fl@@QEBA_NAEBM@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual(global::System.IntPtr instance, float* value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??GQuaternion@fl@@QEAA?AV01@XZ")]
            internal static extern void OperatorMinus(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?ToString@Quaternion@fl@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ")]
            internal static extern void ToString(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Dfl@@YA?AVQuaternion@0@V10@AEBV10@@Z")]
            internal static extern void OperatorStar(global::System.IntPtr @return, global::FlounderSharp.Quaternion.__Internal left, global::System.IntPtr right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Dfl@@YA?AVQuaternion@0@MV10@@Z")]
            internal static extern void OperatorStar(global::System.IntPtr @return, float value, global::FlounderSharp.Quaternion.__Internal left);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetX@Quaternion@fl@@QEBAMXZ")]
            internal static extern float GetX(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetX@Quaternion@fl@@QEAAXAEBM@Z")]
            internal static extern void SetX(global::System.IntPtr instance, float* x);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetY@Quaternion@fl@@QEBAMXZ")]
            internal static extern float GetY(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetY@Quaternion@fl@@QEAAXAEBM@Z")]
            internal static extern void SetY(global::System.IntPtr instance, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetZ@Quaternion@fl@@QEBAMXZ")]
            internal static extern float GetZ(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetZ@Quaternion@fl@@QEAAXAEBM@Z")]
            internal static extern void SetZ(global::System.IntPtr instance, float* z);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetW@Quaternion@fl@@QEBAMXZ")]
            internal static extern float GetW(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetW@Quaternion@fl@@QEAAXAEBM@Z")]
            internal static extern void SetW(global::System.IntPtr instance, float* w);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?LengthSquared@Quaternion@fl@@QEBAMXZ")]
            internal static extern float LengthSquared(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Length@Quaternion@fl@@QEBAMXZ")]
            internal static extern float Length(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?MaxComponent@Quaternion@fl@@QEBAMXZ")]
            internal static extern float MaxComponent(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?MinComponent@Quaternion@fl@@QEBAMXZ")]
            internal static extern float MinComponent(global::System.IntPtr instance);
        }

        public unsafe partial struct _
        {
            [StructLayout(LayoutKind.Explicit, Size = 16)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::FlounderSharp.Quaternion._.__.__Internal __;

                [FieldOffset(0)]
                internal global::FlounderSharp.Quaternion._.__.__Internal __1;
            }

            public unsafe partial class __
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal float m_x;

                    [FieldOffset(4)]
                    internal float m_y;

                    [FieldOffset(8)]
                    internal float m_z;

                    [FieldOffset(12)]
                    internal float m_w;
                }
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.Quaternion> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.Quaternion>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.Quaternion __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Quaternion(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.Quaternion __CreateInstance(global::FlounderSharp.Quaternion.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Quaternion(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.Quaternion.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Quaternion.__Internal));
            global::FlounderSharp.Quaternion.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private Quaternion(global::FlounderSharp.Quaternion.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Quaternion(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        /// <summary>Constructor for Quaternion.</summary>
        public Quaternion()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Quaternion.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor((__Instance + __PointerAdjustment));
        }

        /// <summary>Constructor for Quaternion.</summary>
        /// <param name="x">Start x.</param>
        /// <param name="y">Start y.</param>
        /// <param name="z">Start z.</param>
        /// <param name="w">Start w.</param>
        public Quaternion(ref float x, ref float y, ref float z, ref float w)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Quaternion.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            fixed (float* __refParamPtr0 = &x)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &y)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &z)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (float* __refParamPtr3 = &w)
                        {
                            var __arg3 = __refParamPtr3;
                            __Internal.ctor((__Instance + __PointerAdjustment), __arg0, __arg1, __arg2, __arg3);
                        }
                    }
                }
            }
        }

        /// <summary>Constructor for Quaternion.</summary>
        /// <param name="source">Creates this quaternion out of a existing vector.</param>
        public Quaternion(global::FlounderSharp.Vector4 source)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Quaternion.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(source, null))
                throw new global::System.ArgumentNullException("source", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = source.__Instance;
            __Internal.ctor((__Instance + __PointerAdjustment), __arg0);
        }

        /// <summary>Constructor for Quaternion.</summary>
        /// <param name="source">Creates this vector out of a existing one.</param>
        public Quaternion(global::FlounderSharp.Quaternion source)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Quaternion.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(source, null))
                throw new global::System.ArgumentNullException("source", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = source.__Instance;
            __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
        }

        /// <summary>Constructor for Quaternion.</summary>
        /// <param name="source">Creates this vector out of a existing matrix.</param>
        public Quaternion(global::FlounderSharp.Matrix4 source)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Quaternion.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(source, null))
                throw new global::System.ArgumentNullException("source", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = source.__Instance;
            __Internal.ctor_2((__Instance + __PointerAdjustment), __arg0);
        }

        ~Quaternion()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.Quaternion __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Sets the value of this quaternion to the quaternion product of quaternions left and right (this = left * right). Note that this is safe for aliasing (e.g. this can be left or right).</summary>
        /// <param name="other">The other quaternion.</param>
        public global::FlounderSharp.Quaternion Multiply(global::FlounderSharp.Quaternion other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::FlounderSharp.Quaternion.__Internal();
            __Internal.Multiply((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::FlounderSharp.Quaternion.__CreateInstance(__ret);
        }

        /// <summary>Multiplies quaternion left by the inverse of quaternion right and places the value into this quaternion. The value of both argument quaternions is persevered (this = left * right^-1).</summary>
        /// <param name="other">The other quaternion.</param>
        public global::FlounderSharp.Quaternion MultiplyInverse(global::FlounderSharp.Quaternion other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::FlounderSharp.Quaternion.__Internal();
            __Internal.MultiplyInverse((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::FlounderSharp.Quaternion.__CreateInstance(__ret);
        }

        /// <summary>Calculates the dot product of the this quaternion and another quaternion.</summary>
        /// <param name="other">The other quaternion.</param>
        public float Dot(global::FlounderSharp.Quaternion other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = __Internal.Dot((__Instance + __PointerAdjustment), __arg0);
            return __ret;
        }

        /// <summary>Calculates the slerp between this quaternion and another quaternion, they must be normalized!</summary>
        /// <param name="other">The other quaternion.</param>
        /// <param name="progression">The progression.</param>
        public global::FlounderSharp.Quaternion Slerp(global::FlounderSharp.Quaternion other, ref float progression)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            fixed (float* __refParamPtr1 = &progression)
            {
                var __arg1 = __refParamPtr1;
                var __ret = new global::FlounderSharp.Quaternion.__Internal();
                __Internal.Slerp((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0, __arg1);
                return global::FlounderSharp.Quaternion.__CreateInstance(__ret);
            }
        }

        /// <summary>Scales this quaternion by a scalar.</summary>
        /// <param name="scalar">The scalar value.</param>
        public global::FlounderSharp.Quaternion Scale(ref float scalar)
        {
            fixed (float* __refParamPtr0 = &scalar)
            {
                var __arg0 = __refParamPtr0;
                var __ret = new global::FlounderSharp.Quaternion.__Internal();
                __Internal.Scale((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
                return global::FlounderSharp.Quaternion.__CreateInstance(__ret);
            }
        }

        /// <summary>Negates this quaternion.</summary>
        public global::FlounderSharp.Quaternion Negate()
        {
            var __ret = new global::FlounderSharp.Quaternion.__Internal();
            __Internal.Negate((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return global::FlounderSharp.Quaternion.__CreateInstance(__ret);
        }

        /// <summary>Normalizes this quaternion.</summary>
        public global::FlounderSharp.Quaternion Normalize()
        {
            var __ret = new global::FlounderSharp.Quaternion.__Internal();
            __Internal.Normalize((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return global::FlounderSharp.Quaternion.__CreateInstance(__ret);
        }

        /// <summary>Converts this quaternion to a 4x4 matrix.</summary>
        public global::FlounderSharp.Matrix4 ToMatrix()
        {
            var __ret = new global::FlounderSharp.Matrix4.__Internal();
            __Internal.ToMatrix((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
        }

        /// <summary>Converts this quaternion to a 4x4 matrix representing the exact same rotation as this quaternion. (The rotation is only contained in the top-left 3x3 part, but a 4x4 matrix is returned here for convenience seeing as it will be multiplied with other 4x4 matrices).</summary>
        public global::FlounderSharp.Matrix4 ToRotationMatrix()
        {
            var __ret = new global::FlounderSharp.Matrix4.__Internal();
            __Internal.ToRotationMatrix((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return global::FlounderSharp.Matrix4.__CreateInstance(__ret);
        }

        /// <summary>Saves this quaternion into a loaded value.</summary>
        /// <param name="destination">The destination loaded value.</param>
        public void Write(global::FlounderSharp.LoadedValue destination)
        {
            var __arg0 = ReferenceEquals(destination, null) ? global::System.IntPtr.Zero : destination.__Instance;
            __Internal.Write((__Instance + __PointerAdjustment), __arg0);
        }

        public static bool operator ==(global::FlounderSharp.Quaternion __op, global::FlounderSharp.Quaternion other)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool otherNull = ReferenceEquals(other, null);
            if (__opNull || otherNull)
                return __opNull && otherNull;
            var __arg0 = __op.__Instance;
            var __arg1 = other.__Instance;
            var __ret = __Internal.OperatorEqualEqual(__arg0, __arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as global::FlounderSharp.Quaternion;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(global::FlounderSharp.Quaternion.__Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(global::FlounderSharp.Quaternion __op, global::FlounderSharp.Quaternion other)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool otherNull = ReferenceEquals(other, null);
            if (__opNull || otherNull)
                return !(__opNull && otherNull);
            var __arg0 = __op.__Instance;
            var __arg1 = other.__Instance;
            var __ret = __Internal.OperatorExclaimEqual(__arg0, __arg1);
            return __ret;
        }

        public static bool operator <(global::FlounderSharp.Quaternion __op, global::FlounderSharp.Quaternion other)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = __op.__Instance;
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = other.__Instance;
            var __ret = __Internal.OperatorLess(__arg0, __arg1);
            return __ret;
        }

        public static bool operator <=(global::FlounderSharp.Quaternion __op, global::FlounderSharp.Quaternion other)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = __op.__Instance;
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = other.__Instance;
            var __ret = __Internal.OperatorLessEqual(__arg0, __arg1);
            return __ret;
        }

        public static bool operator >(global::FlounderSharp.Quaternion __op, global::FlounderSharp.Quaternion other)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = __op.__Instance;
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = other.__Instance;
            var __ret = __Internal.OperatorGreater(__arg0, __arg1);
            return __ret;
        }

        public static bool operator >=(global::FlounderSharp.Quaternion __op, global::FlounderSharp.Quaternion other)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = __op.__Instance;
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = other.__Instance;
            var __ret = __Internal.OperatorGreaterEqual(__arg0, __arg1);
            return __ret;
        }

        public static bool operator ==(global::FlounderSharp.Quaternion __op, ref float value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return __opNull && valueNull;
            var __arg0 = __op.__Instance;
            fixed (float* __refParamPtr1 = &value)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.OperatorEqualEqual(__arg0, __arg1);
                return __ret;
            }
        }

        public static bool operator !=(global::FlounderSharp.Quaternion __op, ref float value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return !(__opNull && valueNull);
            var __arg0 = __op.__Instance;
            fixed (float* __refParamPtr1 = &value)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.OperatorExclaimEqual(__arg0, __arg1);
                return __ret;
            }
        }

        public static global::FlounderSharp.Quaternion operator -(global::FlounderSharp.Quaternion __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = __op.__Instance;
            var __ret = new global::FlounderSharp.Quaternion.__Internal();
            __Internal.OperatorMinus(__arg0, new IntPtr(&__ret));
            return global::FlounderSharp.Quaternion.__CreateInstance(__ret);
        }

        public string ToString()
        {
            var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
            __Internal.ToString((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            var __basicStringRet = global::Std.BasicString<char, global::Std.CharTraits<char>, global::Std.Allocator<char>>.__CreateInstance(__ret);
            var __stringRet = global::Std.BasicStringExtensions.CStr(__basicStringRet);
            __basicStringRet.Dispose(false);
            return __stringRet;
        }

        public static implicit operator global::FlounderSharp.Quaternion(global::FlounderSharp.Vector4 source)
        {
            return new global::FlounderSharp.Quaternion(source);
        }

        public static implicit operator global::FlounderSharp.Quaternion(global::FlounderSharp.Matrix4 source)
        {
            return new global::FlounderSharp.Quaternion(source);
        }

        public static global::FlounderSharp.Quaternion operator *(global::FlounderSharp.Quaternion left, global::FlounderSharp.Quaternion right)
        {
            var __arg0 = ReferenceEquals(left, null) ? new global::FlounderSharp.Quaternion.__Internal() : *(global::FlounderSharp.Quaternion.__Internal*) left.__Instance;
            if (ReferenceEquals(right, null))
                throw new global::System.ArgumentNullException("right", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = right.__Instance;
            var __ret = new global::FlounderSharp.Quaternion.__Internal();
            __Internal.OperatorStar(new IntPtr(&__ret), __arg0, __arg1);
            return global::FlounderSharp.Quaternion.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Quaternion operator *(float value, global::FlounderSharp.Quaternion left)
        {
            var __arg1 = ReferenceEquals(left, null) ? new global::FlounderSharp.Quaternion.__Internal() : *(global::FlounderSharp.Quaternion.__Internal*) left.__Instance;
            var __ret = new global::FlounderSharp.Quaternion.__Internal();
            __Internal.OperatorStar(new IntPtr(&__ret), value, __arg1);
            return global::FlounderSharp.Quaternion.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Quaternion ZERO
        {
            get
            {
                var __ptr = (global::FlounderSharp.Quaternion.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Flounder", "_imp_?ZERO@Quaternion@fl@@2V12@B");
                return global::FlounderSharp.Quaternion.__CreateInstance(*__ptr);
            }
        }

        public static global::FlounderSharp.Quaternion ONE
        {
            get
            {
                var __ptr = (global::FlounderSharp.Quaternion.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Flounder", "_imp_?ONE@Quaternion@fl@@2V12@B");
                return global::FlounderSharp.Quaternion.__CreateInstance(*__ptr);
            }
        }

        public static global::FlounderSharp.Quaternion POSITIVE_INFINITY
        {
            get
            {
                var __ptr = (global::FlounderSharp.Quaternion.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Flounder", "_imp_?POSITIVE_INFINITY@Quaternion@fl@@2V12@B");
                return global::FlounderSharp.Quaternion.__CreateInstance(*__ptr);
            }
        }

        public static global::FlounderSharp.Quaternion NEGATIVE_INFINITY
        {
            get
            {
                var __ptr = (global::FlounderSharp.Quaternion.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Flounder", "_imp_?NEGATIVE_INFINITY@Quaternion@fl@@2V12@B");
                return global::FlounderSharp.Quaternion.__CreateInstance(*__ptr);
            }
        }

        public float X
        {
            get
            {
                var __ret = __Internal.GetX((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetX((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public float Y
        {
            get
            {
                var __ret = __Internal.GetY((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetY((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public float Z
        {
            get
            {
                var __ret = __Internal.GetZ((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetZ((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public float W
        {
            get
            {
                var __ret = __Internal.GetW((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetW((__Instance + __PointerAdjustment), __arg0);
            }
        }

        /// <summary>Gets the length squared of this quaternion.</summary>
        public float LengthSquared
        {
            get
            {
                var __ret = __Internal.LengthSquared((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        /// <summary>Gets the length of this quaternion.</summary>
        public float Length
        {
            get
            {
                var __ret = __Internal.Length((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        /// <summary>Gets the maximum value in this quaternion.</summary>
        public float MaxComponent
        {
            get
            {
                var __ret = __Internal.MaxComponent((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        /// <summary>Gets the lowest value in this quaternion.</summary>
        public float MinComponent
        {
            get
            {
                var __ret = __Internal.MinComponent((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
