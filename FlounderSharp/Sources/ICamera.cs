// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    /// <summary>This class is used throughout the engine wherever the camera is involved, so that the engine doesn't rely at all on the camera's implementation.</summary>
    public unsafe abstract partial class ICamera : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vfptr_ICamera;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ICamera@fl@@QEAA@XZ")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ICamera@fl@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1ICamera@fl@@UEAA@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.ICamera> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.ICamera>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.ICamera __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.ICameraInternal(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.ICamera __CreateInstance(global::FlounderSharp.ICamera.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.ICameraInternal(native, skipVTables);
        }

        protected ICamera(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        /// <summary>Creates a new camera.</summary>
        protected ICamera()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.ICamera.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "FlounderSharp.ICamera");
        }

        protected ICamera(global::FlounderSharp.ICamera _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.ICamera.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
            SetupVTables(GetType().FullName == "FlounderSharp.ICamera");
        }

        ~ICamera()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.ICamera __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::FlounderSharp.ICamera.__Internal*) __Instance)->vfptr_ICamera = new global::System.IntPtr(__OriginalVTables[0]);
            if (disposing)
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 1 * 8);
                if (__slot != null)
                {
                    var ___dtorDelegate = (global::FlounderSharp.Delegates.Action_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Action_IntPtr_int));
                    ___dtorDelegate((__Instance + __PointerAdjustment), 0);
                }
                else
                    __Internal.dtor((__Instance + __PointerAdjustment), 0);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Checks inputs and carries out smooth camera movement. Called before every frame.</summary>
        public abstract void Update();

        /// <summary>Prepares the camera for the reflection render pass.</summary>
        /// <param name="waterHeight">The height of the water to be reflected on.</param>
        public abstract void ReflectView(ref float waterHeight);

        /// <summary>Gets the distance of the near pane of the view frustum.</summary>
        public abstract float NearPlane
        {
            get;
        }

        /// <summary>Gets the distance of the view frustum's far plane.</summary>
        public abstract float FarPlane
        {
            get;
        }

        /// <summary>Gets the field of view angle for the view frustum.</summary>
        public abstract float Fov
        {
            get;
        }

        /// <summary>Gets the view frustum created by the current camera position and rotation.</summary>
        public abstract global::FlounderSharp.Frustum ViewFrustum
        {
            get;
        }

        /// <summary>Gets the ray that extends from the cameras position though the screen.</summary>
        public abstract global::FlounderSharp.Ray ViewRay
        {
            get;
        }

        /// <summary>Gets the view matrix created by the current camera position and rotation.</summary>
        public abstract global::FlounderSharp.Matrix4 ViewMatrix
        {
            get;
        }

        /// <summary>Gets the projection matrix used in the current scene render.</summary>
        public abstract global::FlounderSharp.Matrix4 ProjectionMatrix
        {
            get;
        }

        /// <summary>Gets the cameras 3D position in the world.</summary>
        public abstract global::FlounderSharp.Vector3 Position
        {
            get;
        }

        /// <summary>Gets the cameras 3D velocity in the world.</summary>
        public abstract global::FlounderSharp.Vector3 Velocity
        {
            get;
        }

        /// <summary>Gets the cameras 3D rotation in the world, where x=pitch, y=yaw, z=roll.</summary>
        public abstract global::FlounderSharp.Vector3 Rotation
        {
            get;
        }

        #region Virtual table interop

        // virtual ~ICamera() { }
        private static global::FlounderSharp.Delegates.Action_IntPtr_int _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr instance, int delete)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.ICamera) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // void Update() = 0
        private static global::FlounderSharp.Delegates.Action_IntPtr _UpdateDelegateInstance;

        private static void _UpdateDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.ICamera) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Update();
        }

        // void ReflectView(const float &waterHeight) = 0
        private static global::FlounderSharp.Delegates.Action_IntPtr_floatPtr _ReflectViewDelegateInstance;

        private static void _ReflectViewDelegateHook(global::System.IntPtr instance, float* waterHeight)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.ICamera) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.ReflectView(ref *waterHeight);
        }

        // float GetNearPlane() const = 0
        private static global::FlounderSharp.Delegates.Func_float_IntPtr _GetNearPlaneDelegateInstance;

        private static float _GetNearPlaneDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.ICamera) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.NearPlane;
            return __ret;
        }

        // float GetFarPlane() const = 0
        private static global::FlounderSharp.Delegates.Func_float_IntPtr _GetFarPlaneDelegateInstance;

        private static float _GetFarPlaneDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.ICamera) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.FarPlane;
            return __ret;
        }

        // float GetFov() const = 0
        private static global::FlounderSharp.Delegates.Func_float_IntPtr _GetFovDelegateInstance;

        private static float _GetFovDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.ICamera) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Fov;
            return __ret;
        }

        // Frustum *GetViewFrustum() const = 0
        private static global::FlounderSharp.Delegates.Func_IntPtr_IntPtr _GetViewFrustumDelegateInstance;

        private static global::System.IntPtr _GetViewFrustumDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.ICamera) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.ViewFrustum;
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // Ray *GetViewRay() const = 0
        private static global::FlounderSharp.Delegates.Func_IntPtr_IntPtr _GetViewRayDelegateInstance;

        private static global::System.IntPtr _GetViewRayDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.ICamera) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.ViewRay;
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // Matrix4 *GetViewMatrix() const = 0
        private static global::FlounderSharp.Delegates.Func_IntPtr_IntPtr _GetViewMatrixDelegateInstance;

        private static global::System.IntPtr _GetViewMatrixDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.ICamera) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.ViewMatrix;
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // Matrix4 *GetProjectionMatrix() const = 0
        private static global::FlounderSharp.Delegates.Func_IntPtr_IntPtr _GetProjectionMatrixDelegateInstance;

        private static global::System.IntPtr _GetProjectionMatrixDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.ICamera) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.ProjectionMatrix;
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // Vector3 *GetPosition() const = 0
        private static global::FlounderSharp.Delegates.Func_IntPtr_IntPtr _GetPositionDelegateInstance;

        private static global::System.IntPtr _GetPositionDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.ICamera) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Position;
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // Vector3 *GetVelocity() const = 0
        private static global::FlounderSharp.Delegates.Func_IntPtr_IntPtr _GetVelocityDelegateInstance;

        private static global::System.IntPtr _GetVelocityDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.ICamera) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Velocity;
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // Vector3 *GetRotation() const = 0
        private static global::FlounderSharp.Delegates.Func_IntPtr_IntPtr _GetRotationDelegateInstance;

        private static global::System.IntPtr _GetRotationDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.ICamera) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Rotation;
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[13];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _UpdateDelegateInstance += _UpdateDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_UpdateDelegateInstance).ToPointer();
                _ReflectViewDelegateInstance += _ReflectViewDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_ReflectViewDelegateInstance).ToPointer();
                _GetNearPlaneDelegateInstance += _GetNearPlaneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_GetNearPlaneDelegateInstance).ToPointer();
                _GetFarPlaneDelegateInstance += _GetFarPlaneDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetFarPlaneDelegateInstance).ToPointer();
                _GetFovDelegateInstance += _GetFovDelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetFovDelegateInstance).ToPointer();
                _GetViewFrustumDelegateInstance += _GetViewFrustumDelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_GetViewFrustumDelegateInstance).ToPointer();
                _GetViewRayDelegateInstance += _GetViewRayDelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_GetViewRayDelegateInstance).ToPointer();
                _GetViewMatrixDelegateInstance += _GetViewMatrixDelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_GetViewMatrixDelegateInstance).ToPointer();
                _GetProjectionMatrixDelegateInstance += _GetProjectionMatrixDelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_GetProjectionMatrixDelegateInstance).ToPointer();
                _GetPositionDelegateInstance += _GetPositionDelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_GetPositionDelegateInstance).ToPointer();
                _GetVelocityDelegateInstance += _GetVelocityDelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_GetVelocityDelegateInstance).ToPointer();
                _GetRotationDelegateInstance += _GetRotationDelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_GetRotationDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(14 * 8);
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 32) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 32);
                    *(void**) (vfptr0 + 40) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 40);
                    *(void**) (vfptr0 + 48) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 48);
                    *(void**) (vfptr0 + 56) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 56);
                    *(void**) (vfptr0 + 64) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 64);
                    *(void**) (vfptr0 + 72) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 72);
                    *(void**) (vfptr0 + 80) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 80);
                    *(void**) (vfptr0 + 88) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 88);
                    *(void**) (vfptr0 + 96) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 96);
                    *(void**) (vfptr0 + 104) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 104);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(14 * 8);
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = _Thunks[1];
                    *(void**) (vfptr0 + 24) = _Thunks[2];
                    *(void**) (vfptr0 + 32) = _Thunks[3];
                    *(void**) (vfptr0 + 40) = _Thunks[4];
                    *(void**) (vfptr0 + 48) = _Thunks[5];
                    *(void**) (vfptr0 + 56) = _Thunks[6];
                    *(void**) (vfptr0 + 64) = _Thunks[7];
                    *(void**) (vfptr0 + 72) = _Thunks[8];
                    *(void**) (vfptr0 + 80) = _Thunks[9];
                    *(void**) (vfptr0 + 88) = _Thunks[10];
                    *(void**) (vfptr0 + 96) = _Thunks[11];
                    *(void**) (vfptr0 + 104) = _Thunks[12];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class ICameraInternal : global::FlounderSharp.ICamera, IDisposable
    {
        private static void* __CopyValue(global::FlounderSharp.ICamera.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.ICamera.__Internal));
            *(global::FlounderSharp.ICamera.__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal ICameraInternal(global::FlounderSharp.ICamera.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal ICameraInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
        }

        ~ICameraInternal()
        {
            Dispose(false);
        }

        /// <summary>Checks inputs and carries out smooth camera movement. Called before every frame.</summary>
        public override void Update()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 8);
            var ___UpdateDelegate = (global::FlounderSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Action_IntPtr));
            ___UpdateDelegate((__Instance + __PointerAdjustment));
        }

        /// <summary>Prepares the camera for the reflection render pass.</summary>
        /// <param name="waterHeight">The height of the water to be reflected on.</param>
        public override void ReflectView(ref float waterHeight)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 3 * 8);
            var ___ReflectViewDelegate = (global::FlounderSharp.Delegates.Action_IntPtr_floatPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Action_IntPtr_floatPtr));
            fixed (float* __refParamPtr0 = &waterHeight)
            {
                var __arg0 = __refParamPtr0;
                ___ReflectViewDelegate((__Instance + __PointerAdjustment), __arg0);
            }
        }

        /// <summary>Gets the distance of the near pane of the view frustum.</summary>
        public override float NearPlane
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 4 * 8);
                var ___GetNearPlaneDelegate = (global::FlounderSharp.Delegates.Func_float_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Func_float_IntPtr));
                var __ret = ___GetNearPlaneDelegate((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        /// <summary>Gets the distance of the view frustum's far plane.</summary>
        public override float FarPlane
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 8);
                var ___GetFarPlaneDelegate = (global::FlounderSharp.Delegates.Func_float_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Func_float_IntPtr));
                var __ret = ___GetFarPlaneDelegate((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        /// <summary>Gets the field of view angle for the view frustum.</summary>
        public override float Fov
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 8);
                var ___GetFovDelegate = (global::FlounderSharp.Delegates.Func_float_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Func_float_IntPtr));
                var __ret = ___GetFovDelegate((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        /// <summary>Gets the view frustum created by the current camera position and rotation.</summary>
        public override global::FlounderSharp.Frustum ViewFrustum
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 8);
                var ___GetViewFrustumDelegate = (global::FlounderSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Func_IntPtr_IntPtr));
                var __ret = ___GetViewFrustumDelegate((__Instance + __PointerAdjustment));
                global::FlounderSharp.Frustum __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Frustum.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Frustum) global::FlounderSharp.Frustum.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.Frustum.__CreateInstance(__ret);
                return __result0;
            }
        }

        /// <summary>Gets the ray that extends from the cameras position though the screen.</summary>
        public override global::FlounderSharp.Ray ViewRay
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 8);
                var ___GetViewRayDelegate = (global::FlounderSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Func_IntPtr_IntPtr));
                var __ret = ___GetViewRayDelegate((__Instance + __PointerAdjustment));
                global::FlounderSharp.Ray __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Ray.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Ray) global::FlounderSharp.Ray.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.Ray.__CreateInstance(__ret);
                return __result0;
            }
        }

        /// <summary>Gets the view matrix created by the current camera position and rotation.</summary>
        public override global::FlounderSharp.Matrix4 ViewMatrix
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 9 * 8);
                var ___GetViewMatrixDelegate = (global::FlounderSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Func_IntPtr_IntPtr));
                var __ret = ___GetViewMatrixDelegate((__Instance + __PointerAdjustment));
                global::FlounderSharp.Matrix4 __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Matrix4.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Matrix4) global::FlounderSharp.Matrix4.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.Matrix4.__CreateInstance(__ret);
                return __result0;
            }
        }

        /// <summary>Gets the projection matrix used in the current scene render.</summary>
        public override global::FlounderSharp.Matrix4 ProjectionMatrix
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 10 * 8);
                var ___GetProjectionMatrixDelegate = (global::FlounderSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Func_IntPtr_IntPtr));
                var __ret = ___GetProjectionMatrixDelegate((__Instance + __PointerAdjustment));
                global::FlounderSharp.Matrix4 __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Matrix4.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Matrix4) global::FlounderSharp.Matrix4.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.Matrix4.__CreateInstance(__ret);
                return __result0;
            }
        }

        /// <summary>Gets the cameras 3D position in the world.</summary>
        public override global::FlounderSharp.Vector3 Position
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 11 * 8);
                var ___GetPositionDelegate = (global::FlounderSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Func_IntPtr_IntPtr));
                var __ret = ___GetPositionDelegate((__Instance + __PointerAdjustment));
                global::FlounderSharp.Vector3 __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Vector3.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Vector3) global::FlounderSharp.Vector3.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.Vector3.__CreateInstance(__ret);
                return __result0;
            }
        }

        /// <summary>Gets the cameras 3D velocity in the world.</summary>
        public override global::FlounderSharp.Vector3 Velocity
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 12 * 8);
                var ___GetVelocityDelegate = (global::FlounderSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Func_IntPtr_IntPtr));
                var __ret = ___GetVelocityDelegate((__Instance + __PointerAdjustment));
                global::FlounderSharp.Vector3 __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Vector3.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Vector3) global::FlounderSharp.Vector3.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.Vector3.__CreateInstance(__ret);
                return __result0;
            }
        }

        /// <summary>Gets the cameras 3D rotation in the world, where x=pitch, y=yaw, z=roll.</summary>
        public override global::FlounderSharp.Vector3 Rotation
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 13 * 8);
                var ___GetRotationDelegate = (global::FlounderSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Func_IntPtr_IntPtr));
                var __ret = ___GetRotationDelegate((__Instance + __PointerAdjustment));
                global::FlounderSharp.Vector3 __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Vector3.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Vector3) global::FlounderSharp.Vector3.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.Vector3.__CreateInstance(__ret);
                return __result0;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
