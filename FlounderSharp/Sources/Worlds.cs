// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    /// <summary>A module used for managing worlds.</summary>
    public unsafe partial class Worlds : global::FlounderSharp.IModule, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 88)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vfptr_IModule;

            [FieldOffset(8)]
            internal global::System.IntPtr m_noiseTerrain;

            [FieldOffset(16)]
            internal global::System.IntPtr m_driverDay;

            [FieldOffset(24)]
            internal float m_factorDay;

            [FieldOffset(32)]
            internal global::System.IntPtr m_skyboxRotation;

            [FieldOffset(40)]
            internal global::System.IntPtr m_sunPosition;

            [FieldOffset(48)]
            internal global::System.IntPtr m_moonPosition;

            [FieldOffset(56)]
            internal global::System.IntPtr m_sunColour;

            [FieldOffset(64)]
            internal global::System.IntPtr m_moonColour;

            [FieldOffset(72)]
            internal global::System.IntPtr m_fog;

            [FieldOffset(80)]
            internal global::System.IntPtr m_skyColour;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Worlds@fl@@QEAA@XZ")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Worlds@fl@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Get@Worlds@fl@@SAPEAV12@XZ")]
            internal static extern global::System.IntPtr Get();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetTerrainRadius@Worlds@fl@@QEAAMAEBM00@Z")]
            internal static extern float GetTerrainRadius(global::System.IntPtr instance, float* radius, float* theta, float* phi);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetFog@Worlds@fl@@QEBAPEAVFog@2@XZ")]
            internal static extern global::System.IntPtr GetFog(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetFog@Worlds@fl@@QEAAXAEBVFog@2@@Z")]
            internal static extern void SetFog(global::System.IntPtr instance, global::System.IntPtr fog);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetSkyColour@Worlds@fl@@QEBAPEAVColour@2@XZ")]
            internal static extern global::System.IntPtr GetSkyColour(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetSkyColour@Worlds@fl@@QEAAXAEBVColour@2@@Z")]
            internal static extern void SetSkyColour(global::System.IntPtr instance, global::System.IntPtr skyColour);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetDayFactor@Worlds@fl@@QEBAMXZ")]
            internal static extern float GetDayFactor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetSunriseFactor@Worlds@fl@@QEBAMXZ")]
            internal static extern float GetSunriseFactor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetShadowFactor@Worlds@fl@@QEBAMXZ")]
            internal static extern float GetShadowFactor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetSunHeight@Worlds@fl@@QEBAMXZ")]
            internal static extern float GetSunHeight(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetStarIntensity@Worlds@fl@@QEBAMXZ")]
            internal static extern float GetStarIntensity(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetNoiseTerrain@Worlds@fl@@QEBAPEAVNoiseFast@2@XZ")]
            internal static extern global::System.IntPtr GetNoiseTerrain(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetSkyboxRotation@Worlds@fl@@QEBAPEAVVector3@2@XZ")]
            internal static extern global::System.IntPtr GetSkyboxRotation(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetSunPosition@Worlds@fl@@QEBAPEAVVector3@2@XZ")]
            internal static extern global::System.IntPtr GetSunPosition(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetMoonPosition@Worlds@fl@@QEBAPEAVVector3@2@XZ")]
            internal static extern global::System.IntPtr GetMoonPosition(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetSunColour@Worlds@fl@@QEBAPEAVColour@2@XZ")]
            internal static extern global::System.IntPtr GetSunColour(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetMoonColour@Worlds@fl@@QEBAPEAVColour@2@XZ")]
            internal static extern global::System.IntPtr GetMoonColour(global::System.IntPtr instance);
        }

        internal static new global::FlounderSharp.Worlds __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Worlds(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.Worlds __CreateInstance(global::FlounderSharp.Worlds.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Worlds(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.Worlds.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Worlds.__Internal));
            global::FlounderSharp.Worlds.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private Worlds(global::FlounderSharp.Worlds.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Worlds(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        /// <summary>Creates a new worlds module.</summary>
        public Worlds()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Worlds.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "FlounderSharp.Worlds");
        }

        public Worlds(global::FlounderSharp.Worlds _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Worlds.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
            SetupVTables(GetType().FullName == "FlounderSharp.Worlds");
        }

        ~Worlds()
        {
            Dispose(false);
        }

        public override void Update()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 8);
            var ___UpdateDelegate = (global::FlounderSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Action_IntPtr));
            ___UpdateDelegate((__Instance + __PointerAdjustment));
        }

        public float GetTerrainRadius(ref float radius, ref float theta, ref float phi)
        {
            fixed (float* __refParamPtr0 = &radius)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &theta)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &phi)
                    {
                        var __arg2 = __refParamPtr2;
                        var __ret = __Internal.GetTerrainRadius((__Instance + __PointerAdjustment), __arg0, __arg1, __arg2);
                        return __ret;
                    }
                }
            }
        }

        /// <summary>Gets this engine instance.</summary>
        public static global::FlounderSharp.Worlds Get()
        {
            var __ret = __Internal.Get();
            global::FlounderSharp.Worlds __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::FlounderSharp.Worlds.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::FlounderSharp.Worlds) global::FlounderSharp.Worlds.NativeToManagedMap[__ret];
            else global::FlounderSharp.Worlds.NativeToManagedMap[__ret] = __result0 = (global::FlounderSharp.Worlds) global::FlounderSharp.Worlds.__CreateInstance(__ret);
            return __result0;
        }

        public global::FlounderSharp.Fog Fog
        {
            get
            {
                var __ret = __Internal.GetFog((__Instance + __PointerAdjustment));
                global::FlounderSharp.Fog __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Fog.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Fog) global::FlounderSharp.Fog.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.Fog.__CreateInstance(__ret);
                return __result0;
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = value.__Instance;
                __Internal.SetFog((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public global::FlounderSharp.Colour SkyColour
        {
            get
            {
                var __ret = __Internal.GetSkyColour((__Instance + __PointerAdjustment));
                global::FlounderSharp.Colour __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Colour.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Colour) global::FlounderSharp.Colour.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.Colour.__CreateInstance(__ret);
                return __result0;
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = value.__Instance;
                __Internal.SetSkyColour((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public float DayFactor
        {
            get
            {
                var __ret = __Internal.GetDayFactor((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public float SunriseFactor
        {
            get
            {
                var __ret = __Internal.GetSunriseFactor((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public float ShadowFactor
        {
            get
            {
                var __ret = __Internal.GetShadowFactor((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public float SunHeight
        {
            get
            {
                var __ret = __Internal.GetSunHeight((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public float StarIntensity
        {
            get
            {
                var __ret = __Internal.GetStarIntensity((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public global::FlounderSharp.NoiseFast NoiseTerrain
        {
            get
            {
                var __ret = __Internal.GetNoiseTerrain((__Instance + __PointerAdjustment));
                global::FlounderSharp.NoiseFast __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.NoiseFast.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.NoiseFast) global::FlounderSharp.NoiseFast.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.NoiseFast.__CreateInstance(__ret);
                return __result0;
            }
        }

        public global::FlounderSharp.Vector3 SkyboxRotation
        {
            get
            {
                var __ret = __Internal.GetSkyboxRotation((__Instance + __PointerAdjustment));
                global::FlounderSharp.Vector3 __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Vector3.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Vector3) global::FlounderSharp.Vector3.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.Vector3.__CreateInstance(__ret);
                return __result0;
            }
        }

        public global::FlounderSharp.Vector3 SunPosition
        {
            get
            {
                var __ret = __Internal.GetSunPosition((__Instance + __PointerAdjustment));
                global::FlounderSharp.Vector3 __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Vector3.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Vector3) global::FlounderSharp.Vector3.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.Vector3.__CreateInstance(__ret);
                return __result0;
            }
        }

        public global::FlounderSharp.Vector3 MoonPosition
        {
            get
            {
                var __ret = __Internal.GetMoonPosition((__Instance + __PointerAdjustment));
                global::FlounderSharp.Vector3 __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Vector3.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Vector3) global::FlounderSharp.Vector3.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.Vector3.__CreateInstance(__ret);
                return __result0;
            }
        }

        public global::FlounderSharp.Colour SunColour
        {
            get
            {
                var __ret = __Internal.GetSunColour((__Instance + __PointerAdjustment));
                global::FlounderSharp.Colour __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Colour.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Colour) global::FlounderSharp.Colour.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.Colour.__CreateInstance(__ret);
                return __result0;
            }
        }

        public global::FlounderSharp.Colour MoonColour
        {
            get
            {
                var __ret = __Internal.GetMoonColour((__Instance + __PointerAdjustment));
                global::FlounderSharp.Colour __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Colour.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Colour) global::FlounderSharp.Colour.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.Colour.__CreateInstance(__ret);
                return __result0;
            }
        }

        #region Virtual table interop

        // ~Worlds()
        private static global::FlounderSharp.Delegates.Action_IntPtr_int _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr instance, int delete)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.Worlds) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // void Update() override
        private static global::FlounderSharp.Delegates.Action_IntPtr _UpdateDelegateInstance;

        private static void _UpdateDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.Worlds) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Update();
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[2];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _UpdateDelegateInstance += _UpdateDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_UpdateDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(3 * 8);
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(3 * 8);
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = _Thunks[1];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
