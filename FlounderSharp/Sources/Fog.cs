// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    /// <summary>Represents a fog in the world.</summary>
    public unsafe partial class Fog : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr m_colour;

            [FieldOffset(8)]
            internal float m_density;

            [FieldOffset(12)]
            internal float m_gradient;

            [FieldOffset(16)]
            internal float m_lowerLimit;

            [FieldOffset(20)]
            internal float m_upperLimit;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Fog@fl@@QEAA@PEAVColour@1@AEBM111@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, global::System.IntPtr colour, float* density, float* gradient, float* lowerLimit, float* upperLimit);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1Fog@fl@@QEAA@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Set@Fog@fl@@QEAAPEAV12@AEBV12@@Z")]
            internal static extern global::System.IntPtr Set(global::System.IntPtr instance, global::System.IntPtr source);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.Fog> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.Fog>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.Fog __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Fog(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.Fog __CreateInstance(global::FlounderSharp.Fog.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Fog(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.Fog.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Fog.__Internal));
            *(global::FlounderSharp.Fog.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Fog(global::FlounderSharp.Fog.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Fog(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        /// <summary>Creates a new fog.</summary>
        /// <param name="colour">The colour of the fog.</param>
        /// <param name="density">How dense the fog will be.</param>
        /// <param name="gradient">The gradient of the fog.</param>
        /// <param name="lowerLimit">At what height will the skybox fog begin to appear.</param>
        /// <param name="upperLimit">At what height will there be skybox no fog.</param>
        public Fog(global::FlounderSharp.Colour colour, ref float density, ref float gradient, ref float lowerLimit, ref float upperLimit)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Fog.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg0 = ReferenceEquals(colour, null) ? global::System.IntPtr.Zero : colour.__Instance;
            fixed (float* __refParamPtr1 = &density)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &gradient)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &lowerLimit)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (float* __refParamPtr4 = &upperLimit)
                        {
                            var __arg4 = __refParamPtr4;
                            __Internal.ctor((__Instance + __PointerAdjustment), __arg0, __arg1, __arg2, __arg3, __arg4);
                        }
                    }
                }
            }
        }

        ~Fog()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.Fog __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::FlounderSharp.Fog Set(global::FlounderSharp.Fog source)
        {
            if (ReferenceEquals(source, null))
                throw new global::System.ArgumentNullException("source", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = source.__Instance;
            var __ret = __Internal.Set((__Instance + __PointerAdjustment), __arg0);
            global::FlounderSharp.Fog __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::FlounderSharp.Fog.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::FlounderSharp.Fog) global::FlounderSharp.Fog.NativeToManagedMap[__ret];
            else __result0 = global::FlounderSharp.Fog.__CreateInstance(__ret);
            return __result0;
        }

        public global::FlounderSharp.Colour MColour
        {
            get
            {
                global::FlounderSharp.Colour __result0;
                if (((global::FlounderSharp.Fog.__Internal*) __Instance)->m_colour == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Colour.NativeToManagedMap.ContainsKey(((global::FlounderSharp.Fog.__Internal*) __Instance)->m_colour))
                    __result0 = (global::FlounderSharp.Colour) global::FlounderSharp.Colour.NativeToManagedMap[((global::FlounderSharp.Fog.__Internal*) __Instance)->m_colour];
                else __result0 = global::FlounderSharp.Colour.__CreateInstance(((global::FlounderSharp.Fog.__Internal*) __Instance)->m_colour);
                return __result0;
            }

            set
            {
                ((global::FlounderSharp.Fog.__Internal*)__Instance)->m_colour = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public float MDensity
        {
            get
            {
                return ((global::FlounderSharp.Fog.__Internal*) __Instance)->m_density;
            }

            set
            {
                ((global::FlounderSharp.Fog.__Internal*)__Instance)->m_density = value;
            }
        }

        public float MGradient
        {
            get
            {
                return ((global::FlounderSharp.Fog.__Internal*) __Instance)->m_gradient;
            }

            set
            {
                ((global::FlounderSharp.Fog.__Internal*)__Instance)->m_gradient = value;
            }
        }

        public float MLowerLimit
        {
            get
            {
                return ((global::FlounderSharp.Fog.__Internal*) __Instance)->m_lowerLimit;
            }

            set
            {
                ((global::FlounderSharp.Fog.__Internal*)__Instance)->m_lowerLimit = value;
            }
        }

        public float MUpperLimit
        {
            get
            {
                return ((global::FlounderSharp.Fog.__Internal*) __Instance)->m_upperLimit;
            }

            set
            {
                ((global::FlounderSharp.Fog.__Internal*)__Instance)->m_upperLimit = value;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
