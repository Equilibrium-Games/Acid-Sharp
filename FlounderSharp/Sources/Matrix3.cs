// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    /// <summary>Holds a 3x3 matrix.</summary>
    public unsafe partial class Matrix3 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::FlounderSharp.Matrix3._.__Internal _;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Matrix3@fl@@QEAA@XZ")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Matrix3@fl@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr source);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Matrix3@fl@@QEAA@QEBM@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, float[] source);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1Matrix3@fl@@QEAA@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Add@Matrix3@fl@@QEBA?AV12@AEBV12@@Z")]
            internal static extern void Add(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Subtract@Matrix3@fl@@QEBA?AV12@AEBV12@@Z")]
            internal static extern void Subtract(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Multiply@Matrix3@fl@@QEBA?AV12@AEBV12@@Z")]
            internal static extern void Multiply(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Divide@Matrix3@fl@@QEBA?AV12@AEBV12@@Z")]
            internal static extern void Divide(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Transform@Matrix3@fl@@QEBA?AVVector3@2@AEBV32@@Z")]
            internal static extern void Transform(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Scale@Matrix3@fl@@QEBA?AV12@AEBVVector3@2@@Z")]
            internal static extern void Scale(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Negate@Matrix3@fl@@QEBA?AV12@XZ")]
            internal static extern void Negate(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetZero@Matrix3@fl@@QEAA?AV12@XZ")]
            internal static extern void SetZero(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetIdentity@Matrix3@fl@@QEAA?AV12@XZ")]
            internal static extern void SetIdentity(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?ToArray@Matrix3@fl@@QEBAPEAMXZ")]
            internal static extern float* ToArray(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Write@Matrix3@fl@@QEAAXPEAVLoadedValue@2@@Z")]
            internal static extern void Write(global::System.IntPtr instance, global::System.IntPtr destination);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??8Matrix3@fl@@QEBA_NAEBV01@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??9Matrix3@fl@@QEBA_NAEBV01@@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??GMatrix3@fl@@QEAA?AV01@XZ")]
            internal static extern void OperatorMinus(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?ToString@Matrix3@fl@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ")]
            internal static extern void ToString(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Hfl@@YA?AVMatrix3@0@V10@AEBV10@@Z")]
            internal static extern void OperatorPlus(global::System.IntPtr @return, global::FlounderSharp.Matrix3.__Internal left, global::System.IntPtr right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Gfl@@YA?AVMatrix3@0@V10@AEBV10@@Z")]
            internal static extern void OperatorMinus(global::System.IntPtr @return, global::FlounderSharp.Matrix3.__Internal left, global::System.IntPtr right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Dfl@@YA?AVMatrix3@0@V10@AEBV10@@Z")]
            internal static extern void OperatorStar(global::System.IntPtr @return, global::FlounderSharp.Matrix3.__Internal left, global::System.IntPtr right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Kfl@@YA?AVMatrix3@0@V10@AEBV10@@Z")]
            internal static extern void OperatorSlash(global::System.IntPtr @return, global::FlounderSharp.Matrix3.__Internal left, global::System.IntPtr right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Dfl@@YA?AVMatrix3@0@V10@VVector3@0@@Z")]
            internal static extern void OperatorStar(global::System.IntPtr @return, global::FlounderSharp.Matrix3.__Internal left, global::FlounderSharp.Vector3.__Internal value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Kfl@@YA?AVMatrix3@0@V10@VVector3@0@@Z")]
            internal static extern void OperatorSlash(global::System.IntPtr @return, global::FlounderSharp.Matrix3.__Internal left, global::FlounderSharp.Vector3.__Internal value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Dfl@@YA?AVMatrix3@0@V10@M@Z")]
            internal static extern void OperatorStar_1(global::System.IntPtr @return, global::FlounderSharp.Matrix3.__Internal left, float value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Kfl@@YA?AVMatrix3@0@V10@M@Z")]
            internal static extern void OperatorSlash_1(global::System.IntPtr @return, global::FlounderSharp.Matrix3.__Internal left, float value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Dfl@@YA?AVMatrix3@0@MV10@@Z")]
            internal static extern void OperatorStar_2(global::System.IntPtr @return, float value, global::FlounderSharp.Matrix3.__Internal left);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??Kfl@@YA?AVMatrix3@0@MV10@@Z")]
            internal static extern void OperatorSlash_2(global::System.IntPtr @return, float value, global::FlounderSharp.Matrix3.__Internal left);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Invert@Matrix3@fl@@QEBA?AV12@XZ")]
            internal static extern void Invert(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Transpose@Matrix3@fl@@QEBA?AV12@XZ")]
            internal static extern void Transpose(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Determinant@Matrix3@fl@@QEBAMXZ")]
            internal static extern float Determinant(global::System.IntPtr instance);
        }

        public unsafe partial struct _
        {
            [StructLayout(LayoutKind.Explicit, Size = 40)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::FlounderSharp.Matrix3._.__.__Internal __;

                [FieldOffset(0)]
                internal global::FlounderSharp.Matrix3._.__.__Internal __1;

                [FieldOffset(0)]
                internal global::FlounderSharp.Matrix3._.__.__Internal __2;
            }

            public unsafe partial class __
            {
                [StructLayout(LayoutKind.Explicit, Size = 24)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal global::System.IntPtr m_0;

                    [FieldOffset(8)]
                    internal global::System.IntPtr m_1;

                    [FieldOffset(16)]
                    internal global::System.IntPtr m_2;
                }
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.Matrix3> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.Matrix3>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.Matrix3 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Matrix3(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.Matrix3 __CreateInstance(global::FlounderSharp.Matrix3.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Matrix3(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.Matrix3.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Matrix3.__Internal));
            global::FlounderSharp.Matrix3.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private Matrix3(global::FlounderSharp.Matrix3.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Matrix3(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        /// <summary>Constructor for Matrix3. The matrix is initialised to the identity.</summary>
        public Matrix3()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Matrix3.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor((__Instance + __PointerAdjustment));
        }

        /// <summary>Constructor for Matrix3.</summary>
        /// <param name="source">Creates this matrix out of a existing one.</param>
        public Matrix3(global::FlounderSharp.Matrix3 source)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Matrix3.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(source, null))
                throw new global::System.ArgumentNullException("source", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = source.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
        }

        /// <summary>Constructor for Matrix3.</summary>
        /// <param name="source">Creates this matrix out of a 9 element array.</param>
        public Matrix3(float[] source)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Matrix3.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (source == null || source.Length != 9)
                throw new ArgumentOutOfRangeException("source", "The dimensions of the provided array don't match the required size.");
            __Internal.ctor((__Instance + __PointerAdjustment), source);
        }

        ~Matrix3()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.Matrix3 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Adds this matrix to another matrix.</summary>
        /// <param name="other">The other matrix.</param>
        public global::FlounderSharp.Matrix3 Add(global::FlounderSharp.Matrix3 other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::FlounderSharp.Matrix3.__Internal();
            __Internal.Add((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::FlounderSharp.Matrix3.__CreateInstance(__ret);
        }

        /// <summary>Subtracts this matrix to another matrix.</summary>
        /// <param name="other">The other matrix.</param>
        public global::FlounderSharp.Matrix3 Subtract(global::FlounderSharp.Matrix3 other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::FlounderSharp.Matrix3.__Internal();
            __Internal.Subtract((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::FlounderSharp.Matrix3.__CreateInstance(__ret);
        }

        /// <summary>Multiplies this matrix by another matrix.</summary>
        /// <param name="other">The other matrix.</param>
        public global::FlounderSharp.Matrix3 Multiply(global::FlounderSharp.Matrix3 other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::FlounderSharp.Matrix3.__Internal();
            __Internal.Multiply((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::FlounderSharp.Matrix3.__CreateInstance(__ret);
        }

        /// <summary>Divides this matrix by another matrix.</summary>
        /// <param name="other">The other matrix.</param>
        public global::FlounderSharp.Matrix3 Divide(global::FlounderSharp.Matrix3 other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::FlounderSharp.Matrix3.__Internal();
            __Internal.Divide((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::FlounderSharp.Matrix3.__CreateInstance(__ret);
        }

        /// <summary>Transforms this matrix by a vector.</summary>
        /// <param name="other">The other vector.</param>
        public global::FlounderSharp.Vector3 Transform(global::FlounderSharp.Vector3 other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::FlounderSharp.Vector3.__Internal();
            __Internal.Transform((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::FlounderSharp.Vector3.__CreateInstance(__ret);
        }

        /// <summary>Scales this matrix by a vector.</summary>
        /// <param name="other">The other vector.</param>
        public global::FlounderSharp.Matrix3 Scale(global::FlounderSharp.Vector3 other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            var __ret = new global::FlounderSharp.Matrix3.__Internal();
            __Internal.Scale((__Instance + __PointerAdjustment), new IntPtr(&__ret), __arg0);
            return global::FlounderSharp.Matrix3.__CreateInstance(__ret);
        }

        /// <summary>Inverts this matrix.</summary>
        public global::FlounderSharp.Matrix3 Negate()
        {
            var __ret = new global::FlounderSharp.Matrix3.__Internal();
            __Internal.Negate((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return global::FlounderSharp.Matrix3.__CreateInstance(__ret);
        }

        /// <summary>Sets this matrix to 0.</summary>
        public global::FlounderSharp.Matrix3 SetZero()
        {
            var __ret = new global::FlounderSharp.Matrix3.__Internal();
            __Internal.SetZero((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return global::FlounderSharp.Matrix3.__CreateInstance(__ret);
        }

        /// <summary>Sets this matrix to be the identity matrix.</summary>
        public global::FlounderSharp.Matrix3 SetIdentity()
        {
            var __ret = new global::FlounderSharp.Matrix3.__Internal();
            __Internal.SetIdentity((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return global::FlounderSharp.Matrix3.__CreateInstance(__ret);
        }

        /// <summary>Turns this 3x3 matrix into an array.</summary>
        public float* ToArray()
        {
            var __ret = __Internal.ToArray((__Instance + __PointerAdjustment));
            return __ret;
        }

        /// <summary>Saves this matrix into a loaded value.</summary>
        /// <param name="destination">The destination loaded value.</param>
        public void Write(global::FlounderSharp.LoadedValue destination)
        {
            var __arg0 = ReferenceEquals(destination, null) ? global::System.IntPtr.Zero : destination.__Instance;
            __Internal.Write((__Instance + __PointerAdjustment), __arg0);
        }

        public static bool operator ==(global::FlounderSharp.Matrix3 __op, global::FlounderSharp.Matrix3 other)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool otherNull = ReferenceEquals(other, null);
            if (__opNull || otherNull)
                return __opNull && otherNull;
            var __arg0 = __op.__Instance;
            var __arg1 = other.__Instance;
            var __ret = __Internal.OperatorEqualEqual(__arg0, __arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as global::FlounderSharp.Matrix3;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(global::FlounderSharp.Matrix3.__Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(global::FlounderSharp.Matrix3 __op, global::FlounderSharp.Matrix3 other)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool otherNull = ReferenceEquals(other, null);
            if (__opNull || otherNull)
                return !(__opNull && otherNull);
            var __arg0 = __op.__Instance;
            var __arg1 = other.__Instance;
            var __ret = __Internal.OperatorExclaimEqual(__arg0, __arg1);
            return __ret;
        }

        public static global::FlounderSharp.Matrix3 operator -(global::FlounderSharp.Matrix3 __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = __op.__Instance;
            var __ret = new global::FlounderSharp.Matrix3.__Internal();
            __Internal.OperatorMinus(__arg0, new IntPtr(&__ret));
            return global::FlounderSharp.Matrix3.__CreateInstance(__ret);
        }

        public string ToString()
        {
            var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
            __Internal.ToString((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            var __basicStringRet = global::Std.BasicString<char, global::Std.CharTraits<char>, global::Std.Allocator<char>>.__CreateInstance(__ret);
            var __stringRet = global::Std.BasicStringExtensions.CStr(__basicStringRet);
            __basicStringRet.Dispose(false);
            return __stringRet;
        }

        public static implicit operator global::FlounderSharp.Matrix3(float[] source)
        {
            return new global::FlounderSharp.Matrix3(source);
        }

        public static global::FlounderSharp.Matrix3 operator +(global::FlounderSharp.Matrix3 left, global::FlounderSharp.Matrix3 right)
        {
            var __arg0 = ReferenceEquals(left, null) ? new global::FlounderSharp.Matrix3.__Internal() : *(global::FlounderSharp.Matrix3.__Internal*) left.__Instance;
            if (ReferenceEquals(right, null))
                throw new global::System.ArgumentNullException("right", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = right.__Instance;
            var __ret = new global::FlounderSharp.Matrix3.__Internal();
            __Internal.OperatorPlus(new IntPtr(&__ret), __arg0, __arg1);
            return global::FlounderSharp.Matrix3.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Matrix3 operator -(global::FlounderSharp.Matrix3 left, global::FlounderSharp.Matrix3 right)
        {
            var __arg0 = ReferenceEquals(left, null) ? new global::FlounderSharp.Matrix3.__Internal() : *(global::FlounderSharp.Matrix3.__Internal*) left.__Instance;
            if (ReferenceEquals(right, null))
                throw new global::System.ArgumentNullException("right", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = right.__Instance;
            var __ret = new global::FlounderSharp.Matrix3.__Internal();
            __Internal.OperatorMinus(new IntPtr(&__ret), __arg0, __arg1);
            return global::FlounderSharp.Matrix3.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Matrix3 operator *(global::FlounderSharp.Matrix3 left, global::FlounderSharp.Matrix3 right)
        {
            var __arg0 = ReferenceEquals(left, null) ? new global::FlounderSharp.Matrix3.__Internal() : *(global::FlounderSharp.Matrix3.__Internal*) left.__Instance;
            if (ReferenceEquals(right, null))
                throw new global::System.ArgumentNullException("right", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = right.__Instance;
            var __ret = new global::FlounderSharp.Matrix3.__Internal();
            __Internal.OperatorStar(new IntPtr(&__ret), __arg0, __arg1);
            return global::FlounderSharp.Matrix3.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Matrix3 operator /(global::FlounderSharp.Matrix3 left, global::FlounderSharp.Matrix3 right)
        {
            var __arg0 = ReferenceEquals(left, null) ? new global::FlounderSharp.Matrix3.__Internal() : *(global::FlounderSharp.Matrix3.__Internal*) left.__Instance;
            if (ReferenceEquals(right, null))
                throw new global::System.ArgumentNullException("right", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = right.__Instance;
            var __ret = new global::FlounderSharp.Matrix3.__Internal();
            __Internal.OperatorSlash(new IntPtr(&__ret), __arg0, __arg1);
            return global::FlounderSharp.Matrix3.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Matrix3 operator *(global::FlounderSharp.Matrix3 left, global::FlounderSharp.Vector3 value)
        {
            var __arg0 = ReferenceEquals(left, null) ? new global::FlounderSharp.Matrix3.__Internal() : *(global::FlounderSharp.Matrix3.__Internal*) left.__Instance;
            var __arg1 = ReferenceEquals(value, null) ? new global::FlounderSharp.Vector3.__Internal() : *(global::FlounderSharp.Vector3.__Internal*) value.__Instance;
            var __ret = new global::FlounderSharp.Matrix3.__Internal();
            __Internal.OperatorStar(new IntPtr(&__ret), __arg0, __arg1);
            return global::FlounderSharp.Matrix3.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Matrix3 operator /(global::FlounderSharp.Matrix3 left, global::FlounderSharp.Vector3 value)
        {
            var __arg0 = ReferenceEquals(left, null) ? new global::FlounderSharp.Matrix3.__Internal() : *(global::FlounderSharp.Matrix3.__Internal*) left.__Instance;
            var __arg1 = ReferenceEquals(value, null) ? new global::FlounderSharp.Vector3.__Internal() : *(global::FlounderSharp.Vector3.__Internal*) value.__Instance;
            var __ret = new global::FlounderSharp.Matrix3.__Internal();
            __Internal.OperatorSlash(new IntPtr(&__ret), __arg0, __arg1);
            return global::FlounderSharp.Matrix3.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Matrix3 operator *(global::FlounderSharp.Matrix3 left, float value)
        {
            var __arg0 = ReferenceEquals(left, null) ? new global::FlounderSharp.Matrix3.__Internal() : *(global::FlounderSharp.Matrix3.__Internal*) left.__Instance;
            var __ret = new global::FlounderSharp.Matrix3.__Internal();
            __Internal.OperatorStar_1(new IntPtr(&__ret), __arg0, value);
            return global::FlounderSharp.Matrix3.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Matrix3 operator /(global::FlounderSharp.Matrix3 left, float value)
        {
            var __arg0 = ReferenceEquals(left, null) ? new global::FlounderSharp.Matrix3.__Internal() : *(global::FlounderSharp.Matrix3.__Internal*) left.__Instance;
            var __ret = new global::FlounderSharp.Matrix3.__Internal();
            __Internal.OperatorSlash_1(new IntPtr(&__ret), __arg0, value);
            return global::FlounderSharp.Matrix3.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Matrix3 operator *(float value, global::FlounderSharp.Matrix3 left)
        {
            var __arg1 = ReferenceEquals(left, null) ? new global::FlounderSharp.Matrix3.__Internal() : *(global::FlounderSharp.Matrix3.__Internal*) left.__Instance;
            var __ret = new global::FlounderSharp.Matrix3.__Internal();
            __Internal.OperatorStar_2(new IntPtr(&__ret), value, __arg1);
            return global::FlounderSharp.Matrix3.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Matrix3 operator /(float value, global::FlounderSharp.Matrix3 left)
        {
            var __arg1 = ReferenceEquals(left, null) ? new global::FlounderSharp.Matrix3.__Internal() : *(global::FlounderSharp.Matrix3.__Internal*) left.__Instance;
            var __ret = new global::FlounderSharp.Matrix3.__Internal();
            __Internal.OperatorSlash_2(new IntPtr(&__ret), value, __arg1);
            return global::FlounderSharp.Matrix3.__CreateInstance(__ret);
        }

        public static global::FlounderSharp.Matrix3 IDENTITY
        {
            get
            {
                var __ptr = (global::FlounderSharp.Matrix3.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Flounder", "_imp_?IDENTITY@Matrix3@fl@@2V12@B");
                return global::FlounderSharp.Matrix3.__CreateInstance(*__ptr);
            }
        }

        public static global::FlounderSharp.Matrix3 ZERO
        {
            get
            {
                var __ptr = (global::FlounderSharp.Matrix3.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Flounder", "_imp_?ZERO@Matrix3@fl@@2V12@B");
                return global::FlounderSharp.Matrix3.__CreateInstance(*__ptr);
            }
        }

        /// <summary>Negates this matrix.</summary>
        public global::FlounderSharp.Matrix3 Invert
        {
            get
            {
                var __ret = new global::FlounderSharp.Matrix3.__Internal();
                __Internal.Invert((__Instance + __PointerAdjustment), new IntPtr(&__ret));
                return global::FlounderSharp.Matrix3.__CreateInstance(__ret);
            }
        }

        /// <summary>Transposes this matrix.</summary>
        public global::FlounderSharp.Matrix3 Transpose
        {
            get
            {
                var __ret = new global::FlounderSharp.Matrix3.__Internal();
                __Internal.Transpose((__Instance + __PointerAdjustment), new IntPtr(&__ret));
                return global::FlounderSharp.Matrix3.__CreateInstance(__ret);
            }
        }

        /// <summary>Takes the determinant of this matrix.</summary>
        public float Determinant
        {
            get
            {
                var __ret = __Internal.Determinant((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
