// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    /// <summary>A module used for that manages gui textures in a container.</summary>
    public unsafe partial class Uis : global::FlounderSharp.IModule, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vfptr_IModule;

            [FieldOffset(8)]
            internal global::System.IntPtr m_selector;

            [FieldOffset(16)]
            internal global::System.IntPtr m_container;

            [FieldOffset(24)]
            internal global::System.IntPtr m_objects;

            [FieldOffset(32)]
            internal global::System.IntPtr m_proximaNova;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Uis@fl@@QEAA@XZ")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Uis@fl@@QEAA@AEBV01@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Get@Uis@fl@@SAPEAV12@XZ")]
            internal static extern global::System.IntPtr Get();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetContainer@Uis@fl@@QEBAPEAVUiObject@2@XZ")]
            internal static extern global::System.IntPtr GetContainer(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetSelector@Uis@fl@@QEBAPEAVUiSelector@2@XZ")]
            internal static extern global::System.IntPtr GetSelector(global::System.IntPtr instance);
        }

        internal static new global::FlounderSharp.Uis __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Uis(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.Uis __CreateInstance(global::FlounderSharp.Uis.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Uis(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.Uis.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Uis.__Internal));
            global::FlounderSharp.Uis.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private Uis(global::FlounderSharp.Uis.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Uis(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        /// <summary>Creates a new uis module.</summary>
        public Uis()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Uis.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "FlounderSharp.Uis");
        }

        public Uis(global::FlounderSharp.Uis _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Uis.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor((__Instance + __PointerAdjustment), __arg0);
            SetupVTables(GetType().FullName == "FlounderSharp.Uis");
        }

        ~Uis()
        {
            Dispose(false);
        }

        public override void Update()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 8);
            var ___UpdateDelegate = (global::FlounderSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::FlounderSharp.Delegates.Action_IntPtr));
            ___UpdateDelegate((__Instance + __PointerAdjustment));
        }

        /// <summary>Gets this engine instance.</summary>
        public static global::FlounderSharp.Uis Get()
        {
            var __ret = __Internal.Get();
            global::FlounderSharp.Uis __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::FlounderSharp.Uis.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::FlounderSharp.Uis) global::FlounderSharp.Uis.NativeToManagedMap[__ret];
            else global::FlounderSharp.Uis.NativeToManagedMap[__ret] = __result0 = (global::FlounderSharp.Uis) global::FlounderSharp.Uis.__CreateInstance(__ret);
            return __result0;
        }

        public global::FlounderSharp.FontFamily MProximaNova
        {
            get
            {
                global::FlounderSharp.FontFamily __result0;
                if (((global::FlounderSharp.Uis.__Internal*) __Instance)->m_proximaNova == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.FontFamily.NativeToManagedMap.ContainsKey(((global::FlounderSharp.Uis.__Internal*) __Instance)->m_proximaNova))
                    __result0 = (global::FlounderSharp.FontFamily) global::FlounderSharp.FontFamily.NativeToManagedMap[((global::FlounderSharp.Uis.__Internal*) __Instance)->m_proximaNova];
                else global::FlounderSharp.FontFamily.NativeToManagedMap[((global::FlounderSharp.Uis.__Internal*) __Instance)->m_proximaNova] = __result0 = (global::FlounderSharp.FontFamily) global::FlounderSharp.FontFamily.__CreateInstance(((global::FlounderSharp.Uis.__Internal*) __Instance)->m_proximaNova);
                return __result0;
            }

            set
            {
                ((global::FlounderSharp.Uis.__Internal*)__Instance)->m_proximaNova = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        /// <summary>Gets the screen container.</summary>
        public global::FlounderSharp.UiObject Container
        {
            get
            {
                var __ret = __Internal.GetContainer((__Instance + __PointerAdjustment));
                global::FlounderSharp.UiObject __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.UiObject.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.UiObject) global::FlounderSharp.UiObject.NativeToManagedMap[__ret];
                else global::FlounderSharp.UiObject.NativeToManagedMap[__ret] = __result0 = (global::FlounderSharp.UiObject) global::FlounderSharp.UiObject.__CreateInstance(__ret);
                return __result0;
            }
        }

        /// <summary>Gets the main GUI selector.</summary>
        public global::FlounderSharp.UiSelector Selector
        {
            get
            {
                var __ret = __Internal.GetSelector((__Instance + __PointerAdjustment));
                global::FlounderSharp.UiSelector __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.UiSelector.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.UiSelector) global::FlounderSharp.UiSelector.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.UiSelector.__CreateInstance(__ret);
                return __result0;
            }
        }

        #region Virtual table interop

        // ~Uis()
        private static global::FlounderSharp.Delegates.Action_IntPtr_int _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr instance, int delete)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.Uis) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // void Update() override
        private static global::FlounderSharp.Delegates.Action_IntPtr _UpdateDelegateInstance;

        private static void _UpdateDelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::FlounderSharp.Uis) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Update();
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[2];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _UpdateDelegateInstance += _UpdateDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_UpdateDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(3 * 8);
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vfptr0 = Marshal.AllocHGlobal(3 * 8);
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 16) = _Thunks[1];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal_Ptr
        {
            [FieldOffset(0)]
            internal global::System.IntPtr first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internalc__N_std_S_pair__1I____N_fl_S_FontCharacter
        {
            [FieldOffset(0)]
            internal int first;

            [FieldOffset(8)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___N_fl_S_ConfigKey
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::FlounderSharp.ConfigKey.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_IModule
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C____N_fl_S_JointTransform
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::System.IntPtr second;
        }
    }
}
