// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    public enum NoiseType
    {
        TypeValue = 0,
        TypeValuefractal = 1,
        TypePerlin = 2,
        TypePerlinfractal = 3,
        TypeSimplex = 4,
        TypeSimplexfractal = 5,
        TypeCellular = 6,
        TypeWhitenoise = 7,
        TypeCubic = 8,
        TypeCubicfractal = 9
    }

    public enum NoiseInterp
    {
        InterpLinear = 0,
        InterpHermite = 1,
        InterpQuintic = 2
    }

    public enum NoiseFractal
    {
        FractalFbm = 0,
        FractalBillow = 1,
        FractalRigidmulti = 2
    }

    public enum NoiseCellularFunc
    {
        CellularEuclidean = 0,
        CellularManhattan = 1,
        CellularNatural = 2
    }

    public enum NoiseCellularReturn
    {
        CellularCellvalue = 0,
        CellularNoiselookup = 1,
        CellularDistance = 2,
        CellularDistance2 = 3,
        CellularDistance2add = 4,
        CellularDistance2sub = 5,
        CellularDistance2mul = 6,
        CellularDistance2div = 7
    }

    public unsafe partial class Noise : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 88)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int m_seed;

            [FieldOffset(8)]
            internal global::System.IntPtr m_perm;

            [FieldOffset(16)]
            internal global::System.IntPtr m_perm12;

            [FieldOffset(24)]
            internal float m_frequency;

            [FieldOffset(28)]
            internal global::FlounderSharp.NoiseInterp m_interp;

            [FieldOffset(32)]
            internal global::FlounderSharp.NoiseType m_noiseType;

            [FieldOffset(36)]
            internal int m_octaves;

            [FieldOffset(40)]
            internal float m_lacunarity;

            [FieldOffset(44)]
            internal float m_gain;

            [FieldOffset(48)]
            internal global::FlounderSharp.NoiseFractal m_fractalType;

            [FieldOffset(52)]
            internal float m_fractalBounding;

            [FieldOffset(56)]
            internal global::FlounderSharp.NoiseCellularFunc m_cellularDistanceFunction;

            [FieldOffset(60)]
            internal global::FlounderSharp.NoiseCellularReturn m_cellularReturnType;

            [FieldOffset(64)]
            internal global::System.IntPtr m_cellularNoiseLookup;

            [FieldOffset(72)]
            internal int m_cellularDistanceIndex0;

            [FieldOffset(76)]
            internal int m_cellularDistanceIndex1;

            [FieldOffset(80)]
            internal float m_cellularJitter;

            [FieldOffset(84)]
            internal float m_gradientPerturbAmp;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Noise@fl@@QEAA@AEBH@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, int* seed);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??1Noise@fl@@QEAA@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetCellularDistance2Indices@Noise@fl@@QEBAXAEAH0@Z")]
            internal static extern void GetCellularDistance2Indices(global::System.IntPtr instance, int* cellularDistanceIndex0, int* cellularDistanceIndex1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetCellularDistance2Indices@Noise@fl@@QEAAXAEBH0@Z")]
            internal static extern void SetCellularDistance2Indices(global::System.IntPtr instance, int* cellularDistanceIndex0, int* cellularDistanceIndex1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetValue@Noise@fl@@QEBAMMM@Z")]
            internal static extern float GetValue(global::System.IntPtr instance, float x, float y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetValueFractal@Noise@fl@@QEBAMMM@Z")]
            internal static extern float GetValueFractal(global::System.IntPtr instance, float x, float y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetPerlin@Noise@fl@@QEBAMMM@Z")]
            internal static extern float GetPerlin(global::System.IntPtr instance, float x, float y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetPerlinFractal@Noise@fl@@QEBAMMM@Z")]
            internal static extern float GetPerlinFractal(global::System.IntPtr instance, float x, float y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetSimplex@Noise@fl@@QEBAMMM@Z")]
            internal static extern float GetSimplex(global::System.IntPtr instance, float x, float y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetSimplexFractal@Noise@fl@@QEBAMMM@Z")]
            internal static extern float GetSimplexFractal(global::System.IntPtr instance, float x, float y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetCellular@Noise@fl@@QEBAMMM@Z")]
            internal static extern float GetCellular(global::System.IntPtr instance, float x, float y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetWhiteNoise@Noise@fl@@QEBAMMM@Z")]
            internal static extern float GetWhiteNoise(global::System.IntPtr instance, float x, float y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetWhiteNoiseInt@Noise@fl@@QEBAMHH@Z")]
            internal static extern float GetWhiteNoiseInt(global::System.IntPtr instance, int x, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetCubic@Noise@fl@@QEBAMMM@Z")]
            internal static extern float GetCubic(global::System.IntPtr instance, float x, float y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetCubicFractal@Noise@fl@@QEBAMMM@Z")]
            internal static extern float GetCubicFractal(global::System.IntPtr instance, float x, float y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetNoise@Noise@fl@@QEBAMMM@Z")]
            internal static extern float GetNoise(global::System.IntPtr instance, float x, float y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GradientPerturb@Noise@fl@@QEBAXAEAM0@Z")]
            internal static extern void GradientPerturb(global::System.IntPtr instance, float* x, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GradientPerturbFractal@Noise@fl@@QEBAXAEAM0@Z")]
            internal static extern void GradientPerturbFractal(global::System.IntPtr instance, float* x, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetValue@Noise@fl@@QEBAMMMM@Z")]
            internal static extern float GetValue(global::System.IntPtr instance, float x, float y, float z);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetValueFractal@Noise@fl@@QEBAMMMM@Z")]
            internal static extern float GetValueFractal(global::System.IntPtr instance, float x, float y, float z);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetPerlin@Noise@fl@@QEBAMMMM@Z")]
            internal static extern float GetPerlin(global::System.IntPtr instance, float x, float y, float z);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetPerlinFractal@Noise@fl@@QEBAMMMM@Z")]
            internal static extern float GetPerlinFractal(global::System.IntPtr instance, float x, float y, float z);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetSimplex@Noise@fl@@QEBAMMMM@Z")]
            internal static extern float GetSimplex(global::System.IntPtr instance, float x, float y, float z);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetSimplexFractal@Noise@fl@@QEBAMMMM@Z")]
            internal static extern float GetSimplexFractal(global::System.IntPtr instance, float x, float y, float z);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetCellular@Noise@fl@@QEBAMMMM@Z")]
            internal static extern float GetCellular(global::System.IntPtr instance, float x, float y, float z);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetWhiteNoise@Noise@fl@@QEBAMMMM@Z")]
            internal static extern float GetWhiteNoise(global::System.IntPtr instance, float x, float y, float z);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetWhiteNoiseInt@Noise@fl@@QEBAMHHH@Z")]
            internal static extern float GetWhiteNoiseInt(global::System.IntPtr instance, int x, int y, int z);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetCubic@Noise@fl@@QEBAMMMM@Z")]
            internal static extern float GetCubic(global::System.IntPtr instance, float x, float y, float z);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetCubicFractal@Noise@fl@@QEBAMMMM@Z")]
            internal static extern float GetCubicFractal(global::System.IntPtr instance, float x, float y, float z);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetNoise@Noise@fl@@QEBAMMMM@Z")]
            internal static extern float GetNoise(global::System.IntPtr instance, float x, float y, float z);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GradientPerturb@Noise@fl@@QEBAXAEAM00@Z")]
            internal static extern void GradientPerturb(global::System.IntPtr instance, float* x, float* y, float* z);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GradientPerturbFractal@Noise@fl@@QEBAXAEAM00@Z")]
            internal static extern void GradientPerturbFractal(global::System.IntPtr instance, float* x, float* y, float* z);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetSimplex@Noise@fl@@QEBAMMMMM@Z")]
            internal static extern float GetSimplex(global::System.IntPtr instance, float x, float y, float z, float w);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetWhiteNoise@Noise@fl@@QEBAMMMMM@Z")]
            internal static extern float GetWhiteNoise(global::System.IntPtr instance, float x, float y, float z, float w);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetWhiteNoiseInt@Noise@fl@@QEBAMHHHH@Z")]
            internal static extern float GetWhiteNoiseInt(global::System.IntPtr instance, int x, int y, int z, int w);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetSeed@Noise@fl@@QEBAHXZ")]
            internal static extern int GetSeed(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetSeed@Noise@fl@@QEAAXAEBH@Z")]
            internal static extern void SetSeed(global::System.IntPtr instance, int* seed);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetFrequency@Noise@fl@@QEBAMXZ")]
            internal static extern float GetFrequency(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetFrequency@Noise@fl@@QEAAXAEBM@Z")]
            internal static extern void SetFrequency(global::System.IntPtr instance, float* frequency);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetInterp@Noise@fl@@QEBA?AW4NoiseInterp@2@XZ")]
            internal static extern global::FlounderSharp.NoiseInterp GetInterp(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetInterp@Noise@fl@@QEAAXAEBW4NoiseInterp@2@@Z")]
            internal static extern void SetInterp(global::System.IntPtr instance, global::FlounderSharp.NoiseInterp* interp);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetNoiseType@Noise@fl@@QEBA?AW4NoiseType@2@XZ")]
            internal static extern global::FlounderSharp.NoiseType GetNoiseType(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetNoiseType@Noise@fl@@QEAAXAEBW4NoiseType@2@@Z")]
            internal static extern void SetNoiseType(global::System.IntPtr instance, global::FlounderSharp.NoiseType* noiseType);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetFractalOctaves@Noise@fl@@QEBAHXZ")]
            internal static extern int GetFractalOctaves(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetFractalOctaves@Noise@fl@@QEAAXAEBH@Z")]
            internal static extern void SetFractalOctaves(global::System.IntPtr instance, int* octaves);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetFractalLacunarity@Noise@fl@@QEBAMXZ")]
            internal static extern float GetFractalLacunarity(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetFractalLacunarity@Noise@fl@@QEAAXAEBM@Z")]
            internal static extern void SetFractalLacunarity(global::System.IntPtr instance, float* lacunarity);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetFractalGain@Noise@fl@@QEBAMXZ")]
            internal static extern float GetFractalGain(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetFractalGain@Noise@fl@@QEAAXAEBM@Z")]
            internal static extern void SetFractalGain(global::System.IntPtr instance, float* gain);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetFractalType@Noise@fl@@QEBA?AW4NoiseFractal@2@XZ")]
            internal static extern global::FlounderSharp.NoiseFractal GetFractalType(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetFractalType@Noise@fl@@QEAAXAEBW4NoiseFractal@2@@Z")]
            internal static extern void SetFractalType(global::System.IntPtr instance, global::FlounderSharp.NoiseFractal* fractalType);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetCellularDistanceFunction@Noise@fl@@QEBA?AW4NoiseCellularFunc@2@XZ")]
            internal static extern global::FlounderSharp.NoiseCellularFunc GetCellularDistanceFunction(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetCellularDistanceFunction@Noise@fl@@QEAAXAEBW4NoiseCellularFunc@2@@Z")]
            internal static extern void SetCellularDistanceFunction(global::System.IntPtr instance, global::FlounderSharp.NoiseCellularFunc* cellularDistanceFunction);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetCellularReturnType@Noise@fl@@QEBA?AW4NoiseCellularReturn@2@XZ")]
            internal static extern global::FlounderSharp.NoiseCellularReturn GetCellularReturnType(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetCellularReturnType@Noise@fl@@QEAAXAEBW4NoiseCellularReturn@2@@Z")]
            internal static extern void SetCellularReturnType(global::System.IntPtr instance, global::FlounderSharp.NoiseCellularReturn* cellularReturnType);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetCellularNoiseLookup@Noise@fl@@QEBAPEAV12@XZ")]
            internal static extern global::System.IntPtr GetCellularNoiseLookup(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetCellularNoiseLookup@Noise@fl@@QEAAXPEAV12@@Z")]
            internal static extern void SetCellularNoiseLookup(global::System.IntPtr instance, global::System.IntPtr noise);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetCellularJitter@Noise@fl@@QEBAMXZ")]
            internal static extern float GetCellularJitter(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetCellularJitter@Noise@fl@@QEAAXAEBM@Z")]
            internal static extern void SetCellularJitter(global::System.IntPtr instance, float* cellularJitter);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetGradientPerturbAmp@Noise@fl@@QEBAMXZ")]
            internal static extern float GetGradientPerturbAmp(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetGradientPerturbAmp@Noise@fl@@QEAAXAEBM@Z")]
            internal static extern void SetGradientPerturbAmp(global::System.IntPtr instance, float* gradientPerturbAmp);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.Noise> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.Noise>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.Noise __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Noise(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.Noise __CreateInstance(global::FlounderSharp.Noise.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Noise(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.Noise.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Noise.__Internal));
            *(global::FlounderSharp.Noise.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Noise(global::FlounderSharp.Noise.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Noise(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Noise(ref int seed)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Noise.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            fixed (int* __refParamPtr0 = &seed)
            {
                var __arg0 = __refParamPtr0;
                __Internal.ctor((__Instance + __PointerAdjustment), __arg0);
            }
        }

        ~Noise()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.Noise __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void GetCellularDistance2Indices(ref int cellularDistanceIndex0, ref int cellularDistanceIndex1)
        {
            fixed (int* __refParamPtr0 = &cellularDistanceIndex0)
            {
                var __arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &cellularDistanceIndex1)
                {
                    var __arg1 = __refParamPtr1;
                    __Internal.GetCellularDistance2Indices((__Instance + __PointerAdjustment), __arg0, __arg1);
                }
            }
        }

        public void SetCellularDistance2Indices(ref int cellularDistanceIndex0, ref int cellularDistanceIndex1)
        {
            fixed (int* __refParamPtr0 = &cellularDistanceIndex0)
            {
                var __arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &cellularDistanceIndex1)
                {
                    var __arg1 = __refParamPtr1;
                    __Internal.SetCellularDistance2Indices((__Instance + __PointerAdjustment), __arg0, __arg1);
                }
            }
        }

        public float GetValue(float x, float y)
        {
            var __ret = __Internal.GetValue((__Instance + __PointerAdjustment), x, y);
            return __ret;
        }

        public float GetValueFractal(float x, float y)
        {
            var __ret = __Internal.GetValueFractal((__Instance + __PointerAdjustment), x, y);
            return __ret;
        }

        public float GetPerlin(float x, float y)
        {
            var __ret = __Internal.GetPerlin((__Instance + __PointerAdjustment), x, y);
            return __ret;
        }

        public float GetPerlinFractal(float x, float y)
        {
            var __ret = __Internal.GetPerlinFractal((__Instance + __PointerAdjustment), x, y);
            return __ret;
        }

        public float GetSimplex(float x, float y)
        {
            var __ret = __Internal.GetSimplex((__Instance + __PointerAdjustment), x, y);
            return __ret;
        }

        public float GetSimplexFractal(float x, float y)
        {
            var __ret = __Internal.GetSimplexFractal((__Instance + __PointerAdjustment), x, y);
            return __ret;
        }

        public float GetCellular(float x, float y)
        {
            var __ret = __Internal.GetCellular((__Instance + __PointerAdjustment), x, y);
            return __ret;
        }

        public float GetWhiteNoise(float x, float y)
        {
            var __ret = __Internal.GetWhiteNoise((__Instance + __PointerAdjustment), x, y);
            return __ret;
        }

        public float GetWhiteNoiseInt(int x, int y)
        {
            var __ret = __Internal.GetWhiteNoiseInt((__Instance + __PointerAdjustment), x, y);
            return __ret;
        }

        public float GetCubic(float x, float y)
        {
            var __ret = __Internal.GetCubic((__Instance + __PointerAdjustment), x, y);
            return __ret;
        }

        public float GetCubicFractal(float x, float y)
        {
            var __ret = __Internal.GetCubicFractal((__Instance + __PointerAdjustment), x, y);
            return __ret;
        }

        public float GetNoise(float x, float y)
        {
            var __ret = __Internal.GetNoise((__Instance + __PointerAdjustment), x, y);
            return __ret;
        }

        public void GradientPerturb(ref float x, ref float y)
        {
            fixed (float* __refParamPtr0 = &x)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &y)
                {
                    var __arg1 = __refParamPtr1;
                    __Internal.GradientPerturb((__Instance + __PointerAdjustment), __arg0, __arg1);
                }
            }
        }

        public void GradientPerturbFractal(ref float x, ref float y)
        {
            fixed (float* __refParamPtr0 = &x)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &y)
                {
                    var __arg1 = __refParamPtr1;
                    __Internal.GradientPerturbFractal((__Instance + __PointerAdjustment), __arg0, __arg1);
                }
            }
        }

        public float GetValue(float x, float y, float z)
        {
            var __ret = __Internal.GetValue((__Instance + __PointerAdjustment), x, y, z);
            return __ret;
        }

        public float GetValueFractal(float x, float y, float z)
        {
            var __ret = __Internal.GetValueFractal((__Instance + __PointerAdjustment), x, y, z);
            return __ret;
        }

        public float GetPerlin(float x, float y, float z)
        {
            var __ret = __Internal.GetPerlin((__Instance + __PointerAdjustment), x, y, z);
            return __ret;
        }

        public float GetPerlinFractal(float x, float y, float z)
        {
            var __ret = __Internal.GetPerlinFractal((__Instance + __PointerAdjustment), x, y, z);
            return __ret;
        }

        public float GetSimplex(float x, float y, float z)
        {
            var __ret = __Internal.GetSimplex((__Instance + __PointerAdjustment), x, y, z);
            return __ret;
        }

        public float GetSimplexFractal(float x, float y, float z)
        {
            var __ret = __Internal.GetSimplexFractal((__Instance + __PointerAdjustment), x, y, z);
            return __ret;
        }

        public float GetCellular(float x, float y, float z)
        {
            var __ret = __Internal.GetCellular((__Instance + __PointerAdjustment), x, y, z);
            return __ret;
        }

        public float GetWhiteNoise(float x, float y, float z)
        {
            var __ret = __Internal.GetWhiteNoise((__Instance + __PointerAdjustment), x, y, z);
            return __ret;
        }

        public float GetWhiteNoiseInt(int x, int y, int z)
        {
            var __ret = __Internal.GetWhiteNoiseInt((__Instance + __PointerAdjustment), x, y, z);
            return __ret;
        }

        public float GetCubic(float x, float y, float z)
        {
            var __ret = __Internal.GetCubic((__Instance + __PointerAdjustment), x, y, z);
            return __ret;
        }

        public float GetCubicFractal(float x, float y, float z)
        {
            var __ret = __Internal.GetCubicFractal((__Instance + __PointerAdjustment), x, y, z);
            return __ret;
        }

        public float GetNoise(float x, float y, float z)
        {
            var __ret = __Internal.GetNoise((__Instance + __PointerAdjustment), x, y, z);
            return __ret;
        }

        public void GradientPerturb(ref float x, ref float y, ref float z)
        {
            fixed (float* __refParamPtr0 = &x)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &y)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &z)
                    {
                        var __arg2 = __refParamPtr2;
                        __Internal.GradientPerturb((__Instance + __PointerAdjustment), __arg0, __arg1, __arg2);
                    }
                }
            }
        }

        public void GradientPerturbFractal(ref float x, ref float y, ref float z)
        {
            fixed (float* __refParamPtr0 = &x)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &y)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &z)
                    {
                        var __arg2 = __refParamPtr2;
                        __Internal.GradientPerturbFractal((__Instance + __PointerAdjustment), __arg0, __arg1, __arg2);
                    }
                }
            }
        }

        public float GetSimplex(float x, float y, float z, float w)
        {
            var __ret = __Internal.GetSimplex((__Instance + __PointerAdjustment), x, y, z, w);
            return __ret;
        }

        public float GetWhiteNoise(float x, float y, float z, float w)
        {
            var __ret = __Internal.GetWhiteNoise((__Instance + __PointerAdjustment), x, y, z, w);
            return __ret;
        }

        public float GetWhiteNoiseInt(int x, int y, int z, int w)
        {
            var __ret = __Internal.GetWhiteNoiseInt((__Instance + __PointerAdjustment), x, y, z, w);
            return __ret;
        }

        public static implicit operator global::FlounderSharp.Noise(int* seed)
        {
            return new global::FlounderSharp.Noise(ref *seed);
        }

        public int Seed
        {
            get
            {
                var __ret = __Internal.GetSeed((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetSeed((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public float Frequency
        {
            get
            {
                var __ret = __Internal.GetFrequency((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetFrequency((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public global::FlounderSharp.NoiseInterp Interp
        {
            get
            {
                var __ret = __Internal.GetInterp((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                __Internal.SetInterp((__Instance + __PointerAdjustment), &value);
            }
        }

        public global::FlounderSharp.NoiseType NoiseType
        {
            get
            {
                var __ret = __Internal.GetNoiseType((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                __Internal.SetNoiseType((__Instance + __PointerAdjustment), &value);
            }
        }

        public int FractalOctaves
        {
            get
            {
                var __ret = __Internal.GetFractalOctaves((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetFractalOctaves((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public float FractalLacunarity
        {
            get
            {
                var __ret = __Internal.GetFractalLacunarity((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetFractalLacunarity((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public float FractalGain
        {
            get
            {
                var __ret = __Internal.GetFractalGain((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetFractalGain((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public global::FlounderSharp.NoiseFractal FractalType
        {
            get
            {
                var __ret = __Internal.GetFractalType((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                __Internal.SetFractalType((__Instance + __PointerAdjustment), &value);
            }
        }

        public global::FlounderSharp.NoiseCellularFunc CellularDistanceFunction
        {
            get
            {
                var __ret = __Internal.GetCellularDistanceFunction((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                __Internal.SetCellularDistanceFunction((__Instance + __PointerAdjustment), &value);
            }
        }

        public global::FlounderSharp.NoiseCellularReturn CellularReturnType
        {
            get
            {
                var __ret = __Internal.GetCellularReturnType((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                __Internal.SetCellularReturnType((__Instance + __PointerAdjustment), &value);
            }
        }

        public global::FlounderSharp.Noise CellularNoiseLookup
        {
            get
            {
                var __ret = __Internal.GetCellularNoiseLookup((__Instance + __PointerAdjustment));
                global::FlounderSharp.Noise __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::FlounderSharp.Noise.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::FlounderSharp.Noise) global::FlounderSharp.Noise.NativeToManagedMap[__ret];
                else __result0 = global::FlounderSharp.Noise.__CreateInstance(__ret);
                return __result0;
            }

            set
            {
                var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                __Internal.SetCellularNoiseLookup((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public float CellularJitter
        {
            get
            {
                var __ret = __Internal.GetCellularJitter((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetCellularJitter((__Instance + __PointerAdjustment), __arg0);
            }
        }

        public float GradientPerturbAmp
        {
            get
            {
                var __ret = __Internal.GetGradientPerturbAmp((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var __arg0 = &value;
                __Internal.SetGradientPerturbAmp((__Instance + __PointerAdjustment), __arg0);
            }
        }
    }
}
