// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;


[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void GLFWglproc();


[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void GLFWvkproc();





[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void GLFWerrorfun(int _0, [MarshalAs(UnmanagedType.LPStr)] string _1);


[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void GLFWwindowposfun(global::System.IntPtr _0, int _1, int _2);


[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void GLFWwindowsizefun(global::System.IntPtr _0, int _1, int _2);


[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void GLFWwindowclosefun(global::System.IntPtr _0);


[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void GLFWwindowrefreshfun(global::System.IntPtr _0);


[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void GLFWwindowfocusfun(global::System.IntPtr _0, int _1);


[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void GLFWwindowiconifyfun(global::System.IntPtr _0, int _1);


[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void GLFWwindowmaximizefun(global::System.IntPtr _0, int _1);


[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void GLFWframebuffersizefun(global::System.IntPtr _0, int _1, int _2);


[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void GLFWwindowcontentscalefun(global::System.IntPtr _0, float _1, float _2);


[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void GLFWmousebuttonfun(global::System.IntPtr _0, int _1, int _2, int _3);


[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void GLFWcursorposfun(global::System.IntPtr _0, double _1, double _2);


[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void GLFWcursorenterfun(global::System.IntPtr _0, int _1);


[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void GLFWscrollfun(global::System.IntPtr _0, double _1, double _2);


[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void GLFWkeyfun(global::System.IntPtr _0, int _1, int _2, int _3, int _4);


[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void GLFWcharfun(global::System.IntPtr _0, uint _1);


[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void GLFWcharmodsfun(global::System.IntPtr _0, uint _1, int _2);


[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void GLFWdropfun(global::System.IntPtr _0, int _1, sbyte** _2);


[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void GLFWmonitorfun(global::System.IntPtr _0, int _1);


[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void GLFWjoystickfun(int _0, int _1);

public unsafe partial class GLFWmonitor
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::GLFWmonitor> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::GLFWmonitor>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::GLFWmonitor __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::GLFWmonitor(native.ToPointer(), skipVTables);
    }

    internal static global::GLFWmonitor __CreateInstance(global::GLFWmonitor.__Internal native, bool skipVTables = false)
    {
        return new global::GLFWmonitor(native, skipVTables);
    }

    private static void* __CopyValue(global::GLFWmonitor.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::GLFWmonitor.__Internal));
        *(global::GLFWmonitor.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private GLFWmonitor(global::GLFWmonitor.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected GLFWmonitor(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~GLFWmonitor()
    {
        Dispose(false);
    }
}

public unsafe partial class GLFWwindow
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::GLFWwindow> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::GLFWwindow>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::GLFWwindow __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::GLFWwindow(native.ToPointer(), skipVTables);
    }

    internal static global::GLFWwindow __CreateInstance(global::GLFWwindow.__Internal native, bool skipVTables = false)
    {
        return new global::GLFWwindow(native, skipVTables);
    }

    private static void* __CopyValue(global::GLFWwindow.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::GLFWwindow.__Internal));
        *(global::GLFWwindow.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private GLFWwindow(global::GLFWwindow.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected GLFWwindow(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~GLFWwindow()
    {
        Dispose(false);
    }
}

public unsafe partial class GLFWcursor
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::GLFWcursor> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::GLFWcursor>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::GLFWcursor __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::GLFWcursor(native.ToPointer(), skipVTables);
    }

    internal static global::GLFWcursor __CreateInstance(global::GLFWcursor.__Internal native, bool skipVTables = false)
    {
        return new global::GLFWcursor(native, skipVTables);
    }

    private static void* __CopyValue(global::GLFWcursor.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::GLFWcursor.__Internal));
        *(global::GLFWcursor.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private GLFWcursor(global::GLFWcursor.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected GLFWcursor(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~GLFWcursor()
    {
        Dispose(false);
    }
}


public unsafe partial class GLFWvidmode : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal int width;

        [FieldOffset(4)]
        internal int height;

        [FieldOffset(8)]
        internal int redBits;

        [FieldOffset(12)]
        internal int greenBits;

        [FieldOffset(16)]
        internal int blueBits;

        [FieldOffset(20)]
        internal int refreshRate;

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="??0GLFWvidmode@@QEAA@AEBU0@@Z")]
        internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::GLFWvidmode> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::GLFWvidmode>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::GLFWvidmode __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::GLFWvidmode(native.ToPointer(), skipVTables);
    }

    internal static global::GLFWvidmode __CreateInstance(global::GLFWvidmode.__Internal native, bool skipVTables = false)
    {
        return new global::GLFWvidmode(native, skipVTables);
    }

    private static void* __CopyValue(global::GLFWvidmode.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::GLFWvidmode.__Internal));
        *(global::GLFWvidmode.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private GLFWvidmode(global::GLFWvidmode.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected GLFWvidmode(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    public GLFWvidmode()
    {
        __Instance = Marshal.AllocHGlobal(sizeof(global::GLFWvidmode.__Internal));
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    public GLFWvidmode(global::GLFWvidmode _0)
    {
        __Instance = Marshal.AllocHGlobal(sizeof(global::GLFWvidmode.__Internal));
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
        *((global::GLFWvidmode.__Internal*) __Instance) = *((global::GLFWvidmode.__Internal*) _0.__Instance);
    }

    ~GLFWvidmode()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::GLFWvidmode __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public int Width
    {
        get
        {
            return ((global::GLFWvidmode.__Internal*) __Instance)->width;
        }

        set
        {
            ((global::GLFWvidmode.__Internal*)__Instance)->width = value;
        }
    }

    public int Height
    {
        get
        {
            return ((global::GLFWvidmode.__Internal*) __Instance)->height;
        }

        set
        {
            ((global::GLFWvidmode.__Internal*)__Instance)->height = value;
        }
    }

    public int RedBits
    {
        get
        {
            return ((global::GLFWvidmode.__Internal*) __Instance)->redBits;
        }

        set
        {
            ((global::GLFWvidmode.__Internal*)__Instance)->redBits = value;
        }
    }

    public int GreenBits
    {
        get
        {
            return ((global::GLFWvidmode.__Internal*) __Instance)->greenBits;
        }

        set
        {
            ((global::GLFWvidmode.__Internal*)__Instance)->greenBits = value;
        }
    }

    public int BlueBits
    {
        get
        {
            return ((global::GLFWvidmode.__Internal*) __Instance)->blueBits;
        }

        set
        {
            ((global::GLFWvidmode.__Internal*)__Instance)->blueBits = value;
        }
    }

    public int RefreshRate
    {
        get
        {
            return ((global::GLFWvidmode.__Internal*) __Instance)->refreshRate;
        }

        set
        {
            ((global::GLFWvidmode.__Internal*)__Instance)->refreshRate = value;
        }
    }
}


public unsafe partial class GLFWgammaramp : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::System.IntPtr red;

        [FieldOffset(8)]
        internal global::System.IntPtr green;

        [FieldOffset(16)]
        internal global::System.IntPtr blue;

        [FieldOffset(24)]
        internal uint size;

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="??0GLFWgammaramp@@QEAA@AEBU0@@Z")]
        internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::GLFWgammaramp> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::GLFWgammaramp>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::GLFWgammaramp __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::GLFWgammaramp(native.ToPointer(), skipVTables);
    }

    internal static global::GLFWgammaramp __CreateInstance(global::GLFWgammaramp.__Internal native, bool skipVTables = false)
    {
        return new global::GLFWgammaramp(native, skipVTables);
    }

    private static void* __CopyValue(global::GLFWgammaramp.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::GLFWgammaramp.__Internal));
        *(global::GLFWgammaramp.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private GLFWgammaramp(global::GLFWgammaramp.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected GLFWgammaramp(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    public GLFWgammaramp()
    {
        __Instance = Marshal.AllocHGlobal(sizeof(global::GLFWgammaramp.__Internal));
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    public GLFWgammaramp(global::GLFWgammaramp _0)
    {
        __Instance = Marshal.AllocHGlobal(sizeof(global::GLFWgammaramp.__Internal));
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
        *((global::GLFWgammaramp.__Internal*) __Instance) = *((global::GLFWgammaramp.__Internal*) _0.__Instance);
    }

    ~GLFWgammaramp()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::GLFWgammaramp __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public ushort* Red
    {
        get
        {
            return (ushort*) ((global::GLFWgammaramp.__Internal*) __Instance)->red;
        }

        set
        {
            ((global::GLFWgammaramp.__Internal*)__Instance)->red = (global::System.IntPtr) value;
        }
    }

    public ushort* Green
    {
        get
        {
            return (ushort*) ((global::GLFWgammaramp.__Internal*) __Instance)->green;
        }

        set
        {
            ((global::GLFWgammaramp.__Internal*)__Instance)->green = (global::System.IntPtr) value;
        }
    }

    public ushort* Blue
    {
        get
        {
            return (ushort*) ((global::GLFWgammaramp.__Internal*) __Instance)->blue;
        }

        set
        {
            ((global::GLFWgammaramp.__Internal*)__Instance)->blue = (global::System.IntPtr) value;
        }
    }

    public uint Size
    {
        get
        {
            return ((global::GLFWgammaramp.__Internal*) __Instance)->size;
        }

        set
        {
            ((global::GLFWgammaramp.__Internal*)__Instance)->size = value;
        }
    }
}


public unsafe partial class GLFWimage : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal int width;

        [FieldOffset(4)]
        internal int height;

        [FieldOffset(8)]
        internal global::System.IntPtr pixels;

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="??0GLFWimage@@QEAA@AEBU0@@Z")]
        internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::GLFWimage> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::GLFWimage>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::GLFWimage __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::GLFWimage(native.ToPointer(), skipVTables);
    }

    internal static global::GLFWimage __CreateInstance(global::GLFWimage.__Internal native, bool skipVTables = false)
    {
        return new global::GLFWimage(native, skipVTables);
    }

    private static void* __CopyValue(global::GLFWimage.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::GLFWimage.__Internal));
        *(global::GLFWimage.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private GLFWimage(global::GLFWimage.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected GLFWimage(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    public GLFWimage()
    {
        __Instance = Marshal.AllocHGlobal(sizeof(global::GLFWimage.__Internal));
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    public GLFWimage(global::GLFWimage _0)
    {
        __Instance = Marshal.AllocHGlobal(sizeof(global::GLFWimage.__Internal));
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
        *((global::GLFWimage.__Internal*) __Instance) = *((global::GLFWimage.__Internal*) _0.__Instance);
    }

    ~GLFWimage()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::GLFWimage __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public int Width
    {
        get
        {
            return ((global::GLFWimage.__Internal*) __Instance)->width;
        }

        set
        {
            ((global::GLFWimage.__Internal*)__Instance)->width = value;
        }
    }

    public int Height
    {
        get
        {
            return ((global::GLFWimage.__Internal*) __Instance)->height;
        }

        set
        {
            ((global::GLFWimage.__Internal*)__Instance)->height = value;
        }
    }

    public byte* Pixels
    {
        get
        {
            return (byte*) ((global::GLFWimage.__Internal*) __Instance)->pixels;
        }

        set
        {
            ((global::GLFWimage.__Internal*)__Instance)->pixels = (global::System.IntPtr) value;
        }
    }
}


public unsafe partial class GLFWgamepadstate : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal fixed byte buttons[15];

        [FieldOffset(16)]
        internal fixed float axes[6];

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="??0GLFWgamepadstate@@QEAA@AEBU0@@Z")]
        internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::GLFWgamepadstate> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::GLFWgamepadstate>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::GLFWgamepadstate __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::GLFWgamepadstate(native.ToPointer(), skipVTables);
    }

    internal static global::GLFWgamepadstate __CreateInstance(global::GLFWgamepadstate.__Internal native, bool skipVTables = false)
    {
        return new global::GLFWgamepadstate(native, skipVTables);
    }

    private static void* __CopyValue(global::GLFWgamepadstate.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::GLFWgamepadstate.__Internal));
        *(global::GLFWgamepadstate.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private GLFWgamepadstate(global::GLFWgamepadstate.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected GLFWgamepadstate(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    public GLFWgamepadstate()
    {
        __Instance = Marshal.AllocHGlobal(sizeof(global::GLFWgamepadstate.__Internal));
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    public GLFWgamepadstate(global::GLFWgamepadstate _0)
    {
        __Instance = Marshal.AllocHGlobal(sizeof(global::GLFWgamepadstate.__Internal));
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
        *((global::GLFWgamepadstate.__Internal*) __Instance) = *((global::GLFWgamepadstate.__Internal*) _0.__Instance);
    }

    ~GLFWgamepadstate()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::GLFWgamepadstate __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public byte[] Buttons
    {
        get
        {
            byte[] __value = null;
            if (((global::GLFWgamepadstate.__Internal*) __Instance)->buttons != null)
            {
                __value = new byte[15];
                for (int i = 0; i < 15; i++)
                    __value[i] = ((global::GLFWgamepadstate.__Internal*) __Instance)->buttons[i];
            }
            return __value;
        }

        set
        {
            if (value != null)
            {
                for (int i = 0; i < 15; i++)
                    ((global::GLFWgamepadstate.__Internal*)__Instance)->buttons[i] = value[i];
            }
        }
    }

    public float[] Axes
    {
        get
        {
            float[] __value = null;
            if (((global::GLFWgamepadstate.__Internal*) __Instance)->axes != null)
            {
                __value = new float[6];
                for (int i = 0; i < 6; i++)
                    __value[i] = ((global::GLFWgamepadstate.__Internal*) __Instance)->axes[i];
            }
            return __value;
        }

        set
        {
            if (value != null)
            {
                for (int i = 0; i < 6; i++)
                    ((global::GLFWgamepadstate.__Internal*)__Instance)->axes[i] = value[i];
            }
        }
    }
}

public unsafe partial class glfw3
{
    public partial struct __Internal
    {
        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwInit")]
        internal static extern int GlfwInit();

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwTerminate")]
        internal static extern void GlfwTerminate();

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwInitHint")]
        internal static extern void GlfwInitHint(int hint, int value);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetVersion")]
        internal static extern void GlfwGetVersion(int* major, int* minor, int* rev);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetVersionString")]
        internal static extern global::System.IntPtr GlfwGetVersionString();

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetError")]
        internal static extern int GlfwGetError(sbyte** description);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetErrorCallback")]
        internal static extern global::System.IntPtr GlfwSetErrorCallback(global::System.IntPtr cbfun);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetMonitors")]
        internal static extern global::System.IntPtr GlfwGetMonitors(int* count);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetPrimaryMonitor")]
        internal static extern global::System.IntPtr GlfwGetPrimaryMonitor();

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetMonitorPos")]
        internal static extern void GlfwGetMonitorPos(global::System.IntPtr monitor, int* xpos, int* ypos);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetMonitorPhysicalSize")]
        internal static extern void GlfwGetMonitorPhysicalSize(global::System.IntPtr monitor, int* widthMM, int* heightMM);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetMonitorContentScale")]
        internal static extern void GlfwGetMonitorContentScale(global::System.IntPtr monitor, float* xscale, float* yscale);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetMonitorName")]
        internal static extern global::System.IntPtr GlfwGetMonitorName(global::System.IntPtr monitor);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetMonitorUserPointer")]
        internal static extern void GlfwSetMonitorUserPointer(global::System.IntPtr monitor, global::System.IntPtr pointer);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetMonitorUserPointer")]
        internal static extern global::System.IntPtr GlfwGetMonitorUserPointer(global::System.IntPtr monitor);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetMonitorCallback")]
        internal static extern global::System.IntPtr GlfwSetMonitorCallback(global::System.IntPtr cbfun);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetVideoModes")]
        internal static extern global::System.IntPtr GlfwGetVideoModes(global::System.IntPtr monitor, int* count);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetVideoMode")]
        internal static extern global::System.IntPtr GlfwGetVideoMode(global::System.IntPtr monitor);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetGamma")]
        internal static extern void GlfwSetGamma(global::System.IntPtr monitor, float gamma);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetGammaRamp")]
        internal static extern global::System.IntPtr GlfwGetGammaRamp(global::System.IntPtr monitor);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetGammaRamp")]
        internal static extern void GlfwSetGammaRamp(global::System.IntPtr monitor, global::System.IntPtr ramp);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwDefaultWindowHints")]
        internal static extern void GlfwDefaultWindowHints();

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwWindowHint")]
        internal static extern void GlfwWindowHint(int hint, int value);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwWindowHintString")]
        internal static extern void GlfwWindowHintString(int hint, [MarshalAs(UnmanagedType.LPStr)] string value);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwCreateWindow")]
        internal static extern global::System.IntPtr GlfwCreateWindow(int width, int height, [MarshalAs(UnmanagedType.LPStr)] string title, global::System.IntPtr monitor, global::System.IntPtr share);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwDestroyWindow")]
        internal static extern void GlfwDestroyWindow(global::System.IntPtr window);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwWindowShouldClose")]
        internal static extern int GlfwWindowShouldClose(global::System.IntPtr window);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetWindowShouldClose")]
        internal static extern void GlfwSetWindowShouldClose(global::System.IntPtr window, int value);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetWindowTitle")]
        internal static extern void GlfwSetWindowTitle(global::System.IntPtr window, [MarshalAs(UnmanagedType.LPStr)] string title);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetWindowIcon")]
        internal static extern void GlfwSetWindowIcon(global::System.IntPtr window, int count, global::System.IntPtr images);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetWindowPos")]
        internal static extern void GlfwGetWindowPos(global::System.IntPtr window, int* xpos, int* ypos);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetWindowPos")]
        internal static extern void GlfwSetWindowPos(global::System.IntPtr window, int xpos, int ypos);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetWindowSize")]
        internal static extern void GlfwGetWindowSize(global::System.IntPtr window, int* width, int* height);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetWindowSizeLimits")]
        internal static extern void GlfwSetWindowSizeLimits(global::System.IntPtr window, int minwidth, int minheight, int maxwidth, int maxheight);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetWindowAspectRatio")]
        internal static extern void GlfwSetWindowAspectRatio(global::System.IntPtr window, int numer, int denom);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetWindowSize")]
        internal static extern void GlfwSetWindowSize(global::System.IntPtr window, int width, int height);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetFramebufferSize")]
        internal static extern void GlfwGetFramebufferSize(global::System.IntPtr window, int* width, int* height);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetWindowFrameSize")]
        internal static extern void GlfwGetWindowFrameSize(global::System.IntPtr window, int* left, int* top, int* right, int* bottom);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetWindowContentScale")]
        internal static extern void GlfwGetWindowContentScale(global::System.IntPtr window, float* xscale, float* yscale);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetWindowOpacity")]
        internal static extern float GlfwGetWindowOpacity(global::System.IntPtr window);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetWindowOpacity")]
        internal static extern void GlfwSetWindowOpacity(global::System.IntPtr window, float opacity);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwIconifyWindow")]
        internal static extern void GlfwIconifyWindow(global::System.IntPtr window);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwRestoreWindow")]
        internal static extern void GlfwRestoreWindow(global::System.IntPtr window);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwMaximizeWindow")]
        internal static extern void GlfwMaximizeWindow(global::System.IntPtr window);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwShowWindow")]
        internal static extern void GlfwShowWindow(global::System.IntPtr window);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwHideWindow")]
        internal static extern void GlfwHideWindow(global::System.IntPtr window);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwFocusWindow")]
        internal static extern void GlfwFocusWindow(global::System.IntPtr window);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwRequestWindowAttention")]
        internal static extern void GlfwRequestWindowAttention(global::System.IntPtr window);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetWindowMonitor")]
        internal static extern global::System.IntPtr GlfwGetWindowMonitor(global::System.IntPtr window);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetWindowMonitor")]
        internal static extern void GlfwSetWindowMonitor(global::System.IntPtr window, global::System.IntPtr monitor, int xpos, int ypos, int width, int height, int refreshRate);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetWindowAttrib")]
        internal static extern int GlfwGetWindowAttrib(global::System.IntPtr window, int attrib);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetWindowAttrib")]
        internal static extern void GlfwSetWindowAttrib(global::System.IntPtr window, int attrib, int value);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetWindowUserPointer")]
        internal static extern void GlfwSetWindowUserPointer(global::System.IntPtr window, global::System.IntPtr pointer);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetWindowUserPointer")]
        internal static extern global::System.IntPtr GlfwGetWindowUserPointer(global::System.IntPtr window);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetWindowPosCallback")]
        internal static extern global::System.IntPtr GlfwSetWindowPosCallback(global::System.IntPtr window, global::System.IntPtr cbfun);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetWindowSizeCallback")]
        internal static extern global::System.IntPtr GlfwSetWindowSizeCallback(global::System.IntPtr window, global::System.IntPtr cbfun);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetWindowCloseCallback")]
        internal static extern global::System.IntPtr GlfwSetWindowCloseCallback(global::System.IntPtr window, global::System.IntPtr cbfun);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetWindowRefreshCallback")]
        internal static extern global::System.IntPtr GlfwSetWindowRefreshCallback(global::System.IntPtr window, global::System.IntPtr cbfun);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetWindowFocusCallback")]
        internal static extern global::System.IntPtr GlfwSetWindowFocusCallback(global::System.IntPtr window, global::System.IntPtr cbfun);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetWindowIconifyCallback")]
        internal static extern global::System.IntPtr GlfwSetWindowIconifyCallback(global::System.IntPtr window, global::System.IntPtr cbfun);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetWindowMaximizeCallback")]
        internal static extern global::System.IntPtr GlfwSetWindowMaximizeCallback(global::System.IntPtr window, global::System.IntPtr cbfun);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetFramebufferSizeCallback")]
        internal static extern global::System.IntPtr GlfwSetFramebufferSizeCallback(global::System.IntPtr window, global::System.IntPtr cbfun);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetWindowContentScaleCallback")]
        internal static extern global::System.IntPtr GlfwSetWindowContentScaleCallback(global::System.IntPtr window, global::System.IntPtr cbfun);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwPollEvents")]
        internal static extern void GlfwPollEvents();

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwWaitEvents")]
        internal static extern void GlfwWaitEvents();

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwWaitEventsTimeout")]
        internal static extern void GlfwWaitEventsTimeout(double timeout);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwPostEmptyEvent")]
        internal static extern void GlfwPostEmptyEvent();

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetInputMode")]
        internal static extern int GlfwGetInputMode(global::System.IntPtr window, int mode);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetInputMode")]
        internal static extern void GlfwSetInputMode(global::System.IntPtr window, int mode, int value);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetKeyName")]
        internal static extern global::System.IntPtr GlfwGetKeyName(int key, int scancode);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetKeyScancode")]
        internal static extern int GlfwGetKeyScancode(int key);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetKey")]
        internal static extern int GlfwGetKey(global::System.IntPtr window, int key);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetMouseButton")]
        internal static extern int GlfwGetMouseButton(global::System.IntPtr window, int button);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetCursorPos")]
        internal static extern void GlfwGetCursorPos(global::System.IntPtr window, double* xpos, double* ypos);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetCursorPos")]
        internal static extern void GlfwSetCursorPos(global::System.IntPtr window, double xpos, double ypos);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwCreateCursor")]
        internal static extern global::System.IntPtr GlfwCreateCursor(global::System.IntPtr image, int xhot, int yhot);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwCreateStandardCursor")]
        internal static extern global::System.IntPtr GlfwCreateStandardCursor(int shape);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwDestroyCursor")]
        internal static extern void GlfwDestroyCursor(global::System.IntPtr cursor);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetCursor")]
        internal static extern void GlfwSetCursor(global::System.IntPtr window, global::System.IntPtr cursor);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetKeyCallback")]
        internal static extern global::System.IntPtr GlfwSetKeyCallback(global::System.IntPtr window, global::System.IntPtr cbfun);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetCharCallback")]
        internal static extern global::System.IntPtr GlfwSetCharCallback(global::System.IntPtr window, global::System.IntPtr cbfun);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetCharModsCallback")]
        internal static extern global::System.IntPtr GlfwSetCharModsCallback(global::System.IntPtr window, global::System.IntPtr cbfun);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetMouseButtonCallback")]
        internal static extern global::System.IntPtr GlfwSetMouseButtonCallback(global::System.IntPtr window, global::System.IntPtr cbfun);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetCursorPosCallback")]
        internal static extern global::System.IntPtr GlfwSetCursorPosCallback(global::System.IntPtr window, global::System.IntPtr cbfun);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetCursorEnterCallback")]
        internal static extern global::System.IntPtr GlfwSetCursorEnterCallback(global::System.IntPtr window, global::System.IntPtr cbfun);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetScrollCallback")]
        internal static extern global::System.IntPtr GlfwSetScrollCallback(global::System.IntPtr window, global::System.IntPtr cbfun);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetDropCallback")]
        internal static extern global::System.IntPtr GlfwSetDropCallback(global::System.IntPtr window, global::System.IntPtr cbfun);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwJoystickPresent")]
        internal static extern int GlfwJoystickPresent(int jid);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetJoystickAxes")]
        internal static extern float* GlfwGetJoystickAxes(int jid, int* count);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetJoystickButtons")]
        internal static extern byte* GlfwGetJoystickButtons(int jid, int* count);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetJoystickHats")]
        internal static extern byte* GlfwGetJoystickHats(int jid, int* count);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetJoystickName")]
        internal static extern global::System.IntPtr GlfwGetJoystickName(int jid);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetJoystickGUID")]
        internal static extern global::System.IntPtr GlfwGetJoystickGUID(int jid);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetJoystickUserPointer")]
        internal static extern void GlfwSetJoystickUserPointer(int jid, global::System.IntPtr pointer);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetJoystickUserPointer")]
        internal static extern global::System.IntPtr GlfwGetJoystickUserPointer(int jid);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwJoystickIsGamepad")]
        internal static extern int GlfwJoystickIsGamepad(int jid);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetJoystickCallback")]
        internal static extern global::System.IntPtr GlfwSetJoystickCallback(global::System.IntPtr cbfun);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwUpdateGamepadMappings")]
        internal static extern int GlfwUpdateGamepadMappings([MarshalAs(UnmanagedType.LPStr)] string @string);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetGamepadName")]
        internal static extern global::System.IntPtr GlfwGetGamepadName(int jid);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetGamepadState")]
        internal static extern int GlfwGetGamepadState(int jid, global::System.IntPtr state);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetClipboardString")]
        internal static extern void GlfwSetClipboardString(global::System.IntPtr window, [MarshalAs(UnmanagedType.LPStr)] string @string);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetClipboardString")]
        internal static extern global::System.IntPtr GlfwGetClipboardString(global::System.IntPtr window);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetTime")]
        internal static extern double GlfwGetTime();

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSetTime")]
        internal static extern void GlfwSetTime(double time);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetTimerValue")]
        internal static extern ulong GlfwGetTimerValue();

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetTimerFrequency")]
        internal static extern ulong GlfwGetTimerFrequency();

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwMakeContextCurrent")]
        internal static extern void GlfwMakeContextCurrent(global::System.IntPtr window);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetCurrentContext")]
        internal static extern global::System.IntPtr GlfwGetCurrentContext();

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSwapBuffers")]
        internal static extern void GlfwSwapBuffers(global::System.IntPtr window);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwSwapInterval")]
        internal static extern void GlfwSwapInterval(int interval);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwExtensionSupported")]
        internal static extern int GlfwExtensionSupported([MarshalAs(UnmanagedType.LPStr)] string extension);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetProcAddress")]
        internal static extern global::System.IntPtr GlfwGetProcAddress([MarshalAs(UnmanagedType.LPStr)] string procname);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwVulkanSupported")]
        internal static extern int GlfwVulkanSupported();

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="glfwGetRequiredInstanceExtensions")]
        internal static extern sbyte** GlfwGetRequiredInstanceExtensions(uint* count);
    }


    public static int GlfwInit()
    {
        var __ret = __Internal.GlfwInit();
        return __ret;
    }


    public static void GlfwTerminate()
    {
        __Internal.GlfwTerminate();
    }


    public static void GlfwInitHint(int hint, int value)
    {
        __Internal.GlfwInitHint(hint, value);
    }


    public static void GlfwGetVersion(ref int major, ref int minor, ref int rev)
    {
        fixed (int* __refParamPtr0 = &major)
        {
            var __arg0 = __refParamPtr0;
            fixed (int* __refParamPtr1 = &minor)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &rev)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.GlfwGetVersion(__arg0, __arg1, __arg2);
                }
            }
        }
    }


    public static string GlfwGetVersionString()
    {
        var __ret = __Internal.GlfwGetVersionString();
        return Marshal.PtrToStringAnsi(__ret);
    }


    public static int GlfwGetError(sbyte** description)
    {
        var __ret = __Internal.GlfwGetError(description);
        return __ret;
    }


    public static global::GLFWerrorfun GlfwSetErrorCallback(global::GLFWerrorfun cbfun)
    {
        var __arg0 = cbfun == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(cbfun);
        var __ret = __Internal.GlfwSetErrorCallback(__arg0);
        var __ptr0 = __ret;
        return __ptr0 == IntPtr.Zero? null : (global::GLFWerrorfun) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::GLFWerrorfun));
    }


    public static global::GLFWmonitor GlfwGetMonitors(ref int count)
    {
        fixed (int* __refParamPtr0 = &count)
        {
            var __arg0 = __refParamPtr0;
            var __ret = __Internal.GlfwGetMonitors(__arg0);
            global::GLFWmonitor __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::GLFWmonitor.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::GLFWmonitor) global::GLFWmonitor.NativeToManagedMap[__ret];
            else __result0 = global::GLFWmonitor.__CreateInstance(__ret);
            return __result0;
        }
    }


    public static global::GLFWmonitor GlfwGetPrimaryMonitor()
    {
        var __ret = __Internal.GlfwGetPrimaryMonitor();
        global::GLFWmonitor __result0;
        if (__ret == IntPtr.Zero) __result0 = null;
        else if (global::GLFWmonitor.NativeToManagedMap.ContainsKey(__ret))
            __result0 = (global::GLFWmonitor) global::GLFWmonitor.NativeToManagedMap[__ret];
        else __result0 = global::GLFWmonitor.__CreateInstance(__ret);
        return __result0;
    }


    public static void GlfwGetMonitorPos(global::GLFWmonitor monitor, ref int xpos, ref int ypos)
    {
        var __arg0 = ReferenceEquals(monitor, null) ? global::System.IntPtr.Zero : monitor.__Instance;
        fixed (int* __refParamPtr1 = &xpos)
        {
            var __arg1 = __refParamPtr1;
            fixed (int* __refParamPtr2 = &ypos)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlfwGetMonitorPos(__arg0, __arg1, __arg2);
            }
        }
    }


    public static void GlfwGetMonitorPhysicalSize(global::GLFWmonitor monitor, ref int widthMM, ref int heightMM)
    {
        var __arg0 = ReferenceEquals(monitor, null) ? global::System.IntPtr.Zero : monitor.__Instance;
        fixed (int* __refParamPtr1 = &widthMM)
        {
            var __arg1 = __refParamPtr1;
            fixed (int* __refParamPtr2 = &heightMM)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlfwGetMonitorPhysicalSize(__arg0, __arg1, __arg2);
            }
        }
    }


    public static void GlfwGetMonitorContentScale(global::GLFWmonitor monitor, ref float xscale, ref float yscale)
    {
        var __arg0 = ReferenceEquals(monitor, null) ? global::System.IntPtr.Zero : monitor.__Instance;
        fixed (float* __refParamPtr1 = &xscale)
        {
            var __arg1 = __refParamPtr1;
            fixed (float* __refParamPtr2 = &yscale)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlfwGetMonitorContentScale(__arg0, __arg1, __arg2);
            }
        }
    }


    public static string GlfwGetMonitorName(global::GLFWmonitor monitor)
    {
        var __arg0 = ReferenceEquals(monitor, null) ? global::System.IntPtr.Zero : monitor.__Instance;
        var __ret = __Internal.GlfwGetMonitorName(__arg0);
        return Marshal.PtrToStringAnsi(__ret);
    }


    public static void GlfwSetMonitorUserPointer(global::GLFWmonitor monitor, global::System.IntPtr pointer)
    {
        var __arg0 = ReferenceEquals(monitor, null) ? global::System.IntPtr.Zero : monitor.__Instance;
        __Internal.GlfwSetMonitorUserPointer(__arg0, pointer);
    }


    public static global::System.IntPtr GlfwGetMonitorUserPointer(global::GLFWmonitor monitor)
    {
        var __arg0 = ReferenceEquals(monitor, null) ? global::System.IntPtr.Zero : monitor.__Instance;
        var __ret = __Internal.GlfwGetMonitorUserPointer(__arg0);
        return __ret;
    }


    public static global::GLFWmonitorfun GlfwSetMonitorCallback(global::GLFWmonitorfun cbfun)
    {
        var __arg0 = cbfun == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(cbfun);
        var __ret = __Internal.GlfwSetMonitorCallback(__arg0);
        var __ptr0 = __ret;
        return __ptr0 == IntPtr.Zero? null : (global::GLFWmonitorfun) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::GLFWmonitorfun));
    }


    public static global::GLFWvidmode GlfwGetVideoModes(global::GLFWmonitor monitor, ref int count)
    {
        var __arg0 = ReferenceEquals(monitor, null) ? global::System.IntPtr.Zero : monitor.__Instance;
        fixed (int* __refParamPtr1 = &count)
        {
            var __arg1 = __refParamPtr1;
            var __ret = __Internal.GlfwGetVideoModes(__arg0, __arg1);
            global::GLFWvidmode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::GLFWvidmode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::GLFWvidmode) global::GLFWvidmode.NativeToManagedMap[__ret];
            else __result0 = global::GLFWvidmode.__CreateInstance(__ret);
            return __result0;
        }
    }


    public static global::GLFWvidmode GlfwGetVideoMode(global::GLFWmonitor monitor)
    {
        var __arg0 = ReferenceEquals(monitor, null) ? global::System.IntPtr.Zero : monitor.__Instance;
        var __ret = __Internal.GlfwGetVideoMode(__arg0);
        global::GLFWvidmode __result0;
        if (__ret == IntPtr.Zero) __result0 = null;
        else if (global::GLFWvidmode.NativeToManagedMap.ContainsKey(__ret))
            __result0 = (global::GLFWvidmode) global::GLFWvidmode.NativeToManagedMap[__ret];
        else __result0 = global::GLFWvidmode.__CreateInstance(__ret);
        return __result0;
    }


    public static void GlfwSetGamma(global::GLFWmonitor monitor, float gamma)
    {
        var __arg0 = ReferenceEquals(monitor, null) ? global::System.IntPtr.Zero : monitor.__Instance;
        __Internal.GlfwSetGamma(__arg0, gamma);
    }


    public static global::GLFWgammaramp GlfwGetGammaRamp(global::GLFWmonitor monitor)
    {
        var __arg0 = ReferenceEquals(monitor, null) ? global::System.IntPtr.Zero : monitor.__Instance;
        var __ret = __Internal.GlfwGetGammaRamp(__arg0);
        global::GLFWgammaramp __result0;
        if (__ret == IntPtr.Zero) __result0 = null;
        else if (global::GLFWgammaramp.NativeToManagedMap.ContainsKey(__ret))
            __result0 = (global::GLFWgammaramp) global::GLFWgammaramp.NativeToManagedMap[__ret];
        else __result0 = global::GLFWgammaramp.__CreateInstance(__ret);
        return __result0;
    }


    public static void GlfwSetGammaRamp(global::GLFWmonitor monitor, global::GLFWgammaramp ramp)
    {
        var __arg0 = ReferenceEquals(monitor, null) ? global::System.IntPtr.Zero : monitor.__Instance;
        var __arg1 = ReferenceEquals(ramp, null) ? global::System.IntPtr.Zero : ramp.__Instance;
        __Internal.GlfwSetGammaRamp(__arg0, __arg1);
    }


    public static void GlfwDefaultWindowHints()
    {
        __Internal.GlfwDefaultWindowHints();
    }


    public static void GlfwWindowHint(int hint, int value)
    {
        __Internal.GlfwWindowHint(hint, value);
    }


    public static void GlfwWindowHintString(int hint, string value)
    {
        __Internal.GlfwWindowHintString(hint, value);
    }


    public static global::GLFWwindow GlfwCreateWindow(int width, int height, string title, global::GLFWmonitor monitor, global::GLFWwindow share)
    {
        var __arg3 = ReferenceEquals(monitor, null) ? global::System.IntPtr.Zero : monitor.__Instance;
        var __arg4 = ReferenceEquals(share, null) ? global::System.IntPtr.Zero : share.__Instance;
        var __ret = __Internal.GlfwCreateWindow(width, height, title, __arg3, __arg4);
        global::GLFWwindow __result0;
        if (__ret == IntPtr.Zero) __result0 = null;
        else if (global::GLFWwindow.NativeToManagedMap.ContainsKey(__ret))
            __result0 = (global::GLFWwindow) global::GLFWwindow.NativeToManagedMap[__ret];
        else __result0 = global::GLFWwindow.__CreateInstance(__ret);
        return __result0;
    }


    public static void GlfwDestroyWindow(global::GLFWwindow window)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        __Internal.GlfwDestroyWindow(__arg0);
    }


    public static int GlfwWindowShouldClose(global::GLFWwindow window)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        var __ret = __Internal.GlfwWindowShouldClose(__arg0);
        return __ret;
    }


    public static void GlfwSetWindowShouldClose(global::GLFWwindow window, int value)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        __Internal.GlfwSetWindowShouldClose(__arg0, value);
    }


    public static void GlfwSetWindowTitle(global::GLFWwindow window, string title)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        __Internal.GlfwSetWindowTitle(__arg0, title);
    }


    public static void GlfwSetWindowIcon(global::GLFWwindow window, int count, global::GLFWimage images)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        var __arg2 = ReferenceEquals(images, null) ? global::System.IntPtr.Zero : images.__Instance;
        __Internal.GlfwSetWindowIcon(__arg0, count, __arg2);
    }


    public static void GlfwGetWindowPos(global::GLFWwindow window, ref int xpos, ref int ypos)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        fixed (int* __refParamPtr1 = &xpos)
        {
            var __arg1 = __refParamPtr1;
            fixed (int* __refParamPtr2 = &ypos)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlfwGetWindowPos(__arg0, __arg1, __arg2);
            }
        }
    }


    public static void GlfwSetWindowPos(global::GLFWwindow window, int xpos, int ypos)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        __Internal.GlfwSetWindowPos(__arg0, xpos, ypos);
    }


    public static void GlfwGetWindowSize(global::GLFWwindow window, ref int width, ref int height)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        fixed (int* __refParamPtr1 = &width)
        {
            var __arg1 = __refParamPtr1;
            fixed (int* __refParamPtr2 = &height)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlfwGetWindowSize(__arg0, __arg1, __arg2);
            }
        }
    }


    public static void GlfwSetWindowSizeLimits(global::GLFWwindow window, int minwidth, int minheight, int maxwidth, int maxheight)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        __Internal.GlfwSetWindowSizeLimits(__arg0, minwidth, minheight, maxwidth, maxheight);
    }


    public static void GlfwSetWindowAspectRatio(global::GLFWwindow window, int numer, int denom)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        __Internal.GlfwSetWindowAspectRatio(__arg0, numer, denom);
    }


    public static void GlfwSetWindowSize(global::GLFWwindow window, int width, int height)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        __Internal.GlfwSetWindowSize(__arg0, width, height);
    }


    public static void GlfwGetFramebufferSize(global::GLFWwindow window, ref int width, ref int height)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        fixed (int* __refParamPtr1 = &width)
        {
            var __arg1 = __refParamPtr1;
            fixed (int* __refParamPtr2 = &height)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlfwGetFramebufferSize(__arg0, __arg1, __arg2);
            }
        }
    }


    public static void GlfwGetWindowFrameSize(global::GLFWwindow window, ref int left, ref int top, ref int right, ref int bottom)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        fixed (int* __refParamPtr1 = &left)
        {
            var __arg1 = __refParamPtr1;
            fixed (int* __refParamPtr2 = &top)
            {
                var __arg2 = __refParamPtr2;
                fixed (int* __refParamPtr3 = &right)
                {
                    var __arg3 = __refParamPtr3;
                    fixed (int* __refParamPtr4 = &bottom)
                    {
                        var __arg4 = __refParamPtr4;
                        __Internal.GlfwGetWindowFrameSize(__arg0, __arg1, __arg2, __arg3, __arg4);
                    }
                }
            }
        }
    }


    public static void GlfwGetWindowContentScale(global::GLFWwindow window, ref float xscale, ref float yscale)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        fixed (float* __refParamPtr1 = &xscale)
        {
            var __arg1 = __refParamPtr1;
            fixed (float* __refParamPtr2 = &yscale)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlfwGetWindowContentScale(__arg0, __arg1, __arg2);
            }
        }
    }


    public static float GlfwGetWindowOpacity(global::GLFWwindow window)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        var __ret = __Internal.GlfwGetWindowOpacity(__arg0);
        return __ret;
    }


    public static void GlfwSetWindowOpacity(global::GLFWwindow window, float opacity)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        __Internal.GlfwSetWindowOpacity(__arg0, opacity);
    }


    public static void GlfwIconifyWindow(global::GLFWwindow window)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        __Internal.GlfwIconifyWindow(__arg0);
    }


    public static void GlfwRestoreWindow(global::GLFWwindow window)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        __Internal.GlfwRestoreWindow(__arg0);
    }


    public static void GlfwMaximizeWindow(global::GLFWwindow window)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        __Internal.GlfwMaximizeWindow(__arg0);
    }


    public static void GlfwShowWindow(global::GLFWwindow window)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        __Internal.GlfwShowWindow(__arg0);
    }


    public static void GlfwHideWindow(global::GLFWwindow window)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        __Internal.GlfwHideWindow(__arg0);
    }


    public static void GlfwFocusWindow(global::GLFWwindow window)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        __Internal.GlfwFocusWindow(__arg0);
    }


    public static void GlfwRequestWindowAttention(global::GLFWwindow window)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        __Internal.GlfwRequestWindowAttention(__arg0);
    }


    public static global::GLFWmonitor GlfwGetWindowMonitor(global::GLFWwindow window)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        var __ret = __Internal.GlfwGetWindowMonitor(__arg0);
        global::GLFWmonitor __result0;
        if (__ret == IntPtr.Zero) __result0 = null;
        else if (global::GLFWmonitor.NativeToManagedMap.ContainsKey(__ret))
            __result0 = (global::GLFWmonitor) global::GLFWmonitor.NativeToManagedMap[__ret];
        else __result0 = global::GLFWmonitor.__CreateInstance(__ret);
        return __result0;
    }


    public static void GlfwSetWindowMonitor(global::GLFWwindow window, global::GLFWmonitor monitor, int xpos, int ypos, int width, int height, int refreshRate)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        var __arg1 = ReferenceEquals(monitor, null) ? global::System.IntPtr.Zero : monitor.__Instance;
        __Internal.GlfwSetWindowMonitor(__arg0, __arg1, xpos, ypos, width, height, refreshRate);
    }


    public static int GlfwGetWindowAttrib(global::GLFWwindow window, int attrib)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        var __ret = __Internal.GlfwGetWindowAttrib(__arg0, attrib);
        return __ret;
    }


    public static void GlfwSetWindowAttrib(global::GLFWwindow window, int attrib, int value)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        __Internal.GlfwSetWindowAttrib(__arg0, attrib, value);
    }


    public static void GlfwSetWindowUserPointer(global::GLFWwindow window, global::System.IntPtr pointer)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        __Internal.GlfwSetWindowUserPointer(__arg0, pointer);
    }


    public static global::System.IntPtr GlfwGetWindowUserPointer(global::GLFWwindow window)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        var __ret = __Internal.GlfwGetWindowUserPointer(__arg0);
        return __ret;
    }


    public static global::GLFWwindowposfun GlfwSetWindowPosCallback(global::GLFWwindow window, global::GLFWwindowposfun cbfun)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        var __arg1 = cbfun == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(cbfun);
        var __ret = __Internal.GlfwSetWindowPosCallback(__arg0, __arg1);
        var __ptr0 = __ret;
        return __ptr0 == IntPtr.Zero? null : (global::GLFWwindowposfun) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::GLFWwindowposfun));
    }


    public static global::GLFWwindowsizefun GlfwSetWindowSizeCallback(global::GLFWwindow window, global::GLFWwindowsizefun cbfun)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        var __arg1 = cbfun == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(cbfun);
        var __ret = __Internal.GlfwSetWindowSizeCallback(__arg0, __arg1);
        var __ptr0 = __ret;
        return __ptr0 == IntPtr.Zero? null : (global::GLFWwindowsizefun) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::GLFWwindowsizefun));
    }


    public static global::GLFWwindowclosefun GlfwSetWindowCloseCallback(global::GLFWwindow window, global::GLFWwindowclosefun cbfun)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        var __arg1 = cbfun == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(cbfun);
        var __ret = __Internal.GlfwSetWindowCloseCallback(__arg0, __arg1);
        var __ptr0 = __ret;
        return __ptr0 == IntPtr.Zero? null : (global::GLFWwindowclosefun) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::GLFWwindowclosefun));
    }


    public static global::GLFWwindowrefreshfun GlfwSetWindowRefreshCallback(global::GLFWwindow window, global::GLFWwindowrefreshfun cbfun)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        var __arg1 = cbfun == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(cbfun);
        var __ret = __Internal.GlfwSetWindowRefreshCallback(__arg0, __arg1);
        var __ptr0 = __ret;
        return __ptr0 == IntPtr.Zero? null : (global::GLFWwindowrefreshfun) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::GLFWwindowrefreshfun));
    }


    public static global::GLFWwindowfocusfun GlfwSetWindowFocusCallback(global::GLFWwindow window, global::GLFWwindowfocusfun cbfun)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        var __arg1 = cbfun == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(cbfun);
        var __ret = __Internal.GlfwSetWindowFocusCallback(__arg0, __arg1);
        var __ptr0 = __ret;
        return __ptr0 == IntPtr.Zero? null : (global::GLFWwindowfocusfun) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::GLFWwindowfocusfun));
    }


    public static global::GLFWwindowiconifyfun GlfwSetWindowIconifyCallback(global::GLFWwindow window, global::GLFWwindowiconifyfun cbfun)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        var __arg1 = cbfun == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(cbfun);
        var __ret = __Internal.GlfwSetWindowIconifyCallback(__arg0, __arg1);
        var __ptr0 = __ret;
        return __ptr0 == IntPtr.Zero? null : (global::GLFWwindowiconifyfun) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::GLFWwindowiconifyfun));
    }


    public static global::GLFWwindowmaximizefun GlfwSetWindowMaximizeCallback(global::GLFWwindow window, global::GLFWwindowmaximizefun cbfun)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        var __arg1 = cbfun == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(cbfun);
        var __ret = __Internal.GlfwSetWindowMaximizeCallback(__arg0, __arg1);
        var __ptr0 = __ret;
        return __ptr0 == IntPtr.Zero? null : (global::GLFWwindowmaximizefun) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::GLFWwindowmaximizefun));
    }


    public static global::GLFWframebuffersizefun GlfwSetFramebufferSizeCallback(global::GLFWwindow window, global::GLFWframebuffersizefun cbfun)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        var __arg1 = cbfun == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(cbfun);
        var __ret = __Internal.GlfwSetFramebufferSizeCallback(__arg0, __arg1);
        var __ptr0 = __ret;
        return __ptr0 == IntPtr.Zero? null : (global::GLFWframebuffersizefun) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::GLFWframebuffersizefun));
    }


    public static global::GLFWwindowcontentscalefun GlfwSetWindowContentScaleCallback(global::GLFWwindow window, global::GLFWwindowcontentscalefun cbfun)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        var __arg1 = cbfun == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(cbfun);
        var __ret = __Internal.GlfwSetWindowContentScaleCallback(__arg0, __arg1);
        var __ptr0 = __ret;
        return __ptr0 == IntPtr.Zero? null : (global::GLFWwindowcontentscalefun) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::GLFWwindowcontentscalefun));
    }


    public static void GlfwPollEvents()
    {
        __Internal.GlfwPollEvents();
    }


    public static void GlfwWaitEvents()
    {
        __Internal.GlfwWaitEvents();
    }


    public static void GlfwWaitEventsTimeout(double timeout)
    {
        __Internal.GlfwWaitEventsTimeout(timeout);
    }


    public static void GlfwPostEmptyEvent()
    {
        __Internal.GlfwPostEmptyEvent();
    }


    public static int GlfwGetInputMode(global::GLFWwindow window, int mode)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        var __ret = __Internal.GlfwGetInputMode(__arg0, mode);
        return __ret;
    }


    public static void GlfwSetInputMode(global::GLFWwindow window, int mode, int value)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        __Internal.GlfwSetInputMode(__arg0, mode, value);
    }


    public static string GlfwGetKeyName(int key, int scancode)
    {
        var __ret = __Internal.GlfwGetKeyName(key, scancode);
        return Marshal.PtrToStringAnsi(__ret);
    }


    public static int GlfwGetKeyScancode(int key)
    {
        var __ret = __Internal.GlfwGetKeyScancode(key);
        return __ret;
    }


    public static int GlfwGetKey(global::GLFWwindow window, int key)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        var __ret = __Internal.GlfwGetKey(__arg0, key);
        return __ret;
    }


    public static int GlfwGetMouseButton(global::GLFWwindow window, int button)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        var __ret = __Internal.GlfwGetMouseButton(__arg0, button);
        return __ret;
    }


    public static void GlfwGetCursorPos(global::GLFWwindow window, ref double xpos, ref double ypos)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        fixed (double* __refParamPtr1 = &xpos)
        {
            var __arg1 = __refParamPtr1;
            fixed (double* __refParamPtr2 = &ypos)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlfwGetCursorPos(__arg0, __arg1, __arg2);
            }
        }
    }


    public static void GlfwSetCursorPos(global::GLFWwindow window, double xpos, double ypos)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        __Internal.GlfwSetCursorPos(__arg0, xpos, ypos);
    }


    public static global::GLFWcursor GlfwCreateCursor(global::GLFWimage image, int xhot, int yhot)
    {
        var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
        var __ret = __Internal.GlfwCreateCursor(__arg0, xhot, yhot);
        global::GLFWcursor __result0;
        if (__ret == IntPtr.Zero) __result0 = null;
        else if (global::GLFWcursor.NativeToManagedMap.ContainsKey(__ret))
            __result0 = (global::GLFWcursor) global::GLFWcursor.NativeToManagedMap[__ret];
        else __result0 = global::GLFWcursor.__CreateInstance(__ret);
        return __result0;
    }


    public static global::GLFWcursor GlfwCreateStandardCursor(int shape)
    {
        var __ret = __Internal.GlfwCreateStandardCursor(shape);
        global::GLFWcursor __result0;
        if (__ret == IntPtr.Zero) __result0 = null;
        else if (global::GLFWcursor.NativeToManagedMap.ContainsKey(__ret))
            __result0 = (global::GLFWcursor) global::GLFWcursor.NativeToManagedMap[__ret];
        else __result0 = global::GLFWcursor.__CreateInstance(__ret);
        return __result0;
    }


    public static void GlfwDestroyCursor(global::GLFWcursor cursor)
    {
        var __arg0 = ReferenceEquals(cursor, null) ? global::System.IntPtr.Zero : cursor.__Instance;
        __Internal.GlfwDestroyCursor(__arg0);
    }


    public static void GlfwSetCursor(global::GLFWwindow window, global::GLFWcursor cursor)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        var __arg1 = ReferenceEquals(cursor, null) ? global::System.IntPtr.Zero : cursor.__Instance;
        __Internal.GlfwSetCursor(__arg0, __arg1);
    }


    public static global::GLFWkeyfun GlfwSetKeyCallback(global::GLFWwindow window, global::GLFWkeyfun cbfun)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        var __arg1 = cbfun == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(cbfun);
        var __ret = __Internal.GlfwSetKeyCallback(__arg0, __arg1);
        var __ptr0 = __ret;
        return __ptr0 == IntPtr.Zero? null : (global::GLFWkeyfun) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::GLFWkeyfun));
    }


    public static global::GLFWcharfun GlfwSetCharCallback(global::GLFWwindow window, global::GLFWcharfun cbfun)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        var __arg1 = cbfun == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(cbfun);
        var __ret = __Internal.GlfwSetCharCallback(__arg0, __arg1);
        var __ptr0 = __ret;
        return __ptr0 == IntPtr.Zero? null : (global::GLFWcharfun) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::GLFWcharfun));
    }


    public static global::GLFWcharmodsfun GlfwSetCharModsCallback(global::GLFWwindow window, global::GLFWcharmodsfun cbfun)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        var __arg1 = cbfun == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(cbfun);
        var __ret = __Internal.GlfwSetCharModsCallback(__arg0, __arg1);
        var __ptr0 = __ret;
        return __ptr0 == IntPtr.Zero? null : (global::GLFWcharmodsfun) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::GLFWcharmodsfun));
    }


    public static global::GLFWmousebuttonfun GlfwSetMouseButtonCallback(global::GLFWwindow window, global::GLFWmousebuttonfun cbfun)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        var __arg1 = cbfun == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(cbfun);
        var __ret = __Internal.GlfwSetMouseButtonCallback(__arg0, __arg1);
        var __ptr0 = __ret;
        return __ptr0 == IntPtr.Zero? null : (global::GLFWmousebuttonfun) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::GLFWmousebuttonfun));
    }


    public static global::GLFWcursorposfun GlfwSetCursorPosCallback(global::GLFWwindow window, global::GLFWcursorposfun cbfun)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        var __arg1 = cbfun == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(cbfun);
        var __ret = __Internal.GlfwSetCursorPosCallback(__arg0, __arg1);
        var __ptr0 = __ret;
        return __ptr0 == IntPtr.Zero? null : (global::GLFWcursorposfun) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::GLFWcursorposfun));
    }


    public static global::GLFWcursorenterfun GlfwSetCursorEnterCallback(global::GLFWwindow window, global::GLFWcursorenterfun cbfun)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        var __arg1 = cbfun == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(cbfun);
        var __ret = __Internal.GlfwSetCursorEnterCallback(__arg0, __arg1);
        var __ptr0 = __ret;
        return __ptr0 == IntPtr.Zero? null : (global::GLFWcursorenterfun) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::GLFWcursorenterfun));
    }


    public static global::GLFWscrollfun GlfwSetScrollCallback(global::GLFWwindow window, global::GLFWscrollfun cbfun)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        var __arg1 = cbfun == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(cbfun);
        var __ret = __Internal.GlfwSetScrollCallback(__arg0, __arg1);
        var __ptr0 = __ret;
        return __ptr0 == IntPtr.Zero? null : (global::GLFWscrollfun) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::GLFWscrollfun));
    }


    public static global::GLFWdropfun GlfwSetDropCallback(global::GLFWwindow window, global::GLFWdropfun cbfun)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        var __arg1 = cbfun == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(cbfun);
        var __ret = __Internal.GlfwSetDropCallback(__arg0, __arg1);
        var __ptr0 = __ret;
        return __ptr0 == IntPtr.Zero? null : (global::GLFWdropfun) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::GLFWdropfun));
    }


    public static int GlfwJoystickPresent(int jid)
    {
        var __ret = __Internal.GlfwJoystickPresent(jid);
        return __ret;
    }


    public static float* GlfwGetJoystickAxes(int jid, ref int count)
    {
        fixed (int* __refParamPtr1 = &count)
        {
            var __arg1 = __refParamPtr1;
            var __ret = __Internal.GlfwGetJoystickAxes(jid, __arg1);
            return __ret;
        }
    }


    public static byte* GlfwGetJoystickButtons(int jid, ref int count)
    {
        fixed (int* __refParamPtr1 = &count)
        {
            var __arg1 = __refParamPtr1;
            var __ret = __Internal.GlfwGetJoystickButtons(jid, __arg1);
            return __ret;
        }
    }


    public static byte* GlfwGetJoystickHats(int jid, ref int count)
    {
        fixed (int* __refParamPtr1 = &count)
        {
            var __arg1 = __refParamPtr1;
            var __ret = __Internal.GlfwGetJoystickHats(jid, __arg1);
            return __ret;
        }
    }


    public static string GlfwGetJoystickName(int jid)
    {
        var __ret = __Internal.GlfwGetJoystickName(jid);
        return Marshal.PtrToStringAnsi(__ret);
    }


    public static string GlfwGetJoystickGUID(int jid)
    {
        var __ret = __Internal.GlfwGetJoystickGUID(jid);
        return Marshal.PtrToStringAnsi(__ret);
    }


    public static void GlfwSetJoystickUserPointer(int jid, global::System.IntPtr pointer)
    {
        __Internal.GlfwSetJoystickUserPointer(jid, pointer);
    }


    public static global::System.IntPtr GlfwGetJoystickUserPointer(int jid)
    {
        var __ret = __Internal.GlfwGetJoystickUserPointer(jid);
        return __ret;
    }


    public static int GlfwJoystickIsGamepad(int jid)
    {
        var __ret = __Internal.GlfwJoystickIsGamepad(jid);
        return __ret;
    }


    public static global::GLFWjoystickfun GlfwSetJoystickCallback(global::GLFWjoystickfun cbfun)
    {
        var __arg0 = cbfun == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(cbfun);
        var __ret = __Internal.GlfwSetJoystickCallback(__arg0);
        var __ptr0 = __ret;
        return __ptr0 == IntPtr.Zero? null : (global::GLFWjoystickfun) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::GLFWjoystickfun));
    }


    public static int GlfwUpdateGamepadMappings(string @string)
    {
        var __ret = __Internal.GlfwUpdateGamepadMappings(@string);
        return __ret;
    }


    public static string GlfwGetGamepadName(int jid)
    {
        var __ret = __Internal.GlfwGetGamepadName(jid);
        return Marshal.PtrToStringAnsi(__ret);
    }


    public static int GlfwGetGamepadState(int jid, global::GLFWgamepadstate state)
    {
        var __arg1 = ReferenceEquals(state, null) ? global::System.IntPtr.Zero : state.__Instance;
        var __ret = __Internal.GlfwGetGamepadState(jid, __arg1);
        return __ret;
    }


    public static void GlfwSetClipboardString(global::GLFWwindow window, string @string)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        __Internal.GlfwSetClipboardString(__arg0, @string);
    }


    public static string GlfwGetClipboardString(global::GLFWwindow window)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        var __ret = __Internal.GlfwGetClipboardString(__arg0);
        return Marshal.PtrToStringAnsi(__ret);
    }


    public static double GlfwGetTime()
    {
        var __ret = __Internal.GlfwGetTime();
        return __ret;
    }


    public static void GlfwSetTime(double time)
    {
        __Internal.GlfwSetTime(time);
    }


    public static ulong GlfwGetTimerValue()
    {
        var __ret = __Internal.GlfwGetTimerValue();
        return __ret;
    }


    public static ulong GlfwGetTimerFrequency()
    {
        var __ret = __Internal.GlfwGetTimerFrequency();
        return __ret;
    }


    public static void GlfwMakeContextCurrent(global::GLFWwindow window)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        __Internal.GlfwMakeContextCurrent(__arg0);
    }


    public static global::GLFWwindow GlfwGetCurrentContext()
    {
        var __ret = __Internal.GlfwGetCurrentContext();
        global::GLFWwindow __result0;
        if (__ret == IntPtr.Zero) __result0 = null;
        else if (global::GLFWwindow.NativeToManagedMap.ContainsKey(__ret))
            __result0 = (global::GLFWwindow) global::GLFWwindow.NativeToManagedMap[__ret];
        else __result0 = global::GLFWwindow.__CreateInstance(__ret);
        return __result0;
    }


    public static void GlfwSwapBuffers(global::GLFWwindow window)
    {
        var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
        __Internal.GlfwSwapBuffers(__arg0);
    }


    public static void GlfwSwapInterval(int interval)
    {
        __Internal.GlfwSwapInterval(interval);
    }


    public static int GlfwExtensionSupported(string extension)
    {
        var __ret = __Internal.GlfwExtensionSupported(extension);
        return __ret;
    }


    public static global::GLFWglproc GlfwGetProcAddress(string procname)
    {
        var __ret = __Internal.GlfwGetProcAddress(procname);
        var __ptr0 = __ret;
        return __ptr0 == IntPtr.Zero? null : (global::GLFWglproc) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::GLFWglproc));
    }


    public static int GlfwVulkanSupported()
    {
        var __ret = __Internal.GlfwVulkanSupported();
        return __ret;
    }


    public static sbyte** GlfwGetRequiredInstanceExtensions(ref uint count)
    {
        fixed (uint* __refParamPtr0 = &count)
        {
            var __arg0 = __refParamPtr0;
            var __ret = __Internal.GlfwGetRequiredInstanceExtensions(__arg0);
            return __ret;
        }
    }
}

public enum STBI
{
    STBI_default = 0,
    STBI_grey = 1,
    STBI_greyAlpha = 2,
    STBI_rgb = 3,
    STBI_rgbAlpha = 4
}


public unsafe partial class StbiIoCallbacks : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::System.IntPtr read;

        [FieldOffset(8)]
        internal global::System.IntPtr skip;

        [FieldOffset(16)]
        internal global::System.IntPtr eof;

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="??0stbi_io_callbacks@@QEAA@AEBU0@@Z")]
        internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::StbiIoCallbacks> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::StbiIoCallbacks>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::StbiIoCallbacks __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::StbiIoCallbacks(native.ToPointer(), skipVTables);
    }

    internal static global::StbiIoCallbacks __CreateInstance(global::StbiIoCallbacks.__Internal native, bool skipVTables = false)
    {
        return new global::StbiIoCallbacks(native, skipVTables);
    }

    private static void* __CopyValue(global::StbiIoCallbacks.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::StbiIoCallbacks.__Internal));
        *(global::StbiIoCallbacks.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private StbiIoCallbacks(global::StbiIoCallbacks.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected StbiIoCallbacks(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    public StbiIoCallbacks()
    {
        __Instance = Marshal.AllocHGlobal(sizeof(global::StbiIoCallbacks.__Internal));
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    public StbiIoCallbacks(global::StbiIoCallbacks _0)
    {
        __Instance = Marshal.AllocHGlobal(sizeof(global::StbiIoCallbacks.__Internal));
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
        *((global::StbiIoCallbacks.__Internal*) __Instance) = *((global::StbiIoCallbacks.__Internal*) _0.__Instance);
    }

    ~StbiIoCallbacks()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::StbiIoCallbacks __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }
}

public unsafe partial class stb_image
{
    public partial struct __Internal
    {
        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_load_from_memory")]
        internal static extern byte* StbiLoadFromMemory(byte* buffer, int len, int* x, int* y, int* channels_in_file, int desired_channels);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_load_from_callbacks")]
        internal static extern byte* StbiLoadFromCallbacks(global::System.IntPtr clbk, global::System.IntPtr user, int* x, int* y, int* channels_in_file, int desired_channels);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_load_gif_from_memory")]
        internal static extern byte* StbiLoadGifFromMemory(byte* buffer, int len, int** delays, int* x, int* y, int* z, int* comp, int req_comp);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_load")]
        internal static extern byte* StbiLoad([MarshalAs(UnmanagedType.LPStr)] string filename, int* x, int* y, int* channels_in_file, int desired_channels);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_load_from_file")]
        internal static extern byte* StbiLoadFromFile(global::System.IntPtr f, int* x, int* y, int* channels_in_file, int desired_channels);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_load_16_from_memory")]
        internal static extern ushort* StbiLoad16FromMemory(byte* buffer, int len, int* x, int* y, int* channels_in_file, int desired_channels);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_load_16_from_callbacks")]
        internal static extern ushort* StbiLoad16FromCallbacks(global::System.IntPtr clbk, global::System.IntPtr user, int* x, int* y, int* channels_in_file, int desired_channels);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_load_16")]
        internal static extern ushort* StbiLoad16([MarshalAs(UnmanagedType.LPStr)] string filename, int* x, int* y, int* channels_in_file, int desired_channels);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_load_from_file_16")]
        internal static extern ushort* StbiLoadFromFile16(global::System.IntPtr f, int* x, int* y, int* channels_in_file, int desired_channels);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_loadf_from_memory")]
        internal static extern float* StbiLoadfFromMemory(byte* buffer, int len, int* x, int* y, int* channels_in_file, int desired_channels);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_loadf_from_callbacks")]
        internal static extern float* StbiLoadfFromCallbacks(global::System.IntPtr clbk, global::System.IntPtr user, int* x, int* y, int* channels_in_file, int desired_channels);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_loadf")]
        internal static extern float* StbiLoadf([MarshalAs(UnmanagedType.LPStr)] string filename, int* x, int* y, int* channels_in_file, int desired_channels);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_loadf_from_file")]
        internal static extern float* StbiLoadfFromFile(global::System.IntPtr f, int* x, int* y, int* channels_in_file, int desired_channels);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_hdr_to_ldr_gamma")]
        internal static extern void StbiHdrToLdrGamma(float gamma);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_hdr_to_ldr_scale")]
        internal static extern void StbiHdrToLdrScale(float scale);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_ldr_to_hdr_gamma")]
        internal static extern void StbiLdrToHdrGamma(float gamma);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_ldr_to_hdr_scale")]
        internal static extern void StbiLdrToHdrScale(float scale);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_is_hdr_from_callbacks")]
        internal static extern int StbiIsHdrFromCallbacks(global::System.IntPtr clbk, global::System.IntPtr user);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_is_hdr_from_memory")]
        internal static extern int StbiIsHdrFromMemory(byte* buffer, int len);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_is_hdr")]
        internal static extern int StbiIsHdr([MarshalAs(UnmanagedType.LPStr)] string filename);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_is_hdr_from_file")]
        internal static extern int StbiIsHdrFromFile(global::System.IntPtr f);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_failure_reason")]
        internal static extern global::System.IntPtr StbiFailureReason();

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_image_free")]
        internal static extern void StbiImageFree(global::System.IntPtr retval_from_stbi_load);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_info_from_memory")]
        internal static extern int StbiInfoFromMemory(byte* buffer, int len, int* x, int* y, int* comp);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_info_from_callbacks")]
        internal static extern int StbiInfoFromCallbacks(global::System.IntPtr clbk, global::System.IntPtr user, int* x, int* y, int* comp);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_is_16_bit_from_memory")]
        internal static extern int StbiIs16BitFromMemory(byte* buffer, int len);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_is_16_bit_from_callbacks")]
        internal static extern int StbiIs16BitFromCallbacks(global::System.IntPtr clbk, global::System.IntPtr user);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_info")]
        internal static extern int StbiInfo([MarshalAs(UnmanagedType.LPStr)] string filename, int* x, int* y, int* comp);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_info_from_file")]
        internal static extern int StbiInfoFromFile(global::System.IntPtr f, int* x, int* y, int* comp);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_is_16_bit")]
        internal static extern int StbiIs16Bit([MarshalAs(UnmanagedType.LPStr)] string filename);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_is_16_bit_from_file")]
        internal static extern int StbiIs16BitFromFile(global::System.IntPtr f);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_set_unpremultiply_on_load")]
        internal static extern void StbiSetUnpremultiplyOnLoad(int flag_true_if_should_unpremultiply);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_convert_iphone_png_to_rgb")]
        internal static extern void StbiConvertIphonePngToRgb(int flag_true_if_should_convert);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_set_flip_vertically_on_load")]
        internal static extern void StbiSetFlipVerticallyOnLoad(int flag_true_if_should_flip);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_zlib_decode_malloc_guesssize")]
        internal static extern sbyte* StbiZlibDecodeMallocGuesssize([MarshalAs(UnmanagedType.LPStr)] string buffer, int len, int initial_size, int* outlen);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_zlib_decode_malloc_guesssize_headerflag")]
        internal static extern sbyte* StbiZlibDecodeMallocGuesssizeHeaderflag([MarshalAs(UnmanagedType.LPStr)] string buffer, int len, int initial_size, int* outlen, int parse_header);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_zlib_decode_malloc")]
        internal static extern sbyte* StbiZlibDecodeMalloc([MarshalAs(UnmanagedType.LPStr)] string buffer, int len, int* outlen);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_zlib_decode_buffer")]
        internal static extern int StbiZlibDecodeBuffer(sbyte* obuffer, int olen, [MarshalAs(UnmanagedType.LPStr)] string ibuffer, int ilen);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_zlib_decode_noheader_malloc")]
        internal static extern sbyte* StbiZlibDecodeNoheaderMalloc([MarshalAs(UnmanagedType.LPStr)] string buffer, int len, int* outlen);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_zlib_decode_noheader_buffer")]
        internal static extern int StbiZlibDecodeNoheaderBuffer(sbyte* obuffer, int olen, [MarshalAs(UnmanagedType.LPStr)] string ibuffer, int ilen);
    }


    public static byte* StbiLoadFromMemory(byte* buffer, int len, ref int x, ref int y, ref int channels_in_file, int desired_channels)
    {
        fixed (int* __refParamPtr2 = &x)
        {
            var __arg2 = __refParamPtr2;
            fixed (int* __refParamPtr3 = &y)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &channels_in_file)
                {
                    var __arg4 = __refParamPtr4;
                    var __ret = __Internal.StbiLoadFromMemory(buffer, len, __arg2, __arg3, __arg4, desired_channels);
                    return __ret;
                }
            }
        }
    }

    public static byte* StbiLoadFromCallbacks(global::StbiIoCallbacks clbk, global::System.IntPtr user, ref int x, ref int y, ref int channels_in_file, int desired_channels)
    {
        var __arg0 = ReferenceEquals(clbk, null) ? global::System.IntPtr.Zero : clbk.__Instance;
        fixed (int* __refParamPtr2 = &x)
        {
            var __arg2 = __refParamPtr2;
            fixed (int* __refParamPtr3 = &y)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &channels_in_file)
                {
                    var __arg4 = __refParamPtr4;
                    var __ret = __Internal.StbiLoadFromCallbacks(__arg0, user, __arg2, __arg3, __arg4, desired_channels);
                    return __ret;
                }
            }
        }
    }

    public static byte* StbiLoadGifFromMemory(byte* buffer, int len, int** delays, ref int x, ref int y, ref int z, ref int comp, int req_comp)
    {
        fixed (int* __refParamPtr3 = &x)
        {
            var __arg3 = __refParamPtr3;
            fixed (int* __refParamPtr4 = &y)
            {
                var __arg4 = __refParamPtr4;
                fixed (int* __refParamPtr5 = &z)
                {
                    var __arg5 = __refParamPtr5;
                    fixed (int* __refParamPtr6 = &comp)
                    {
                        var __arg6 = __refParamPtr6;
                        var __ret = __Internal.StbiLoadGifFromMemory(buffer, len, delays, __arg3, __arg4, __arg5, __arg6, req_comp);
                        return __ret;
                    }
                }
            }
        }
    }

    public static byte* StbiLoad(string filename, ref int x, ref int y, ref int channels_in_file, int desired_channels)
    {
        fixed (int* __refParamPtr1 = &x)
        {
            var __arg1 = __refParamPtr1;
            fixed (int* __refParamPtr2 = &y)
            {
                var __arg2 = __refParamPtr2;
                fixed (int* __refParamPtr3 = &channels_in_file)
                {
                    var __arg3 = __refParamPtr3;
                    var __ret = __Internal.StbiLoad(filename, __arg1, __arg2, __arg3, desired_channels);
                    return __ret;
                }
            }
        }
    }

    public static byte* StbiLoadFromFile(global::System.IntPtr f, ref int x, ref int y, ref int channels_in_file, int desired_channels)
    {
        fixed (int* __refParamPtr1 = &x)
        {
            var __arg1 = __refParamPtr1;
            fixed (int* __refParamPtr2 = &y)
            {
                var __arg2 = __refParamPtr2;
                fixed (int* __refParamPtr3 = &channels_in_file)
                {
                    var __arg3 = __refParamPtr3;
                    var __ret = __Internal.StbiLoadFromFile(f, __arg1, __arg2, __arg3, desired_channels);
                    return __ret;
                }
            }
        }
    }


    public static ushort* StbiLoad16FromMemory(byte* buffer, int len, ref int x, ref int y, ref int channels_in_file, int desired_channels)
    {
        fixed (int* __refParamPtr2 = &x)
        {
            var __arg2 = __refParamPtr2;
            fixed (int* __refParamPtr3 = &y)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &channels_in_file)
                {
                    var __arg4 = __refParamPtr4;
                    var __ret = __Internal.StbiLoad16FromMemory(buffer, len, __arg2, __arg3, __arg4, desired_channels);
                    return __ret;
                }
            }
        }
    }

    public static ushort* StbiLoad16FromCallbacks(global::StbiIoCallbacks clbk, global::System.IntPtr user, ref int x, ref int y, ref int channels_in_file, int desired_channels)
    {
        var __arg0 = ReferenceEquals(clbk, null) ? global::System.IntPtr.Zero : clbk.__Instance;
        fixed (int* __refParamPtr2 = &x)
        {
            var __arg2 = __refParamPtr2;
            fixed (int* __refParamPtr3 = &y)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &channels_in_file)
                {
                    var __arg4 = __refParamPtr4;
                    var __ret = __Internal.StbiLoad16FromCallbacks(__arg0, user, __arg2, __arg3, __arg4, desired_channels);
                    return __ret;
                }
            }
        }
    }

    public static ushort* StbiLoad16(string filename, ref int x, ref int y, ref int channels_in_file, int desired_channels)
    {
        fixed (int* __refParamPtr1 = &x)
        {
            var __arg1 = __refParamPtr1;
            fixed (int* __refParamPtr2 = &y)
            {
                var __arg2 = __refParamPtr2;
                fixed (int* __refParamPtr3 = &channels_in_file)
                {
                    var __arg3 = __refParamPtr3;
                    var __ret = __Internal.StbiLoad16(filename, __arg1, __arg2, __arg3, desired_channels);
                    return __ret;
                }
            }
        }
    }

    public static ushort* StbiLoadFromFile16(global::System.IntPtr f, ref int x, ref int y, ref int channels_in_file, int desired_channels)
    {
        fixed (int* __refParamPtr1 = &x)
        {
            var __arg1 = __refParamPtr1;
            fixed (int* __refParamPtr2 = &y)
            {
                var __arg2 = __refParamPtr2;
                fixed (int* __refParamPtr3 = &channels_in_file)
                {
                    var __arg3 = __refParamPtr3;
                    var __ret = __Internal.StbiLoadFromFile16(f, __arg1, __arg2, __arg3, desired_channels);
                    return __ret;
                }
            }
        }
    }

    public static float* StbiLoadfFromMemory(byte* buffer, int len, ref int x, ref int y, ref int channels_in_file, int desired_channels)
    {
        fixed (int* __refParamPtr2 = &x)
        {
            var __arg2 = __refParamPtr2;
            fixed (int* __refParamPtr3 = &y)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &channels_in_file)
                {
                    var __arg4 = __refParamPtr4;
                    var __ret = __Internal.StbiLoadfFromMemory(buffer, len, __arg2, __arg3, __arg4, desired_channels);
                    return __ret;
                }
            }
        }
    }

    public static float* StbiLoadfFromCallbacks(global::StbiIoCallbacks clbk, global::System.IntPtr user, ref int x, ref int y, ref int channels_in_file, int desired_channels)
    {
        var __arg0 = ReferenceEquals(clbk, null) ? global::System.IntPtr.Zero : clbk.__Instance;
        fixed (int* __refParamPtr2 = &x)
        {
            var __arg2 = __refParamPtr2;
            fixed (int* __refParamPtr3 = &y)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &channels_in_file)
                {
                    var __arg4 = __refParamPtr4;
                    var __ret = __Internal.StbiLoadfFromCallbacks(__arg0, user, __arg2, __arg3, __arg4, desired_channels);
                    return __ret;
                }
            }
        }
    }

    public static float* StbiLoadf(string filename, ref int x, ref int y, ref int channels_in_file, int desired_channels)
    {
        fixed (int* __refParamPtr1 = &x)
        {
            var __arg1 = __refParamPtr1;
            fixed (int* __refParamPtr2 = &y)
            {
                var __arg2 = __refParamPtr2;
                fixed (int* __refParamPtr3 = &channels_in_file)
                {
                    var __arg3 = __refParamPtr3;
                    var __ret = __Internal.StbiLoadf(filename, __arg1, __arg2, __arg3, desired_channels);
                    return __ret;
                }
            }
        }
    }

    public static float* StbiLoadfFromFile(global::System.IntPtr f, ref int x, ref int y, ref int channels_in_file, int desired_channels)
    {
        fixed (int* __refParamPtr1 = &x)
        {
            var __arg1 = __refParamPtr1;
            fixed (int* __refParamPtr2 = &y)
            {
                var __arg2 = __refParamPtr2;
                fixed (int* __refParamPtr3 = &channels_in_file)
                {
                    var __arg3 = __refParamPtr3;
                    var __ret = __Internal.StbiLoadfFromFile(f, __arg1, __arg2, __arg3, desired_channels);
                    return __ret;
                }
            }
        }
    }

    public static void StbiHdrToLdrGamma(float gamma)
    {
        __Internal.StbiHdrToLdrGamma(gamma);
    }

    public static void StbiHdrToLdrScale(float scale)
    {
        __Internal.StbiHdrToLdrScale(scale);
    }

    public static void StbiLdrToHdrGamma(float gamma)
    {
        __Internal.StbiLdrToHdrGamma(gamma);
    }

    public static void StbiLdrToHdrScale(float scale)
    {
        __Internal.StbiLdrToHdrScale(scale);
    }

    public static int StbiIsHdrFromCallbacks(global::StbiIoCallbacks clbk, global::System.IntPtr user)
    {
        var __arg0 = ReferenceEquals(clbk, null) ? global::System.IntPtr.Zero : clbk.__Instance;
        var __ret = __Internal.StbiIsHdrFromCallbacks(__arg0, user);
        return __ret;
    }

    public static int StbiIsHdrFromMemory(byte* buffer, int len)
    {
        var __ret = __Internal.StbiIsHdrFromMemory(buffer, len);
        return __ret;
    }

    public static int StbiIsHdr(string filename)
    {
        var __ret = __Internal.StbiIsHdr(filename);
        return __ret;
    }

    public static int StbiIsHdrFromFile(global::System.IntPtr f)
    {
        var __ret = __Internal.StbiIsHdrFromFile(f);
        return __ret;
    }

    public static string StbiFailureReason()
    {
        var __ret = __Internal.StbiFailureReason();
        return Marshal.PtrToStringAnsi(__ret);
    }

    public static void StbiImageFree(global::System.IntPtr retval_from_stbi_load)
    {
        __Internal.StbiImageFree(retval_from_stbi_load);
    }

    public static int StbiInfoFromMemory(byte* buffer, int len, ref int x, ref int y, ref int comp)
    {
        fixed (int* __refParamPtr2 = &x)
        {
            var __arg2 = __refParamPtr2;
            fixed (int* __refParamPtr3 = &y)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &comp)
                {
                    var __arg4 = __refParamPtr4;
                    var __ret = __Internal.StbiInfoFromMemory(buffer, len, __arg2, __arg3, __arg4);
                    return __ret;
                }
            }
        }
    }

    public static int StbiInfoFromCallbacks(global::StbiIoCallbacks clbk, global::System.IntPtr user, ref int x, ref int y, ref int comp)
    {
        var __arg0 = ReferenceEquals(clbk, null) ? global::System.IntPtr.Zero : clbk.__Instance;
        fixed (int* __refParamPtr2 = &x)
        {
            var __arg2 = __refParamPtr2;
            fixed (int* __refParamPtr3 = &y)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &comp)
                {
                    var __arg4 = __refParamPtr4;
                    var __ret = __Internal.StbiInfoFromCallbacks(__arg0, user, __arg2, __arg3, __arg4);
                    return __ret;
                }
            }
        }
    }

    public static int StbiIs16BitFromMemory(byte* buffer, int len)
    {
        var __ret = __Internal.StbiIs16BitFromMemory(buffer, len);
        return __ret;
    }

    public static int StbiIs16BitFromCallbacks(global::StbiIoCallbacks clbk, global::System.IntPtr user)
    {
        var __arg0 = ReferenceEquals(clbk, null) ? global::System.IntPtr.Zero : clbk.__Instance;
        var __ret = __Internal.StbiIs16BitFromCallbacks(__arg0, user);
        return __ret;
    }

    public static int StbiInfo(string filename, ref int x, ref int y, ref int comp)
    {
        fixed (int* __refParamPtr1 = &x)
        {
            var __arg1 = __refParamPtr1;
            fixed (int* __refParamPtr2 = &y)
            {
                var __arg2 = __refParamPtr2;
                fixed (int* __refParamPtr3 = &comp)
                {
                    var __arg3 = __refParamPtr3;
                    var __ret = __Internal.StbiInfo(filename, __arg1, __arg2, __arg3);
                    return __ret;
                }
            }
        }
    }

    public static int StbiInfoFromFile(global::System.IntPtr f, ref int x, ref int y, ref int comp)
    {
        fixed (int* __refParamPtr1 = &x)
        {
            var __arg1 = __refParamPtr1;
            fixed (int* __refParamPtr2 = &y)
            {
                var __arg2 = __refParamPtr2;
                fixed (int* __refParamPtr3 = &comp)
                {
                    var __arg3 = __refParamPtr3;
                    var __ret = __Internal.StbiInfoFromFile(f, __arg1, __arg2, __arg3);
                    return __ret;
                }
            }
        }
    }

    public static int StbiIs16Bit(string filename)
    {
        var __ret = __Internal.StbiIs16Bit(filename);
        return __ret;
    }

    public static int StbiIs16BitFromFile(global::System.IntPtr f)
    {
        var __ret = __Internal.StbiIs16BitFromFile(f);
        return __ret;
    }

    public static void StbiSetUnpremultiplyOnLoad(int flag_true_if_should_unpremultiply)
    {
        __Internal.StbiSetUnpremultiplyOnLoad(flag_true_if_should_unpremultiply);
    }

    public static void StbiConvertIphonePngToRgb(int flag_true_if_should_convert)
    {
        __Internal.StbiConvertIphonePngToRgb(flag_true_if_should_convert);
    }

    public static void StbiSetFlipVerticallyOnLoad(int flag_true_if_should_flip)
    {
        __Internal.StbiSetFlipVerticallyOnLoad(flag_true_if_should_flip);
    }

    public static sbyte* StbiZlibDecodeMallocGuesssize(string buffer, int len, int initial_size, ref int outlen)
    {
        fixed (int* __refParamPtr3 = &outlen)
        {
            var __arg3 = __refParamPtr3;
            var __ret = __Internal.StbiZlibDecodeMallocGuesssize(buffer, len, initial_size, __arg3);
            return __ret;
        }
    }

    public static sbyte* StbiZlibDecodeMallocGuesssizeHeaderflag(string buffer, int len, int initial_size, ref int outlen, int parse_header)
    {
        fixed (int* __refParamPtr3 = &outlen)
        {
            var __arg3 = __refParamPtr3;
            var __ret = __Internal.StbiZlibDecodeMallocGuesssizeHeaderflag(buffer, len, initial_size, __arg3, parse_header);
            return __ret;
        }
    }

    public static sbyte* StbiZlibDecodeMalloc(string buffer, int len, ref int outlen)
    {
        fixed (int* __refParamPtr2 = &outlen)
        {
            var __arg2 = __refParamPtr2;
            var __ret = __Internal.StbiZlibDecodeMalloc(buffer, len, __arg2);
            return __ret;
        }
    }

    public static int StbiZlibDecodeBuffer(sbyte* obuffer, int olen, string ibuffer, int ilen)
    {
        var __ret = __Internal.StbiZlibDecodeBuffer(obuffer, olen, ibuffer, ilen);
        return __ret;
    }

    public static sbyte* StbiZlibDecodeNoheaderMalloc(string buffer, int len, ref int outlen)
    {
        fixed (int* __refParamPtr2 = &outlen)
        {
            var __arg2 = __refParamPtr2;
            var __ret = __Internal.StbiZlibDecodeNoheaderMalloc(buffer, len, __arg2);
            return __ret;
        }
    }

    public static int StbiZlibDecodeNoheaderBuffer(sbyte* obuffer, int olen, string ibuffer, int ilen)
    {
        var __ret = __Internal.StbiZlibDecodeNoheaderBuffer(obuffer, olen, ibuffer, ilen);
        return __ret;
    }
}

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void StbiWriteFunc(global::System.IntPtr context, global::System.IntPtr data, int size);

public unsafe partial class stb_image_write
{
    public partial struct __Internal
    {
        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_write_png")]
        internal static extern int StbiWritePng([MarshalAs(UnmanagedType.LPStr)] string filename, int w, int h, int comp, global::System.IntPtr data, int stride_in_bytes);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_write_bmp")]
        internal static extern int StbiWriteBmp([MarshalAs(UnmanagedType.LPStr)] string filename, int w, int h, int comp, global::System.IntPtr data);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_write_tga")]
        internal static extern int StbiWriteTga([MarshalAs(UnmanagedType.LPStr)] string filename, int w, int h, int comp, global::System.IntPtr data);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_write_hdr")]
        internal static extern int StbiWriteHdr([MarshalAs(UnmanagedType.LPStr)] string filename, int w, int h, int comp, float* data);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_write_jpg")]
        internal static extern int StbiWriteJpg([MarshalAs(UnmanagedType.LPStr)] string filename, int x, int y, int comp, global::System.IntPtr data, int quality);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_write_png_to_func")]
        internal static extern int StbiWritePngToFunc(global::System.IntPtr func, global::System.IntPtr context, int w, int h, int comp, global::System.IntPtr data, int stride_in_bytes);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_write_bmp_to_func")]
        internal static extern int StbiWriteBmpToFunc(global::System.IntPtr func, global::System.IntPtr context, int w, int h, int comp, global::System.IntPtr data);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_write_tga_to_func")]
        internal static extern int StbiWriteTgaToFunc(global::System.IntPtr func, global::System.IntPtr context, int w, int h, int comp, global::System.IntPtr data);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_write_hdr_to_func")]
        internal static extern int StbiWriteHdrToFunc(global::System.IntPtr func, global::System.IntPtr context, int w, int h, int comp, float* data);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_write_jpg_to_func")]
        internal static extern int StbiWriteJpgToFunc(global::System.IntPtr func, global::System.IntPtr context, int x, int y, int comp, global::System.IntPtr data, int quality);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stbi_flip_vertically_on_write")]
        internal static extern void StbiFlipVerticallyOnWrite(int flip_boolean);
    }

    public static int StbiWritePng(string filename, int w, int h, int comp, global::System.IntPtr data, int stride_in_bytes)
    {
        var __ret = __Internal.StbiWritePng(filename, w, h, comp, data, stride_in_bytes);
        return __ret;
    }

    public static int StbiWriteBmp(string filename, int w, int h, int comp, global::System.IntPtr data)
    {
        var __ret = __Internal.StbiWriteBmp(filename, w, h, comp, data);
        return __ret;
    }

    public static int StbiWriteTga(string filename, int w, int h, int comp, global::System.IntPtr data)
    {
        var __ret = __Internal.StbiWriteTga(filename, w, h, comp, data);
        return __ret;
    }

    public static int StbiWriteHdr(string filename, int w, int h, int comp, ref float data)
    {
        fixed (float* __refParamPtr4 = &data)
        {
            var __arg4 = __refParamPtr4;
            var __ret = __Internal.StbiWriteHdr(filename, w, h, comp, __arg4);
            return __ret;
        }
    }

    public static int StbiWriteJpg(string filename, int x, int y, int comp, global::System.IntPtr data, int quality)
    {
        var __ret = __Internal.StbiWriteJpg(filename, x, y, comp, data, quality);
        return __ret;
    }

    public static int StbiWritePngToFunc(global::StbiWriteFunc func, global::System.IntPtr context, int w, int h, int comp, global::System.IntPtr data, int stride_in_bytes)
    {
        var __arg0 = func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(func);
        var __ret = __Internal.StbiWritePngToFunc(__arg0, context, w, h, comp, data, stride_in_bytes);
        return __ret;
    }

    public static int StbiWriteBmpToFunc(global::StbiWriteFunc func, global::System.IntPtr context, int w, int h, int comp, global::System.IntPtr data)
    {
        var __arg0 = func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(func);
        var __ret = __Internal.StbiWriteBmpToFunc(__arg0, context, w, h, comp, data);
        return __ret;
    }

    public static int StbiWriteTgaToFunc(global::StbiWriteFunc func, global::System.IntPtr context, int w, int h, int comp, global::System.IntPtr data)
    {
        var __arg0 = func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(func);
        var __ret = __Internal.StbiWriteTgaToFunc(__arg0, context, w, h, comp, data);
        return __ret;
    }

    public static int StbiWriteHdrToFunc(global::StbiWriteFunc func, global::System.IntPtr context, int w, int h, int comp, ref float data)
    {
        var __arg0 = func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(func);
        fixed (float* __refParamPtr5 = &data)
        {
            var __arg5 = __refParamPtr5;
            var __ret = __Internal.StbiWriteHdrToFunc(__arg0, context, w, h, comp, __arg5);
            return __ret;
        }
    }

    public static int StbiWriteJpgToFunc(global::StbiWriteFunc func, global::System.IntPtr context, int x, int y, int comp, global::System.IntPtr data, int quality)
    {
        var __arg0 = func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(func);
        var __ret = __Internal.StbiWriteJpgToFunc(__arg0, context, x, y, comp, data, quality);
        return __ret;
    }

    public static void StbiFlipVerticallyOnWrite(int flip_boolean)
    {
        __Internal.StbiFlipVerticallyOnWrite(flip_boolean);
    }

    public static int StbiWriteTgaWithRle
    {
        get
        {
            var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("glfw3", "?stbi_write_tga_with_rle@@3HA");
            return *__ptr;
        }

        set
        {
            var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("glfw3", "?stbi_write_tga_with_rle@@3HA");
            *__ptr = value;
        }
    }

    public static int StbiWritePngCompressionLevel
    {
        get
        {
            var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("glfw3", "?stbi_write_png_compression_level@@3HA");
            return *__ptr;
        }

        set
        {
            var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("glfw3", "?stbi_write_png_compression_level@@3HA");
            *__ptr = value;
        }
    }

    public static int StbiWriteForcePngFilter
    {
        get
        {
            var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("glfw3", "?stbi_write_force_png_filter@@3HA");
            return *__ptr;
        }

        set
        {
            var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("glfw3", "?stbi_write_force_png_filter@@3HA");
            *__ptr = value;
        }
    }
}


public enum STBVorbisError
{
    VORBIS_NoError = 0,
    VORBIS_needMoreData = 1,
    VORBIS_invalidApiMixing = 2,
    VORBIS_outofmem = 3,
    VORBIS_featureNotSupported = 4,
    VORBIS_tooManyChannels = 5,
    VORBIS_fileOpenFailure = 6,
    VORBIS_seekWithoutLength = 7,
    VORBIS_unexpectedEof = 10,
    VORBIS_seekInvalid = 11,
    VORBIS_invalidSetup = 20,
    VORBIS_invalidStream = 21,
    VORBIS_missingCapturePattern = 30,
    VORBIS_invalidStreamStructureVersion = 31,
    VORBIS_continuedPacketFlagInvalid = 32,
    VORBIS_incorrectStreamSerialNumber = 33,
    VORBIS_invalidFirstPage = 34,
    VORBIS_badPacketType = 35,
    VORBIS_cantFindLastPage = 36,
    VORBIS_seekFailed = 37
}


public unsafe partial class StbVorbisAlloc : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::System.IntPtr alloc_buffer;

        [FieldOffset(8)]
        internal int alloc_buffer_length_in_bytes;

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="??0stb_vorbis_alloc@@QEAA@AEBU0@@Z")]
        internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::StbVorbisAlloc> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::StbVorbisAlloc>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::StbVorbisAlloc __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::StbVorbisAlloc(native.ToPointer(), skipVTables);
    }

    internal static global::StbVorbisAlloc __CreateInstance(global::StbVorbisAlloc.__Internal native, bool skipVTables = false)
    {
        return new global::StbVorbisAlloc(native, skipVTables);
    }

    private static void* __CopyValue(global::StbVorbisAlloc.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::StbVorbisAlloc.__Internal));
        *(global::StbVorbisAlloc.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private StbVorbisAlloc(global::StbVorbisAlloc.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected StbVorbisAlloc(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    public StbVorbisAlloc()
    {
        __Instance = Marshal.AllocHGlobal(sizeof(global::StbVorbisAlloc.__Internal));
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    public StbVorbisAlloc(global::StbVorbisAlloc _0)
    {
        __Instance = Marshal.AllocHGlobal(sizeof(global::StbVorbisAlloc.__Internal));
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
        *((global::StbVorbisAlloc.__Internal*) __Instance) = *((global::StbVorbisAlloc.__Internal*) _0.__Instance);
    }

    ~StbVorbisAlloc()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::StbVorbisAlloc __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public sbyte* AllocBuffer
    {
        get
        {
            return (sbyte*) ((global::StbVorbisAlloc.__Internal*) __Instance)->alloc_buffer;
        }

        set
        {
            ((global::StbVorbisAlloc.__Internal*)__Instance)->alloc_buffer = (global::System.IntPtr) value;
        }
    }

    public int AllocBufferLengthInBytes
    {
        get
        {
            return ((global::StbVorbisAlloc.__Internal*) __Instance)->alloc_buffer_length_in_bytes;
        }

        set
        {
            ((global::StbVorbisAlloc.__Internal*)__Instance)->alloc_buffer_length_in_bytes = value;
        }
    }
}

public unsafe partial class StbVorbis
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::StbVorbis> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::StbVorbis>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::StbVorbis __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::StbVorbis(native.ToPointer(), skipVTables);
    }

    internal static global::StbVorbis __CreateInstance(global::StbVorbis.__Internal native, bool skipVTables = false)
    {
        return new global::StbVorbis(native, skipVTables);
    }

    private static void* __CopyValue(global::StbVorbis.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::StbVorbis.__Internal));
        *(global::StbVorbis.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private StbVorbis(global::StbVorbis.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected StbVorbis(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~StbVorbis()
    {
        Dispose(false);
    }
}

public unsafe partial class StbVorbisInfo : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal uint sample_rate;

        [FieldOffset(4)]
        internal int channels;

        [FieldOffset(8)]
        internal uint setup_memory_required;

        [FieldOffset(12)]
        internal uint setup_temp_memory_required;

        [FieldOffset(16)]
        internal uint temp_memory_required;

        [FieldOffset(20)]
        internal int max_frame_size;

        [SuppressUnmanagedCodeSecurity]
        [DllImport("glfw3", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="??0stb_vorbis_info@@QEAA@AEBU0@@Z")]
        internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::StbVorbisInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::StbVorbisInfo>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::StbVorbisInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::StbVorbisInfo(native.ToPointer(), skipVTables);
    }

    internal static global::StbVorbisInfo __CreateInstance(global::StbVorbisInfo.__Internal native, bool skipVTables = false)
    {
        return new global::StbVorbisInfo(native, skipVTables);
    }

    private static void* __CopyValue(global::StbVorbisInfo.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::StbVorbisInfo.__Internal));
        *(global::StbVorbisInfo.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private StbVorbisInfo(global::StbVorbisInfo.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected StbVorbisInfo(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    public StbVorbisInfo()
    {
        __Instance = Marshal.AllocHGlobal(sizeof(global::StbVorbisInfo.__Internal));
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    public StbVorbisInfo(global::StbVorbisInfo _0)
    {
        __Instance = Marshal.AllocHGlobal(sizeof(global::StbVorbisInfo.__Internal));
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
        *((global::StbVorbisInfo.__Internal*) __Instance) = *((global::StbVorbisInfo.__Internal*) _0.__Instance);
    }

    ~StbVorbisInfo()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose(bool disposing)
    {
        if (__Instance == IntPtr.Zero)
            return;
        global::StbVorbisInfo __dummy;
        NativeToManagedMap.TryRemove(__Instance, out __dummy);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public uint SampleRate
    {
        get
        {
            return ((global::StbVorbisInfo.__Internal*) __Instance)->sample_rate;
        }

        set
        {
            ((global::StbVorbisInfo.__Internal*)__Instance)->sample_rate = value;
        }
    }

    public int Channels
    {
        get
        {
            return ((global::StbVorbisInfo.__Internal*) __Instance)->channels;
        }

        set
        {
            ((global::StbVorbisInfo.__Internal*)__Instance)->channels = value;
        }
    }

    public uint SetupMemoryRequired
    {
        get
        {
            return ((global::StbVorbisInfo.__Internal*) __Instance)->setup_memory_required;
        }

        set
        {
            ((global::StbVorbisInfo.__Internal*)__Instance)->setup_memory_required = value;
        }
    }

    public uint SetupTempMemoryRequired
    {
        get
        {
            return ((global::StbVorbisInfo.__Internal*) __Instance)->setup_temp_memory_required;
        }

        set
        {
            ((global::StbVorbisInfo.__Internal*)__Instance)->setup_temp_memory_required = value;
        }
    }

    public uint TempMemoryRequired
    {
        get
        {
            return ((global::StbVorbisInfo.__Internal*) __Instance)->temp_memory_required;
        }

        set
        {
            ((global::StbVorbisInfo.__Internal*)__Instance)->temp_memory_required = value;
        }
    }

    public int MaxFrameSize
    {
        get
        {
            return ((global::StbVorbisInfo.__Internal*) __Instance)->max_frame_size;
        }

        set
        {
            ((global::StbVorbisInfo.__Internal*)__Instance)->max_frame_size = value;
        }
    }
}

public unsafe partial class stb_vorbis
{
    public partial struct __Internal
    {
        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stb_vorbis_get_info")]
        internal static extern global::StbVorbisInfo.__Internal StbVorbisGetInfo(global::System.IntPtr f);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stb_vorbis_get_error")]
        internal static extern int StbVorbisGetError(global::System.IntPtr f);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stb_vorbis_close")]
        internal static extern void StbVorbisClose(global::System.IntPtr f);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stb_vorbis_get_sample_offset")]
        internal static extern int StbVorbisGetSampleOffset(global::System.IntPtr f);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stb_vorbis_get_file_offset")]
        internal static extern uint StbVorbisGetFileOffset(global::System.IntPtr f);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stb_vorbis_open_pushdata")]
        internal static extern global::System.IntPtr StbVorbisOpenPushdata(byte* datablock, int datablock_length_in_bytes, int* datablock_memory_consumed_in_bytes, int* error, global::System.IntPtr alloc_buffer);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stb_vorbis_decode_frame_pushdata")]
        internal static extern int StbVorbisDecodeFramePushdata(global::System.IntPtr f, byte* datablock, int datablock_length_in_bytes, int* channels, float*** output, int* samples);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stb_vorbis_flush_pushdata")]
        internal static extern void StbVorbisFlushPushdata(global::System.IntPtr f);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stb_vorbis_decode_filename")]
        internal static extern int StbVorbisDecodeFilename([MarshalAs(UnmanagedType.LPStr)] string filename, int* channels, int* sample_rate, short** output);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stb_vorbis_decode_memory")]
        internal static extern int StbVorbisDecodeMemory(byte* mem, int len, int* channels, int* sample_rate, short** output);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stb_vorbis_open_memory")]
        internal static extern global::System.IntPtr StbVorbisOpenMemory(byte* data, int len, int* error, global::System.IntPtr alloc_buffer);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stb_vorbis_open_filename")]
        internal static extern global::System.IntPtr StbVorbisOpenFilename([MarshalAs(UnmanagedType.LPStr)] string filename, int* error, global::System.IntPtr alloc_buffer);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stb_vorbis_open_file")]
        internal static extern global::System.IntPtr StbVorbisOpenFile(global::System.IntPtr f, int close_handle_on_close, int* error, global::System.IntPtr alloc_buffer);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stb_vorbis_open_file_section")]
        internal static extern global::System.IntPtr StbVorbisOpenFileSection(global::System.IntPtr f, int close_handle_on_close, int* error, global::System.IntPtr alloc_buffer, uint len);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stb_vorbis_seek_frame")]
        internal static extern int StbVorbisSeekFrame(global::System.IntPtr f, uint sample_number);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stb_vorbis_seek")]
        internal static extern int StbVorbisSeek(global::System.IntPtr f, uint sample_number);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stb_vorbis_seek_start")]
        internal static extern int StbVorbisSeekStart(global::System.IntPtr f);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stb_vorbis_stream_length_in_samples")]
        internal static extern uint StbVorbisStreamLengthInSamples(global::System.IntPtr f);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stb_vorbis_stream_length_in_seconds")]
        internal static extern float StbVorbisStreamLengthInSeconds(global::System.IntPtr f);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stb_vorbis_get_frame_float")]
        internal static extern int StbVorbisGetFrameFloat(global::System.IntPtr f, int* channels, float*** output);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stb_vorbis_get_frame_short_interleaved")]
        internal static extern int StbVorbisGetFrameShortInterleaved(global::System.IntPtr f, int num_c, short* buffer, int num_shorts);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stb_vorbis_get_frame_short")]
        internal static extern int StbVorbisGetFrameShort(global::System.IntPtr f, int num_c, short** buffer, int num_samples);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stb_vorbis_get_samples_float_interleaved")]
        internal static extern int StbVorbisGetSamplesFloatInterleaved(global::System.IntPtr f, int channels, float* buffer, int num_floats);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stb_vorbis_get_samples_float")]
        internal static extern int StbVorbisGetSamplesFloat(global::System.IntPtr f, int channels, float** buffer, int num_samples);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stb_vorbis_get_samples_short_interleaved")]
        internal static extern int StbVorbisGetSamplesShortInterleaved(global::System.IntPtr f, int channels, short* buffer, int num_shorts);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("stb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="stb_vorbis_get_samples_short")]
        internal static extern int StbVorbisGetSamplesShort(global::System.IntPtr f, int channels, short** buffer, int num_samples);
    }

    public static global::StbVorbisInfo StbVorbisGetInfo(global::StbVorbis f)
    {
        var __arg0 = ReferenceEquals(f, null) ? global::System.IntPtr.Zero : f.__Instance;
        var __ret = __Internal.StbVorbisGetInfo(__arg0);
        return global::StbVorbisInfo.__CreateInstance(__ret);
    }

    public static int StbVorbisGetError(global::StbVorbis f)
    {
        var __arg0 = ReferenceEquals(f, null) ? global::System.IntPtr.Zero : f.__Instance;
        var __ret = __Internal.StbVorbisGetError(__arg0);
        return __ret;
    }

    public static void StbVorbisClose(global::StbVorbis f)
    {
        var __arg0 = ReferenceEquals(f, null) ? global::System.IntPtr.Zero : f.__Instance;
        __Internal.StbVorbisClose(__arg0);
    }

    public static int StbVorbisGetSampleOffset(global::StbVorbis f)
    {
        var __arg0 = ReferenceEquals(f, null) ? global::System.IntPtr.Zero : f.__Instance;
        var __ret = __Internal.StbVorbisGetSampleOffset(__arg0);
        return __ret;
    }

    public static uint StbVorbisGetFileOffset(global::StbVorbis f)
    {
        var __arg0 = ReferenceEquals(f, null) ? global::System.IntPtr.Zero : f.__Instance;
        var __ret = __Internal.StbVorbisGetFileOffset(__arg0);
        return __ret;
    }

    public static global::StbVorbis StbVorbisOpenPushdata(byte* datablock, int datablock_length_in_bytes, ref int datablock_memory_consumed_in_bytes, ref int error, global::StbVorbisAlloc alloc_buffer)
    {
        fixed (int* __refParamPtr2 = &datablock_memory_consumed_in_bytes)
        {
            var __arg2 = __refParamPtr2;
            fixed (int* __refParamPtr3 = &error)
            {
                var __arg3 = __refParamPtr3;
                var __arg4 = ReferenceEquals(alloc_buffer, null) ? global::System.IntPtr.Zero : alloc_buffer.__Instance;
                var __ret = __Internal.StbVorbisOpenPushdata(datablock, datablock_length_in_bytes, __arg2, __arg3, __arg4);
                global::StbVorbis __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::StbVorbis.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::StbVorbis) global::StbVorbis.NativeToManagedMap[__ret];
                else __result0 = global::StbVorbis.__CreateInstance(__ret);
                return __result0;
            }
        }
    }

    public static int StbVorbisDecodeFramePushdata(global::StbVorbis f, byte* datablock, int datablock_length_in_bytes, ref int channels, float*** output, ref int samples)
    {
        var __arg0 = ReferenceEquals(f, null) ? global::System.IntPtr.Zero : f.__Instance;
        fixed (int* __refParamPtr3 = &channels)
        {
            var __arg3 = __refParamPtr3;
            fixed (int* __refParamPtr5 = &samples)
            {
                var __arg5 = __refParamPtr5;
                var __ret = __Internal.StbVorbisDecodeFramePushdata(__arg0, datablock, datablock_length_in_bytes, __arg3, output, __arg5);
                return __ret;
            }
        }
    }

    public static void StbVorbisFlushPushdata(global::StbVorbis f)
    {
        var __arg0 = ReferenceEquals(f, null) ? global::System.IntPtr.Zero : f.__Instance;
        __Internal.StbVorbisFlushPushdata(__arg0);
    }

    public static int StbVorbisDecodeFilename(string filename, ref int channels, ref int sample_rate, short** output)
    {
        fixed (int* __refParamPtr1 = &channels)
        {
            var __arg1 = __refParamPtr1;
            fixed (int* __refParamPtr2 = &sample_rate)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.StbVorbisDecodeFilename(filename, __arg1, __arg2, output);
                return __ret;
            }
        }
    }

    public static int StbVorbisDecodeMemory(byte* mem, int len, ref int channels, ref int sample_rate, short** output)
    {
        fixed (int* __refParamPtr2 = &channels)
        {
            var __arg2 = __refParamPtr2;
            fixed (int* __refParamPtr3 = &sample_rate)
            {
                var __arg3 = __refParamPtr3;
                var __ret = __Internal.StbVorbisDecodeMemory(mem, len, __arg2, __arg3, output);
                return __ret;
            }
        }
    }

    public static global::StbVorbis StbVorbisOpenMemory(byte* data, int len, ref int error, global::StbVorbisAlloc alloc_buffer)
    {
        fixed (int* __refParamPtr2 = &error)
        {
            var __arg2 = __refParamPtr2;
            var __arg3 = ReferenceEquals(alloc_buffer, null) ? global::System.IntPtr.Zero : alloc_buffer.__Instance;
            var __ret = __Internal.StbVorbisOpenMemory(data, len, __arg2, __arg3);
            global::StbVorbis __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::StbVorbis.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::StbVorbis) global::StbVorbis.NativeToManagedMap[__ret];
            else __result0 = global::StbVorbis.__CreateInstance(__ret);
            return __result0;
        }
    }

    public static global::StbVorbis StbVorbisOpenFilename(string filename, ref int error, global::StbVorbisAlloc alloc_buffer)
    {
        fixed (int* __refParamPtr1 = &error)
        {
            var __arg1 = __refParamPtr1;
            var __arg2 = ReferenceEquals(alloc_buffer, null) ? global::System.IntPtr.Zero : alloc_buffer.__Instance;
            var __ret = __Internal.StbVorbisOpenFilename(filename, __arg1, __arg2);
            global::StbVorbis __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::StbVorbis.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::StbVorbis) global::StbVorbis.NativeToManagedMap[__ret];
            else __result0 = global::StbVorbis.__CreateInstance(__ret);
            return __result0;
        }
    }

    public static global::StbVorbis StbVorbisOpenFile(global::System.IntPtr f, int close_handle_on_close, ref int error, global::StbVorbisAlloc alloc_buffer)
    {
        fixed (int* __refParamPtr2 = &error)
        {
            var __arg2 = __refParamPtr2;
            var __arg3 = ReferenceEquals(alloc_buffer, null) ? global::System.IntPtr.Zero : alloc_buffer.__Instance;
            var __ret = __Internal.StbVorbisOpenFile(f, close_handle_on_close, __arg2, __arg3);
            global::StbVorbis __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::StbVorbis.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::StbVorbis) global::StbVorbis.NativeToManagedMap[__ret];
            else __result0 = global::StbVorbis.__CreateInstance(__ret);
            return __result0;
        }
    }

    public static global::StbVorbis StbVorbisOpenFileSection(global::System.IntPtr f, int close_handle_on_close, ref int error, global::StbVorbisAlloc alloc_buffer, uint len)
    {
        fixed (int* __refParamPtr2 = &error)
        {
            var __arg2 = __refParamPtr2;
            var __arg3 = ReferenceEquals(alloc_buffer, null) ? global::System.IntPtr.Zero : alloc_buffer.__Instance;
            var __ret = __Internal.StbVorbisOpenFileSection(f, close_handle_on_close, __arg2, __arg3, len);
            global::StbVorbis __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::StbVorbis.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::StbVorbis) global::StbVorbis.NativeToManagedMap[__ret];
            else __result0 = global::StbVorbis.__CreateInstance(__ret);
            return __result0;
        }
    }

    public static int StbVorbisSeekFrame(global::StbVorbis f, uint sample_number)
    {
        var __arg0 = ReferenceEquals(f, null) ? global::System.IntPtr.Zero : f.__Instance;
        var __ret = __Internal.StbVorbisSeekFrame(__arg0, sample_number);
        return __ret;
    }

    public static int StbVorbisSeek(global::StbVorbis f, uint sample_number)
    {
        var __arg0 = ReferenceEquals(f, null) ? global::System.IntPtr.Zero : f.__Instance;
        var __ret = __Internal.StbVorbisSeek(__arg0, sample_number);
        return __ret;
    }

    public static int StbVorbisSeekStart(global::StbVorbis f)
    {
        var __arg0 = ReferenceEquals(f, null) ? global::System.IntPtr.Zero : f.__Instance;
        var __ret = __Internal.StbVorbisSeekStart(__arg0);
        return __ret;
    }

    public static uint StbVorbisStreamLengthInSamples(global::StbVorbis f)
    {
        var __arg0 = ReferenceEquals(f, null) ? global::System.IntPtr.Zero : f.__Instance;
        var __ret = __Internal.StbVorbisStreamLengthInSamples(__arg0);
        return __ret;
    }

    public static float StbVorbisStreamLengthInSeconds(global::StbVorbis f)
    {
        var __arg0 = ReferenceEquals(f, null) ? global::System.IntPtr.Zero : f.__Instance;
        var __ret = __Internal.StbVorbisStreamLengthInSeconds(__arg0);
        return __ret;
    }

    public static int StbVorbisGetFrameFloat(global::StbVorbis f, ref int channels, float*** output)
    {
        var __arg0 = ReferenceEquals(f, null) ? global::System.IntPtr.Zero : f.__Instance;
        fixed (int* __refParamPtr1 = &channels)
        {
            var __arg1 = __refParamPtr1;
            var __ret = __Internal.StbVorbisGetFrameFloat(__arg0, __arg1, output);
            return __ret;
        }
    }

    public static int StbVorbisGetFrameShortInterleaved(global::StbVorbis f, int num_c, ref short buffer, int num_shorts)
    {
        var __arg0 = ReferenceEquals(f, null) ? global::System.IntPtr.Zero : f.__Instance;
        fixed (short* __refParamPtr2 = &buffer)
        {
            var __arg2 = __refParamPtr2;
            var __ret = __Internal.StbVorbisGetFrameShortInterleaved(__arg0, num_c, __arg2, num_shorts);
            return __ret;
        }
    }

    public static int StbVorbisGetFrameShort(global::StbVorbis f, int num_c, short** buffer, int num_samples)
    {
        var __arg0 = ReferenceEquals(f, null) ? global::System.IntPtr.Zero : f.__Instance;
        var __ret = __Internal.StbVorbisGetFrameShort(__arg0, num_c, buffer, num_samples);
        return __ret;
    }

    public static int StbVorbisGetSamplesFloatInterleaved(global::StbVorbis f, int channels, ref float buffer, int num_floats)
    {
        var __arg0 = ReferenceEquals(f, null) ? global::System.IntPtr.Zero : f.__Instance;
        fixed (float* __refParamPtr2 = &buffer)
        {
            var __arg2 = __refParamPtr2;
            var __ret = __Internal.StbVorbisGetSamplesFloatInterleaved(__arg0, channels, __arg2, num_floats);
            return __ret;
        }
    }

    public static int StbVorbisGetSamplesFloat(global::StbVorbis f, int channels, float** buffer, int num_samples)
    {
        var __arg0 = ReferenceEquals(f, null) ? global::System.IntPtr.Zero : f.__Instance;
        var __ret = __Internal.StbVorbisGetSamplesFloat(__arg0, channels, buffer, num_samples);
        return __ret;
    }

    public static int StbVorbisGetSamplesShortInterleaved(global::StbVorbis f, int channels, ref short buffer, int num_shorts)
    {
        var __arg0 = ReferenceEquals(f, null) ? global::System.IntPtr.Zero : f.__Instance;
        fixed (short* __refParamPtr2 = &buffer)
        {
            var __arg2 = __refParamPtr2;
            var __ret = __Internal.StbVorbisGetSamplesShortInterleaved(__arg0, channels, __arg2, num_shorts);
            return __ret;
        }
    }

    public static int StbVorbisGetSamplesShort(global::StbVorbis f, int channels, short** buffer, int num_samples)
    {
        var __arg0 = ReferenceEquals(f, null) ? global::System.IntPtr.Zero : f.__Instance;
        var __ret = __Internal.StbVorbisGetSamplesShort(__arg0, channels, buffer, num_samples);
        return __ret;
    }
}

















[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::System.IntPtr LPALCCREATECONTEXT(global::System.IntPtr device, int* attrlist);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate sbyte LPALCMAKECONTEXTCURRENT(global::System.IntPtr context);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALCPROCESSCONTEXT(global::System.IntPtr context);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALCSUSPENDCONTEXT(global::System.IntPtr context);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALCDESTROYCONTEXT(global::System.IntPtr context);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::System.IntPtr LPALCGETCURRENTCONTEXT();

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::System.IntPtr LPALCGETCONTEXTSDEVICE(global::System.IntPtr context);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::System.IntPtr LPALCOPENDEVICE([MarshalAs(UnmanagedType.LPStr)] string devicename);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate sbyte LPALCCLOSEDEVICE(global::System.IntPtr device);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate int LPALCGETERROR(global::System.IntPtr device);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate sbyte LPALCISEXTENSIONPRESENT(global::System.IntPtr device, [MarshalAs(UnmanagedType.LPStr)] string extname);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::System.IntPtr LPALCGETPROCADDRESS(global::System.IntPtr device, [MarshalAs(UnmanagedType.LPStr)] string funcname);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate int LPALCGETENUMVALUE(global::System.IntPtr device, [MarshalAs(UnmanagedType.LPStr)] string enumname);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::System.IntPtr LPALCGETSTRING(global::System.IntPtr device, int param);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALCGETINTEGERV(global::System.IntPtr device, int param, int size, int* values);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::System.IntPtr LPALCCAPTUREOPENDEVICE([MarshalAs(UnmanagedType.LPStr)] string devicename, uint frequency, int format, int buffersize);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate sbyte LPALCCAPTURECLOSEDEVICE(global::System.IntPtr device);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALCCAPTURESTART(global::System.IntPtr device);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALCCAPTURESTOP(global::System.IntPtr device);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALCCAPTURESAMPLES(global::System.IntPtr device, global::System.IntPtr buffer, int samples);

public unsafe partial class ALCdeviceStruct
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::ALCdeviceStruct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::ALCdeviceStruct>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::ALCdeviceStruct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::ALCdeviceStruct(native.ToPointer(), skipVTables);
    }

    internal static global::ALCdeviceStruct __CreateInstance(global::ALCdeviceStruct.__Internal native, bool skipVTables = false)
    {
        return new global::ALCdeviceStruct(native, skipVTables);
    }

    private static void* __CopyValue(global::ALCdeviceStruct.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::ALCdeviceStruct.__Internal));
        *(global::ALCdeviceStruct.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private ALCdeviceStruct(global::ALCdeviceStruct.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected ALCdeviceStruct(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~ALCdeviceStruct()
    {
        Dispose(false);
    }
}

public unsafe partial class ALCcontextStruct
{
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public partial struct __Internal
    {
    }

    public global::System.IntPtr __Instance { get; protected set; }

    protected int __PointerAdjustment;
    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::ALCcontextStruct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::ALCcontextStruct>();
    protected void*[] __OriginalVTables;

    protected bool __ownsNativeInstance;

    internal static global::ALCcontextStruct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
    {
        return new global::ALCcontextStruct(native.ToPointer(), skipVTables);
    }

    internal static global::ALCcontextStruct __CreateInstance(global::ALCcontextStruct.__Internal native, bool skipVTables = false)
    {
        return new global::ALCcontextStruct(native, skipVTables);
    }

    private static void* __CopyValue(global::ALCcontextStruct.__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(global::ALCcontextStruct.__Internal));
        *(global::ALCcontextStruct.__Internal*) ret = native;
        return ret.ToPointer();
    }

    private ALCcontextStruct(global::ALCcontextStruct.__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        NativeToManagedMap[__Instance] = this;
    }

    protected ALCcontextStruct(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new global::System.IntPtr(native);
    }

    ~ALCcontextStruct()
    {
        Dispose(false);
    }
}

public unsafe partial class alc
{
    public partial struct __Internal
    {
        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alcCreateContext")]
        internal static extern global::System.IntPtr AlcCreateContext(global::System.IntPtr device, int* attrlist);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alcMakeContextCurrent")]
        internal static extern sbyte AlcMakeContextCurrent(global::System.IntPtr context);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alcProcessContext")]
        internal static extern void AlcProcessContext(global::System.IntPtr context);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alcSuspendContext")]
        internal static extern void AlcSuspendContext(global::System.IntPtr context);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alcDestroyContext")]
        internal static extern void AlcDestroyContext(global::System.IntPtr context);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alcGetCurrentContext")]
        internal static extern global::System.IntPtr AlcGetCurrentContext();

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alcGetContextsDevice")]
        internal static extern global::System.IntPtr AlcGetContextsDevice(global::System.IntPtr context);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alcOpenDevice")]
        internal static extern global::System.IntPtr AlcOpenDevice([MarshalAs(UnmanagedType.LPStr)] string devicename);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alcCloseDevice")]
        internal static extern sbyte AlcCloseDevice(global::System.IntPtr device);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alcGetError")]
        internal static extern int AlcGetError(global::System.IntPtr device);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alcIsExtensionPresent")]
        internal static extern sbyte AlcIsExtensionPresent(global::System.IntPtr device, [MarshalAs(UnmanagedType.LPStr)] string extname);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alcGetProcAddress")]
        internal static extern global::System.IntPtr AlcGetProcAddress(global::System.IntPtr device, [MarshalAs(UnmanagedType.LPStr)] string funcname);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alcGetEnumValue")]
        internal static extern int AlcGetEnumValue(global::System.IntPtr device, [MarshalAs(UnmanagedType.LPStr)] string enumname);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alcGetString")]
        internal static extern global::System.IntPtr AlcGetString(global::System.IntPtr device, int param);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alcGetIntegerv")]
        internal static extern void AlcGetIntegerv(global::System.IntPtr device, int param, int size, int* values);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alcCaptureOpenDevice")]
        internal static extern global::System.IntPtr AlcCaptureOpenDevice([MarshalAs(UnmanagedType.LPStr)] string devicename, uint frequency, int format, int buffersize);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alcCaptureCloseDevice")]
        internal static extern sbyte AlcCaptureCloseDevice(global::System.IntPtr device);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alcCaptureStart")]
        internal static extern void AlcCaptureStart(global::System.IntPtr device);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alcCaptureStop")]
        internal static extern void AlcCaptureStop(global::System.IntPtr device);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alcCaptureSamples")]
        internal static extern void AlcCaptureSamples(global::System.IntPtr device, global::System.IntPtr buffer, int samples);
    }


    public static global::ALCcontextStruct AlcCreateContext(global::ALCdeviceStruct device, ref int attrlist)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        fixed (int* __refParamPtr1 = &attrlist)
        {
            var __arg1 = __refParamPtr1;
            var __ret = __Internal.AlcCreateContext(__arg0, __arg1);
            global::ALCcontextStruct __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::ALCcontextStruct.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::ALCcontextStruct) global::ALCcontextStruct.NativeToManagedMap[__ret];
            else __result0 = global::ALCcontextStruct.__CreateInstance(__ret);
            return __result0;
        }
    }

    public static sbyte AlcMakeContextCurrent(global::ALCcontextStruct context)
    {
        var __arg0 = ReferenceEquals(context, null) ? global::System.IntPtr.Zero : context.__Instance;
        var __ret = __Internal.AlcMakeContextCurrent(__arg0);
        return __ret;
    }

    public static void AlcProcessContext(global::ALCcontextStruct context)
    {
        var __arg0 = ReferenceEquals(context, null) ? global::System.IntPtr.Zero : context.__Instance;
        __Internal.AlcProcessContext(__arg0);
    }

    public static void AlcSuspendContext(global::ALCcontextStruct context)
    {
        var __arg0 = ReferenceEquals(context, null) ? global::System.IntPtr.Zero : context.__Instance;
        __Internal.AlcSuspendContext(__arg0);
    }

    public static void AlcDestroyContext(global::ALCcontextStruct context)
    {
        var __arg0 = ReferenceEquals(context, null) ? global::System.IntPtr.Zero : context.__Instance;
        __Internal.AlcDestroyContext(__arg0);
    }

    public static global::ALCcontextStruct AlcGetCurrentContext()
    {
        var __ret = __Internal.AlcGetCurrentContext();
        global::ALCcontextStruct __result0;
        if (__ret == IntPtr.Zero) __result0 = null;
        else if (global::ALCcontextStruct.NativeToManagedMap.ContainsKey(__ret))
            __result0 = (global::ALCcontextStruct) global::ALCcontextStruct.NativeToManagedMap[__ret];
        else __result0 = global::ALCcontextStruct.__CreateInstance(__ret);
        return __result0;
    }

    public static global::ALCdeviceStruct AlcGetContextsDevice(global::ALCcontextStruct context)
    {
        var __arg0 = ReferenceEquals(context, null) ? global::System.IntPtr.Zero : context.__Instance;
        var __ret = __Internal.AlcGetContextsDevice(__arg0);
        global::ALCdeviceStruct __result0;
        if (__ret == IntPtr.Zero) __result0 = null;
        else if (global::ALCdeviceStruct.NativeToManagedMap.ContainsKey(__ret))
            __result0 = (global::ALCdeviceStruct) global::ALCdeviceStruct.NativeToManagedMap[__ret];
        else __result0 = global::ALCdeviceStruct.__CreateInstance(__ret);
        return __result0;
    }


    public static global::ALCdeviceStruct AlcOpenDevice(string devicename)
    {
        var __ret = __Internal.AlcOpenDevice(devicename);
        global::ALCdeviceStruct __result0;
        if (__ret == IntPtr.Zero) __result0 = null;
        else if (global::ALCdeviceStruct.NativeToManagedMap.ContainsKey(__ret))
            __result0 = (global::ALCdeviceStruct) global::ALCdeviceStruct.NativeToManagedMap[__ret];
        else __result0 = global::ALCdeviceStruct.__CreateInstance(__ret);
        return __result0;
    }

    public static sbyte AlcCloseDevice(global::ALCdeviceStruct device)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __ret = __Internal.AlcCloseDevice(__arg0);
        return __ret;
    }


    public static int AlcGetError(global::ALCdeviceStruct device)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __ret = __Internal.AlcGetError(__arg0);
        return __ret;
    }


    public static sbyte AlcIsExtensionPresent(global::ALCdeviceStruct device, string extname)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __ret = __Internal.AlcIsExtensionPresent(__arg0, extname);
        return __ret;
    }

    public static global::System.IntPtr AlcGetProcAddress(global::ALCdeviceStruct device, string funcname)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __ret = __Internal.AlcGetProcAddress(__arg0, funcname);
        return __ret;
    }

    public static int AlcGetEnumValue(global::ALCdeviceStruct device, string enumname)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __ret = __Internal.AlcGetEnumValue(__arg0, enumname);
        return __ret;
    }


    public static string AlcGetString(global::ALCdeviceStruct device, int param)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __ret = __Internal.AlcGetString(__arg0, param);
        return Marshal.PtrToStringAnsi(__ret);
    }

    public static void AlcGetIntegerv(global::ALCdeviceStruct device, int param, int size, ref int values)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        fixed (int* __refParamPtr3 = &values)
        {
            var __arg3 = __refParamPtr3;
            __Internal.AlcGetIntegerv(__arg0, param, size, __arg3);
        }
    }


    public static global::ALCdeviceStruct AlcCaptureOpenDevice(string devicename, uint frequency, int format, int buffersize)
    {
        var __ret = __Internal.AlcCaptureOpenDevice(devicename, frequency, format, buffersize);
        global::ALCdeviceStruct __result0;
        if (__ret == IntPtr.Zero) __result0 = null;
        else if (global::ALCdeviceStruct.NativeToManagedMap.ContainsKey(__ret))
            __result0 = (global::ALCdeviceStruct) global::ALCdeviceStruct.NativeToManagedMap[__ret];
        else __result0 = global::ALCdeviceStruct.__CreateInstance(__ret);
        return __result0;
    }

    public static sbyte AlcCaptureCloseDevice(global::ALCdeviceStruct device)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        var __ret = __Internal.AlcCaptureCloseDevice(__arg0);
        return __ret;
    }

    public static void AlcCaptureStart(global::ALCdeviceStruct device)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        __Internal.AlcCaptureStart(__arg0);
    }

    public static void AlcCaptureStop(global::ALCdeviceStruct device)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        __Internal.AlcCaptureStop(__arg0);
    }

    public static void AlcCaptureSamples(global::ALCdeviceStruct device, global::System.IntPtr buffer, int samples)
    {
        var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
        __Internal.AlcCaptureSamples(__arg0, buffer, samples);
    }
}















[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALENABLE(int capability);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALDISABLE(int capability);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate sbyte LPALISENABLED(int capability);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::System.IntPtr LPALGETSTRING(int param);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALGETBOOLEANV(int param, sbyte* values);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALGETINTEGERV(int param, int* values);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALGETFLOATV(int param, float* values);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALGETDOUBLEV(int param, double* values);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate sbyte LPALGETBOOLEAN(int param);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate int LPALGETINTEGER(int param);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate float LPALGETFLOAT(int param);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate double LPALGETDOUBLE(int param);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate int LPALGETERROR();

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate sbyte LPALISEXTENSIONPRESENT([MarshalAs(UnmanagedType.LPStr)] string extname);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate global::System.IntPtr LPALGETPROCADDRESS([MarshalAs(UnmanagedType.LPStr)] string fname);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate int LPALGETENUMVALUE([MarshalAs(UnmanagedType.LPStr)] string ename);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALLISTENERF(int param, float value);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALLISTENER3F(int param, float value1, float value2, float value3);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALLISTENERFV(int param, float* values);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALLISTENERI(int param, int value);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALLISTENER3I(int param, int value1, int value2, int value3);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALLISTENERIV(int param, int* values);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALGETLISTENERF(int param, float* value);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALGETLISTENER3F(int param, float* value1, float* value2, float* value3);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALGETLISTENERFV(int param, float* values);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALGETLISTENERI(int param, int* value);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALGETLISTENER3I(int param, int* value1, int* value2, int* value3);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALGETLISTENERIV(int param, int* values);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALGENSOURCES(int n, uint* sources);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALDELETESOURCES(int n, uint* sources);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate sbyte LPALISSOURCE(uint source);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALSOURCEF(uint source, int param, float value);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALSOURCE3F(uint source, int param, float value1, float value2, float value3);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALSOURCEFV(uint source, int param, float* values);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALSOURCEI(uint source, int param, int value);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALSOURCE3I(uint source, int param, int value1, int value2, int value3);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALSOURCEIV(uint source, int param, int* values);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALGETSOURCEF(uint source, int param, float* value);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALGETSOURCE3F(uint source, int param, float* value1, float* value2, float* value3);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALGETSOURCEFV(uint source, int param, float* values);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALGETSOURCEI(uint source, int param, int* value);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALGETSOURCE3I(uint source, int param, int* value1, int* value2, int* value3);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALGETSOURCEIV(uint source, int param, int* values);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALSOURCEPLAYV(int n, uint* sources);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALSOURCESTOPV(int n, uint* sources);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALSOURCEREWINDV(int n, uint* sources);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALSOURCEPAUSEV(int n, uint* sources);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALSOURCEPLAY(uint source);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALSOURCESTOP(uint source);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALSOURCEREWIND(uint source);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALSOURCEPAUSE(uint source);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALSOURCEQUEUEBUFFERS(uint source, int nb, uint* buffers);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALSOURCEUNQUEUEBUFFERS(uint source, int nb, uint* buffers);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALGENBUFFERS(int n, uint* buffers);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALDELETEBUFFERS(int n, uint* buffers);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate sbyte LPALISBUFFER(uint buffer);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALBUFFERDATA(uint buffer, int format, global::System.IntPtr data, int size, int freq);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALBUFFERF(uint buffer, int param, float value);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALBUFFER3F(uint buffer, int param, float value1, float value2, float value3);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALBUFFERFV(uint buffer, int param, float* values);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALBUFFERI(uint buffer, int param, int value);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALBUFFER3I(uint buffer, int param, int value1, int value2, int value3);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALBUFFERIV(uint buffer, int param, int* values);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALGETBUFFERF(uint buffer, int param, float* value);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALGETBUFFER3F(uint buffer, int param, float* value1, float* value2, float* value3);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALGETBUFFERFV(uint buffer, int param, float* values);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALGETBUFFERI(uint buffer, int param, int* value);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALGETBUFFER3I(uint buffer, int param, int* value1, int* value2, int* value3);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALGETBUFFERIV(uint buffer, int param, int* values);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALDOPPLERFACTOR(float value);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALDOPPLERVELOCITY(float value);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALSPEEDOFSOUND(float value);

[SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
public unsafe delegate void LPALDISTANCEMODEL(int distanceModel);

public unsafe partial class al
{
    public partial struct __Internal
    {
        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alDopplerFactor")]
        internal static extern void AlDopplerFactor(float value);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alDopplerVelocity")]
        internal static extern void AlDopplerVelocity(float value);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alSpeedOfSound")]
        internal static extern void AlSpeedOfSound(float value);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alDistanceModel")]
        internal static extern void AlDistanceModel(int distanceModel);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alEnable")]
        internal static extern void AlEnable(int capability);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alDisable")]
        internal static extern void AlDisable(int capability);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alIsEnabled")]
        internal static extern sbyte AlIsEnabled(int capability);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alGetString")]
        internal static extern global::System.IntPtr AlGetString(int param);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alGetBooleanv")]
        internal static extern void AlGetBooleanv(int param, sbyte* values);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alGetIntegerv")]
        internal static extern void AlGetIntegerv(int param, int* values);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alGetFloatv")]
        internal static extern void AlGetFloatv(int param, float* values);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alGetDoublev")]
        internal static extern void AlGetDoublev(int param, double* values);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alGetBoolean")]
        internal static extern sbyte AlGetBoolean(int param);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alGetInteger")]
        internal static extern int AlGetInteger(int param);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alGetFloat")]
        internal static extern float AlGetFloat(int param);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alGetDouble")]
        internal static extern double AlGetDouble(int param);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alGetError")]
        internal static extern int AlGetError();

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alIsExtensionPresent")]
        internal static extern sbyte AlIsExtensionPresent([MarshalAs(UnmanagedType.LPStr)] string extname);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alGetProcAddress")]
        internal static extern global::System.IntPtr AlGetProcAddress([MarshalAs(UnmanagedType.LPStr)] string fname);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alGetEnumValue")]
        internal static extern int AlGetEnumValue([MarshalAs(UnmanagedType.LPStr)] string ename);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alListenerf")]
        internal static extern void AlListenerf(int param, float value);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alListener3f")]
        internal static extern void AlListener3f(int param, float value1, float value2, float value3);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alListenerfv")]
        internal static extern void AlListenerfv(int param, float* values);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alListeneri")]
        internal static extern void AlListeneri(int param, int value);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alListener3i")]
        internal static extern void AlListener3i(int param, int value1, int value2, int value3);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alListeneriv")]
        internal static extern void AlListeneriv(int param, int* values);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alGetListenerf")]
        internal static extern void AlGetListenerf(int param, float* value);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alGetListener3f")]
        internal static extern void AlGetListener3f(int param, float* value1, float* value2, float* value3);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alGetListenerfv")]
        internal static extern void AlGetListenerfv(int param, float* values);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alGetListeneri")]
        internal static extern void AlGetListeneri(int param, int* value);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alGetListener3i")]
        internal static extern void AlGetListener3i(int param, int* value1, int* value2, int* value3);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alGetListeneriv")]
        internal static extern void AlGetListeneriv(int param, int* values);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alGenSources")]
        internal static extern void AlGenSources(int n, uint* sources);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alDeleteSources")]
        internal static extern void AlDeleteSources(int n, uint* sources);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alIsSource")]
        internal static extern sbyte AlIsSource(uint source);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alSourcef")]
        internal static extern void AlSourcef(uint source, int param, float value);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alSource3f")]
        internal static extern void AlSource3f(uint source, int param, float value1, float value2, float value3);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alSourcefv")]
        internal static extern void AlSourcefv(uint source, int param, float* values);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alSourcei")]
        internal static extern void AlSourcei(uint source, int param, int value);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alSource3i")]
        internal static extern void AlSource3i(uint source, int param, int value1, int value2, int value3);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alSourceiv")]
        internal static extern void AlSourceiv(uint source, int param, int* values);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alGetSourcef")]
        internal static extern void AlGetSourcef(uint source, int param, float* value);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alGetSource3f")]
        internal static extern void AlGetSource3f(uint source, int param, float* value1, float* value2, float* value3);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alGetSourcefv")]
        internal static extern void AlGetSourcefv(uint source, int param, float* values);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alGetSourcei")]
        internal static extern void AlGetSourcei(uint source, int param, int* value);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alGetSource3i")]
        internal static extern void AlGetSource3i(uint source, int param, int* value1, int* value2, int* value3);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alGetSourceiv")]
        internal static extern void AlGetSourceiv(uint source, int param, int* values);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alSourcePlayv")]
        internal static extern void AlSourcePlayv(int n, uint* sources);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alSourceStopv")]
        internal static extern void AlSourceStopv(int n, uint* sources);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alSourceRewindv")]
        internal static extern void AlSourceRewindv(int n, uint* sources);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alSourcePausev")]
        internal static extern void AlSourcePausev(int n, uint* sources);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alSourcePlay")]
        internal static extern void AlSourcePlay(uint source);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alSourceStop")]
        internal static extern void AlSourceStop(uint source);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alSourceRewind")]
        internal static extern void AlSourceRewind(uint source);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alSourcePause")]
        internal static extern void AlSourcePause(uint source);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alSourceQueueBuffers")]
        internal static extern void AlSourceQueueBuffers(uint source, int nb, uint* buffers);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alSourceUnqueueBuffers")]
        internal static extern void AlSourceUnqueueBuffers(uint source, int nb, uint* buffers);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alGenBuffers")]
        internal static extern void AlGenBuffers(int n, uint* buffers);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alDeleteBuffers")]
        internal static extern void AlDeleteBuffers(int n, uint* buffers);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alIsBuffer")]
        internal static extern sbyte AlIsBuffer(uint buffer);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alBufferData")]
        internal static extern void AlBufferData(uint buffer, int format, global::System.IntPtr data, int size, int freq);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alBufferf")]
        internal static extern void AlBufferf(uint buffer, int param, float value);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alBuffer3f")]
        internal static extern void AlBuffer3f(uint buffer, int param, float value1, float value2, float value3);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alBufferfv")]
        internal static extern void AlBufferfv(uint buffer, int param, float* values);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alBufferi")]
        internal static extern void AlBufferi(uint buffer, int param, int value);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alBuffer3i")]
        internal static extern void AlBuffer3i(uint buffer, int param, int value1, int value2, int value3);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alBufferiv")]
        internal static extern void AlBufferiv(uint buffer, int param, int* values);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alGetBufferf")]
        internal static extern void AlGetBufferf(uint buffer, int param, float* value);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alGetBuffer3f")]
        internal static extern void AlGetBuffer3f(uint buffer, int param, float* value1, float* value2, float* value3);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alGetBufferfv")]
        internal static extern void AlGetBufferfv(uint buffer, int param, float* values);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alGetBufferi")]
        internal static extern void AlGetBufferi(uint buffer, int param, int* value);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alGetBuffer3i")]
        internal static extern void AlGetBuffer3i(uint buffer, int param, int* value1, int* value2, int* value3);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("OpenAL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="alGetBufferiv")]
        internal static extern void AlGetBufferiv(uint buffer, int param, int* values);
    }

    public static void AlDopplerFactor(float value)
    {
        __Internal.AlDopplerFactor(value);
    }

    public static void AlDopplerVelocity(float value)
    {
        __Internal.AlDopplerVelocity(value);
    }

    public static void AlSpeedOfSound(float value)
    {
        __Internal.AlSpeedOfSound(value);
    }

    public static void AlDistanceModel(int distanceModel)
    {
        __Internal.AlDistanceModel(distanceModel);
    }


    public static void AlEnable(int capability)
    {
        __Internal.AlEnable(capability);
    }

    public static void AlDisable(int capability)
    {
        __Internal.AlDisable(capability);
    }

    public static sbyte AlIsEnabled(int capability)
    {
        var __ret = __Internal.AlIsEnabled(capability);
        return __ret;
    }


    public static string AlGetString(int param)
    {
        var __ret = __Internal.AlGetString(param);
        return Marshal.PtrToStringAnsi(__ret);
    }

    public static void AlGetBooleanv(int param, sbyte* values)
    {
        __Internal.AlGetBooleanv(param, values);
    }

    public static void AlGetIntegerv(int param, ref int values)
    {
        fixed (int* __refParamPtr1 = &values)
        {
            var __arg1 = __refParamPtr1;
            __Internal.AlGetIntegerv(param, __arg1);
        }
    }

    public static void AlGetFloatv(int param, ref float values)
    {
        fixed (float* __refParamPtr1 = &values)
        {
            var __arg1 = __refParamPtr1;
            __Internal.AlGetFloatv(param, __arg1);
        }
    }

    public static void AlGetDoublev(int param, ref double values)
    {
        fixed (double* __refParamPtr1 = &values)
        {
            var __arg1 = __refParamPtr1;
            __Internal.AlGetDoublev(param, __arg1);
        }
    }

    public static sbyte AlGetBoolean(int param)
    {
        var __ret = __Internal.AlGetBoolean(param);
        return __ret;
    }

    public static int AlGetInteger(int param)
    {
        var __ret = __Internal.AlGetInteger(param);
        return __ret;
    }

    public static float AlGetFloat(int param)
    {
        var __ret = __Internal.AlGetFloat(param);
        return __ret;
    }

    public static double AlGetDouble(int param)
    {
        var __ret = __Internal.AlGetDouble(param);
        return __ret;
    }


    public static int AlGetError()
    {
        var __ret = __Internal.AlGetError();
        return __ret;
    }


    public static sbyte AlIsExtensionPresent(string extname)
    {
        var __ret = __Internal.AlIsExtensionPresent(extname);
        return __ret;
    }

    public static global::System.IntPtr AlGetProcAddress(string fname)
    {
        var __ret = __Internal.AlGetProcAddress(fname);
        return __ret;
    }

    public static int AlGetEnumValue(string ename)
    {
        var __ret = __Internal.AlGetEnumValue(ename);
        return __ret;
    }


    public static void AlListenerf(int param, float value)
    {
        __Internal.AlListenerf(param, value);
    }

    public static void AlListener3f(int param, float value1, float value2, float value3)
    {
        __Internal.AlListener3f(param, value1, value2, value3);
    }

    public static void AlListenerfv(int param, ref float values)
    {
        fixed (float* __refParamPtr1 = &values)
        {
            var __arg1 = __refParamPtr1;
            __Internal.AlListenerfv(param, __arg1);
        }
    }

    public static void AlListeneri(int param, int value)
    {
        __Internal.AlListeneri(param, value);
    }

    public static void AlListener3i(int param, int value1, int value2, int value3)
    {
        __Internal.AlListener3i(param, value1, value2, value3);
    }

    public static void AlListeneriv(int param, ref int values)
    {
        fixed (int* __refParamPtr1 = &values)
        {
            var __arg1 = __refParamPtr1;
            __Internal.AlListeneriv(param, __arg1);
        }
    }


    public static void AlGetListenerf(int param, ref float value)
    {
        fixed (float* __refParamPtr1 = &value)
        {
            var __arg1 = __refParamPtr1;
            __Internal.AlGetListenerf(param, __arg1);
        }
    }

    public static void AlGetListener3f(int param, ref float value1, ref float value2, ref float value3)
    {
        fixed (float* __refParamPtr1 = &value1)
        {
            var __arg1 = __refParamPtr1;
            fixed (float* __refParamPtr2 = &value2)
            {
                var __arg2 = __refParamPtr2;
                fixed (float* __refParamPtr3 = &value3)
                {
                    var __arg3 = __refParamPtr3;
                    __Internal.AlGetListener3f(param, __arg1, __arg2, __arg3);
                }
            }
        }
    }

    public static void AlGetListenerfv(int param, ref float values)
    {
        fixed (float* __refParamPtr1 = &values)
        {
            var __arg1 = __refParamPtr1;
            __Internal.AlGetListenerfv(param, __arg1);
        }
    }

    public static void AlGetListeneri(int param, ref int value)
    {
        fixed (int* __refParamPtr1 = &value)
        {
            var __arg1 = __refParamPtr1;
            __Internal.AlGetListeneri(param, __arg1);
        }
    }

    public static void AlGetListener3i(int param, ref int value1, ref int value2, ref int value3)
    {
        fixed (int* __refParamPtr1 = &value1)
        {
            var __arg1 = __refParamPtr1;
            fixed (int* __refParamPtr2 = &value2)
            {
                var __arg2 = __refParamPtr2;
                fixed (int* __refParamPtr3 = &value3)
                {
                    var __arg3 = __refParamPtr3;
                    __Internal.AlGetListener3i(param, __arg1, __arg2, __arg3);
                }
            }
        }
    }

    public static void AlGetListeneriv(int param, ref int values)
    {
        fixed (int* __refParamPtr1 = &values)
        {
            var __arg1 = __refParamPtr1;
            __Internal.AlGetListeneriv(param, __arg1);
        }
    }


    public static void AlGenSources(int n, ref uint sources)
    {
        fixed (uint* __refParamPtr1 = &sources)
        {
            var __arg1 = __refParamPtr1;
            __Internal.AlGenSources(n, __arg1);
        }
    }


    public static void AlDeleteSources(int n, ref uint sources)
    {
        fixed (uint* __refParamPtr1 = &sources)
        {
            var __arg1 = __refParamPtr1;
            __Internal.AlDeleteSources(n, __arg1);
        }
    }


    public static sbyte AlIsSource(uint source)
    {
        var __ret = __Internal.AlIsSource(source);
        return __ret;
    }


    public static void AlSourcef(uint source, int param, float value)
    {
        __Internal.AlSourcef(source, param, value);
    }

    public static void AlSource3f(uint source, int param, float value1, float value2, float value3)
    {
        __Internal.AlSource3f(source, param, value1, value2, value3);
    }

    public static void AlSourcefv(uint source, int param, ref float values)
    {
        fixed (float* __refParamPtr2 = &values)
        {
            var __arg2 = __refParamPtr2;
            __Internal.AlSourcefv(source, param, __arg2);
        }
    }

    public static void AlSourcei(uint source, int param, int value)
    {
        __Internal.AlSourcei(source, param, value);
    }

    public static void AlSource3i(uint source, int param, int value1, int value2, int value3)
    {
        __Internal.AlSource3i(source, param, value1, value2, value3);
    }

    public static void AlSourceiv(uint source, int param, ref int values)
    {
        fixed (int* __refParamPtr2 = &values)
        {
            var __arg2 = __refParamPtr2;
            __Internal.AlSourceiv(source, param, __arg2);
        }
    }


    public static void AlGetSourcef(uint source, int param, ref float value)
    {
        fixed (float* __refParamPtr2 = &value)
        {
            var __arg2 = __refParamPtr2;
            __Internal.AlGetSourcef(source, param, __arg2);
        }
    }

    public static void AlGetSource3f(uint source, int param, ref float value1, ref float value2, ref float value3)
    {
        fixed (float* __refParamPtr2 = &value1)
        {
            var __arg2 = __refParamPtr2;
            fixed (float* __refParamPtr3 = &value2)
            {
                var __arg3 = __refParamPtr3;
                fixed (float* __refParamPtr4 = &value3)
                {
                    var __arg4 = __refParamPtr4;
                    __Internal.AlGetSource3f(source, param, __arg2, __arg3, __arg4);
                }
            }
        }
    }

    public static void AlGetSourcefv(uint source, int param, ref float values)
    {
        fixed (float* __refParamPtr2 = &values)
        {
            var __arg2 = __refParamPtr2;
            __Internal.AlGetSourcefv(source, param, __arg2);
        }
    }

    public static void AlGetSourcei(uint source, int param, ref int value)
    {
        fixed (int* __refParamPtr2 = &value)
        {
            var __arg2 = __refParamPtr2;
            __Internal.AlGetSourcei(source, param, __arg2);
        }
    }

    public static void AlGetSource3i(uint source, int param, ref int value1, ref int value2, ref int value3)
    {
        fixed (int* __refParamPtr2 = &value1)
        {
            var __arg2 = __refParamPtr2;
            fixed (int* __refParamPtr3 = &value2)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &value3)
                {
                    var __arg4 = __refParamPtr4;
                    __Internal.AlGetSource3i(source, param, __arg2, __arg3, __arg4);
                }
            }
        }
    }

    public static void AlGetSourceiv(uint source, int param, ref int values)
    {
        fixed (int* __refParamPtr2 = &values)
        {
            var __arg2 = __refParamPtr2;
            __Internal.AlGetSourceiv(source, param, __arg2);
        }
    }


    public static void AlSourcePlayv(int n, ref uint sources)
    {
        fixed (uint* __refParamPtr1 = &sources)
        {
            var __arg1 = __refParamPtr1;
            __Internal.AlSourcePlayv(n, __arg1);
        }
    }


    public static void AlSourceStopv(int n, ref uint sources)
    {
        fixed (uint* __refParamPtr1 = &sources)
        {
            var __arg1 = __refParamPtr1;
            __Internal.AlSourceStopv(n, __arg1);
        }
    }


    public static void AlSourceRewindv(int n, ref uint sources)
    {
        fixed (uint* __refParamPtr1 = &sources)
        {
            var __arg1 = __refParamPtr1;
            __Internal.AlSourceRewindv(n, __arg1);
        }
    }


    public static void AlSourcePausev(int n, ref uint sources)
    {
        fixed (uint* __refParamPtr1 = &sources)
        {
            var __arg1 = __refParamPtr1;
            __Internal.AlSourcePausev(n, __arg1);
        }
    }


    public static void AlSourcePlay(uint source)
    {
        __Internal.AlSourcePlay(source);
    }


    public static void AlSourceStop(uint source)
    {
        __Internal.AlSourceStop(source);
    }


    public static void AlSourceRewind(uint source)
    {
        __Internal.AlSourceRewind(source);
    }


    public static void AlSourcePause(uint source)
    {
        __Internal.AlSourcePause(source);
    }


    public static void AlSourceQueueBuffers(uint source, int nb, ref uint buffers)
    {
        fixed (uint* __refParamPtr2 = &buffers)
        {
            var __arg2 = __refParamPtr2;
            __Internal.AlSourceQueueBuffers(source, nb, __arg2);
        }
    }


    public static void AlSourceUnqueueBuffers(uint source, int nb, ref uint buffers)
    {
        fixed (uint* __refParamPtr2 = &buffers)
        {
            var __arg2 = __refParamPtr2;
            __Internal.AlSourceUnqueueBuffers(source, nb, __arg2);
        }
    }


    public static void AlGenBuffers(int n, ref uint buffers)
    {
        fixed (uint* __refParamPtr1 = &buffers)
        {
            var __arg1 = __refParamPtr1;
            __Internal.AlGenBuffers(n, __arg1);
        }
    }


    public static void AlDeleteBuffers(int n, ref uint buffers)
    {
        fixed (uint* __refParamPtr1 = &buffers)
        {
            var __arg1 = __refParamPtr1;
            __Internal.AlDeleteBuffers(n, __arg1);
        }
    }


    public static sbyte AlIsBuffer(uint buffer)
    {
        var __ret = __Internal.AlIsBuffer(buffer);
        return __ret;
    }


    public static void AlBufferData(uint buffer, int format, global::System.IntPtr data, int size, int freq)
    {
        __Internal.AlBufferData(buffer, format, data, size, freq);
    }


    public static void AlBufferf(uint buffer, int param, float value)
    {
        __Internal.AlBufferf(buffer, param, value);
    }

    public static void AlBuffer3f(uint buffer, int param, float value1, float value2, float value3)
    {
        __Internal.AlBuffer3f(buffer, param, value1, value2, value3);
    }

    public static void AlBufferfv(uint buffer, int param, ref float values)
    {
        fixed (float* __refParamPtr2 = &values)
        {
            var __arg2 = __refParamPtr2;
            __Internal.AlBufferfv(buffer, param, __arg2);
        }
    }

    public static void AlBufferi(uint buffer, int param, int value)
    {
        __Internal.AlBufferi(buffer, param, value);
    }

    public static void AlBuffer3i(uint buffer, int param, int value1, int value2, int value3)
    {
        __Internal.AlBuffer3i(buffer, param, value1, value2, value3);
    }

    public static void AlBufferiv(uint buffer, int param, ref int values)
    {
        fixed (int* __refParamPtr2 = &values)
        {
            var __arg2 = __refParamPtr2;
            __Internal.AlBufferiv(buffer, param, __arg2);
        }
    }


    public static void AlGetBufferf(uint buffer, int param, ref float value)
    {
        fixed (float* __refParamPtr2 = &value)
        {
            var __arg2 = __refParamPtr2;
            __Internal.AlGetBufferf(buffer, param, __arg2);
        }
    }

    public static void AlGetBuffer3f(uint buffer, int param, ref float value1, ref float value2, ref float value3)
    {
        fixed (float* __refParamPtr2 = &value1)
        {
            var __arg2 = __refParamPtr2;
            fixed (float* __refParamPtr3 = &value2)
            {
                var __arg3 = __refParamPtr3;
                fixed (float* __refParamPtr4 = &value3)
                {
                    var __arg4 = __refParamPtr4;
                    __Internal.AlGetBuffer3f(buffer, param, __arg2, __arg3, __arg4);
                }
            }
        }
    }

    public static void AlGetBufferfv(uint buffer, int param, ref float values)
    {
        fixed (float* __refParamPtr2 = &values)
        {
            var __arg2 = __refParamPtr2;
            __Internal.AlGetBufferfv(buffer, param, __arg2);
        }
    }

    public static void AlGetBufferi(uint buffer, int param, ref int value)
    {
        fixed (int* __refParamPtr2 = &value)
        {
            var __arg2 = __refParamPtr2;
            __Internal.AlGetBufferi(buffer, param, __arg2);
        }
    }

    public static void AlGetBuffer3i(uint buffer, int param, ref int value1, ref int value2, ref int value3)
    {
        fixed (int* __refParamPtr2 = &value1)
        {
            var __arg2 = __refParamPtr2;
            fixed (int* __refParamPtr3 = &value2)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &value3)
                {
                    var __arg4 = __refParamPtr4;
                    __Internal.AlGetBuffer3i(buffer, param, __arg2, __arg3, __arg4);
                }
            }
        }
    }

    public static void AlGetBufferiv(uint buffer, int param, ref int values)
    {
        fixed (int* __refParamPtr2 = &values)
        {
            var __arg2 = __refParamPtr2;
            __Internal.AlGetBufferiv(buffer, param, __arg2);
        }
    }
}
