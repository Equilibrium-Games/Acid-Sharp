// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FlounderSharp
{
    /// <summary>A class that holds many various math functions.</summary>
    public unsafe partial class Maths : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?LogRandom@Maths@fl@@SAMAEBM0@Z")]
            internal static extern float LogRandom(float* lowerLimit, float* upperLimit);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?NormallyDistributedSingle@Maths@fl@@SAMAEBM0@Z")]
            internal static extern float NormallyDistributedSingle(float* standardDeviation, float* mean);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Radians@Maths@fl@@SAMAEBM@Z")]
            internal static extern float Radians(float* degrees);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Degrees@Maths@fl@@SAMAEBM@Z")]
            internal static extern float Degrees(float* radians);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?NormalizeAngle@Maths@fl@@SAMAEBM@Z")]
            internal static extern float NormalizeAngle(float* angle);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?RoundToPlace@Maths@fl@@SAMAEBMAEBH@Z")]
            internal static extern float RoundToPlace(float* value, int* place);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Deadband@Maths@fl@@SAMAEBM0@Z")]
            internal static extern float Deadband(float* min, float* value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Clamp@Maths@fl@@SAMAEBM00@Z")]
            internal static extern float Clamp(float* value, float* min, float* max);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Limit@Maths@fl@@SAMAEBM0@Z")]
            internal static extern float Limit(float* value, float* limit);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?AlmostEqual@Maths@fl@@SA_NAEBM00@Z")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool AlmostEqual(float* a, float* b, float* eps);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SmoothDamp@Maths@fl@@SAMAEBM00@Z")]
            internal static extern float SmoothDamp(float* current, float* target, float* rate);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Interpolate@Maths@fl@@SAMAEBM00@Z")]
            internal static extern float Interpolate(float* a, float* b, float* blend);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CosInterpolate@Maths@fl@@SAMAEBM00@Z")]
            internal static extern float CosInterpolate(float* a, float* b, float* blend);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SmoothlyStep@Maths@fl@@SAMAEBM00@Z")]
            internal static extern float SmoothlyStep(float* edge0, float* edge1, float* x);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?RandomInRange@Maths@fl@@SAMAEBM0@Z")]
            internal static extern float RandomInRange(float* min, float* max);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Flounder", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Random@Maths@fl@@SAMXZ")]
            internal static extern float Random();
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.Maths> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::FlounderSharp.Maths>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::FlounderSharp.Maths __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Maths(native.ToPointer(), skipVTables);
        }

        internal static global::FlounderSharp.Maths __CreateInstance(global::FlounderSharp.Maths.__Internal native, bool skipVTables = false)
        {
            return new global::FlounderSharp.Maths(native, skipVTables);
        }

        private static void* __CopyValue(global::FlounderSharp.Maths.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::FlounderSharp.Maths.__Internal));
            *(global::FlounderSharp.Maths.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Maths(global::FlounderSharp.Maths.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Maths(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        ~Maths()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::FlounderSharp.Maths __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>
        /// <para>Creates a number between two numbers, logarithmic.</para>
        /// <para></para>
        /// <para>name=&quot;lowerLimit&quot;&gt; The lower number.</para>
        /// <para>name=&quot;upperLimit&quot;&gt; The upper number.</para>
        /// <para>The final random number.</para>
        /// </summary>
        public static float LogRandom(ref float lowerLimit, ref float upperLimit)
        {
            fixed (float* __refParamPtr0 = &lowerLimit)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &upperLimit)
                {
                    var __arg1 = __refParamPtr1;
                    var __ret = __Internal.LogRandom(__arg0, __arg1);
                    return __ret;
                }
            }
        }

        /// <summary>
        /// <para>Generates a single value from a normal distribution, using Box-Muller.</para>
        /// <para>https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform</para>
        /// <para></para>
        /// <para>name=&quot;standardDeviation&quot;&gt; The standards deviation of the distribution.</para>
        /// <para>name=&quot;mean&quot;&gt; The mean of the distribution.</para>
        /// <para>A normally distributed value.</para>
        /// </summary>
        public static float NormallyDistributedSingle(ref float standardDeviation, ref float mean)
        {
            fixed (float* __refParamPtr0 = &standardDeviation)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &mean)
                {
                    var __arg1 = __refParamPtr1;
                    var __ret = __Internal.NormallyDistributedSingle(__arg0, __arg1);
                    return __ret;
                }
            }
        }

        /// <summary>
        /// <para>Converts degrees to radians.</para>
        /// <para></para>
        /// <para>name=&quot;degrees&quot;&gt; The degrees value.</para>
        /// <para>The radians value.</para>
        /// </summary>
        public static float Radians(ref float degrees)
        {
            fixed (float* __refParamPtr0 = &degrees)
            {
                var __arg0 = __refParamPtr0;
                var __ret = __Internal.Radians(__arg0);
                return __ret;
            }
        }

        /// <summary>
        /// <para>Converts radians to degrees.</para>
        /// <para></para>
        /// <para>name=&quot;radians&quot;&gt; The radians value.</para>
        /// <para>The degrees value.</para>
        /// </summary>
        public static float Degrees(ref float radians)
        {
            fixed (float* __refParamPtr0 = &radians)
            {
                var __arg0 = __refParamPtr0;
                var __ret = __Internal.Degrees(__arg0);
                return __ret;
            }
        }

        /// <summary>
        /// <para>Normalizes a angle into the range of 0-360.</para>
        /// <para></para>
        /// <para>name=&quot;angle&quot;&gt; The source angle.</para>
        /// <para>The normalized angle.</para>
        /// </summary>
        public static float NormalizeAngle(ref float angle)
        {
            fixed (float* __refParamPtr0 = &angle)
            {
                var __arg0 = __refParamPtr0;
                var __ret = __Internal.NormalizeAngle(__arg0);
                return __ret;
            }
        }

        /// <summary>
        /// <para>Rounds a value to a amount of places after the decimal point.</para>
        /// <para></para>
        /// <para>name=&quot;value&quot;&gt; The value to round.</para>
        /// <para>name=&quot;place&quot;&gt; How many places after the decimal to round to.</para>
        /// <para>The rounded value.</para>
        /// </summary>
        public static float RoundToPlace(ref float value, ref int place)
        {
            fixed (float* __refParamPtr0 = &value)
            {
                var __arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &place)
                {
                    var __arg1 = __refParamPtr1;
                    var __ret = __Internal.RoundToPlace(__arg0, __arg1);
                    return __ret;
                }
            }
        }

        /// <summary>
        /// <para>Used to floor the value if less than the min.</para>
        /// <para></para>
        /// <para>name=&quot;min&quot;&gt; The minimum value.</para>
        /// <para>name=&quot;value&quot;&gt; The value.</para>
        /// <para>Returns a value with deadband applied.</para>
        /// </summary>
        public static float Deadband(ref float min, ref float value)
        {
            fixed (float* __refParamPtr0 = &min)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &value)
                {
                    var __arg1 = __refParamPtr1;
                    var __ret = __Internal.Deadband(__arg0, __arg1);
                    return __ret;
                }
            }
        }

        /// <summary>Ensures {</summary>
        public static float Clamp(ref float value, ref float min, ref float max)
        {
            fixed (float* __refParamPtr0 = &value)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &min)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &max)
                    {
                        var __arg2 = __refParamPtr2;
                        var __ret = __Internal.Clamp(__arg0, __arg1, __arg2);
                        return __ret;
                    }
                }
            }
        }

        /// <summary>
        /// <para>Limits the value.</para>
        /// <para></para>
        /// <para>name=&quot;value&quot;&gt; The value.</para>
        /// <para>name=&quot;limit&quot;&gt; The limit.</para>
        /// <para>A limited value.</para>
        /// </summary>
        public static float Limit(ref float value, ref float limit)
        {
            fixed (float* __refParamPtr0 = &value)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &limit)
                {
                    var __arg1 = __refParamPtr1;
                    var __ret = __Internal.Limit(__arg0, __arg1);
                    return __ret;
                }
            }
        }

        /// <summary>
        /// <para>Checks if two values are almost equal.</para>
        /// <para></para>
        /// <para>name=&quot;a&quot;&gt; The first value.</para>
        /// <para>name=&quot;b&quot;&gt; The second value.</para>
        /// <para>name=&quot;eps&quot;&gt; EPS is the measure of equality.</para>
        /// <para>If both are almost equal.</para>
        /// </summary>
        public static bool AlmostEqual(ref float a, ref float b, ref float eps)
        {
            fixed (float* __refParamPtr0 = &a)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &b)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &eps)
                    {
                        var __arg2 = __refParamPtr2;
                        var __ret = __Internal.AlmostEqual(__arg0, __arg1, __arg2);
                        return __ret;
                    }
                }
            }
        }

        /// <summary>
        /// <para>Gradually changes a value to a target.</para>
        /// <para></para>
        /// <para>name=&quot;current&quot;&gt; The current value.</para>
        /// <para>name=&quot;target&quot;&gt; The target value.</para>
        /// <para>name=&quot;rate&quot;&gt; The rate to go from current to the target.</para>
        /// <para>The changed value.</para>
        /// </summary>
        public static float SmoothDamp(ref float current, ref float target, ref float rate)
        {
            fixed (float* __refParamPtr0 = &current)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &target)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &rate)
                    {
                        var __arg2 = __refParamPtr2;
                        var __ret = __Internal.SmoothDamp(__arg0, __arg1, __arg2);
                        return __ret;
                    }
                }
            }
        }

        /// <summary>
        /// <para>Interpolates two values by a blendFactor using linear interpolation.</para>
        /// <para></para>
        /// <para>name=&quot;a&quot;&gt; The first value.</para>
        /// <para>name=&quot;b&quot;&gt; The second value.</para>
        /// <para>name=&quot;blend&quot;&gt; The blend value.</para>
        /// <para>Returns a interpolated value.</para>
        /// </summary>
        public static float Interpolate(ref float a, ref float b, ref float blend)
        {
            fixed (float* __refParamPtr0 = &a)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &b)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &blend)
                    {
                        var __arg2 = __refParamPtr2;
                        var __ret = __Internal.Interpolate(__arg0, __arg1, __arg2);
                        return __ret;
                    }
                }
            }
        }

        /// <summary>
        /// <para>Interpolates two values by a blendFactor using cos interpolation.</para>
        /// <para></para>
        /// <para>name=&quot;a&quot;&gt; The first value.</para>
        /// <para>name=&quot;b&quot;&gt; The second value.</para>
        /// <para>name=&quot;blend&quot;&gt; The blend value.</para>
        /// <para>Returns a interpolated value.</para>
        /// </summary>
        public static float CosInterpolate(ref float a, ref float b, ref float blend)
        {
            fixed (float* __refParamPtr0 = &a)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &b)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &blend)
                    {
                        var __arg2 = __refParamPtr2;
                        var __ret = __Internal.CosInterpolate(__arg0, __arg1, __arg2);
                        return __ret;
                    }
                }
            }
        }

        /// <summary>
        /// <para>A calculation that steps smoothly between two edges.</para>
        /// <para></para>
        /// <para>name=&quot;edge0&quot;&gt; The inner edge.</para>
        /// <para>name=&quot;edge1&quot;&gt; The outer edge.</para>
        /// <para>name=&quot;x&quot;&gt; The sample.</para>
        /// <para>The resulting stepped value.</para>
        /// </summary>
        public static float SmoothlyStep(ref float edge0, ref float edge1, ref float x)
        {
            fixed (float* __refParamPtr0 = &edge0)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &edge1)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &x)
                    {
                        var __arg2 = __refParamPtr2;
                        var __ret = __Internal.SmoothlyStep(__arg0, __arg1, __arg2);
                        return __ret;
                    }
                }
            }
        }

        /// <summary>
        /// <para>Generates a random value from between a range.</para>
        /// <para></para>
        /// <para>name=&quot;min&quot;&gt; The min value.</para>
        /// <para>name=&quot;max&quot;&gt; The max value.</para>
        /// <para>The randomly selected value within the range.</para>
        /// </summary>
        public static float RandomInRange(ref float min, ref float max)
        {
            fixed (float* __refParamPtr0 = &min)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &max)
                {
                    var __arg1 = __refParamPtr1;
                    var __ret = __Internal.RandomInRange(__arg0, __arg1);
                    return __ret;
                }
            }
        }

        /// <summary>
        /// <para>Gets a random number between 0.0 and 1.0.</para>
        /// <para></para>
        /// <para>The random number.</para>
        /// </summary>
        public static float Random
        {
            get
            {
                var __ret = __Internal.Random();
                return __ret;
            }
        }
    }
}
