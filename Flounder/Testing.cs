// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace Flounder
{
    /// <summary>Holds a RGBA colour.</summary>
    public unsafe partial class Colour : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Flounder.Colour._.__Internal _;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1Colour@fl@@QAE@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);
        }

        public unsafe partial struct _
        {
            [StructLayout(LayoutKind.Explicit, Size = 16)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::Flounder.Colour._.__.__Internal __;

                [FieldOffset(0)]
                internal global::Flounder.Colour._.__.__Internal __1;
            }

            public unsafe partial class __
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal float m_r;

                    [FieldOffset(4)]
                    internal float m_g;

                    [FieldOffset(8)]
                    internal float m_b;

                    [FieldOffset(12)]
                    internal float m_a;
                }
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Flounder.Colour> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Flounder.Colour>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::Flounder.Colour __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Flounder.Colour(native.ToPointer(), skipVTables);
        }

        internal static global::Flounder.Colour __CreateInstance(global::Flounder.Colour.__Internal native, bool skipVTables = false)
        {
            return new global::Flounder.Colour(native, skipVTables);
        }

        private static void* __CopyValue(global::Flounder.Colour.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Flounder.Colour.__Internal));
            *(global::Flounder.Colour.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Colour(global::Flounder.Colour.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Colour(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        ~Colour()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Flounder.Colour __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }
}

namespace Flounder
{
    /// <summary>A class that holds many various math functions.</summary>
    public unsafe partial class Maths : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Flounder.Maths> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Flounder.Maths>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::Flounder.Maths __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Flounder.Maths(native.ToPointer(), skipVTables);
        }

        internal static global::Flounder.Maths __CreateInstance(global::Flounder.Maths.__Internal native, bool skipVTables = false)
        {
            return new global::Flounder.Maths(native, skipVTables);
        }

        private static void* __CopyValue(global::Flounder.Maths.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Flounder.Maths.__Internal));
            *(global::Flounder.Maths.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Maths(global::Flounder.Maths.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Maths(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        ~Maths()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Flounder.Maths __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }
}

namespace Flounder
{
    /// <summary>Holds a 2-tuple vector.</summary>
    public unsafe partial class Vector2 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Flounder.Vector2._.__Internal _;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1Vector2@fl@@QAE@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);
        }

        public unsafe partial struct _
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::Flounder.Vector2._.__.__Internal __;

                [FieldOffset(0)]
                internal global::Flounder.Vector2._.__.__Internal __1;
            }

            public unsafe partial class __
            {
                [StructLayout(LayoutKind.Explicit, Size = 8)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal float m_x;

                    [FieldOffset(4)]
                    internal float m_y;
                }
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Flounder.Vector2> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Flounder.Vector2>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::Flounder.Vector2 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Flounder.Vector2(native.ToPointer(), skipVTables);
        }

        internal static global::Flounder.Vector2 __CreateInstance(global::Flounder.Vector2.__Internal native, bool skipVTables = false)
        {
            return new global::Flounder.Vector2(native, skipVTables);
        }

        private static void* __CopyValue(global::Flounder.Vector2.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Flounder.Vector2.__Internal));
            *(global::Flounder.Vector2.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Vector2(global::Flounder.Vector2.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Vector2(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        ~Vector2()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Flounder.Vector2 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }
}

namespace Flounder
{
    /// <summary>Holds a 2x2 matrix.</summary>
    public unsafe partial class Matrix2 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Flounder.Matrix2._.__Internal _;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1Matrix2@fl@@QAE@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);
        }

        public unsafe partial struct _
        {
            [StructLayout(LayoutKind.Explicit, Size = 16)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::Flounder.Matrix2._.__.__Internal __;

                [FieldOffset(0)]
                internal global::Flounder.Matrix2._.__.__Internal __1;

                [FieldOffset(0)]
                internal global::Flounder.Matrix2._.__.__Internal __2;
            }

            public unsafe partial class __
            {
                [StructLayout(LayoutKind.Explicit, Size = 8)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal global::System.IntPtr m_0;

                    [FieldOffset(4)]
                    internal global::System.IntPtr m_1;
                }
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Flounder.Matrix2> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Flounder.Matrix2>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::Flounder.Matrix2 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Flounder.Matrix2(native.ToPointer(), skipVTables);
        }

        internal static global::Flounder.Matrix2 __CreateInstance(global::Flounder.Matrix2.__Internal native, bool skipVTables = false)
        {
            return new global::Flounder.Matrix2(native, skipVTables);
        }

        private static void* __CopyValue(global::Flounder.Matrix2.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Flounder.Matrix2.__Internal));
            *(global::Flounder.Matrix2.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Matrix2(global::Flounder.Matrix2.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Matrix2(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        ~Matrix2()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Flounder.Matrix2 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }
}

namespace Flounder
{
    /// <summary>Holds a 3-tuple vector.</summary>
    public unsafe partial class Vector3 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Flounder.Vector3._.__Internal _;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1Vector3@fl@@QAE@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);
        }

        public unsafe partial struct _
        {
            [StructLayout(LayoutKind.Explicit, Size = 12)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::Flounder.Vector3._.__.__Internal __;

                [FieldOffset(0)]
                internal global::Flounder.Vector3._.__.__Internal __1;
            }

            public unsafe partial class __
            {
                [StructLayout(LayoutKind.Explicit, Size = 12)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal float m_x;

                    [FieldOffset(4)]
                    internal float m_y;

                    [FieldOffset(8)]
                    internal float m_z;
                }
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Flounder.Vector3> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Flounder.Vector3>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::Flounder.Vector3 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Flounder.Vector3(native.ToPointer(), skipVTables);
        }

        internal static global::Flounder.Vector3 __CreateInstance(global::Flounder.Vector3.__Internal native, bool skipVTables = false)
        {
            return new global::Flounder.Vector3(native, skipVTables);
        }

        private static void* __CopyValue(global::Flounder.Vector3.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Flounder.Vector3.__Internal));
            *(global::Flounder.Vector3.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Vector3(global::Flounder.Vector3.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Vector3(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        ~Vector3()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Flounder.Vector3 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }
}

namespace Flounder
{
    /// <summary>Holds a 3x3 matrix.</summary>
    public unsafe partial class Matrix3 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 36)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Flounder.Matrix3._.__Internal _;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1Matrix3@fl@@QAE@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);
        }

        public unsafe partial struct _
        {
            [StructLayout(LayoutKind.Explicit, Size = 36)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::Flounder.Matrix3._.__.__Internal __;

                [FieldOffset(0)]
                internal global::Flounder.Matrix3._.__.__Internal __1;

                [FieldOffset(0)]
                internal global::Flounder.Matrix3._.__.__Internal __2;
            }

            public unsafe partial class __
            {
                [StructLayout(LayoutKind.Explicit, Size = 12)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal global::System.IntPtr m_0;

                    [FieldOffset(4)]
                    internal global::System.IntPtr m_1;

                    [FieldOffset(8)]
                    internal global::System.IntPtr m_2;
                }
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Flounder.Matrix3> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Flounder.Matrix3>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::Flounder.Matrix3 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Flounder.Matrix3(native.ToPointer(), skipVTables);
        }

        internal static global::Flounder.Matrix3 __CreateInstance(global::Flounder.Matrix3.__Internal native, bool skipVTables = false)
        {
            return new global::Flounder.Matrix3(native, skipVTables);
        }

        private static void* __CopyValue(global::Flounder.Matrix3.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Flounder.Matrix3.__Internal));
            *(global::Flounder.Matrix3.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Matrix3(global::Flounder.Matrix3.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Matrix3(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        ~Matrix3()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Flounder.Matrix3 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }
}

namespace Flounder
{
    /// <summary>Holds a 4-tuple vector.</summary>
    public unsafe partial class Vector4 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Flounder.Vector4._.__Internal _;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1Vector4@fl@@QAE@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);
        }

        public unsafe partial struct _
        {
            [StructLayout(LayoutKind.Explicit, Size = 16)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::Flounder.Vector4._.__.__Internal __;

                [FieldOffset(0)]
                internal global::Flounder.Vector4._.__.__Internal __1;

                [FieldOffset(0)]
                internal global::Flounder.Vector4._.__.__Internal __2;
            }

            public unsafe partial class __
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal float m_x;

                    [FieldOffset(4)]
                    internal float m_y;

                    [FieldOffset(8)]
                    internal float m_z;

                    [FieldOffset(12)]
                    internal float m_w;
                }
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Flounder.Vector4> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Flounder.Vector4>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::Flounder.Vector4 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Flounder.Vector4(native.ToPointer(), skipVTables);
        }

        internal static global::Flounder.Vector4 __CreateInstance(global::Flounder.Vector4.__Internal native, bool skipVTables = false)
        {
            return new global::Flounder.Vector4(native, skipVTables);
        }

        private static void* __CopyValue(global::Flounder.Vector4.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Flounder.Vector4.__Internal));
            *(global::Flounder.Vector4.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Vector4(global::Flounder.Vector4.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Vector4(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        ~Vector4()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Flounder.Vector4 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }
}

namespace Flounder
{
    /// <summary>Holds a 4x4 matrix.</summary>
    public unsafe partial class Matrix4 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 64)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Flounder.Matrix4._.__Internal _;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1Matrix4@fl@@QAE@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);
        }

        public unsafe partial struct _
        {
            [StructLayout(LayoutKind.Explicit, Size = 64)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::Flounder.Matrix4._.__.__Internal __;

                [FieldOffset(0)]
                internal global::Flounder.Matrix4._.__.__Internal __1;

                [FieldOffset(0)]
                internal global::Flounder.Matrix4._.__.__Internal __2;
            }

            public unsafe partial class __
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal global::System.IntPtr m_0;

                    [FieldOffset(4)]
                    internal global::System.IntPtr m_1;

                    [FieldOffset(8)]
                    internal global::System.IntPtr m_2;

                    [FieldOffset(12)]
                    internal global::System.IntPtr m_3;
                }
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Flounder.Matrix4> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Flounder.Matrix4>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::Flounder.Matrix4 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Flounder.Matrix4(native.ToPointer(), skipVTables);
        }

        internal static global::Flounder.Matrix4 __CreateInstance(global::Flounder.Matrix4.__Internal native, bool skipVTables = false)
        {
            return new global::Flounder.Matrix4(native, skipVTables);
        }

        private static void* __CopyValue(global::Flounder.Matrix4.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Flounder.Matrix4.__Internal));
            *(global::Flounder.Matrix4.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Matrix4(global::Flounder.Matrix4.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Matrix4(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        ~Matrix4()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Flounder.Matrix4 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }
}

namespace Flounder
{
    /// <summary>A vector like object of the form w + xi + yj + zk, where w, x, y, z are real numbers and i, j, k are imaginary units.</summary>
    public unsafe partial class Quaternion : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Flounder.Quaternion._.__Internal _;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1Quaternion@fl@@QAE@XZ")]
            internal static extern void dtor(global::System.IntPtr instance, int delete);
        }

        public unsafe partial struct _
        {
            [StructLayout(LayoutKind.Explicit, Size = 16)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::Flounder.Quaternion._.__.__Internal __;

                [FieldOffset(0)]
                internal global::Flounder.Quaternion._.__.__Internal __1;
            }

            public unsafe partial class __
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal float m_x;

                    [FieldOffset(4)]
                    internal float m_y;

                    [FieldOffset(8)]
                    internal float m_z;

                    [FieldOffset(12)]
                    internal float m_w;
                }
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Flounder.Quaternion> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Flounder.Quaternion>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::Flounder.Quaternion __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Flounder.Quaternion(native.ToPointer(), skipVTables);
        }

        internal static global::Flounder.Quaternion __CreateInstance(global::Flounder.Quaternion.__Internal native, bool skipVTables = false)
        {
            return new global::Flounder.Quaternion(native, skipVTables);
        }

        private static void* __CopyValue(global::Flounder.Quaternion.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Flounder.Quaternion.__Internal));
            *(global::Flounder.Quaternion.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Quaternion(global::Flounder.Quaternion.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Quaternion(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        ~Quaternion()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Flounder.Quaternion __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }
}
