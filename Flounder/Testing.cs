// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace Testing
{
    namespace Fl
    {
        /// <summary>Holds a RGBA colour.</summary>
        public unsafe partial class Colour : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 16)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::Testing.Fl.Colour._.__Internal _;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??1Colour@fl@@QAE@XZ")]
                internal static extern void dtor(global::System.IntPtr instance, int delete);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Hfl@@YA?AVColour@0@V10@M@Z")]
                internal static extern global::Testing.Fl.Colour.__Internal OperatorPlus(global::Testing.Fl.Colour.__Internal left, float value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Gfl@@YA?AVColour@0@V10@M@Z")]
                internal static extern global::Testing.Fl.Colour.__Internal OperatorMinus(global::Testing.Fl.Colour.__Internal left, float value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Dfl@@YA?AVColour@0@V10@M@Z")]
                internal static extern global::Testing.Fl.Colour.__Internal OperatorStar(global::Testing.Fl.Colour.__Internal left, float value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Kfl@@YA?AVColour@0@V10@M@Z")]
                internal static extern global::Testing.Fl.Colour.__Internal OperatorSlash(global::Testing.Fl.Colour.__Internal left, float value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Hfl@@YA?AVColour@0@MV10@@Z")]
                internal static extern global::Testing.Fl.Colour.__Internal OperatorPlus_1(float value, global::Testing.Fl.Colour.__Internal left);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Gfl@@YA?AVColour@0@MV10@@Z")]
                internal static extern global::Testing.Fl.Colour.__Internal OperatorMinus_1(float value, global::Testing.Fl.Colour.__Internal left);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Dfl@@YA?AVColour@0@MV10@@Z")]
                internal static extern global::Testing.Fl.Colour.__Internal OperatorStar_1(float value, global::Testing.Fl.Colour.__Internal left);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Kfl@@YA?AVColour@0@MV10@@Z")]
                internal static extern global::Testing.Fl.Colour.__Internal OperatorSlash_1(float value, global::Testing.Fl.Colour.__Internal left);
            }

            public unsafe partial struct _
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal global::Testing.Fl.Colour._.__.__Internal __;

                    [FieldOffset(0)]
                    internal global::Testing.Fl.Colour._.__.__Internal __1;
                }

                public unsafe partial class __
                {
                    [StructLayout(LayoutKind.Explicit, Size = 16)]
                    public partial struct __Internal
                    {
                        [FieldOffset(0)]
                        internal float m_r;

                        [FieldOffset(4)]
                        internal float m_g;

                        [FieldOffset(8)]
                        internal float m_b;

                        [FieldOffset(12)]
                        internal float m_a;
                    }
                }
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Testing.Fl.Colour> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Testing.Fl.Colour>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            internal static global::Testing.Fl.Colour __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::Testing.Fl.Colour(native.ToPointer(), skipVTables);
            }

            internal static global::Testing.Fl.Colour __CreateInstance(global::Testing.Fl.Colour.__Internal native, bool skipVTables = false)
            {
                return new global::Testing.Fl.Colour(native, skipVTables);
            }

            private static void* __CopyValue(global::Testing.Fl.Colour.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::Testing.Fl.Colour.__Internal));
                *(global::Testing.Fl.Colour.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private Colour(global::Testing.Fl.Colour.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Colour(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::Testing.Fl.Colour __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public static global::Testing.Fl.Colour operator +(global::Testing.Fl.Colour left, float value)
            {
                var __arg0 = ReferenceEquals(left, null) ? new global::Testing.Fl.Colour.__Internal() : *(global::Testing.Fl.Colour.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorPlus(__arg0, value);
                return global::Testing.Fl.Colour.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Colour operator -(global::Testing.Fl.Colour left, float value)
            {
                var __arg0 = ReferenceEquals(left, null) ? new global::Testing.Fl.Colour.__Internal() : *(global::Testing.Fl.Colour.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorMinus(__arg0, value);
                return global::Testing.Fl.Colour.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Colour operator *(global::Testing.Fl.Colour left, float value)
            {
                var __arg0 = ReferenceEquals(left, null) ? new global::Testing.Fl.Colour.__Internal() : *(global::Testing.Fl.Colour.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorStar(__arg0, value);
                return global::Testing.Fl.Colour.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Colour operator /(global::Testing.Fl.Colour left, float value)
            {
                var __arg0 = ReferenceEquals(left, null) ? new global::Testing.Fl.Colour.__Internal() : *(global::Testing.Fl.Colour.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorSlash(__arg0, value);
                return global::Testing.Fl.Colour.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Colour operator +(float value, global::Testing.Fl.Colour left)
            {
                var __arg1 = ReferenceEquals(left, null) ? new global::Testing.Fl.Colour.__Internal() : *(global::Testing.Fl.Colour.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorPlus_1(value, __arg1);
                return global::Testing.Fl.Colour.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Colour operator -(float value, global::Testing.Fl.Colour left)
            {
                var __arg1 = ReferenceEquals(left, null) ? new global::Testing.Fl.Colour.__Internal() : *(global::Testing.Fl.Colour.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorMinus_1(value, __arg1);
                return global::Testing.Fl.Colour.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Colour operator *(float value, global::Testing.Fl.Colour left)
            {
                var __arg1 = ReferenceEquals(left, null) ? new global::Testing.Fl.Colour.__Internal() : *(global::Testing.Fl.Colour.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorStar_1(value, __arg1);
                return global::Testing.Fl.Colour.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Colour operator /(float value, global::Testing.Fl.Colour left)
            {
                var __arg1 = ReferenceEquals(left, null) ? new global::Testing.Fl.Colour.__Internal() : *(global::Testing.Fl.Colour.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorSlash_1(value, __arg1);
                return global::Testing.Fl.Colour.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Colour CLEAR
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Colour.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?CLEAR@Colour@fl@@2V12@B");
                    return global::Testing.Fl.Colour.__CreateInstance(*__ptr);
                }
            }

            public static global::Testing.Fl.Colour WHITE
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Colour.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?WHITE@Colour@fl@@2V12@B");
                    return global::Testing.Fl.Colour.__CreateInstance(*__ptr);
                }
            }

            public static global::Testing.Fl.Colour BLACK
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Colour.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?BLACK@Colour@fl@@2V12@B");
                    return global::Testing.Fl.Colour.__CreateInstance(*__ptr);
                }
            }
        }
    }

    namespace Fl
    {
        /// <summary>A class that holds many various math functions.</summary>
        public unsafe partial class Maths : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct __Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?Random@Maths@fl@@SAMXZ")]
                internal static extern float Random();
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Testing.Fl.Maths> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Testing.Fl.Maths>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            internal static global::Testing.Fl.Maths __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::Testing.Fl.Maths(native.ToPointer(), skipVTables);
            }

            internal static global::Testing.Fl.Maths __CreateInstance(global::Testing.Fl.Maths.__Internal native, bool skipVTables = false)
            {
                return new global::Testing.Fl.Maths(native, skipVTables);
            }

            private static void* __CopyValue(global::Testing.Fl.Maths.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::Testing.Fl.Maths.__Internal));
                *(global::Testing.Fl.Maths.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private Maths(global::Testing.Fl.Maths.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Maths(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::Testing.Fl.Maths __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            /// <summary>
            /// <para>Gets a random number.</para>
            /// <para></para>
            /// <para>The random number.</para>
            /// </summary>
            public static float Random
            {
                get
                {
                    var __ret = __Internal.Random();
                    return __ret;
                }
            }
        }
    }

    namespace Fl
    {
        /// <summary>Holds a 2-tuple vector.</summary>
        public unsafe partial class Vector2 : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::Testing.Fl.Vector2._.__Internal _;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??1Vector2@fl@@QAE@XZ")]
                internal static extern void dtor(global::System.IntPtr instance, int delete);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Hfl@@YA?AVVector2@0@V10@M@Z")]
                internal static extern global::Testing.Fl.Vector2.__Internal OperatorPlus(global::Testing.Fl.Vector2.__Internal left, float value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Gfl@@YA?AVVector2@0@V10@M@Z")]
                internal static extern global::Testing.Fl.Vector2.__Internal OperatorMinus(global::Testing.Fl.Vector2.__Internal left, float value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Dfl@@YA?AVVector2@0@V10@M@Z")]
                internal static extern global::Testing.Fl.Vector2.__Internal OperatorStar(global::Testing.Fl.Vector2.__Internal left, float value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Kfl@@YA?AVVector2@0@V10@M@Z")]
                internal static extern global::Testing.Fl.Vector2.__Internal OperatorSlash(global::Testing.Fl.Vector2.__Internal left, float value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Hfl@@YA?AVVector2@0@MV10@@Z")]
                internal static extern global::Testing.Fl.Vector2.__Internal OperatorPlus_1(float value, global::Testing.Fl.Vector2.__Internal left);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Gfl@@YA?AVVector2@0@MV10@@Z")]
                internal static extern global::Testing.Fl.Vector2.__Internal OperatorMinus_1(float value, global::Testing.Fl.Vector2.__Internal left);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Dfl@@YA?AVVector2@0@MV10@@Z")]
                internal static extern global::Testing.Fl.Vector2.__Internal OperatorStar_1(float value, global::Testing.Fl.Vector2.__Internal left);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Kfl@@YA?AVVector2@0@MV10@@Z")]
                internal static extern global::Testing.Fl.Vector2.__Internal OperatorSlash_1(float value, global::Testing.Fl.Vector2.__Internal left);
            }

            public unsafe partial struct _
            {
                [StructLayout(LayoutKind.Explicit, Size = 8)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal global::Testing.Fl.Vector2._.__.__Internal __;

                    [FieldOffset(0)]
                    internal global::Testing.Fl.Vector2._.__.__Internal __1;
                }

                public unsafe partial class __
                {
                    [StructLayout(LayoutKind.Explicit, Size = 8)]
                    public partial struct __Internal
                    {
                        [FieldOffset(0)]
                        internal float m_x;

                        [FieldOffset(4)]
                        internal float m_y;
                    }
                }
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Testing.Fl.Vector2> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Testing.Fl.Vector2>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            internal static global::Testing.Fl.Vector2 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::Testing.Fl.Vector2(native.ToPointer(), skipVTables);
            }

            internal static global::Testing.Fl.Vector2 __CreateInstance(global::Testing.Fl.Vector2.__Internal native, bool skipVTables = false)
            {
                return new global::Testing.Fl.Vector2(native, skipVTables);
            }

            private static void* __CopyValue(global::Testing.Fl.Vector2.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::Testing.Fl.Vector2.__Internal));
                *(global::Testing.Fl.Vector2.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private Vector2(global::Testing.Fl.Vector2.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Vector2(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::Testing.Fl.Vector2 __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public static global::Testing.Fl.Vector2 operator +(global::Testing.Fl.Vector2 left, float value)
            {
                var __arg0 = ReferenceEquals(left, null) ? new global::Testing.Fl.Vector2.__Internal() : *(global::Testing.Fl.Vector2.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorPlus(__arg0, value);
                return global::Testing.Fl.Vector2.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Vector2 operator -(global::Testing.Fl.Vector2 left, float value)
            {
                var __arg0 = ReferenceEquals(left, null) ? new global::Testing.Fl.Vector2.__Internal() : *(global::Testing.Fl.Vector2.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorMinus(__arg0, value);
                return global::Testing.Fl.Vector2.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Vector2 operator *(global::Testing.Fl.Vector2 left, float value)
            {
                var __arg0 = ReferenceEquals(left, null) ? new global::Testing.Fl.Vector2.__Internal() : *(global::Testing.Fl.Vector2.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorStar(__arg0, value);
                return global::Testing.Fl.Vector2.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Vector2 operator /(global::Testing.Fl.Vector2 left, float value)
            {
                var __arg0 = ReferenceEquals(left, null) ? new global::Testing.Fl.Vector2.__Internal() : *(global::Testing.Fl.Vector2.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorSlash(__arg0, value);
                return global::Testing.Fl.Vector2.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Vector2 operator +(float value, global::Testing.Fl.Vector2 left)
            {
                var __arg1 = ReferenceEquals(left, null) ? new global::Testing.Fl.Vector2.__Internal() : *(global::Testing.Fl.Vector2.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorPlus_1(value, __arg1);
                return global::Testing.Fl.Vector2.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Vector2 operator -(float value, global::Testing.Fl.Vector2 left)
            {
                var __arg1 = ReferenceEquals(left, null) ? new global::Testing.Fl.Vector2.__Internal() : *(global::Testing.Fl.Vector2.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorMinus_1(value, __arg1);
                return global::Testing.Fl.Vector2.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Vector2 operator *(float value, global::Testing.Fl.Vector2 left)
            {
                var __arg1 = ReferenceEquals(left, null) ? new global::Testing.Fl.Vector2.__Internal() : *(global::Testing.Fl.Vector2.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorStar_1(value, __arg1);
                return global::Testing.Fl.Vector2.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Vector2 operator /(float value, global::Testing.Fl.Vector2 left)
            {
                var __arg1 = ReferenceEquals(left, null) ? new global::Testing.Fl.Vector2.__Internal() : *(global::Testing.Fl.Vector2.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorSlash_1(value, __arg1);
                return global::Testing.Fl.Vector2.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Vector2 ZERO
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Vector2.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?ZERO@Vector2@fl@@2V12@B");
                    return global::Testing.Fl.Vector2.__CreateInstance(*__ptr);
                }
            }

            public static global::Testing.Fl.Vector2 ONE
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Vector2.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?ONE@Vector2@fl@@2V12@B");
                    return global::Testing.Fl.Vector2.__CreateInstance(*__ptr);
                }
            }

            public static global::Testing.Fl.Vector2 LEFT
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Vector2.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?LEFT@Vector2@fl@@2V12@B");
                    return global::Testing.Fl.Vector2.__CreateInstance(*__ptr);
                }
            }

            public static global::Testing.Fl.Vector2 RIGHT
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Vector2.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?RIGHT@Vector2@fl@@2V12@B");
                    return global::Testing.Fl.Vector2.__CreateInstance(*__ptr);
                }
            }

            public static global::Testing.Fl.Vector2 UP
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Vector2.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?UP@Vector2@fl@@2V12@B");
                    return global::Testing.Fl.Vector2.__CreateInstance(*__ptr);
                }
            }

            public static global::Testing.Fl.Vector2 DOWN
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Vector2.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?DOWN@Vector2@fl@@2V12@B");
                    return global::Testing.Fl.Vector2.__CreateInstance(*__ptr);
                }
            }

            public static global::Testing.Fl.Vector2 POSITIVE_INFINITY
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Vector2.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?POSITIVE_INFINITY@Vector2@fl@@2V12@B");
                    return global::Testing.Fl.Vector2.__CreateInstance(*__ptr);
                }
            }

            public static global::Testing.Fl.Vector2 NEGATIVE_INFINITY
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Vector2.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?NEGATIVE_INFINITY@Vector2@fl@@2V12@B");
                    return global::Testing.Fl.Vector2.__CreateInstance(*__ptr);
                }
            }
        }
    }

    namespace Fl
    {
        /// <summary>Holds a 2x2 matrix.</summary>
        public unsafe partial class Matrix2 : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 16)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::Testing.Fl.Matrix2._.__Internal _;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??1Matrix2@fl@@QAE@XZ")]
                internal static extern void dtor(global::System.IntPtr instance, int delete);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Dfl@@YA?AVMatrix2@0@V10@VVector2@0@@Z")]
                internal static extern global::Testing.Fl.Matrix2.__Internal OperatorStar(global::Testing.Fl.Matrix2.__Internal left, global::Testing.Fl.Vector2.__Internal value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Kfl@@YA?AVMatrix2@0@V10@VVector2@0@@Z")]
                internal static extern global::Testing.Fl.Matrix2.__Internal OperatorSlash(global::Testing.Fl.Matrix2.__Internal left, global::Testing.Fl.Vector2.__Internal value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Dfl@@YA?AVMatrix2@0@V10@M@Z")]
                internal static extern global::Testing.Fl.Matrix2.__Internal OperatorStar_1(global::Testing.Fl.Matrix2.__Internal left, float value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Kfl@@YA?AVMatrix2@0@V10@M@Z")]
                internal static extern global::Testing.Fl.Matrix2.__Internal OperatorSlash_1(global::Testing.Fl.Matrix2.__Internal left, float value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Dfl@@YA?AVMatrix2@0@MV10@@Z")]
                internal static extern global::Testing.Fl.Matrix2.__Internal OperatorStar_2(float value, global::Testing.Fl.Matrix2.__Internal left);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Kfl@@YA?AVMatrix2@0@MV10@@Z")]
                internal static extern global::Testing.Fl.Matrix2.__Internal OperatorSlash_2(float value, global::Testing.Fl.Matrix2.__Internal left);
            }

            public unsafe partial struct _
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal global::Testing.Fl.Matrix2._.__.__Internal __;

                    [FieldOffset(0)]
                    internal global::Testing.Fl.Matrix2._.__.__Internal __1;

                    [FieldOffset(0)]
                    internal global::Testing.Fl.Matrix2._.__.__Internal __2;
                }

                public unsafe partial class __
                {
                    [StructLayout(LayoutKind.Explicit, Size = 8)]
                    public partial struct __Internal
                    {
                        [FieldOffset(0)]
                        internal global::System.IntPtr m_0;

                        [FieldOffset(4)]
                        internal global::System.IntPtr m_1;
                    }
                }
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Testing.Fl.Matrix2> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Testing.Fl.Matrix2>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            internal static global::Testing.Fl.Matrix2 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::Testing.Fl.Matrix2(native.ToPointer(), skipVTables);
            }

            internal static global::Testing.Fl.Matrix2 __CreateInstance(global::Testing.Fl.Matrix2.__Internal native, bool skipVTables = false)
            {
                return new global::Testing.Fl.Matrix2(native, skipVTables);
            }

            private static void* __CopyValue(global::Testing.Fl.Matrix2.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::Testing.Fl.Matrix2.__Internal));
                *(global::Testing.Fl.Matrix2.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private Matrix2(global::Testing.Fl.Matrix2.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Matrix2(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::Testing.Fl.Matrix2 __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public static global::Testing.Fl.Matrix2 operator *(global::Testing.Fl.Matrix2 left, global::Testing.Fl.Vector2 value)
            {
                var __arg0 = ReferenceEquals(left, null) ? new global::Testing.Fl.Matrix2.__Internal() : *(global::Testing.Fl.Matrix2.__Internal*) left.__Instance;
                var __arg1 = ReferenceEquals(value, null) ? new global::Testing.Fl.Vector2.__Internal() : *(global::Testing.Fl.Vector2.__Internal*) value.__Instance;
                var __ret = __Internal.OperatorStar(__arg0, __arg1);
                return global::Testing.Fl.Matrix2.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Matrix2 operator /(global::Testing.Fl.Matrix2 left, global::Testing.Fl.Vector2 value)
            {
                var __arg0 = ReferenceEquals(left, null) ? new global::Testing.Fl.Matrix2.__Internal() : *(global::Testing.Fl.Matrix2.__Internal*) left.__Instance;
                var __arg1 = ReferenceEquals(value, null) ? new global::Testing.Fl.Vector2.__Internal() : *(global::Testing.Fl.Vector2.__Internal*) value.__Instance;
                var __ret = __Internal.OperatorSlash(__arg0, __arg1);
                return global::Testing.Fl.Matrix2.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Matrix2 operator *(global::Testing.Fl.Matrix2 left, float value)
            {
                var __arg0 = ReferenceEquals(left, null) ? new global::Testing.Fl.Matrix2.__Internal() : *(global::Testing.Fl.Matrix2.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorStar_1(__arg0, value);
                return global::Testing.Fl.Matrix2.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Matrix2 operator /(global::Testing.Fl.Matrix2 left, float value)
            {
                var __arg0 = ReferenceEquals(left, null) ? new global::Testing.Fl.Matrix2.__Internal() : *(global::Testing.Fl.Matrix2.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorSlash_1(__arg0, value);
                return global::Testing.Fl.Matrix2.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Matrix2 operator *(float value, global::Testing.Fl.Matrix2 left)
            {
                var __arg1 = ReferenceEquals(left, null) ? new global::Testing.Fl.Matrix2.__Internal() : *(global::Testing.Fl.Matrix2.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorStar_2(value, __arg1);
                return global::Testing.Fl.Matrix2.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Matrix2 operator /(float value, global::Testing.Fl.Matrix2 left)
            {
                var __arg1 = ReferenceEquals(left, null) ? new global::Testing.Fl.Matrix2.__Internal() : *(global::Testing.Fl.Matrix2.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorSlash_2(value, __arg1);
                return global::Testing.Fl.Matrix2.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Matrix2 IDENTITY
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Matrix2.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?IDENTITY@Matrix2@fl@@2V12@B");
                    return global::Testing.Fl.Matrix2.__CreateInstance(*__ptr);
                }
            }

            public static global::Testing.Fl.Matrix2 ZERO
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Matrix2.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?ZERO@Matrix2@fl@@2V12@B");
                    return global::Testing.Fl.Matrix2.__CreateInstance(*__ptr);
                }
            }
        }
    }

    namespace Fl
    {
        /// <summary>Holds a 3-tuple vector.</summary>
        public unsafe partial class Vector3 : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 12)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::Testing.Fl.Vector3._.__Internal _;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??1Vector3@fl@@QAE@XZ")]
                internal static extern void dtor(global::System.IntPtr instance, int delete);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Hfl@@YA?AVVector3@0@V10@M@Z")]
                internal static extern global::Testing.Fl.Vector3.__Internal OperatorPlus(global::Testing.Fl.Vector3.__Internal left, float value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Gfl@@YA?AVVector3@0@V10@M@Z")]
                internal static extern global::Testing.Fl.Vector3.__Internal OperatorMinus(global::Testing.Fl.Vector3.__Internal left, float value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Dfl@@YA?AVVector3@0@V10@M@Z")]
                internal static extern global::Testing.Fl.Vector3.__Internal OperatorStar(global::Testing.Fl.Vector3.__Internal left, float value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Kfl@@YA?AVVector3@0@V10@M@Z")]
                internal static extern global::Testing.Fl.Vector3.__Internal OperatorSlash(global::Testing.Fl.Vector3.__Internal left, float value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Hfl@@YA?AVVector3@0@MV10@@Z")]
                internal static extern global::Testing.Fl.Vector3.__Internal OperatorPlus_1(float value, global::Testing.Fl.Vector3.__Internal left);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Gfl@@YA?AVVector3@0@MV10@@Z")]
                internal static extern global::Testing.Fl.Vector3.__Internal OperatorMinus_1(float value, global::Testing.Fl.Vector3.__Internal left);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Dfl@@YA?AVVector3@0@MV10@@Z")]
                internal static extern global::Testing.Fl.Vector3.__Internal OperatorStar_1(float value, global::Testing.Fl.Vector3.__Internal left);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Kfl@@YA?AVVector3@0@MV10@@Z")]
                internal static extern global::Testing.Fl.Vector3.__Internal OperatorSlash_1(float value, global::Testing.Fl.Vector3.__Internal left);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?RandomUnitVector@Vector3@fl@@SA?AV12@XZ")]
                internal static extern void RandomUnitVector(global::System.IntPtr @return);
            }

            public unsafe partial struct _
            {
                [StructLayout(LayoutKind.Explicit, Size = 12)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal global::Testing.Fl.Vector3._.__.__Internal __;

                    [FieldOffset(0)]
                    internal global::Testing.Fl.Vector3._.__.__Internal __1;
                }

                public unsafe partial class __
                {
                    [StructLayout(LayoutKind.Explicit, Size = 12)]
                    public partial struct __Internal
                    {
                        [FieldOffset(0)]
                        internal float m_x;

                        [FieldOffset(4)]
                        internal float m_y;

                        [FieldOffset(8)]
                        internal float m_z;
                    }
                }
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Testing.Fl.Vector3> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Testing.Fl.Vector3>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            internal static global::Testing.Fl.Vector3 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::Testing.Fl.Vector3(native.ToPointer(), skipVTables);
            }

            internal static global::Testing.Fl.Vector3 __CreateInstance(global::Testing.Fl.Vector3.__Internal native, bool skipVTables = false)
            {
                return new global::Testing.Fl.Vector3(native, skipVTables);
            }

            private static void* __CopyValue(global::Testing.Fl.Vector3.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::Testing.Fl.Vector3.__Internal));
                *(global::Testing.Fl.Vector3.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private Vector3(global::Testing.Fl.Vector3.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Vector3(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::Testing.Fl.Vector3 __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public static global::Testing.Fl.Vector3 operator +(global::Testing.Fl.Vector3 left, float value)
            {
                var __arg0 = ReferenceEquals(left, null) ? new global::Testing.Fl.Vector3.__Internal() : *(global::Testing.Fl.Vector3.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorPlus(__arg0, value);
                return global::Testing.Fl.Vector3.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Vector3 operator -(global::Testing.Fl.Vector3 left, float value)
            {
                var __arg0 = ReferenceEquals(left, null) ? new global::Testing.Fl.Vector3.__Internal() : *(global::Testing.Fl.Vector3.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorMinus(__arg0, value);
                return global::Testing.Fl.Vector3.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Vector3 operator *(global::Testing.Fl.Vector3 left, float value)
            {
                var __arg0 = ReferenceEquals(left, null) ? new global::Testing.Fl.Vector3.__Internal() : *(global::Testing.Fl.Vector3.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorStar(__arg0, value);
                return global::Testing.Fl.Vector3.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Vector3 operator /(global::Testing.Fl.Vector3 left, float value)
            {
                var __arg0 = ReferenceEquals(left, null) ? new global::Testing.Fl.Vector3.__Internal() : *(global::Testing.Fl.Vector3.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorSlash(__arg0, value);
                return global::Testing.Fl.Vector3.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Vector3 operator +(float value, global::Testing.Fl.Vector3 left)
            {
                var __arg1 = ReferenceEquals(left, null) ? new global::Testing.Fl.Vector3.__Internal() : *(global::Testing.Fl.Vector3.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorPlus_1(value, __arg1);
                return global::Testing.Fl.Vector3.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Vector3 operator -(float value, global::Testing.Fl.Vector3 left)
            {
                var __arg1 = ReferenceEquals(left, null) ? new global::Testing.Fl.Vector3.__Internal() : *(global::Testing.Fl.Vector3.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorMinus_1(value, __arg1);
                return global::Testing.Fl.Vector3.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Vector3 operator *(float value, global::Testing.Fl.Vector3 left)
            {
                var __arg1 = ReferenceEquals(left, null) ? new global::Testing.Fl.Vector3.__Internal() : *(global::Testing.Fl.Vector3.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorStar_1(value, __arg1);
                return global::Testing.Fl.Vector3.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Vector3 operator /(float value, global::Testing.Fl.Vector3 left)
            {
                var __arg1 = ReferenceEquals(left, null) ? new global::Testing.Fl.Vector3.__Internal() : *(global::Testing.Fl.Vector3.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorSlash_1(value, __arg1);
                return global::Testing.Fl.Vector3.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Vector3 ZERO
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Vector3.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?ZERO@Vector3@fl@@2V12@B");
                    return global::Testing.Fl.Vector3.__CreateInstance(*__ptr);
                }
            }

            public static global::Testing.Fl.Vector3 ONE
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Vector3.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?ONE@Vector3@fl@@2V12@B");
                    return global::Testing.Fl.Vector3.__CreateInstance(*__ptr);
                }
            }

            public static global::Testing.Fl.Vector3 LEFT
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Vector3.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?LEFT@Vector3@fl@@2V12@B");
                    return global::Testing.Fl.Vector3.__CreateInstance(*__ptr);
                }
            }

            public static global::Testing.Fl.Vector3 RIGHT
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Vector3.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?RIGHT@Vector3@fl@@2V12@B");
                    return global::Testing.Fl.Vector3.__CreateInstance(*__ptr);
                }
            }

            public static global::Testing.Fl.Vector3 UP
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Vector3.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?UP@Vector3@fl@@2V12@B");
                    return global::Testing.Fl.Vector3.__CreateInstance(*__ptr);
                }
            }

            public static global::Testing.Fl.Vector3 DOWN
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Vector3.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?DOWN@Vector3@fl@@2V12@B");
                    return global::Testing.Fl.Vector3.__CreateInstance(*__ptr);
                }
            }

            public static global::Testing.Fl.Vector3 FRONT
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Vector3.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?FRONT@Vector3@fl@@2V12@B");
                    return global::Testing.Fl.Vector3.__CreateInstance(*__ptr);
                }
            }

            public static global::Testing.Fl.Vector3 BACK
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Vector3.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?BACK@Vector3@fl@@2V12@B");
                    return global::Testing.Fl.Vector3.__CreateInstance(*__ptr);
                }
            }

            public static global::Testing.Fl.Vector3 POSITIVE_INFINITY
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Vector3.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?POSITIVE_INFINITY@Vector3@fl@@2V12@B");
                    return global::Testing.Fl.Vector3.__CreateInstance(*__ptr);
                }
            }

            public static global::Testing.Fl.Vector3 NEGATIVE_INFINITY
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Vector3.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?NEGATIVE_INFINITY@Vector3@fl@@2V12@B");
                    return global::Testing.Fl.Vector3.__CreateInstance(*__ptr);
                }
            }

            /// <summary>
            /// <para>Generates a random unit vector.</para>
            /// <para></para>
            /// <para>The random unit vector.</para>
            /// </summary>
            public static global::Testing.Fl.Vector3 RandomUnitVector
            {
                get
                {
                    var __ret = new global::Testing.Fl.Vector3.__Internal();
                    __Internal.RandomUnitVector(new IntPtr(&__ret));
                    return global::Testing.Fl.Vector3.__CreateInstance(__ret);
                }
            }
        }
    }

    namespace Fl
    {
        /// <summary>Holds a 3x3 matrix.</summary>
        public unsafe partial class Matrix3 : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 36)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::Testing.Fl.Matrix3._.__Internal _;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??1Matrix3@fl@@QAE@XZ")]
                internal static extern void dtor(global::System.IntPtr instance, int delete);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Dfl@@YA?AVMatrix3@0@V10@VVector3@0@@Z")]
                internal static extern global::Testing.Fl.Matrix3.__Internal OperatorStar(global::Testing.Fl.Matrix3.__Internal left, global::Testing.Fl.Vector3.__Internal value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Kfl@@YA?AVMatrix3@0@V10@VVector3@0@@Z")]
                internal static extern global::Testing.Fl.Matrix3.__Internal OperatorSlash(global::Testing.Fl.Matrix3.__Internal left, global::Testing.Fl.Vector3.__Internal value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Dfl@@YA?AVMatrix3@0@V10@M@Z")]
                internal static extern global::Testing.Fl.Matrix3.__Internal OperatorStar_1(global::Testing.Fl.Matrix3.__Internal left, float value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Kfl@@YA?AVMatrix3@0@V10@M@Z")]
                internal static extern global::Testing.Fl.Matrix3.__Internal OperatorSlash_1(global::Testing.Fl.Matrix3.__Internal left, float value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Dfl@@YA?AVMatrix3@0@MV10@@Z")]
                internal static extern global::Testing.Fl.Matrix3.__Internal OperatorStar_2(float value, global::Testing.Fl.Matrix3.__Internal left);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Kfl@@YA?AVMatrix3@0@MV10@@Z")]
                internal static extern global::Testing.Fl.Matrix3.__Internal OperatorSlash_2(float value, global::Testing.Fl.Matrix3.__Internal left);
            }

            public unsafe partial struct _
            {
                [StructLayout(LayoutKind.Explicit, Size = 36)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal global::Testing.Fl.Matrix3._.__.__Internal __;

                    [FieldOffset(0)]
                    internal global::Testing.Fl.Matrix3._.__.__Internal __1;

                    [FieldOffset(0)]
                    internal global::Testing.Fl.Matrix3._.__.__Internal __2;
                }

                public unsafe partial class __
                {
                    [StructLayout(LayoutKind.Explicit, Size = 12)]
                    public partial struct __Internal
                    {
                        [FieldOffset(0)]
                        internal global::System.IntPtr m_0;

                        [FieldOffset(4)]
                        internal global::System.IntPtr m_1;

                        [FieldOffset(8)]
                        internal global::System.IntPtr m_2;
                    }
                }
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Testing.Fl.Matrix3> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Testing.Fl.Matrix3>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            internal static global::Testing.Fl.Matrix3 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::Testing.Fl.Matrix3(native.ToPointer(), skipVTables);
            }

            internal static global::Testing.Fl.Matrix3 __CreateInstance(global::Testing.Fl.Matrix3.__Internal native, bool skipVTables = false)
            {
                return new global::Testing.Fl.Matrix3(native, skipVTables);
            }

            private static void* __CopyValue(global::Testing.Fl.Matrix3.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::Testing.Fl.Matrix3.__Internal));
                *(global::Testing.Fl.Matrix3.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private Matrix3(global::Testing.Fl.Matrix3.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Matrix3(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::Testing.Fl.Matrix3 __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public static global::Testing.Fl.Matrix3 operator *(global::Testing.Fl.Matrix3 left, global::Testing.Fl.Vector3 value)
            {
                var __arg0 = ReferenceEquals(left, null) ? new global::Testing.Fl.Matrix3.__Internal() : *(global::Testing.Fl.Matrix3.__Internal*) left.__Instance;
                var __arg1 = ReferenceEquals(value, null) ? new global::Testing.Fl.Vector3.__Internal() : *(global::Testing.Fl.Vector3.__Internal*) value.__Instance;
                var __ret = __Internal.OperatorStar(__arg0, __arg1);
                return global::Testing.Fl.Matrix3.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Matrix3 operator /(global::Testing.Fl.Matrix3 left, global::Testing.Fl.Vector3 value)
            {
                var __arg0 = ReferenceEquals(left, null) ? new global::Testing.Fl.Matrix3.__Internal() : *(global::Testing.Fl.Matrix3.__Internal*) left.__Instance;
                var __arg1 = ReferenceEquals(value, null) ? new global::Testing.Fl.Vector3.__Internal() : *(global::Testing.Fl.Vector3.__Internal*) value.__Instance;
                var __ret = __Internal.OperatorSlash(__arg0, __arg1);
                return global::Testing.Fl.Matrix3.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Matrix3 operator *(global::Testing.Fl.Matrix3 left, float value)
            {
                var __arg0 = ReferenceEquals(left, null) ? new global::Testing.Fl.Matrix3.__Internal() : *(global::Testing.Fl.Matrix3.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorStar_1(__arg0, value);
                return global::Testing.Fl.Matrix3.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Matrix3 operator /(global::Testing.Fl.Matrix3 left, float value)
            {
                var __arg0 = ReferenceEquals(left, null) ? new global::Testing.Fl.Matrix3.__Internal() : *(global::Testing.Fl.Matrix3.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorSlash_1(__arg0, value);
                return global::Testing.Fl.Matrix3.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Matrix3 operator *(float value, global::Testing.Fl.Matrix3 left)
            {
                var __arg1 = ReferenceEquals(left, null) ? new global::Testing.Fl.Matrix3.__Internal() : *(global::Testing.Fl.Matrix3.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorStar_2(value, __arg1);
                return global::Testing.Fl.Matrix3.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Matrix3 operator /(float value, global::Testing.Fl.Matrix3 left)
            {
                var __arg1 = ReferenceEquals(left, null) ? new global::Testing.Fl.Matrix3.__Internal() : *(global::Testing.Fl.Matrix3.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorSlash_2(value, __arg1);
                return global::Testing.Fl.Matrix3.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Matrix3 IDENTITY
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Matrix3.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?IDENTITY@Matrix3@fl@@2V12@B");
                    return global::Testing.Fl.Matrix3.__CreateInstance(*__ptr);
                }
            }

            public static global::Testing.Fl.Matrix3 ZERO
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Matrix3.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?ZERO@Matrix3@fl@@2V12@B");
                    return global::Testing.Fl.Matrix3.__CreateInstance(*__ptr);
                }
            }
        }
    }

    namespace Fl
    {
        /// <summary>Holds a 4-tuple vector.</summary>
        public unsafe partial class Vector4 : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 16)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::Testing.Fl.Vector4._.__Internal _;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??1Vector4@fl@@QAE@XZ")]
                internal static extern void dtor(global::System.IntPtr instance, int delete);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Hfl@@YA?AVVector4@0@V10@M@Z")]
                internal static extern global::Testing.Fl.Vector4.__Internal OperatorPlus(global::Testing.Fl.Vector4.__Internal left, float value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Gfl@@YA?AVVector4@0@V10@M@Z")]
                internal static extern global::Testing.Fl.Vector4.__Internal OperatorMinus(global::Testing.Fl.Vector4.__Internal left, float value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Dfl@@YA?AVVector4@0@V10@M@Z")]
                internal static extern global::Testing.Fl.Vector4.__Internal OperatorStar(global::Testing.Fl.Vector4.__Internal left, float value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Kfl@@YA?AVVector4@0@V10@M@Z")]
                internal static extern global::Testing.Fl.Vector4.__Internal OperatorSlash(global::Testing.Fl.Vector4.__Internal left, float value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Hfl@@YA?AVVector4@0@MV10@@Z")]
                internal static extern global::Testing.Fl.Vector4.__Internal OperatorPlus_1(float value, global::Testing.Fl.Vector4.__Internal left);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Gfl@@YA?AVVector4@0@MV10@@Z")]
                internal static extern global::Testing.Fl.Vector4.__Internal OperatorMinus_1(float value, global::Testing.Fl.Vector4.__Internal left);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Dfl@@YA?AVVector4@0@MV10@@Z")]
                internal static extern global::Testing.Fl.Vector4.__Internal OperatorStar_1(float value, global::Testing.Fl.Vector4.__Internal left);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Kfl@@YA?AVVector4@0@MV10@@Z")]
                internal static extern global::Testing.Fl.Vector4.__Internal OperatorSlash_1(float value, global::Testing.Fl.Vector4.__Internal left);
            }

            public unsafe partial struct _
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal global::Testing.Fl.Vector4._.__.__Internal __;

                    [FieldOffset(0)]
                    internal global::Testing.Fl.Vector4._.__.__Internal __1;

                    [FieldOffset(0)]
                    internal global::Testing.Fl.Vector4._.__.__Internal __2;
                }

                public unsafe partial class __
                {
                    [StructLayout(LayoutKind.Explicit, Size = 16)]
                    public partial struct __Internal
                    {
                        [FieldOffset(0)]
                        internal float m_x;

                        [FieldOffset(4)]
                        internal float m_y;

                        [FieldOffset(8)]
                        internal float m_z;

                        [FieldOffset(12)]
                        internal float m_w;
                    }
                }
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Testing.Fl.Vector4> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Testing.Fl.Vector4>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            internal static global::Testing.Fl.Vector4 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::Testing.Fl.Vector4(native.ToPointer(), skipVTables);
            }

            internal static global::Testing.Fl.Vector4 __CreateInstance(global::Testing.Fl.Vector4.__Internal native, bool skipVTables = false)
            {
                return new global::Testing.Fl.Vector4(native, skipVTables);
            }

            private static void* __CopyValue(global::Testing.Fl.Vector4.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::Testing.Fl.Vector4.__Internal));
                *(global::Testing.Fl.Vector4.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private Vector4(global::Testing.Fl.Vector4.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Vector4(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::Testing.Fl.Vector4 __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public static global::Testing.Fl.Vector4 operator +(global::Testing.Fl.Vector4 left, float value)
            {
                var __arg0 = ReferenceEquals(left, null) ? new global::Testing.Fl.Vector4.__Internal() : *(global::Testing.Fl.Vector4.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorPlus(__arg0, value);
                return global::Testing.Fl.Vector4.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Vector4 operator -(global::Testing.Fl.Vector4 left, float value)
            {
                var __arg0 = ReferenceEquals(left, null) ? new global::Testing.Fl.Vector4.__Internal() : *(global::Testing.Fl.Vector4.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorMinus(__arg0, value);
                return global::Testing.Fl.Vector4.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Vector4 operator *(global::Testing.Fl.Vector4 left, float value)
            {
                var __arg0 = ReferenceEquals(left, null) ? new global::Testing.Fl.Vector4.__Internal() : *(global::Testing.Fl.Vector4.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorStar(__arg0, value);
                return global::Testing.Fl.Vector4.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Vector4 operator /(global::Testing.Fl.Vector4 left, float value)
            {
                var __arg0 = ReferenceEquals(left, null) ? new global::Testing.Fl.Vector4.__Internal() : *(global::Testing.Fl.Vector4.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorSlash(__arg0, value);
                return global::Testing.Fl.Vector4.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Vector4 operator +(float value, global::Testing.Fl.Vector4 left)
            {
                var __arg1 = ReferenceEquals(left, null) ? new global::Testing.Fl.Vector4.__Internal() : *(global::Testing.Fl.Vector4.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorPlus_1(value, __arg1);
                return global::Testing.Fl.Vector4.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Vector4 operator -(float value, global::Testing.Fl.Vector4 left)
            {
                var __arg1 = ReferenceEquals(left, null) ? new global::Testing.Fl.Vector4.__Internal() : *(global::Testing.Fl.Vector4.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorMinus_1(value, __arg1);
                return global::Testing.Fl.Vector4.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Vector4 operator *(float value, global::Testing.Fl.Vector4 left)
            {
                var __arg1 = ReferenceEquals(left, null) ? new global::Testing.Fl.Vector4.__Internal() : *(global::Testing.Fl.Vector4.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorStar_1(value, __arg1);
                return global::Testing.Fl.Vector4.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Vector4 operator /(float value, global::Testing.Fl.Vector4 left)
            {
                var __arg1 = ReferenceEquals(left, null) ? new global::Testing.Fl.Vector4.__Internal() : *(global::Testing.Fl.Vector4.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorSlash_1(value, __arg1);
                return global::Testing.Fl.Vector4.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Vector4 ZERO
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Vector4.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?ZERO@Vector4@fl@@2V12@B");
                    return global::Testing.Fl.Vector4.__CreateInstance(*__ptr);
                }
            }

            public static global::Testing.Fl.Vector4 ONE
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Vector4.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?ONE@Vector4@fl@@2V12@B");
                    return global::Testing.Fl.Vector4.__CreateInstance(*__ptr);
                }
            }

            public static global::Testing.Fl.Vector4 POSITIVE_INFINITY
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Vector4.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?POSITIVE_INFINITY@Vector4@fl@@2V12@B");
                    return global::Testing.Fl.Vector4.__CreateInstance(*__ptr);
                }
            }

            public static global::Testing.Fl.Vector4 NEGATIVE_INFINITY
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Vector4.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?NEGATIVE_INFINITY@Vector4@fl@@2V12@B");
                    return global::Testing.Fl.Vector4.__CreateInstance(*__ptr);
                }
            }
        }
    }

    namespace Fl
    {
        /// <summary>Holds a 4x4 matrix.</summary>
        public unsafe partial class Matrix4 : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 64)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::Testing.Fl.Matrix4._.__Internal _;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??1Matrix4@fl@@QAE@XZ")]
                internal static extern void dtor(global::System.IntPtr instance, int delete);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Dfl@@YA?AVMatrix4@0@V10@VVector4@0@@Z")]
                internal static extern global::Testing.Fl.Matrix4.__Internal OperatorStar(global::Testing.Fl.Matrix4.__Internal left, global::Testing.Fl.Vector4.__Internal value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Kfl@@YA?AVMatrix4@0@V10@VVector4@0@@Z")]
                internal static extern global::Testing.Fl.Matrix4.__Internal OperatorSlash(global::Testing.Fl.Matrix4.__Internal left, global::Testing.Fl.Vector4.__Internal value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Dfl@@YA?AVMatrix4@0@V10@M@Z")]
                internal static extern global::Testing.Fl.Matrix4.__Internal OperatorStar_1(global::Testing.Fl.Matrix4.__Internal left, float value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Kfl@@YA?AVMatrix4@0@V10@M@Z")]
                internal static extern global::Testing.Fl.Matrix4.__Internal OperatorSlash_1(global::Testing.Fl.Matrix4.__Internal left, float value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Dfl@@YA?AVMatrix4@0@MV10@@Z")]
                internal static extern global::Testing.Fl.Matrix4.__Internal OperatorStar_2(float value, global::Testing.Fl.Matrix4.__Internal left);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Kfl@@YA?AVMatrix4@0@MV10@@Z")]
                internal static extern global::Testing.Fl.Matrix4.__Internal OperatorSlash_2(float value, global::Testing.Fl.Matrix4.__Internal left);
            }

            public unsafe partial struct _
            {
                [StructLayout(LayoutKind.Explicit, Size = 64)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal global::Testing.Fl.Matrix4._.__.__Internal __;

                    [FieldOffset(0)]
                    internal global::Testing.Fl.Matrix4._.__.__Internal __1;

                    [FieldOffset(0)]
                    internal global::Testing.Fl.Matrix4._.__.__Internal __2;
                }

                public unsafe partial class __
                {
                    [StructLayout(LayoutKind.Explicit, Size = 16)]
                    public partial struct __Internal
                    {
                        [FieldOffset(0)]
                        internal global::System.IntPtr m_0;

                        [FieldOffset(4)]
                        internal global::System.IntPtr m_1;

                        [FieldOffset(8)]
                        internal global::System.IntPtr m_2;

                        [FieldOffset(12)]
                        internal global::System.IntPtr m_3;
                    }
                }
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Testing.Fl.Matrix4> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Testing.Fl.Matrix4>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            internal static global::Testing.Fl.Matrix4 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::Testing.Fl.Matrix4(native.ToPointer(), skipVTables);
            }

            internal static global::Testing.Fl.Matrix4 __CreateInstance(global::Testing.Fl.Matrix4.__Internal native, bool skipVTables = false)
            {
                return new global::Testing.Fl.Matrix4(native, skipVTables);
            }

            private static void* __CopyValue(global::Testing.Fl.Matrix4.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::Testing.Fl.Matrix4.__Internal));
                *(global::Testing.Fl.Matrix4.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private Matrix4(global::Testing.Fl.Matrix4.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Matrix4(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::Testing.Fl.Matrix4 __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public static global::Testing.Fl.Matrix4 operator *(global::Testing.Fl.Matrix4 left, global::Testing.Fl.Vector4 value)
            {
                var __arg0 = ReferenceEquals(left, null) ? new global::Testing.Fl.Matrix4.__Internal() : *(global::Testing.Fl.Matrix4.__Internal*) left.__Instance;
                var __arg1 = ReferenceEquals(value, null) ? new global::Testing.Fl.Vector4.__Internal() : *(global::Testing.Fl.Vector4.__Internal*) value.__Instance;
                var __ret = __Internal.OperatorStar(__arg0, __arg1);
                return global::Testing.Fl.Matrix4.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Matrix4 operator /(global::Testing.Fl.Matrix4 left, global::Testing.Fl.Vector4 value)
            {
                var __arg0 = ReferenceEquals(left, null) ? new global::Testing.Fl.Matrix4.__Internal() : *(global::Testing.Fl.Matrix4.__Internal*) left.__Instance;
                var __arg1 = ReferenceEquals(value, null) ? new global::Testing.Fl.Vector4.__Internal() : *(global::Testing.Fl.Vector4.__Internal*) value.__Instance;
                var __ret = __Internal.OperatorSlash(__arg0, __arg1);
                return global::Testing.Fl.Matrix4.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Matrix4 operator *(global::Testing.Fl.Matrix4 left, float value)
            {
                var __arg0 = ReferenceEquals(left, null) ? new global::Testing.Fl.Matrix4.__Internal() : *(global::Testing.Fl.Matrix4.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorStar_1(__arg0, value);
                return global::Testing.Fl.Matrix4.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Matrix4 operator /(global::Testing.Fl.Matrix4 left, float value)
            {
                var __arg0 = ReferenceEquals(left, null) ? new global::Testing.Fl.Matrix4.__Internal() : *(global::Testing.Fl.Matrix4.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorSlash_1(__arg0, value);
                return global::Testing.Fl.Matrix4.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Matrix4 operator *(float value, global::Testing.Fl.Matrix4 left)
            {
                var __arg1 = ReferenceEquals(left, null) ? new global::Testing.Fl.Matrix4.__Internal() : *(global::Testing.Fl.Matrix4.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorStar_2(value, __arg1);
                return global::Testing.Fl.Matrix4.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Matrix4 operator /(float value, global::Testing.Fl.Matrix4 left)
            {
                var __arg1 = ReferenceEquals(left, null) ? new global::Testing.Fl.Matrix4.__Internal() : *(global::Testing.Fl.Matrix4.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorSlash_2(value, __arg1);
                return global::Testing.Fl.Matrix4.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Matrix4 IDENTITY
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Matrix4.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?IDENTITY@Matrix4@fl@@2V12@B");
                    return global::Testing.Fl.Matrix4.__CreateInstance(*__ptr);
                }
            }

            public static global::Testing.Fl.Matrix4 ZERO
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Matrix4.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?ZERO@Matrix4@fl@@2V12@B");
                    return global::Testing.Fl.Matrix4.__CreateInstance(*__ptr);
                }
            }
        }
    }

    namespace Fl
    {
        /// <summary>A vector like object of the form w + xi + yj + zk, where w, x, y, z are real numbers and i, j, k are imaginary units.</summary>
        public unsafe partial class Quaternion : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 16)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::Testing.Fl.Quaternion._.__Internal _;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??1Quaternion@fl@@QAE@XZ")]
                internal static extern void dtor(global::System.IntPtr instance, int delete);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Testing", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??Dfl@@YA?AVQuaternion@0@MV10@@Z")]
                internal static extern global::Testing.Fl.Quaternion.__Internal OperatorStar(float value, global::Testing.Fl.Quaternion.__Internal left);
            }

            public unsafe partial struct _
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal global::Testing.Fl.Quaternion._.__.__Internal __;

                    [FieldOffset(0)]
                    internal global::Testing.Fl.Quaternion._.__.__Internal __1;
                }

                public unsafe partial class __
                {
                    [StructLayout(LayoutKind.Explicit, Size = 16)]
                    public partial struct __Internal
                    {
                        [FieldOffset(0)]
                        internal float m_x;

                        [FieldOffset(4)]
                        internal float m_y;

                        [FieldOffset(8)]
                        internal float m_z;

                        [FieldOffset(12)]
                        internal float m_w;
                    }
                }
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Testing.Fl.Quaternion> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Testing.Fl.Quaternion>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            internal static global::Testing.Fl.Quaternion __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::Testing.Fl.Quaternion(native.ToPointer(), skipVTables);
            }

            internal static global::Testing.Fl.Quaternion __CreateInstance(global::Testing.Fl.Quaternion.__Internal native, bool skipVTables = false)
            {
                return new global::Testing.Fl.Quaternion(native, skipVTables);
            }

            private static void* __CopyValue(global::Testing.Fl.Quaternion.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::Testing.Fl.Quaternion.__Internal));
                *(global::Testing.Fl.Quaternion.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private Quaternion(global::Testing.Fl.Quaternion.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Quaternion(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::Testing.Fl.Quaternion __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public static global::Testing.Fl.Quaternion operator *(float value, global::Testing.Fl.Quaternion left)
            {
                var __arg1 = ReferenceEquals(left, null) ? new global::Testing.Fl.Quaternion.__Internal() : *(global::Testing.Fl.Quaternion.__Internal*) left.__Instance;
                var __ret = __Internal.OperatorStar(value, __arg1);
                return global::Testing.Fl.Quaternion.__CreateInstance(__ret);
            }

            public static global::Testing.Fl.Quaternion ZERO
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Quaternion.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?ZERO@Quaternion@fl@@2V12@B");
                    return global::Testing.Fl.Quaternion.__CreateInstance(*__ptr);
                }
            }

            public static global::Testing.Fl.Quaternion ONE
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Quaternion.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?ONE@Quaternion@fl@@2V12@B");
                    return global::Testing.Fl.Quaternion.__CreateInstance(*__ptr);
                }
            }

            public static global::Testing.Fl.Quaternion POSITIVE_INFINITY
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Quaternion.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?POSITIVE_INFINITY@Quaternion@fl@@2V12@B");
                    return global::Testing.Fl.Quaternion.__CreateInstance(*__ptr);
                }
            }

            public static global::Testing.Fl.Quaternion NEGATIVE_INFINITY
            {
                get
                {
                    var __ptr = (global::Testing.Fl.Quaternion.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("Testing", "?NEGATIVE_INFINITY@Quaternion@fl@@2V12@B");
                    return global::Testing.Fl.Quaternion.__CreateInstance(*__ptr);
                }
            }
        }
    }
}
