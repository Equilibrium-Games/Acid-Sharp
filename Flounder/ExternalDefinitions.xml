<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Definitions>
  <!--
  ***************************************
  **
  ** Colour.hpp
  **
  ***************************************
  -->
  <Export name="Colour" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for colour.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Colour" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for colour.

/// </summary>

/// <param name="r"> The new R value. </param>

/// <param name="g"> The new G value. </param>

/// <param name="b"> The new B value. </param>

/// <param name="a"> The new A value. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="r" />
      <Parameter type="float" name="g" />
      <Parameter type="float" name="b" />
      <Parameter type="float" name="a" />
    </Parameters>
  </Export>
  <Export name="Colour" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for colour.

/// </summary>

/// <param name="hex"> The new values from HEX. </param>

/// <param name="a"> The new A value. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="hex" />
      <Parameter type="float" name="a" />
    </Parameters>
  </Export>
  <Export name="Colour" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for colour.

/// </summary>

/// <param name="source"> Creates this colour out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Colour" name="source" />
    </Parameters>
  </Export>
  <Export name="Colour" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for colour.

/// </summary>

/// <param name="source"> Creates this colour out of a existing vector. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="source" />
    </Parameters>
  </Export>
  <Export name="Colour" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for colour.

/// </summary>

/// <param name="source"> Creates this colour out of a existing vector. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector4" name="source" />
    </Parameters>
  </Export>
  <Export name="Add" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Adds this vector to another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Colour" name="other" />
    </Parameters>
  </Export>
  <Export name="Subtract" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Subtracts this vector to another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Colour" name="other" />
    </Parameters>
  </Export>
  <Export name="Multiply" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Multiplies this vector with another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Colour" name="other" />
    </Parameters>
  </Export>
  <Export name="Divide" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Divides this vector by another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Colour" name="other" />
    </Parameters>
  </Export>
  <Export name="Scale" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Scales this vector by a scalar.

/// </summary>

/// <param name="scalar"> The scalar value. </param>

/// <returns> The scaled vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="scalar" />
    </Parameters>
  </Export>
  <Export name="Normalize" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Normalizes this vector.

/// </summary>

/// <returns> The normalized vector. </returns>
]]>
    </Description>
  </Export>
  <Export name="LengthSquared" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the length squared of this vector.

/// </summary>

/// <returns> The length squared. </returns>
]]>
    </Description>
  </Export>
  <Export name="Length" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the length of this vector.

/// </summary>

/// <returns> The length. </returns>
]]>
    </Description>
  </Export>
  <Export name="Interpolate" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Interpolates between this and another colour.

/// </summary>

/// <param name="other"> The other colour. </param>

/// <param name="blend"> The blend factor. </param>

/// <returns> The interpolated colour. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Colour" name="other" />
      <Parameter type="float" name="blend" />
    </Parameters>
  </Export>
  <Export name="SmoothDamp" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gradually changes this vector to a target.

/// </summary>

/// <param name="target"> The target vector. </param>

/// <param name="rate"> The rate to go from current to the target. </param>

/// <returns> The changed vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Colour" name="target" />
      <Parameter type="global::fl.Colour" name="rate" />
    </Parameters>
  </Export>
  <Export name="GetUnit" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets a colour representing the unit value of this colour.

/// </summary>

/// <returns> The unit colour. </returns>
]]>
    </Description>
  </Export>
  <Export name="GetHex" target="Common" source="Colour.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the hex code from this colour.

/// </summary>

/// <returns> The hex code. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Maths.hpp
  **
  ***************************************
  -->
  <Export name="Random" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets a random number.

/// </summary>

/// <returns> The random number. </returns>
]]>
    </Description>
  </Export>
  <Export name="LogRandom" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a number between two numbers, logarithmic.

/// </summary>

/// <param name="lowerLimit"> The lower number. </param>

/// <param name="upperLimit"> The upper number. </param>

/// <returns> The final random number. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="double" name="lowerLimit" />
      <Parameter type="double" name="upperLimit" />
    </Parameters>
  </Export>
  <Export name="NormallyDistributedSingle" target="Common" source="Maths.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Generates a single value from a normal distribution, using Box-Muller.

/// https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform

/// </summary>

/// <param name="standardDeviation"> The standards deviation of the distribution. </param>

/// <param name="mean"> The mean of the distribution. </param>

/// <returns> A normally distributed value. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="standardDeviation" />
      <Parameter type="float" name="mean" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Vector2.hpp
  **
  ***************************************
  -->
  <Export name="Vector2" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector2.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Vector2" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector2.

/// </summary>

/// <param name="x"> Start x. </param>

/// <param name="y"> Start y. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="x" />
      <Parameter type="float" name="y" />
    </Parameters>
  </Export>
  <Export name="Vector2" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector2.

/// </summary>

/// <param name="source"> Creates this vector out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector2" name="source" />
    </Parameters>
  </Export>
  <Export name="Vector2" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector2.

/// </summary>

/// <param name="source"> Creates this vector out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="source" />
    </Parameters>
  </Export>
  <Export name="Add" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Adds this vector to another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Subtract" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Subtracts this vector to another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Multiply" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Multiplies this vector with another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Divide" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Divides this vector by another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Angle" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Calculates the angle between this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The angle, in radians. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Dot" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Calculates the dot product of the this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The dot product. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Scale" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Scales this vector by a scalar.

/// </summary>

/// <param name="scalar"> The scalar value. </param>

/// <returns> The scaled vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="scalar" />
    </Parameters>
  </Export>
  <Export name="Rotate" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Rotates this vector by a angle around the origin.

/// </summary>

/// <param name="angle"> The angle to rotate by, in radians. </param>

/// <returns> The rotated vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="angle" />
    </Parameters>
  </Export>
  <Export name="Rotate" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Rotates this vector by a angle around a rotation axis.

/// </summary>

/// <param name="angle"> The angle to rotate by, in radians. </param>

/// <param name="rotationAxis"> The point to rotate the vector around. </param>

/// <returns> The rotated vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="angle" />
      <Parameter type="global::fl.Vector2" name="rotationAxis" />
    </Parameters>
  </Export>
  <Export name="Negate" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Negates this vector.

/// </summary>

/// <returns> The negated vector. </returns>
]]>
    </Description>
  </Export>
  <Export name="Normalize" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Normalizes this vector.

/// </summary>

/// <returns> The normalized vector. </returns>
]]>
    </Description>
  </Export>
  <Export name="LengthSquared" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the length squared of this vector.

/// </summary>

/// <returns> The length squared. </returns>
]]>
    </Description>
  </Export>
  <Export name="Length" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the length of this vector.

/// </summary>

/// <returns> The length. </returns>
]]>
    </Description>
  </Export>
  <Export name="MaxComponent" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the maximum value in this vector.

/// </summary>

/// <returns> The largest components. </returns>
]]>
    </Description>
  </Export>
  <Export name="MinComponent" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the lowest value in this vector.

/// </summary>

/// <returns> The smallest components. </returns>
]]>
    </Description>
  </Export>
  <Export name="DistanceSquared" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the distance between this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The squared distance. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Distance" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the between this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The distance. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="DistanceVector" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the vector distance between this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The vector distance. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="InTriangle" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets if this vector is in a triangle.

/// </summary>

/// <param name="v1"> The first triangle vertex. </param>

/// <param name="v2"> The second triangle vertex. </param>

/// <param name="v3"> The third triangle vertex. </param>

/// <returns> If this vector is in a triangle. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector2" name="v1" />
      <Parameter type="global::fl.Vector2" name="v2" />
      <Parameter type="global::fl.Vector2" name="v3" />
    </Parameters>
  </Export>
  <Export name="SmoothDamp" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gradually changes this vector to a target.

/// </summary>

/// <param name="target"> The target vector. </param>

/// <param name="rate"> The rate to go from current to the target. </param>

/// <returns> The changed vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector2" name="target" />
      <Parameter type="global::fl.Vector2" name="rate" />
    </Parameters>
  </Export>
  <Export name="CartesianToPolar" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Converts from rectangular to spherical coordinates, this vector is in cartesian (x, y).

/// </summary>

/// <returns> The polar coordinates (radius, theta). </returns>
]]>
    </Description>
  </Export>
  <Export name="PolarToCartesian" target="Common" source="Vector2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Converts from spherical to rectangular coordinates, this vector is in polar (radius, theta).

/// </summary>

/// <returns> The cartesian coordinates (x, y). </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Matrix2.hpp
  **
  ***************************************
  -->
  <Export name="Matrix2" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Matrix2. The matrix is initialised to the identity.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Matrix2" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Matrix2.

/// </summary>

/// <param name="source"> Creates this matrix out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Matrix2" name="source" />
    </Parameters>
  </Export>
  <Export name="Matrix2" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Matrix2.

/// </summary>

/// <param name="source"> Creates this matrix out of a 4 element array. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float[]" name="source" />
    </Parameters>
  </Export>
  <Export name="Add" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Adds this matrix to another matrix.

/// </summary>

/// <param name="other"> The other matrix. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Matrix2" name="other" />
    </Parameters>
  </Export>
  <Export name="Subtract" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Subtracts this matrix to another matrix.

/// </summary>

/// <param name="other"> The other matrix. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Matrix2" name="other" />
    </Parameters>
  </Export>
  <Export name="Multiply" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Multiplies this matrix by another matrix.

/// </summary>

/// <param name="other"> The other matrix. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Matrix2" name="other" />
    </Parameters>
  </Export>
  <Export name="Divide" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Divides this matrix by another matrix.

/// </summary>

/// <param name="other"> The other matrix. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Matrix2" name="other" />
    </Parameters>
  </Export>
  <Export name="Transform" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Transforms this matrix by a vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Scale" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Scales this matrix by a vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Negate" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Inverts this matrix.

/// </summary>

/// <returns> The inverted matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="Invert" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Negates this matrix.

/// </summary>

/// <returns> The negated matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="Transpose" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Transposes this matrix.

/// </summary>

/// <returns> The transposed matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="Determinant" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Takes the determinant of this matrix.

/// </summary>

/// <returns> The determinant. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetZero" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets this matrix to 0.

/// </summary>

/// <returns> The identity matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetIdentity" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets this matrix to be the identity matrix.

/// </summary>

/// <returns> The identity matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="ToArray" target="Common" source="Matrix2.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Turns this 2x2 matrix into an array.

/// </summary>

/// <returns> A 4 float array. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Vector3.hpp
  **
  ***************************************
  -->
  <Export name="Vector3" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector3.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Vector3" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector3.

/// </summary>

/// <param name="x"> Start x. </param>

/// <param name="y"> Start y. </param>

/// <param name="z"> Start z. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="x" />
      <Parameter type="float" name="y" />
      <Parameter type="float" name="z" />
    </Parameters>
  </Export>
  <Export name="Vector3" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector3.

/// </summary>

/// <param name="source"> Creates this vector out of a existing one. </param>

/// <param name="z"> Start z. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector2" name="source" />
      <Parameter type="float" name="z" />
    </Parameters>
  </Export>
  <Export name="Vector3" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector3.

/// </summary>

/// <param name="source"> Creates this vector out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="source" />
    </Parameters>
  </Export>
  <Export name="Vector3" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector3.

/// </summary>

/// <param name="source"> Creates this vector out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector4" name="source" />
    </Parameters>
  </Export>
  <Export name="Vector3" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector3.

/// </summary>

/// <param name="source"> Creates this vector out of a existing colour. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Colour" name="source" />
    </Parameters>
  </Export>
  <Export name="Add" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Adds this vector to another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Subtract" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Subtracts this vector to another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Multiply" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Multiplies this vector with another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Divide" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Divides this vector by another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Angle" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Calculates the angle between this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The angle, in radians. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Dot" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Calculates the dot product of the this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The dot product. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Cross" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Calculates the cross product of the this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The cross product. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Scale" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Scales this vector by a scalar.

/// </summary>

/// <param name="scalar"> The scalar value. </param>

/// <returns> The scaled vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="scalar" />
    </Parameters>
  </Export>
  <Export name="Rotate" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Rotates this vector by a angle around the origin.

/// </summary>

/// <param name="rotation"> The rotation amount. </param>

/// <returns> The rotated vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="rotation" />
    </Parameters>
  </Export>
  <Export name="Negate" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Negates this vector.

/// </summary>

/// <returns> The negated vector. </returns>
]]>
    </Description>
  </Export>
  <Export name="Normalize" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Normalizes this vector.

/// </summary>

/// <returns> The normalized vector. </returns>
]]>
    </Description>
  </Export>
  <Export name="LengthSquared" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the length squared of this vector.

/// </summary>

/// <returns> The length squared. </returns>
]]>
    </Description>
  </Export>
  <Export name="Length" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the length of this vector.

/// </summary>

/// <returns> The length. </returns>
]]>
    </Description>
  </Export>
  <Export name="MaxComponent" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the maximum value in this vector.

/// </summary>

/// <returns> The largest components. </returns>
]]>
    </Description>
  </Export>
  <Export name="MinComponent" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the lowest value in this vector.

/// </summary>

/// <returns> The smallest components. </returns>
]]>
    </Description>
  </Export>
  <Export name="DistanceSquared" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the distance between this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The squared distance. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Distance" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the between this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The distance. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="DistanceVector" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the vector distance between this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The vector distance. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="SmoothDamp" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gradually changes this vector to a target.

/// </summary>

/// <param name="target"> The target vector. </param>

/// <param name="rate"> The rate to go from current to the target. </param>

/// <returns> The changed vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="target" />
      <Parameter type="global::fl.Vector3" name="rate" />
    </Parameters>
  </Export>
  <Export name="CartesianToPolar" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Converts from rectangular to spherical coordinates, this vector is in cartesian (x, y, z).

/// </summary>

/// <returns> The polar coordinates (radius, theta, phi). </returns>
]]>
    </Description>
  </Export>
  <Export name="PolarToCartesian" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Converts from spherical to rectangular coordinates, this vector is in polar (radius, theta, phi).

/// </summary>

/// <returns> The cartesian coordinates (x, y, z). </returns>
]]>
    </Description>
  </Export>
  <Export name="ProjectCubeToSphere" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Projects this cube coordinate onto a sphere.

/// </summary>

/// <param name="radius"> The sphere radius. </param>

/// <returns> The projected cartesian coordinates. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="radius" />
    </Parameters>
  </Export>
  <Export name="BaryCentric" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the height of this vector on a point off of a 3d triangle.

/// </summary>

/// <param name="p1"> Point 1 on the triangle. </param>

/// <param name="p2"> Point 2 on the triangle. </param>

/// <param name="p3"> Point 3 on the triangle. </param>

/// <returns> Height of the triangle. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="p1" />
      <Parameter type="global::fl.Vector3" name="p2" />
      <Parameter type="global::fl.Vector3" name="p3" />
    </Parameters>
  </Export>
  <Export name="MinVector" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the lowest vector size.

/// </summary>

/// <param name="a"> The first vector to get values from. </param>

/// <param name="b"> The second vector to get values from. </param>

/// <returns> The lowest vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="a" />
      <Parameter type="global::fl.Vector3" name="b" />
    </Parameters>
  </Export>
  <Export name="MaxVector" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the maximum vector size.

/// </summary>

/// <param name="a"> The first vector to get values from. </param>

/// <param name="b"> The second vector to get values from. </param>

/// <returns> The maximum vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="a" />
      <Parameter type="global::fl.Vector3" name="b" />
    </Parameters>
  </Export>
  <Export name="RandomUnitVector" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Generates a random unit vector.

/// </summary>

/// <returns> The random unit vector. </returns>
]]>
    </Description>
  </Export>
  <Export name="RandomPointOnCircle" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets a random point from on a circle.

/// </summary>

/// <param name="normal"> The circles normal. </param>

/// <param name="radius"> The circles radius. </param>

/// <returns> The random point in a circle. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="normal" />
      <Parameter type="float" name="radius" />
    </Parameters>
  </Export>
  <Export name="RandomUnitVectorWithinCone" target="Common" source="Vector3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Generates a random unit vector from within a cone.

/// </summary>

/// <param name="coneDirection"> The cones direction. </param>

/// <param name="angle"> The cones major angle. </param>

/// <returns> The random unitt vector in a code. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="coneDirection" />
      <Parameter type="float" name="angle" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Matrix3.hpp
  **
  ***************************************
  -->
  <Export name="Matrix3" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Matrix3. The matrix is initialised to the identity.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Matrix3" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Matrix3.

/// </summary>

/// <param name="source"> Creates this matrix out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Matrix3" name="source" />
    </Parameters>
  </Export>
  <Export name="Matrix3" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Matrix3.

/// </summary>

/// <param name="source"> Creates this matrix out of a 9 element array. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float[]" name="source" />
    </Parameters>
  </Export>
  <Export name="Add" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Adds this matrix to another matrix.

/// </summary>

/// <param name="other"> The other matrix. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Matrix3" name="other" />
    </Parameters>
  </Export>
  <Export name="Subtract" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Subtracts this matrix to another matrix.

/// </summary>

/// <param name="other"> The other matrix. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Matrix3" name="other" />
    </Parameters>
  </Export>
  <Export name="Multiply" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Multiplies this matrix by another matrix.

/// </summary>

/// <param name="other"> The other matrix. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Matrix3" name="other" />
    </Parameters>
  </Export>
  <Export name="Divide" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Divides this matrix by another matrix.

/// </summary>

/// <param name="other"> The other matrix. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Matrix3" name="other" />
    </Parameters>
  </Export>
  <Export name="Transform" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Transforms this matrix by a vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Scale" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Scales this matrix by a vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Negate" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Inverts this matrix.

/// </summary>

/// <returns> The inverted matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="Invert" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Negates this matrix.

/// </summary>

/// <returns> The negated matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="Transpose" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Transposes this matrix.

/// </summary>

/// <returns> The transposed matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="Determinant" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Takes the determinant of this matrix.

/// </summary>

/// <returns> The determinant. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetZero" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets this matrix to 0.

/// </summary>

/// <returns> The identity matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetIdentity" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets this matrix to be the identity matrix.

/// </summary>

/// <returns> The identity matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="ToArray" target="Common" source="Matrix3.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Turns this 3x3 matrix into an array.

/// </summary>

/// <returns> A 9 float array. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Vector4.hpp
  **
  ***************************************
  -->
  <Export name="Vector4" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector4.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Vector4" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector4.

/// </summary>

/// <param name="x"> Start x. </param>

/// <param name="y"> Start y. </param>

/// <param name="z"> Start z. </param>

/// <param name="w"> Start w. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="x" />
      <Parameter type="float" name="y" />
      <Parameter type="float" name="z" />
      <Parameter type="float" name="w" />
    </Parameters>
  </Export>
  <Export name="Vector4" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector4.

/// </summary>

/// <param name="source"> Creates this vector out of a existing one. </param>>

/// <param name="w"> Start w. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="source" />
      <Parameter type="float" name="w" />
    </Parameters>
  </Export>
  <Export name="Vector4" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector4.

/// </summary>

/// <param name="source"> Creates this vector out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector4" name="source" />
    </Parameters>
  </Export>
  <Export name="Vector4" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Vector4.

/// </summary>

/// <param name="source"> Creates this vector out of a existing colour. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Colour" name="source" />
    </Parameters>
  </Export>
  <Export name="Add" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Adds this vector to another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="Subtract" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Subtracts this vector to another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="Multiply" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Multiplies this vector with another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="Divide" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Divides this vector by another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="Angle" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Calculates the angle between this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The angle, in radians. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="Dot" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Calculates the dot product of the this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The dot product. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="Scale" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Scales this vector by a scalar.

/// </summary>

/// <param name="scalar"> The scalar value. </param>

/// <returns> The scaled vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="scalar" />
    </Parameters>
  </Export>
  <Export name="Negate" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Negates this vector.

/// </summary>

/// <returns> The negated vector. </returns>
]]>
    </Description>
  </Export>
  <Export name="Normalize" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Normalizes this vector.

/// </summary>

/// <returns> The normalized vector. </returns>
]]>
    </Description>
  </Export>
  <Export name="LengthSquared" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the length squared of this vector.

/// </summary>

/// <returns> The length squared. </returns>
]]>
    </Description>
  </Export>
  <Export name="Length" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the length of this vector.

/// </summary>

/// <returns> The length. </returns>
]]>
    </Description>
  </Export>
  <Export name="MaxComponent" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the maximum value in this vector.

/// </summary>

/// <returns> The largest components. </returns>
]]>
    </Description>
  </Export>
  <Export name="MinComponent" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the lowest value in this vector.

/// </summary>

/// <returns> The smallest components. </returns>
]]>
    </Description>
  </Export>
  <Export name="DistanceSquared" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the distance between this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The squared distance. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="Distance" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the between this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The distance. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="DistanceVector" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the vector distance between this vector and another vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The vector distance. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="SmoothDamp" target="Common" source="Vector4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gradually changes this vector to a target.

/// </summary>

/// <param name="target"> The target vector. </param>

/// <param name="rate"> The rate to go from current to the target. </param>

/// <returns> The changed vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector4" name="target" />
      <Parameter type="global::fl.Vector4" name="rate" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** Matrix4.hpp
  **
  ***************************************
  -->
  <Export name="Matrix4" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Matrix4. The matrix is initialised to the identity.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Matrix4" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Matrix4.

/// </summary>

/// <param name="source"> Creates this matrix out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Matrix4" name="source" />
    </Parameters>
  </Export>
  <Export name="Matrix4" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Matrix4.

/// </summary>

/// <param name="source"> Creates this matrix out of a 16 element array. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float[]" name="source" />
    </Parameters>
  </Export>
  <Export name="Add" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Adds this matrix to another matrix.

/// </summary>

/// <param name="other"> The other matrix. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Matrix4" name="other" />
    </Parameters>
  </Export>
  <Export name="Subtract" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Subtracts this matrix to another matrix.

/// </summary>

/// <param name="other"> The other matrix. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Matrix4" name="other" />
    </Parameters>
  </Export>
  <Export name="Multiply" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Multiplies this matrix by another matrix.

/// </summary>

/// <param name="other"> The other matrix. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Matrix4" name="other" />
    </Parameters>
  </Export>
  <Export name="Multiply" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Multiplies this matrix by a vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="Divide" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Divides this matrix by another matrix.

/// </summary>

/// <param name="other"> The other matrix. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Matrix4" name="other" />
    </Parameters>
  </Export>
  <Export name="Transform" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Transforms this matrix by a vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant vector. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="Translate" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Translates this matrix by a vector.

/// </summary>

/// <param name="other"> The vector. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector2" name="other" />
    </Parameters>
  </Export>
  <Export name="Translate" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Translates this matrix by a vector.

/// </summary>

/// <param name="other"> The vector. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Scale" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Scales this matrix by a vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="other" />
    </Parameters>
  </Export>
  <Export name="Scale" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Scales this matrix by a vector.

/// </summary>

/// <param name="other"> The other vector. </param>

/// <returns> The resultant matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector4" name="other" />
    </Parameters>
  </Export>
  <Export name="Rotate" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Rotates this matrix around the given axis the specified angle.

/// </summary>

/// <param name="angle"> the angle, in radians. </param>

/// <param name="axis"> The vector representing the rotation axis. </param>

/// <returns> The rotated matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="angle" />
      <Parameter type="global::fl.Vector3" name="axis" />
    </Parameters>
  </Export>
  <Export name="Negate" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Inverts this matrix.

/// </summary>

/// <returns> The inverted matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="Invert" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Negates this matrix.

/// </summary>

/// <returns> The negated matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="Transpose" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Transposes this matrix.

/// </summary>

/// <returns> The transposed matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="Determinant" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Takes the determinant of this matrix.

/// </summary>

/// <returns> The determinant. </returns>
]]>
    </Description>
  </Export>
  <Export name="TransformationMatrix" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new transformation matrix for a object in 3d space.

/// </summary>

/// <param name="translation"> Translation amount the XYZ. </param>

/// <param name="rotation"> Rotation amount the XYZ. </param>

/// <param name="scale"> How much to scale the matrix. </param>

/// <returns> Returns the transformation matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="translation" />
      <Parameter type="global::fl.Vector3" name="rotation" />
      <Parameter type="global::fl.Vector3" name="scale" />
    </Parameters>
  </Export>
  <Export name="TransformationMatrix" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new transformation matrix for a object in 2d space.

/// </summary>

/// <param name="translation"> Translation amount the XY. </param>

/// <param name="scale"> How much to scale the matrix. </param>

/// <returns> Returns the transformation matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector2" name="translation" />
      <Parameter type="float" name="scale" />
    </Parameters>
  </Export>
  <Export name="TransformationMatrix" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new transformation matrix for a object in 2d space.

/// </summary>

/// <param name="translation"> Translation amount the XY. </param>

/// <param name="scale"> How much to scale the matrix. </param>

/// <returns> Returns the transformation matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector2" name="translation" />
      <Parameter type="global::fl.Vector3" name="scale" />
    </Parameters>
  </Export>
  <Export name="TransformationMatrix" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new transformation matrix for a object in 3d space.

/// </summary>

/// <param name="translation"> Translation amount the XYZ. </param>

/// <param name="rotation"> Rotation amount the XYZ. </param>

/// <param name="scale"> How much to scale the matrix. </param>

/// <returns> Returns the transformation matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="translation" />
      <Parameter type="global::fl.Vector3" name="rotation" />
      <Parameter type="float" name="scale" />
    </Parameters>
  </Export>
  <Export name="PerspectiveMatrix" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new perspective matrix.

/// </summary>

/// <param name="fov"> The cameras FOV. </param>

/// <param name="aspectRatio"> The cameras aspect ratio. </param>

/// <param name="zNear"> The cameras near plane. </param>

/// <param name="zFar"> The cameras far plane. </param>

/// <returns> The transformation matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="fov" />
      <Parameter type="float" name="aspectRatio" />
      <Parameter type="float" name="zNear" />
      <Parameter type="float" name="zFar" />
    </Parameters>
  </Export>
  <Export name="OrthographicMatrix" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new orthographic matrix.

/// </summary>

/// <param name="left"> The left plane. </param>

/// <param name="right"> The right plane. </param>

/// <param name="bottom"> The bottom plane. </param>

/// <param name="top"> The top plane. </param>

/// <param name="near"> The near plane. </param>

/// <param name="far"> The far plane. </param>

/// <param name="destination"> The destination matrix or nullptr if a new matrix is to be created. </param>

/// <returns> The transformation matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="left" />
      <Parameter type="float" name="right" />
      <Parameter type="float" name="bottom" />
      <Parameter type="float" name="top" />
      <Parameter type="float" name="near" />
      <Parameter type="float" name="far" />
    </Parameters>
  </Export>
  <Export name="ViewMatrix" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Creates a new view matrix.

/// </summary>

/// <param name="position"> The cameras position. </param>

/// <param name="rotation"> The cameras rotation. </param>

/// <returns> The transformation matrix. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="position" />
      <Parameter type="global::fl.Vector3" name="rotation" />
    </Parameters>
  </Export>
  <Export name="WorldToScreenSpace" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Transforms a 3D world point into screen space.

/// </summary>

/// <param name="worldSpace"> The point to get into screen space. </param>

/// <param name="viewMatrix"> The cameras view matrix. </param>

/// <param name="projectionMatrix"> The cameras projection matrix. </param>

/// <returns> A 2D point stored in XY, and the distance (Z, if negative the point is behind the screen). </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector3" name="worldSpace" />
      <Parameter type="global::fl.Matrix4" name="viewMatrix" />
      <Parameter type="global::fl.Matrix4" name="projectionMatrix" />
    </Parameters>
  </Export>
  <Export name="SetZero" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets this matrix to 0.

/// </summary>

/// <returns> The identity matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="SetIdentity" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets this matrix to be the identity matrix.

/// </summary>

/// <returns> The identity matrix. </returns>
]]>
    </Description>
  </Export>
  <Export name="ToArray" target="Common" source="Matrix4.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Turns this 4x4 matrix into an array.

/// </summary>

/// <returns> A 16 float array. </returns>
]]>
    </Description>
  </Export>
  <!--
  ***************************************
  **
  ** Quaternion.hpp
  **
  ***************************************
  -->
  <Export name="Quaternion" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Quaternion.

/// </summary>
]]>
    </Description>
  </Export>
  <Export name="Quaternion" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Quaternion.

/// </summary>

/// <param name="x"> Start x. </param>

/// <param name="y"> Start y. </param>

/// <param name="z"> Start z. </param>

/// <param name="w"> Start w. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="x" />
      <Parameter type="float" name="y" />
      <Parameter type="float" name="z" />
      <Parameter type="float" name="w" />
    </Parameters>
  </Export>
  <Export name="Quaternion" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Quaternion.

/// </summary>

/// <param name="source"> Creates this quaternion out of a existing vector. </param>>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Vector4" name="source" />
    </Parameters>
  </Export>
  <Export name="Quaternion" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Quaternion.

/// </summary>

/// <param name="source"> Creates this vector out of a existing one. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Quaternion" name="source" />
    </Parameters>
  </Export>
  <Export name="Quaternion" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Constructor for Quaternion.

/// </summary>

/// <param name="source"> Creates this vector out of a existing matrix. </param>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Matrix4" name="source" />
    </Parameters>
  </Export>
  <Export name="Multiply" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Sets the value of this quaternion to the quaternion product of quaternions left and right (this = left * right). Note that this is safe for aliasing (e.g. this can be left or right).

/// </summary>

/// <param name="other"> The other quaternion. </param>

/// <returns> The resultant quaternion. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Quaternion" name="other" />
    </Parameters>
  </Export>
  <Export name="MultiplyInverse" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Multiplies quaternion left by the inverse of quaternion right and places the value into this quaternion. The value of both argument quaternions is persevered (this = left * right^-1).

/// </summary>

/// <param name="other"> The other quaternion. </param>

/// <returns> The resultant quaternion. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Quaternion" name="other" />
    </Parameters>
  </Export>
  <Export name="Dot" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Calculates the dot product of the this quaternion and another quaternion.

/// </summary>

/// <param name="other"> The other quaternion. </param>

/// <returns> The dot product. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Quaternion" name="other" />
    </Parameters>
  </Export>
  <Export name="Slerp" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Calculates the slerp between this quaternion and another quaternion, they must be normalized!

/// </summary>

/// <param name="other"> The other quaternion. </param>

/// <param name="progression"> The progression. </param>

/// <returns> Left slerp right. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="global::fl.Quaternion" name="other" />
      <Parameter type="float" name="progression" />
    </Parameters>
  </Export>
  <Export name="Scale" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Scales this quaternion by a scalar.

/// </summary>

/// <param name="scalar"> The scalar value. </param>

/// <returns> The scaled quaternion. </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="float" name="scalar" />
    </Parameters>
  </Export>
  <Export name="Negate" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Negates this quaternion.

/// </summary>

/// <returns> The negated quaternion. </returns>
]]>
    </Description>
  </Export>
  <Export name="Normalize" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Normalizes this quaternion.

/// </summary>

/// <returns> The normalized quaternion. </returns>
]]>
    </Description>
  </Export>
  <Export name="LengthSquared" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the length squared of this quaternion.

/// </summary>

/// <returns> The length squared. </returns>
]]>
    </Description>
  </Export>
  <Export name="Length" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the length of this quaternion.

/// </summary>

/// <returns> The length. </returns>
]]>
    </Description>
  </Export>
  <Export name="MaxComponent" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the maximum value in this quaternion.

/// </summary>

/// <returns> The largest components. </returns>
]]>
    </Description>
  </Export>
  <Export name="MinComponent" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Gets the lowest value in this quaternion.

/// </summary>

/// <returns> The smallest components. </returns>
]]>
    </Description>
  </Export>
  <Export name="ToMatrix" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Converts this quaternion to a 4x4 matrix.

/// </summary>

/// <returns> The rotation matrix which represents the exact same rotation as this quaternion. </returns>
]]>
    </Description>
  </Export>
  <Export name="ToRotationMatrix" target="Common" source="Quaternion.hpp">
    <Description>
      <![CDATA[
/// <summary>

/// Converts this quaternion to a 4x4 matrix representing the exact same

/// rotation as this quaternion. (The rotation is only contained in the

/// top-left 3x3 part, but a 4x4 matrix is returned here for convenience

/// seeing as it will be multiplied with other 4x4 matrices).

/// </summary>

/// <returns> The rotation matrix which represents the exact same rotation as this quaternion. </returns>
]]>
    </Description>
  </Export>
</Definitions>